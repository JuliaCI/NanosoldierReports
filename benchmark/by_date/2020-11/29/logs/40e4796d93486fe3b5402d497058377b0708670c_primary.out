cset: moving following pidspec: 20272
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.97646866 seconds)
loading group "shootout"... done (took 1.134946019 seconds)
loading group "string"... done (took 0.676764892 seconds)
loading group "linalg"... done (took 8.730012948 seconds)
loading group "parallel"... done (took 0.188479883 seconds)
loading group "find"... done (took 2.986217007 seconds)
loading group "tuple"... done (took 2.23088971 seconds)
loading group "union"... done (took 15.068166976 seconds)
loading group "dates"... done (took 1.49241402 seconds)
loading group "micro"... done (took 0.222079256 seconds)
loading group "simd"... done (took 4.859591423 seconds)
loading group "io"... done (took 1.081256753 seconds)
loading group "random"... done (took 9.666155021 seconds)
loading group "problem"... done (took 1.522805056 seconds)
loading group "array"... done (took 25.423053336 seconds)
loading group "misc"... done (took 1.915238246 seconds)
loading group "scalar"... done (took 43.975395382 seconds)
loading group "sort"... done (took 3.362398862 seconds)
loading group "sparse"... done (took 12.899546053 seconds)
loading group "collection"... done (took 18.999177531 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.426764472 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124533005 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128810487 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122733675 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.18267868 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12315059 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.13184637 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087475276 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.862519252 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138808202 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116292828 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435181428 seconds)
done (took 5.312289573 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.16872617 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093640251 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084895256 seconds)
  done (took 1.38746325 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072308473 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061342694 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068931039 seconds)
  done (took 1.411608331 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066878932 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135411097 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066880623 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068223891 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.072162774 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068391907 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067616002 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068364284 seconds)
  done (took 1.760437733 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072624558 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069366 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067464685 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069408219 seconds)
  done (took 1.493565679 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065828355 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124939964 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066759563 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067129498 seconds)
  done (took 1.536781952 seconds)
done (took 9.055394389 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.141794164 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.827745415 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.757808149 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12603041 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.251104848 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449807804 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123831853 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183383336 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089097191 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075225406 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121714879 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078337075 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.400779841 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.401042453 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071796528 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17614222 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648011877 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089547829 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135309475 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.463214246 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074084668 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088648636 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084916013 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071881469 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.329294087 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151881279 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665959273 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100209321 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070734392 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097088976 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073203716 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080373822 seconds)
  done (took 10.747221013 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093722454 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090625559 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069290054 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123949072 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094461051 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070414104 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075719559 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068651906 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089524617 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124274385 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090528991 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098666922 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06685223 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071013943 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082196289 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199435711 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080761358 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081776321 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068398497 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083179572 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10850814 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081025139 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081170447 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080628892 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132992161 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173549645 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.101082383 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101354498 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068970133 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081439997 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120983291 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128321599 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069402001 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067465057 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.12286896 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.098112949 seconds)
  done (took 4.706023041 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.904079529 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09821528 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085576709 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076903994 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109772163 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.117165968 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125072535 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125298615 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102971849 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070625168 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153597498 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.643457729 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.13238345 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071849469 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120396401 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362539759 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.116640037 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065582625 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070279174 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068451161 seconds)
    (20/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.060578145 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071816226 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070100642 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111884262 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067132839 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179230485 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.590591907 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070502502 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069803723 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096319736 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068697672 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14002824 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092537058 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070494198 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.551896432 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067106461 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066388855 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090919352 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094370801 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.182632315 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069616237 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079517321 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067049394 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109263742 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080195463 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.490162381 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070733546 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.562295861 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224921872 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073701753 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071993915 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102530812 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064832604 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06873205 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.856165216 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.124961509 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068829091 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276525912 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068588514 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06990694 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071226147 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102614566 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069555246 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070781013 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074791404 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098420736 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.812169103 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.092466569 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098678562 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069249946 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.408376517 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074128353 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069505998 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070298653 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084112117 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.11134483 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068310205 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068433803 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110109034 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091965321 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092080425 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072405529 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066441937 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068899912 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068024211 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.323879579 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.166942351 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067006148 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067295952 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.488170752 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065803264 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068083567 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069885568 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091106812 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069174805 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065352305 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066111199 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101178484 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066960791 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.450274037 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068982582 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.465369663 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071714257 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10624778 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.126447149 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.067516309 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069721691 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098133714 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070074388 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066937925 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075732319 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06725412 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066378936 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071613513 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066999713 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068448068 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071219021 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069979773 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069765168 seconds)
  done (took 22.747278171 seconds)
done (took 40.32183647 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.316602515 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080901507 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080955904 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081264116 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081343177 seconds)
  done (took 1.906966383 seconds)
done (took 3.265704679 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135938161 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077607158 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066378333 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103340418 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070519106 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104472437 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.11124983 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10700166 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070507758 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.07101102 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.071059071 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104996281 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107726067 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070957158 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.101267918 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106321115 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070256008 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069031976 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070540661 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070849818 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070645018 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066615454 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.071271959 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070648271 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102385046 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070997162 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06637999 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101725287 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071426943 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101940144 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070971175 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070970389 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.07125055 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102405642 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071662431 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102460983 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066664695 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071315397 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070550148 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071389488 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071510789 seconds)
  done (took 4.706812994 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071570669 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082597603 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084760984 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064034998 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073771091 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08407773 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063781008 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084273474 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090112789 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082901289 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082781656 seconds)
  done (took 2.177278367 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070714206 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083895966 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089096388 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064321785 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075389804 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086043315 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063809577 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085622398 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087954859 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08568426 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08569213 seconds)
  done (took 2.17232581 seconds)
done (took 10.342292071 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097494915 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066624745 seconds)
  done (took 1.441316424 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224785547 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.513061947 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.390157524 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093135967 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072364358 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085880256 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201087186 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066954814 seconds)
  done (took 8.110642203 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.105481448 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069714214 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070096086 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069826906 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071233929 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069902712 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069960795 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070885224 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069875389 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071444482 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069982671 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071891503 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071863544 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070073323 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070040987 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071268033 seconds)
  done (took 2.556767545 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104451921 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071421189 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101663526 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064081102 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073646293 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064109802 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072900707 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075200005 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071762737 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07346993 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074699942 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073283025 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073511557 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073404207 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074025719 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075459112 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075277813 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070990566 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07336744 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073714563 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072477432 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072946591 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073693673 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071419726 seconds)
  done (took 3.211863097 seconds)
done (took 16.61629957 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174181078 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074395019 seconds)
  done (took 1.5355875 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068038473 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068724321 seconds)
  done (took 1.440039848 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073485937 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061423555 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078777504 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070309522 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061981486 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061458898 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077135758 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062074318 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062278758 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063460427 seconds)
  done (took 1.974787769 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063128042 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.07005574 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068649033 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066709663 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068921663 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064905099 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067444436 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065096203 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070925864 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063944819 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068684751 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086148297 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.0682602 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086227793 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067149212 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067094607 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06946442 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067104022 seconds)
  done (took 2.557294629 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062204762 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.064033058 seconds)
  done (took 1.426691509 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064958011 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06210624 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064964282 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06573036 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063508767 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06308809 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063876445 seconds)
  done (took 1.7336631 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421379595 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122794856 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.344481881 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070678051 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077922114 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257873928 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064248622 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069237713 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.0687082 seconds)
  done (took 2.847058828 seconds)
done (took 14.832610573 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082914693 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181495181 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087980561 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40503639 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092215331 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.0675411 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113084965 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176462498 seconds)
done (took 2.53418218 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214908429 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.238367965 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.390433916 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125360469 seconds)
  done (took 3.064610644 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337356209 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078601968 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076922253 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066834698 seconds)
  done (took 1.886861191 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065912573 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07147938 seconds)
  done (took 1.457482046 seconds)
done (took 7.929696094 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07212735 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.094152823 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063518008 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063741584 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.069152585 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.066143804 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066106186 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.078354316 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065244962 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066599433 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063703398 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066714209 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.066466038 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066154219 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.0655371 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065640031 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065488982 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066890423 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066239106 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065599079 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065802923 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065863514 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063957477 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064060437 seconds)
  done (took 2.971633098 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080400852 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066755188 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068127762 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068173606 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06892976 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068886328 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068860038 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067544144 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068820629 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067469135 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069229296 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06971373 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067481337 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069594142 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06791005 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069325984 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068899349 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067981747 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067883386 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06949412 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069423999 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068382162 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069332392 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06907917 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.06964111 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069835666 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067287704 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068021427 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069354766 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069463824 seconds)
  done (took 3.407279644 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066710983 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060950112 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062763788 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072263776 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062100762 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062239795 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062155447 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061264447 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062442583 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063519855 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063037284 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062472416 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06294726 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062468586 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062147354 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062734175 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067197404 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081143585 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062369118 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060996393 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065125879 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061072153 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060490074 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060630941 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061066735 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061224564 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062119691 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062655847 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061747824 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062716943 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062361491 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066364482 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067233423 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062179533 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072115087 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066661878 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062079632 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066651708 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063266317 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06182943 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06203635 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062442137 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062570696 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062371604 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072569685 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062310172 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.06332382 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063048638 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062596501 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062121477 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062059507 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064173427 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.07087931 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06364734 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.0621813 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062919787 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061937866 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06264021 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062182749 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062038815 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061933821 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065371924 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063253505 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062880543 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082531194 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063465067 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072440982 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061884984 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062719449 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066032254 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06243773 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080137382 seconds)
  done (took 5.96117477 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07171545 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072710734 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081263462 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072329986 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067029112 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063225291 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06580589 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061631094 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071000328 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065478659 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061912867 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066094666 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072138995 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06664338 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064257728 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072815789 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066462111 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065174567 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062465168 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065893604 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063148246 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065195785 seconds)
  done (took 2.832579061 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136404098 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066717399 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106518116 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.07520261 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06899003 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07484226 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06650552 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06665358 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066660871 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067347152 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067237291 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066409181 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068876336 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067523124 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068449486 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068098487 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066667112 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066765196 seconds)
  done (took 2.673121817 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076996614 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067458886 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090636442 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066351868 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066657594 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066255654 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069385759 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070605533 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066293102 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06684471 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071923751 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06792147 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067724859 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068028773 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067445889 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067613896 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067588943 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067680767 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071670735 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07119205 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071513451 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071792775 seconds)
  done (took 2.882689238 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077113411 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065589069 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081666187 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066862563 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062202128 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062625176 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068012831 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067116781 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067813645 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067556391 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067137201 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062147872 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068452004 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067384319 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069018226 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067228387 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066962526 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06694853 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066893187 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062696757 seconds)
  done (took 2.695897893 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086578787 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064959443 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065264211 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084228241 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064719307 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064896651 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084921062 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065421984 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065136689 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087087938 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065401596 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065077069 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085087935 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085134759 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065172551 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.085189864 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084681623 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084695299 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063910077 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06517737 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086752871 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065292071 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085135757 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06541435 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065240469 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064967039 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065387237 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085249201 seconds)
  done (took 3.412255156 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064912643 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064134046 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064955369 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065533539 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065658547 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065782629 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066413184 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065966411 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065703734 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065973274 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064492476 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064702865 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067505508 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064857142 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064501897 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064105047 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064070426 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065125325 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064716809 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065122404 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064425118 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064080189 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06450267 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064747278 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064754119 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064528521 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064510058 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064608209 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063759501 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064475269 seconds)
  done (took 3.299214669 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073762761 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072863761 seconds)
  done (took 1.49709203 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062470452 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078391087 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060930273 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073871248 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069789543 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066063051 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071690178 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069477715 seconds)
  done (took 1.897922537 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066795087 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09060316 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062226534 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062928489 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065928607 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132130049 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076601376 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075847433 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07776061 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06670943 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064706735 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076327926 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063489847 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07757329 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065813632 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073025251 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071685628 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081220147 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077206316 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062421164 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076612984 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064795928 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063034493 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065488938 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064325524 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071701047 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080029484 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.0769648 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072610608 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061543041 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082887699 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063197388 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063625965 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072269144 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067660105 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062888837 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100137492 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062981791 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068050404 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062332871 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075146547 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083871753 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077295482 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081032853 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.0648488 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064677466 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062224707 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065318897 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066754251 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072812493 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062521468 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070660359 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061829142 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064013867 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073605049 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06333503 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068406995 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072750026 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076548628 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073443046 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071863569 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078916326 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071812284 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071173681 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063891442 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082727795 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064717118 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07663471 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078269186 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064169153 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07660115 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062523005 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061465901 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062367457 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09738172 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064360644 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064194215 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062964798 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062483069 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064234076 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072452383 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068271505 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070815669 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066808382 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079015957 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072140409 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063076225 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069865777 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081375678 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066089985 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063293056 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079645962 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066153016 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061989448 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080426475 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072570121 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06454795 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063613657 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065906011 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074883874 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061870317 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059568271 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069080294 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06206531 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06330791 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065323539 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068525423 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060713081 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070296079 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064652029 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061999676 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059116394 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064453953 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061020765 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05904922 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070321226 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061938669 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076402776 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068718099 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076657209 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076926492 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072501724 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077830491 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061616207 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060709096 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079617109 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071178599 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.202790888 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081199466 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062703165 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077675422 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064145416 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065648794 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073663037 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062675838 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065331491 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063576064 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068406606 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064444663 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06532976 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068115703 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071006847 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075631847 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064280617 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070724531 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062502525 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077929826 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071742493 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066650921 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065008968 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062340522 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07334155 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068425454 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070974146 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061869453 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063834534 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063159195 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073731373 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072903793 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064976887 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070566875 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067227353 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063540558 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063728983 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064579878 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066801567 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066680817 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064462003 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07111496 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071971862 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077588779 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070981648 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072207659 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062243649 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060604004 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063337965 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061288684 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066111569 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070784682 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077778114 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074827631 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084312007 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063563126 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072818792 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064813179 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080381633 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076674172 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064295035 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06793977 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062066518 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065009752 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072714782 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074927527 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07687818 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078059505 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068077843 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067499044 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062766342 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078273054 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063360807 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071786031 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07303869 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067579102 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063115574 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064529445 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072674784 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067323924 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063202973 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078132152 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.06756469 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060954309 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07591896 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062181455 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072486032 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060789389 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064873944 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066910237 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063327151 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071331678 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077053211 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06016677 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061795711 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076857155 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06321406 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062479991 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070115839 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07841665 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066213157 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069305228 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071666819 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071117835 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066022323 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071875629 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063063919 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072065966 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065662887 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074684746 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062475017 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080534285 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061537124 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077262088 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062812824 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073417953 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062690646 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071566684 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062827394 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07877035 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063808524 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062763354 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073457971 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060439795 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071242721 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061220889 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067033233 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068484247 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071448378 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063635203 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071501763 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.207320452 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073635259 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069784041 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072939856 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074337148 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068954788 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063594956 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07255646 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075147845 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071706683 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06488718 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064435568 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06362839 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073029834 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06502744 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065133494 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071847608 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068322637 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069162817 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065084226 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065345062 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065299806 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072146744 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072517434 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081961991 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07208787 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071237966 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072798531 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063139891 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078875255 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063651267 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073412111 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061988967 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06929454 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.07285354 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063365601 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082580567 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064744078 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071414857 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075458819 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072432841 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066856015 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081252453 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066889782 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.073402759 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07166096 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067490161 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069222212 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064982616 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071857697 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073319599 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074006344 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06465581 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07117137 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0724657 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06548576 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071430962 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064914013 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071714906 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065489148 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062248143 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068184653 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074713889 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067818955 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068328997 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.064164841 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061925256 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063918271 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070183835 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067988929 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072382994 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079222102 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062304885 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064438768 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062707323 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067152554 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081696688 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07317343 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071105061 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067874403 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062558329 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064914368 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065574926 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063926456 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06668709 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062253463 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063127073 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074562479 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065131449 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067595515 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063205021 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064602082 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073252296 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06787099 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064055231 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069935842 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063161963 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068088444 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062454688 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064685575 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067585845 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062081404 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067123043 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073772067 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079814975 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070876521 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071787926 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064342415 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071342897 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078568121 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069816459 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063850135 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073054243 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061977675 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081267085 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072618975 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071553491 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072433852 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063177903 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077014427 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065343405 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070535468 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075870035 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061819708 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066423737 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060462583 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075536926 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065219846 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060222795 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068321816 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0696526 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068149378 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074182487 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.21208697 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072492529 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070063281 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068859321 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066557469 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065690505 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072866881 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080261665 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064651757 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068743938 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071688413 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072467725 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068345182 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076779069 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072497937 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064551746 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065558201 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067025476 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.065027611 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075001597 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063934403 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06724282 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068451333 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063322129 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069767239 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.08074357 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073589893 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073501165 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063233842 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062230072 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08103946 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067054841 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067161783 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072031165 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073814464 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076280019 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073098339 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080862669 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06434033 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069014698 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07641701 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064664255 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063424379 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067356542 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064721887 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072778714 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073375963 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071206209 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065555087 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070070476 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.078167365 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06523699 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067878965 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068578923 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06399722 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074027325 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072264962 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075141636 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065112377 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063177329 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067161273 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072487297 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071432267 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072815355 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06468552 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.07037779 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077758917 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071787361 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067379547 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063327669 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066894764 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073106814 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068063498 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062703723 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067984981 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066699567 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070616012 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073246146 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068355666 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063367614 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08140025 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.07120913 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07263039 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065255779 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065457603 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064107465 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062771777 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075425308 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063044623 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065602022 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06864559 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065154598 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081460032 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072198495 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079971953 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064775345 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068246066 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063060526 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073424671 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068139225 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06431967 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073841392 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062990152 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078615419 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075425333 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068818109 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062601422 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089350341 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071710586 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078401268 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072970757 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072219001 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066510781 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073463283 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064985892 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073706914 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062548008 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061495307 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072991797 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071364741 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075185071 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062164913 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072685544 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064329467 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070221752 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06957547 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064033797 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063496126 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063633716 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071658036 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066396811 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071086048 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.213413372 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081551838 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065323984 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07567379 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073507774 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075073038 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078093472 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076365443 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.072195815 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064302918 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07153766 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071460673 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064972931 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068544089 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067153498 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085183586 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065681084 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065845085 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078984804 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070396575 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06436391 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070919531 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068410717 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07407489 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064808444 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074478068 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067894977 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064277232 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068117175 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068441316 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062821977 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063516248 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06377127 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072880493 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067507276 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063635751 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083109928 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065485379 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.073005534 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075284953 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070128297 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065100986 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061958272 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.065192209 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077178508 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079416242 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067072709 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071723751 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065021474 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072672907 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062564689 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072489902 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071751455 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07200536 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063089785 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06392806 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078570658 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079298551 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068019038 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072938007 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072106823 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064483684 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08538129 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071988768 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064683005 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074405219 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066096478 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062718529 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062647684 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064844467 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.0748882 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063185126 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065693763 seconds)
  done (took 43.311382202 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099805529 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063408972 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063191288 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063257184 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074249527 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063830447 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063312171 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064525184 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064534845 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065903057 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062950007 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06642842 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074601645 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076929835 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072328317 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065643644 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061724951 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06245244 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06195865 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063838598 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072674069 seconds)
  done (took 2.906214528 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064907202 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067484967 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067621757 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067580874 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066896464 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064160131 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067537162 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063358334 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067784296 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063449206 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067846783 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063320134 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.06357002 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063804757 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063554957 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064831706 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067654211 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066609711 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063577657 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067450844 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064592862 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067017381 seconds)
  done (took 2.89604388 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062994942 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06324574 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072260007 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062727405 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062604793 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066057848 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062411448 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067166295 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066869031 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067569734 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.0722864 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063661757 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061919655 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068050752 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062306463 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063550605 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106220801 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063553341 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064466967 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06259505 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066108472 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072650092 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062508143 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06301075 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067205093 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.067147662 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062782663 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065848714 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063411666 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067797301 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063931811 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062276709 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072201122 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072106931 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067201524 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067097146 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064510262 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064055459 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062491645 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063043704 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072003243 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06476223 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063055781 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064851422 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072533387 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063354448 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062537685 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072348236 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062699157 seconds)
  done (took 4.713224146 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072771935 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115689522 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067384921 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097084009 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076512222 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069272279 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06889501 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098671911 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064310275 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064733879 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077214219 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074886373 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06459031 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065794322 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069345741 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066049381 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067693969 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06477924 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069000528 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065622931 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068508743 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070527559 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075971661 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076656156 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06688493 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065823492 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065146763 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067463044 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076227574 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069200668 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068027583 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068176533 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076867267 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071957305 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065874314 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065433413 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.078264162 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066717633 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066381754 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064299414 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065811372 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067580554 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070441069 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077409921 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066132431 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.07127001 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06632301 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063992812 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076296096 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066424463 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.07061892 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.078103988 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067062837 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066709343 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067626448 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076920178 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066361877 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065649731 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.067288784 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076254734 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063703328 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066584601 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079859333 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065602456 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069066538 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077524049 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070691631 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067170639 seconds)
  done (took 6.431585502 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071767351 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098113037 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074229818 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073003539 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072829631 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.074444415 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074353962 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074161982 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074687768 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074570555 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074451948 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.115147258 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071045021 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079001762 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074547435 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074446237 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074176387 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073721519 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073846057 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073771148 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074185055 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074560556 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072779953 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072749473 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075135095 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068742917 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072676937 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073981766 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073768932 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07368024 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075325955 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072752337 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072446798 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072554515 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074480933 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072828303 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064084792 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074325812 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074743888 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07400295 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070327357 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074472495 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074231659 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070515582 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074576279 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073921044 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075029661 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077142105 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081458745 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072659725 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073876457 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074628102 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073765146 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072450652 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072947637 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079015371 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073729443 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073898308 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073738629 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074263629 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07407665 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078990534 seconds)
  done (took 6.143478864 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075730607 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068168308 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081517292 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061919778 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061968845 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070851229 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06205825 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061459779 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068520217 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068801612 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.07002942 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070859101 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072972018 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07011338 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070996071 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073024055 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070993324 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071234611 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068359631 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070506645 seconds)
  done (took 2.879195508 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076456407 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080463966 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06763729 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070704187 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067219549 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07112361 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066741577 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067910635 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068360563 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067913492 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071953823 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072016974 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067451817 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070655116 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072068219 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071144751 seconds)
  done (took 2.606523922 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065587414 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070647744 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068480447 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063659238 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06486444 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06205813 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063368248 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061538314 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064270435 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07753036 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064153888 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066831514 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064222906 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062144784 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062383779 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065424333 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064606822 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062951083 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062628524 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069963434 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071495474 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06352939 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066310119 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064172624 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066939422 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073050089 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065641457 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065926975 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064149386 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067334132 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066610464 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071353443 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066816874 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06402794 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063488928 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064558468 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064672127 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067257843 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066895785 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064966255 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063118454 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068774166 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064136034 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065148642 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06602388 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066122083 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06449555 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068835975 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063286907 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065901604 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063171553 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064700328 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064059238 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069456923 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065814456 seconds)
  done (took 5.097779564 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079477305 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068317919 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062916124 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062834923 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068945215 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06933046 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068578308 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068472984 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06956783 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063218409 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069239791 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068382869 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069718165 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068916406 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06905058 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06924066 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062218497 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067785671 seconds)
  done (took 2.720389821 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068391183 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066949067 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066685212 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063825156 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063942446 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068321007 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061975982 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063467804 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06364233 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063890598 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063918292 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063047388 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063452252 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06333762 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067585588 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063563277 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063779919 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061974227 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06359421 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061604855 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067934936 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062319043 seconds)
  done (took 2.902234838 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089057634 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086555753 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130392245 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081392849 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089542977 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073028709 seconds)
  done (took 2.037249676 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094614955 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.10506703 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066472555 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066578302 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075045929 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06983472 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069761162 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069895439 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077047265 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0736349 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069450163 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075147286 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074916086 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071324322 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075379074 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077668855 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069929965 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070246369 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067025196 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077109366 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069839273 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075242898 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071186663 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071591102 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07181531 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073635797 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079901094 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075159713 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071609256 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077726153 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078862689 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069625095 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075192579 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075057985 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068596483 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077600828 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072092217 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079660493 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077213373 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073632673 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068375952 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077528244 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07767359 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073481438 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079990225 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072598234 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073687388 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071750521 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072122174 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081959412 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077550945 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073328948 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077730686 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080327111 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079820312 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081203836 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074495414 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071265694 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075310988 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074101 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071326752 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075284922 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07157619 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074114452 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077830775 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071995471 seconds)
  done (took 6.425966168 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101956853 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06778822 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072373178 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075650292 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073184546 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072223024 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072409399 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072222906 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072620798 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069873538 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10907986 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07136524 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071723085 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074698196 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070367831 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07024844 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070069087 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071440568 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067608556 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082609575 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071769727 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074074443 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072719082 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071647903 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073511474 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077383923 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070035744 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069732786 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070255915 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070183963 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071714898 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070254139 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073169705 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068817938 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073803488 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071954174 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071917876 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073617088 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072052402 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07718563 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071862092 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077717967 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069563253 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07019164 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07367703 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069867914 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069184485 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066765043 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069535488 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067224401 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073374882 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073845713 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073878008 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071926752 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069535223 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070068797 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069797024 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069821619 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070325761 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077456889 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071367816 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069565601 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079351086 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070103405 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069812431 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07124046 seconds)
  done (took 6.323827129 seconds)
done (took 132.2511639 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219124838 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190825822 seconds)
  done (took 1.881735893 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075687341 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16752771 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07542192 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075494182 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109190668 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108278371 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.0766375 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073085942 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075867646 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072627083 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139807228 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076964816 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072492126 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073149799 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072928789 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07301495 seconds)
  done (took 2.912126042 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108807923 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185260095 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082919401 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07098057 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115068313 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077560886 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072984022 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076213452 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077379294 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071079904 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108021515 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082115573 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074719891 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.0770987 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072775313 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074258552 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076289647 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077301942 seconds)
  done (took 3.079357986 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098526039 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086800499 seconds)
  done (took 1.688634451 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155627394 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106069042 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145485757 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329621066 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129711136 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.12693736 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.13016099 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125768214 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111070014 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122554363 seconds)
  done (took 2.979474374 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106361991 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106382205 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310010671 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102818675 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082477776 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.0780645 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076877883 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082396585 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076534003 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077130296 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122769017 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075984008 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073086617 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124084049 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098715567 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106582472 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072146183 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078072 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079935531 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071373346 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076616633 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080259763 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177826224 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078855257 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099408229 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075568596 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07738403 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074892065 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074655007 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078383056 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079666128 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099629228 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079028239 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083013407 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077238446 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096881285 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07225561 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098792067 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074602882 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073555581 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075616372 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079258497 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072594597 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078920957 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075761746 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077882056 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080916234 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072062081 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075767267 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074837926 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073098478 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077219473 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078359573 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078216515 seconds)
  done (took 6.312836657 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10814751 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109940655 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070918963 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114615255 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106696043 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070422614 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108004708 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103903643 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112360046 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072727137 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071918782 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072563985 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079732086 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083391625 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115680392 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108600655 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072415175 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071182153 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110392098 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111005436 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07163862 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105705311 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103062991 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110988532 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070756571 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072529199 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071366584 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071922632 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077216198 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078197607 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071478132 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078836975 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085216262 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075544667 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068914231 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069477849 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071150963 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077630474 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076700801 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076520572 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07483531 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068819101 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069028519 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069862009 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070245234 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068976469 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075409652 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078651351 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075712051 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070798325 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071571306 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071429519 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071462535 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078265301 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07748941 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078132715 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076520878 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069490485 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069373396 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071037211 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077554467 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077101116 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076527825 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069875892 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077742678 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069797048 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078253494 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081394127 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069633104 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070227845 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069625829 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069475969 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069723772 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075147422 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07570308 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070158522 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069955072 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069347411 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077671862 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075149865 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069209201 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075334742 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069202241 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069264097 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070132819 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071807227 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077397083 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079207193 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072001719 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07113877 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.07138083 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070733971 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070776285 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077185974 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077609014 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07783793 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076817947 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071600179 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076956635 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073561609 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069096189 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073405313 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068294489 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068395554 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068335961 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073331541 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072887011 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07516953 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067920971 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067827994 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073386427 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075700141 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.209311283 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076695698 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078654342 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077198566 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069724289 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079037673 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069997756 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07804278 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070244285 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078577924 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07189212 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078227713 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07009152 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069453329 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069674476 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075590055 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070392396 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069665173 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070353944 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069430221 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075671331 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078963469 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070351737 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07590785 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075799932 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070690599 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075746529 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069639406 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076474944 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069303322 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070030356 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070623201 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080756679 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071692532 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071555535 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071482052 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078712527 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069839311 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077787261 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074782852 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070046316 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079321249 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077913263 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074775745 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07729745 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070111159 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069494248 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071522273 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075069511 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077718508 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078658992 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070505825 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069452975 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077764195 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080822053 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070971062 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077772597 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077620674 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077565396 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072027738 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071418286 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080965689 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077598947 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075112735 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.307029121 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075557134 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068964304 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076220761 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077971455 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071318598 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086176921 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071945227 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082476864 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078992351 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077218128 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078666169 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077537163 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078227716 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077314872 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079490169 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069091832 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069206086 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075139562 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069524791 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069927847 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075437848 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070328393 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072087736 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084617055 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069892006 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077626297 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068427761 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076360891 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070245121 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071686826 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083067101 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071614127 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072229308 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076314282 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069915115 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075017305 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076205726 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074650023 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068494468 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06940135 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074249741 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074596733 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068036882 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068225217 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070230028 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075537617 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075018409 seconds)
  done (took 18.91811987 seconds)
done (took 39.286176577 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171158535 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117571037 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207272487 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198222805 seconds)
  done (took 2.302814805 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101226237 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066236023 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081524243 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09055914 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06612615 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.078176122 seconds)
  done (took 2.038454137 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.20115088 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173981192 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239274545 seconds)
  done (took 2.160726762 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366928777 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148475842 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219943452 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.505670017 seconds)
  done (took 2.891121127 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113313759 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.103952373 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.08128018 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.114988074 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.087332856 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064241882 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133518088 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070161025 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099967627 seconds)
  done (took 2.483839855 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130058128 seconds)
done (took 13.585928436 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.293761243 seconds)
    (2/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.204511605 seconds)
    (3/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.222460221 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.218796311 seconds)
    (5/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.272160119 seconds)
    (6/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.195558346 seconds)
    (7/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.208004842 seconds)
    (8/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06759975 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.123076358 seconds)
    (10/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.190863535 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.112735283 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.188706631 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.078895541 seconds)
    (14/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.078726923 seconds)
    (15/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.120082232 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.104659571 seconds)
    (17/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074795674 seconds)
    (18/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133006763 seconds)
    (19/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081038469 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145226504 seconds)
    (21/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.17627437 seconds)
    (22/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.178352677 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.128531368 seconds)
    (24/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067263004 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077056326 seconds)
    (26/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075579035 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.091674551 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091440287 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.179691357 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080396454 seconds)
    (31/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.150739386 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079480318 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.123964189 seconds)
    (34/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140012544 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.093121378 seconds)
    (36/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.239994364 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075966485 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169716577 seconds)
    (39/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228551871 seconds)
    (40/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068633112 seconds)
    (41/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075665688 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181806482 seconds)
    (43/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075738664 seconds)
    (44/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.153838027 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.098796189 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074012218 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074163478 seconds)
    (48/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086938385 seconds)
    (49/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.091489832 seconds)
    (50/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.078983917 seconds)
    (51/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073721678 seconds)
    (52/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.07425615 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.191531309 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067365962 seconds)
    (55/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.078836085 seconds)
    (56/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.189473246 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135616164 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173095287 seconds)
    (59/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.160909684 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086083327 seconds)
    (61/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148195422 seconds)
    (62/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.07671185 seconds)
    (63/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.143105243 seconds)
    (64/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.144272744 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.12602011 seconds)
    (66/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076929651 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082283604 seconds)
    (68/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074022689 seconds)
    (69/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.22459298 seconds)
    (70/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.195407035 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073091395 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.090366745 seconds)
    (73/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.214737602 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 0.136518869 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.080541757 seconds)
    (76/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069328472 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066558962 seconds)
    (78/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142582454 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.233253773 seconds)
    (80/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082343711 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.078130934 seconds)
    (82/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.169554693 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.170109795 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075814812 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.115072235 seconds)
    (86/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.085919886 seconds)
    (87/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095201566 seconds)
    (88/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.203437843 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.096920545 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076593524 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.085538543 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088236117 seconds)
    (93/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068858222 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067191886 seconds)
    (95/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067870023 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149917839 seconds)
    (97/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067605624 seconds)
    (98/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.077026198 seconds)
    (99/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067541783 seconds)
    (100/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08234017 seconds)
    (101/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067295341 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09087382 seconds)
    (103/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.221109426 seconds)
    (104/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067378369 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074434351 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075885047 seconds)
    (107/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.08271731 seconds)
    (108/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070547863 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153273239 seconds)
    (110/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085884344 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067161685 seconds)
    (112/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08257301 seconds)
    (113/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163875278 seconds)
    (114/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.181283026 seconds)
    (115/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.219729695 seconds)
    (116/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084886065 seconds)
    (117/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083612965 seconds)
    (118/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070721784 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066813888 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067131888 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.082249485 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092693864 seconds)
    (123/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153086788 seconds)
    (124/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075812463 seconds)
    (125/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.221626934 seconds)
    (126/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.208210168 seconds)
    (127/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066412366 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153145732 seconds)
    (129/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078832643 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075487307 seconds)
    (131/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067378853 seconds)
    (132/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.185723031 seconds)
    (133/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.18543305 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077267666 seconds)
    (135/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073246975 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067419769 seconds)
    (137/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075885132 seconds)
    (138/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.071196548 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077452565 seconds)
    (140/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.170263665 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076279931 seconds)
    (142/341) benchmarking ("sort", Float64, false)...
    done (took 0.137440375 seconds)
    (143/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139427999 seconds)
    (144/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065597495 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076888354 seconds)
    (146/341) benchmarking ("sort", Bool, false)...
    done (took 0.143292103 seconds)
    (147/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066639629 seconds)
    (148/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066535468 seconds)
    (149/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.199428126 seconds)
    (150/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.06678427 seconds)
    (151/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.195605238 seconds)
    (152/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078368022 seconds)
    (153/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.197386361 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085217135 seconds)
    (155/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069917917 seconds)
    (156/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067900229 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073512605 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076362158 seconds)
    (159/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068096107 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 0.067452671 seconds)
    (161/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076417716 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.191040653 seconds)
    (163/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066325059 seconds)
    (164/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087408193 seconds)
    (165/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.196783988 seconds)
    (166/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067885329 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066399963 seconds)
    (168/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.16929269 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123018153 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155843409 seconds)
    (171/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.163575145 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.089472737 seconds)
    (173/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069416113 seconds)
    (174/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06647991 seconds)
    (175/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066172744 seconds)
    (176/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066583085 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065330519 seconds)
    (178/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065935386 seconds)
    (179/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.140302099 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.137937731 seconds)
    (181/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.07006622 seconds)
    (182/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065633223 seconds)
    (183/341) benchmarking ("sort", Int8, false)...
    done (took 0.32519031 seconds)
    (184/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080647906 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.067884503 seconds)
    (186/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.165094842 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076873191 seconds)
    (188/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.15512064 seconds)
    (189/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080632623 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06712439 seconds)
    (191/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067728109 seconds)
    (192/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067587016 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065300657 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068811528 seconds)
    (195/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.194921531 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091031374 seconds)
    (197/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06729654 seconds)
    (198/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067351355 seconds)
    (199/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.203230413 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068432534 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067159955 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080938486 seconds)
    (203/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093958035 seconds)
    (204/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.080437817 seconds)
    (205/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073519515 seconds)
    (206/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077335811 seconds)
    (207/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.087361109 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150386988 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067576039 seconds)
    (210/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066712444 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180914726 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095472463 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118457682 seconds)
    (214/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152205109 seconds)
    (215/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.156936226 seconds)
    (216/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.082349018 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066044603 seconds)
    (218/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067830529 seconds)
    (219/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07037657 seconds)
    (220/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153951251 seconds)
    (221/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.071633135 seconds)
    (222/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07702686 seconds)
    (223/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.069725746 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076865247 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076427209 seconds)
    (226/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.157207786 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.068273302 seconds)
    (228/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.148450266 seconds)
    (229/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.088206371 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.09470228 seconds)
    (231/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068582459 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.07090655 seconds)
    (233/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068202457 seconds)
    (234/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067923072 seconds)
    (235/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074892247 seconds)
    (236/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075833702 seconds)
    (237/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068923315 seconds)
    (238/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071571778 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085624015 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06993663 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080270041 seconds)
    (242/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076327982 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079284779 seconds)
    (244/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068679359 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133408064 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133337858 seconds)
    (247/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.083763405 seconds)
    (248/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06771787 seconds)
    (249/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066821068 seconds)
    (250/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074934106 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066868325 seconds)
    (252/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066097308 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074077276 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086652792 seconds)
    (255/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06701423 seconds)
    (256/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.164099825 seconds)
    (257/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165226044 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073602569 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070606332 seconds)
    (260/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.235558115 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067701885 seconds)
    (262/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065022112 seconds)
    (263/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134503606 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073757334 seconds)
    (265/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075302647 seconds)
    (266/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068952765 seconds)
    (267/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06649422 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091955121 seconds)
    (269/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066227245 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067206521 seconds)
    (271/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196431524 seconds)
    (272/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065565802 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067066791 seconds)
    (274/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067223576 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067703123 seconds)
    (276/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067227585 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068377674 seconds)
    (278/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067566456 seconds)
    (279/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066516795 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065991513 seconds)
    (281/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072731339 seconds)
    (282/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066565716 seconds)
    (283/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065445409 seconds)
    (284/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066267557 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065076413 seconds)
    (286/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070933796 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065777369 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.06674431 seconds)
    (289/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092421346 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152243949 seconds)
    (291/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067368731 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080260758 seconds)
    (293/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069664046 seconds)
    (294/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075229616 seconds)
    (295/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.068140899 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141295407 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065946584 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085522487 seconds)
    (299/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066945435 seconds)
    (300/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066367183 seconds)
    (301/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066359651 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066654295 seconds)
    (303/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06647409 seconds)
    (304/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076867543 seconds)
    (305/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.06894589 seconds)
    (306/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.06896556 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065534544 seconds)
    (308/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067450624 seconds)
    (309/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.237472844 seconds)
    (310/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072492308 seconds)
    (311/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.070126587 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06891148 seconds)
    (313/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094163451 seconds)
    (314/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.071754122 seconds)
    (315/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069150897 seconds)
    (316/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.068339635 seconds)
    (317/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067693463 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086753454 seconds)
    (319/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068343007 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078665631 seconds)
    (321/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068019537 seconds)
    (322/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068499485 seconds)
    (323/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075757138 seconds)
    (324/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066762217 seconds)
    (325/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094345116 seconds)
    (326/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268432065 seconds)
    (327/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066168261 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074678561 seconds)
    (329/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067677511 seconds)
    (330/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06728324 seconds)
    (331/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067757135 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12281316 seconds)
    (333/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066571172 seconds)
    (334/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067398195 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067269721 seconds)
    (336/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070714811 seconds)
    (337/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068568292 seconds)
    (338/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068685089 seconds)
    (339/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067982965 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067904072 seconds)
    (341/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073359719 seconds)
  done (took 37.213492841 seconds)
done (took 38.786267929 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09127105 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080725061 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078510571 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075607591 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078678853 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077100626 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079170569 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077129122 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07837446 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078021273 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077444044 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066074245 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074573524 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081762262 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075199746 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081686954 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079837146 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082253785 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067662961 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081509929 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093760757 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078913525 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076702128 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082639961 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069718595 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078444963 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093773321 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091280229 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076266984 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078402496 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.077259602 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087598243 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074316624 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073208522 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076200833 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072397617 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07586478 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074126603 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.090309582 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072816562 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067207041 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078863016 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.0738184 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074832876 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074751164 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078330012 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072556889 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079654372 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066258501 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077803289 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089143294 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071566864 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073392304 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075175181 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072217299 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075620652 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073401644 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077645298 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071540419 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078131246 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078211965 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074906855 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06662407 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075272488 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073965177 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074056893 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065643316 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071398716 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066745084 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066356724 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065507616 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074972387 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073654078 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071740936 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066081634 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066441246 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065411435 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078362396 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072731508 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076235924 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066996441 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07191516 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071290284 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06656815 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071285204 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077844904 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065642039 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06654931 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065790497 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080749448 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072534536 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066586071 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078585783 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071653214 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071516007 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066692125 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066048889 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071655381 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074731333 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066789148 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065734144 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071127596 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071960053 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074649334 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06672754 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071242792 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071135476 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065539517 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075426735 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07352653 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075234482 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079505049 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075303335 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078297154 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067166464 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.0653354 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07627184 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066520357 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071233151 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074758855 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072033023 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074905054 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066273071 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.0651873 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071272445 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072488145 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066295981 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066382345 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066721807 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075479104 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073178182 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064792056 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065760068 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073630789 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073980041 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064707293 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064940527 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074412091 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065406033 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071607956 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071129778 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073817975 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065049353 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06643875 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.21563199 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067393825 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066731873 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072731001 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072109527 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067421718 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075724462 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073440272 seconds)
done (took 12.993990311 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067565805 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106084657 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073767729 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083516312 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078995798 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068511277 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070848844 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083779888 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071095562 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086309763 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095113864 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089059453 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094186377 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066067043 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067577894 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068631994 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065942303 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07471491 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081351532 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090058366 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096016157 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066888506 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076298024 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083657513 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077635708 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083233652 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068835522 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068361436 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070344592 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123675968 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.0924729 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066758937 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068174405 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080323569 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080991375 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074084827 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06786243 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070904466 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070703226 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06690478 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069484918 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081200073 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071108661 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070585923 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068427552 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068616909 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067923359 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070255381 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080696482 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070128599 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074898237 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079086811 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069140201 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067483816 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06539573 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070874749 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06709363 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068375967 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067896744 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067914365 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067908663 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069795546 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068171778 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068212692 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070359919 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069650099 seconds)
  done (took 6.605598436 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083407002 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093393448 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081853489 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082529263 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06688137 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068135209 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06794864 seconds)
  done (took 2.233968347 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068150301 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075278 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080004906 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079848851 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089186628 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07699061 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068202715 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099275188 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066768936 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076442811 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08353939 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081107764 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070536725 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079181959 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067580388 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079244428 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068079193 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074897116 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075240761 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080459262 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071965389 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096941123 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081157849 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068130905 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081539531 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075424476 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070071059 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067829404 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068124701 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067422352 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.0673762 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089257543 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073725115 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081840651 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068205191 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06694496 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071662032 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068051925 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071322742 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073454148 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071280366 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067426778 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067881651 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067507658 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06981207 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074462794 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070918298 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.07056549 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069382222 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076180432 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066553571 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07380853 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069529479 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07247036 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072513692 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07193757 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074694456 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067706428 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074830576 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073663384 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067577016 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079683705 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078957464 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07109845 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079518578 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076118699 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074060249 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071377974 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067067324 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066792449 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.07017132 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.082071947 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072707821 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071569088 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.07109516 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074134248 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.072094359 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.084828345 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082583098 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080564177 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069807921 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067499384 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071446859 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082173081 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072681551 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067436607 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068795403 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067162557 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07289304 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06751502 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072615495 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069166556 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076739716 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072768536 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072564764 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078593972 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070301369 seconds)
  done (took 8.83152167 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070625394 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069746295 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068410813 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068966692 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069039825 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069229486 seconds)
  done (took 2.146943042 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091256207 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068752292 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080232172 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069080288 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089997528 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074888965 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074470857 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069891935 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084192835 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078302766 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074595558 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076848936 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073908832 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069797277 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07403714 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06889994 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073799082 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070937233 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077916998 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070365885 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083773834 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069639612 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070105006 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080333942 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071650095 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068552899 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069059805 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078361139 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077832065 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069611827 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069127647 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070782955 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076351663 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069535083 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074112185 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075943761 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067742878 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073699923 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070235594 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070320236 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076635003 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069958388 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070162416 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073355937 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069507745 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076092774 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07325505 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071741594 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073959082 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072967024 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073500045 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068531744 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070637301 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073272649 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076493646 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06962148 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073403173 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073918167 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070201375 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078793945 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070927749 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073767312 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072157027 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072988631 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075492554 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075901425 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079333062 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072483972 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072403768 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070208988 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075918636 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070814925 seconds)
  done (took 6.99871298 seconds)
done (took 28.491489784 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548346843 seconds)
  done (took 2.218802189 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586308115 seconds)
  done (took 2.299520542 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.367206243 seconds)
  done (took 10.080561957 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.307233948 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.328605008 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733799211 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133437238 seconds)
  done (took 3.253636239 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757916886 seconds)
  done (took 2.479758607 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230282411 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21913299 seconds)
  done (took 2.184048949 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.336961847 seconds)
  done (took 2.048905464 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.147040216 seconds)
  done (took 2.860027289 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228822148 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160791459 seconds)
  done (took 2.111032549 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.541817152 seconds)
  done (took 2.256557577 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.28688137 seconds)
  done (took 6.009807638 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23466128 seconds)
  done (took 1.992378078 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230474668 seconds)
  done (took 1.950883211 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.046614792 seconds)
  done (took 3.761893398 seconds)
done (took 47.230340869 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085162833 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08712557 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087393054 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082661285 seconds)
  done (took 2.032122005 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075579435 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071806602 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074578703 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075343125 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073059523 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073385468 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074224383 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071093839 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072961076 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.0712089 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070233344 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071088902 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075957487 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073687591 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074598843 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075173137 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071179264 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071643646 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073483579 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071014599 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073645113 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071590096 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069575606 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070995204 seconds)
  done (took 3.464872828 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079841508 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073630134 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079421113 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07487457 seconds)
  done (took 2.032408187 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078505808 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078105341 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087932657 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091296411 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078167056 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078530631 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08513501 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086098234 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066913607 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088634778 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069327004 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067722678 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068768196 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08687689 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084630733 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063599435 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065231772 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078369508 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077430397 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080229941 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069570953 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066666509 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078460999 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078230436 seconds)
  done (took 3.579256442 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080501009 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066485291 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079411725 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092184018 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093220604 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066979896 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079909684 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093808676 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128266072 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066259901 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072802306 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067107992 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105492081 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06653593 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081803684 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110896903 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113081398 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070104331 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099874421 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066655613 seconds)
  done (took 3.437078258 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076839158 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070403365 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07201963 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06647446 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078158867 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074440031 seconds)
  done (took 2.177915579 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069837597 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06946681 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071174702 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073120922 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069312582 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.06928009 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068139157 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06732131 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067326066 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067880003 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.0679256 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068565038 seconds)
  done (took 2.560816243 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155183935 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070398965 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07150188 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067470239 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072284036 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068431124 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083672496 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069271527 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085133564 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068026611 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068199863 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06985156 seconds)
  done (took 2.682484059 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100837464 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101621264 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145919265 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117974762 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117036373 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097026635 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119075806 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095935398 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160722765 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138456552 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117544142 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094445601 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087784784 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07067588 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100480085 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102305272 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136362641 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073459147 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113839922 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.16499736 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115490751 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.1132536 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122706061 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117332708 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082535545 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122618372 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094880558 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103114695 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125232436 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110212215 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119599771 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098502381 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073054156 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072123983 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149989294 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100792336 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107875079 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094232064 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101223332 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088479221 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107045274 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070138277 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.089483886 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107830987 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08541633 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117755704 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089000608 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104006058 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081907331 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131053433 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106964247 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099479241 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086671462 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104520709 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129973452 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095207335 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110881324 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106178626 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082450802 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11681213 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.1000352 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256236904 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095224301 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082593266 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161328289 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091561254 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113729375 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113863501 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084258852 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09135395 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103967356 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13223966 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109972092 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.110042122 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115236715 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09625609 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111748476 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092905017 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129248213 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09409263 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073615104 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105158117 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128967631 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086549608 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10145712 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130074855 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092605758 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078685808 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093542779 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119392823 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082038438 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097388535 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070732587 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098294432 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107882061 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098299636 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112923017 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107956938 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079482732 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124975392 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10986486 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073890986 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11802771 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09966875 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153372059 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096215616 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077308075 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100403841 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094344754 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149424353 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086140334 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080687278 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099722873 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141858188 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095586947 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169825086 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097440442 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129650365 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09773805 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08864695 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075791461 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089807422 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101519706 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106545342 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101459235 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088628475 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077329319 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087350767 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095128705 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.256954624 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08339936 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116216713 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102832451 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076495918 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090222551 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.08080195 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126390887 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079125329 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109764851 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125873725 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080516492 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106211719 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098724719 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108384084 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100178392 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111599374 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14312208 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.1173761 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081061883 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085625798 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109272287 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143145998 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.117226694 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089673527 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080139007 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10454743 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113791532 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100583214 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10853541 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101109224 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109092354 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098483077 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141594402 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119338985 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092262581 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096554459 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097179819 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123610686 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077731783 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15603599 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094983922 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118697929 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086076619 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14145445 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114408944 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090717753 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085597899 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096806931 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105652606 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106710124 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143697043 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097328693 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073476281 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09464462 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131917243 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078010189 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101170282 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090781003 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094110636 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117743129 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083460425 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08159033 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069019313 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100711214 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133806268 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070136678 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112398777 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.281990807 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104701786 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105626223 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.07076229 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101972657 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141227612 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109551531 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141386737 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116984587 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101514983 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119548666 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100228497 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106560322 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080671052 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.12848217 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139506479 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100677458 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094506307 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138177789 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122329963 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.139037225 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097109556 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116923078 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106248577 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101742371 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104849903 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102329138 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145334828 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124056267 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125897553 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086821728 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107859386 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109979341 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13679078 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083619305 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117466945 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076790169 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113009961 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079151843 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108896087 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080878973 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113159018 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080744892 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100926843 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071017711 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074964156 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1425713 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114674566 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093342497 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090635238 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.142257618 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135440211 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085553924 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103522752 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104812807 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101132255 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100751757 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108654115 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085414914 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093966464 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275356868 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081240184 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083620475 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100615577 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095810658 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1088262 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086076248 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076201565 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137097262 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105835292 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095816922 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079128187 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096667961 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122402777 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090890502 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089085191 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106412209 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104453339 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141769569 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09138174 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099596474 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118157018 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081698928 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094316813 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071082639 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086420618 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076983967 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109896535 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077152186 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109748376 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070291223 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131294239 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088191093 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094105032 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103428621 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101427275 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128833904 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093665738 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12839321 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09074591 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103774453 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109352301 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095879388 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081397031 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10438613 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097526122 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110693723 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097472883 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106481109 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110831754 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094943011 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142067295 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090619539 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121501614 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106491092 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108163331 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104838353 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117648379 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138742451 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114036877 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113064005 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076259438 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084629393 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106279199 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10081594 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145154446 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101561137 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072498749 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086330069 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091033941 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095442076 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.269456478 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084042692 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143702056 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089146522 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088749672 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114266399 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090574624 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098838123 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077996837 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096763212 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101849879 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095397486 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096035372 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108878398 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117906486 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114821295 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13351089 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10041732 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094384894 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.11962814 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112022752 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112449462 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086952293 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088004408 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124823291 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104022175 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130119999 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101450689 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096169094 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103057986 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091818561 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101160507 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098148976 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110298798 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082014742 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077624721 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069999453 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073259658 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118945637 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109429997 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100101625 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099923294 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07340495 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105444408 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101064125 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073531799 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088366221 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095488902 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100448299 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085341449 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093079512 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115168182 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092215849 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104154814 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100281734 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129495519 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101174938 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089796006 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144615301 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129758985 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089243063 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094028226 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073142938 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079733116 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101995858 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143561037 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117102005 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077345408 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083839442 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.242829697 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088843821 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073267619 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089204132 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091305552 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104839708 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094290054 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113926675 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105336283 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076919209 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104267488 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098109257 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093298508 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098004212 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103402083 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106374745 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124538603 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102008539 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099150546 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077331372 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081944971 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077212542 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080648655 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103957018 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079590433 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077547378 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130658153 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092524075 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105841846 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109942681 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085887852 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076592458 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133950462 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071040714 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135504358 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072477279 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083374656 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082097048 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08083797 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094594276 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106059191 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097475614 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114462574 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106653123 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105887089 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111004135 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157356278 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072427647 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145468205 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07739947 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07738422 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077232106 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114757949 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091123247 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105899017 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141287658 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091478259 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093867844 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078867923 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129212664 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099316781 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104378235 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084096095 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080381486 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129678736 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080631562 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072621202 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087623626 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11185373 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.0733472 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103595076 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.25017249 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082021545 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115399692 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631865273 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091815294 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077581584 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090852841 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143356184 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129747714 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085516352 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109871031 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120089248 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091442613 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085296341 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109541499 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185173686 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075901582 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095670863 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104954488 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099650052 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093782748 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093299554 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088067037 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093541665 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087436929 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083911421 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112403001 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092422752 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097213777 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102280773 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087714739 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084344995 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136142287 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.109146979 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086861593 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093355359 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106273509 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091813605 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093373282 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073921972 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119128619 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09391103 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103271454 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092968567 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109506924 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121647183 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090154285 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113504749 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089861319 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110453332 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086562893 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07965907 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103169584 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079270463 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078693818 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118335667 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085217924 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094121215 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105561512 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096280546 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115559467 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119152814 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11186301 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098907865 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080192043 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087174316 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087833281 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075932217 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079164255 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07529426 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076917207 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.275954802 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0894742 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08658974 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117103999 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08412392 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105096707 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10179473 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110691301 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084749326 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102988663 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110765581 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091723351 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104776926 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102406451 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129167718 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146116844 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101064613 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124062663 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134304067 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078231259 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076984128 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070142808 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116123186 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081401725 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082862802 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08227884 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133754112 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083527753 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09616545 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232543056 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081674121 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083679833 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098101272 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071734603 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084817592 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109611717 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086557316 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082250134 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100189851 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084583172 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118551136 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112494356 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090578566 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084499425 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082651842 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094766018 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105102193 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129702045 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091600024 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076827066 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107718009 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104722016 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124627474 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074526871 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082262338 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131175859 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092873354 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104897562 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081547457 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121038843 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13351311 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091633431 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134842694 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073477864 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085003946 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090821791 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126518609 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075939456 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089368734 seconds)
  done (took 65.537193532 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153534245 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145768174 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083797036 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.09897322 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189064736 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199193266 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120547021 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098382286 seconds)
  done (took 3.014189588 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069965331 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084085736 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082812184 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20827743 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109407976 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069046282 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074816766 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082977765 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068770092 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068811722 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103036721 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068653268 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068875924 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369552602 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068015011 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073070311 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068452139 seconds)
  done (took 3.617196138 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327397601 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.470757268 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.217845485 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.717985471 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138458925 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486727853 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078331155 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084271218 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.630767893 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373379768 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.13603466 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092746052 seconds)
  done (took 18.643665378 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077468611 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079641685 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079598512 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076280349 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075772045 seconds)
  done (took 2.271716183 seconds)
done (took 116.790836398 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084878136 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174385958 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072283708 seconds)
  done (took 2.165867548 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083472949 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082379813 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082596977 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080204306 seconds)
  done (took 2.22252289 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076262679 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078138626 seconds)
  done (took 2.037207462 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225037193 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176663855 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091126216 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08344924 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081318898 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081391821 seconds)
  done (took 2.144089746 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073100876 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073490429 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073777394 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.078060675 seconds)
  done (took 2.183066346 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069671392 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067664186 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070404064 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072187568 seconds)
  done (took 2.166047834 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086953729 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084787545 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11351453 seconds)
  done (took 2.169816951 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084385687 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085781342 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081076268 seconds)
  done (took 2.139398394 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11043982 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098344835 seconds)
  done (took 2.09427158 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081281552 seconds)
  done (took 1.972395557 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091237166 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099186667 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142505852 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108087722 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140969426 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.126729108 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078480286 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079205901 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075375164 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073825414 seconds)
  done (took 2.903509418 seconds)
done (took 26.659996913 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080256991 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.371925382 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361853679 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089268472 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.721379869 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358774895 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.013767306 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092730708 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102079914 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073096689 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091226645 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.65416017 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.004375759 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32934165 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985981964 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326736454 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651855225 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070208554 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068843767 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070201839 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.990616025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069211674 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069726671 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069817775 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651423542 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37516722 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070596 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326493493 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069686399 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072547621 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358065712 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071164889 seconds)
  done (took 16.572045077 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071753728 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124291483 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073803607 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085619588 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072072019 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071574618 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072873992 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070281209 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112319698 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070140695 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08664448 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069228808 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073318359 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070462027 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089414502 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069920891 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071188299 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074207416 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070302659 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07075223 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088114246 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069345359 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070311099 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071121055 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070247507 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082568571 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070776187 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06984582 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069805172 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071822297 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072730482 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071166301 seconds)
  done (took 4.354736781 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123026796 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132843804 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078271086 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11476255 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123473841 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074472132 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156732738 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09746133 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11998506 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073286405 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091854787 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.07353145 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.109342011 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070900296 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089907342 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069547654 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071360514 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.0704226 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069521421 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070770706 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088072145 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06950909 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070451055 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070584641 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070327124 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084278331 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07052474 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.0698592 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070031004 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072016214 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073705715 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070619013 seconds)
  done (took 4.671053751 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071564243 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07373078 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082391084 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085260025 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071761187 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073206332 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074975915 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071879644 seconds)
  done (took 2.517841889 seconds)
done (took 30.022310901 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080926564 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070240567 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073298987 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089175095 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075948744 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.073906812 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.069514705 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07847025 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.076067346 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.076027046 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.076004714 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068734159 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071827208 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066542438 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07386473 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067826261 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073907482 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071766327 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071413259 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073654712 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069612147 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073206141 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075905307 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071952909 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072504183 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072341155 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07664064 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073713185 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068169387 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070741132 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069829201 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081921253 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074050346 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074111427 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067783369 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067173122 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073453987 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072650258 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076875783 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076922388 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069785563 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076521925 seconds)
  done (took 4.958020751 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089820002 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095444883 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088402984 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083201561 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108912367 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083709459 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092116517 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080913719 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080023342 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091389925 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075606484 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08043888 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082426839 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076826458 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079682631 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076785296 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.08116324 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075143004 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080330867 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080262077 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092051452 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.0735368 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080276945 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081203687 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075480158 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081326255 seconds)
  done (took 4.089814916 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074961224 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090181905 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094356272 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143805613 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111340865 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084078456 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08423991 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099092295 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102602559 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069716322 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073334776 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095995233 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098512598 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076964116 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107757232 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087722076 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081912368 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071201567 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076104293 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104562483 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092089129 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088042018 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101724065 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089225994 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069134304 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079004704 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076723106 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084347903 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076629323 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081525571 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074143496 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072892913 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.07048203 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082000374 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076261568 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067682677 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091471776 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08231244 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085052516 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107559259 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078835379 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071107525 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099740408 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134579635 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068782276 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071923265 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073078284 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08197014 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070811303 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099042511 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087783472 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068929887 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088209995 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070919518 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07049389 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086244611 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07090454 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071145955 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081552311 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075951957 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090561193 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075236752 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090296333 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069531697 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080416061 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071426736 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070883664 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068181666 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105485292 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076534386 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121935336 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070687802 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067912883 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081567791 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080304597 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076595515 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068876986 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088592892 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081520296 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073178599 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080977253 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071935007 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072947103 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104881357 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068503633 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067184916 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067337838 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072011402 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072723816 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069736109 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082212473 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069093844 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072332322 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085059815 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06929906 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06968977 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071951294 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070186462 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068731172 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079953992 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072755523 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071013167 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081647235 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070440268 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072088017 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083621771 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079328453 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068748741 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070342972 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071489792 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070827848 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073370294 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073048037 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071555166 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076223631 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07681172 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074650463 seconds)
  done (took 11.377692913 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165612415 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155168256 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071111879 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150482339 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078241522 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07419592 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152429038 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089133466 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070282247 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071305287 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069474317 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097806831 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093375858 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104332241 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073687995 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070805387 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095387013 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103254472 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.15442914 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147314233 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093212977 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077860326 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072278138 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071234286 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071445177 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078735743 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085847726 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077624024 seconds)
  done (took 4.67743523 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077306897 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085716531 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074360651 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094121799 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088733828 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070440999 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071826181 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071094172 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087243082 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07694015 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070277479 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073859066 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074004162 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070763322 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070482754 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076381485 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076873116 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068838119 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073611665 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074708102 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.08073619 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095406112 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074292606 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070320757 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072748575 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070369751 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07635861 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079086159 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06958868 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099678422 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066747315 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074289879 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083975929 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070826465 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069406324 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070705977 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070388888 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070353139 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070341907 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068514323 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067916225 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074875999 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068857973 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075820511 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083864372 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077832613 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071274502 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075363238 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07291468 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067203578 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072732419 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07314988 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072223034 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077720798 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073722079 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072247295 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071169723 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09968702 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075805122 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06952251 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.0689314 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068064396 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071526765 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077536546 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087030026 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071444025 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068290959 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070441264 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074296236 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084024019 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069283659 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074987515 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067394329 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070198498 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071969569 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07256442 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070907555 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068005749 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06953841 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070341849 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070421905 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069287163 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.06946378 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072242582 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068269723 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068174484 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070650198 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071433288 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076504393 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068742475 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072175956 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071599755 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068748722 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072370534 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075230572 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072798007 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089532019 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078625068 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070244416 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067944724 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084245945 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071512673 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069341131 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075466525 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074217355 seconds)
  done (took 9.748289434 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092988912 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071690949 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090386812 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096180762 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.0805697 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075675867 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084233734 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.07136269 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086332184 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068905085 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079148015 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068612452 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083304027 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078976803 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071748368 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080148454 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072806598 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091056136 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084311067 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068299369 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079518312 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082069928 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.08258493 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088143566 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087864645 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088759974 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082258423 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072239676 seconds)
  done (took 4.233174522 seconds)
done (took 40.991408512 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.995798961 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.158483034 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.991911459 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.182706489 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.273598998 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.123428195 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.124266846 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.983005681 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.202506443 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.019019043 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.316415314 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.405695875 seconds)
done (took 69.760592191 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.071673756 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.131565624 seconds)
    (2/2) benchmarking "String"...
    done (took 2.205416311 seconds)
  done (took 6.25128132 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.581258496 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.986966172 seconds)
    (3/3) benchmarking "different"...
    done (took 2.036677056 seconds)
  done (took 8.517745863 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.12332629 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.652113824 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.248987007 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.985315853 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.992381552 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.378982475 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.844822793 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.532310503 seconds)
  done (took 33.550405526 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.203986433 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.205390386 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.744343926 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.772688294 seconds)
  done (took 16.891231087 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.591207271 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.24852332 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.248764639 seconds)
    (4/4) benchmarking "different"...
    done (took 2.24406454 seconds)
  done (took 11.307662074 seconds)
done (took 88.735243413 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.990155085 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.095074146 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.004154302 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.143502858 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.056067457 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.019588933 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.988761184 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.032572329 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.989655625 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.988346764 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.423674352 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.988105699 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.98689475 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.024946229 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.988376163 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.00026489 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.227399572 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.993025398 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.990019339 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.487022274 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.490071102 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.989769845 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.003552042 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.046002675 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.018996037 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.033839065 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.478228733 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.997185296 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.602972719 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.012257002 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.989747636 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.991675395 seconds)
  done (took 210.987139312 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.988165681 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.047992847 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.051353907 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.994257493 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.445155218 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.183373455 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.136325427 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.478761813 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.994263796 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.016392127 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.181852506 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.989642966 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.193084765 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.995242066 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.98431586 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.994154065 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.27350039 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.199193218 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.988213404 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.178757967 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.016751407 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.072786668 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.027242908 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.160890691 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.013090351 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.99741504 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.003552976 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.003111151 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.174859521 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.243964339 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.005122957 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.008528209 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.18506026 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.860018772 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.004980287 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.003504953 seconds)
  done (took 178.011862927 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.164931553 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.999449752 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.052617317 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.125177607 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.749384295 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.719040545 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.994199907 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.990097183 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.98923842 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.98561344 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.992429709 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.058976435 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.352431017 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.004231958 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.991696294 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.991189255 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.990537394 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.990594384 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.993372271 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.991068423 seconds)
    (20/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.441008665 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.993167301 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.055341819 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.367523485 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.125714037 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994048246 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.001890127 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.126447824 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.990945067 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991921563 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.126595172 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.992166367 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.070047073 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.119978797 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.003393224 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.07169143 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.000196846 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.478309323 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.996693747 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991879965 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.994715182 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.051485972 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.992806835 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.093305231 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.085968472 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.992604365 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.004337191 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.072694718 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.646553014 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.995350055 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993526258 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.992956606 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.992970975 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.994846244 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.491352838 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.995899303 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.017907124 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.607255642 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.992261513 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.992512285 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994530307 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.994002576 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.994052611 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.001340953 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.023043665 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.803125961 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.304835777 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.384850775 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.798522396 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.987343443 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.871869981 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.054220551 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.99688421 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.073033065 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.994336457 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.993793223 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993904961 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.98155501 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.08273487 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.079389608 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.99524383 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.12851538 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.998785963 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.996031171 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.994903138 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.110701082 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.753606992 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.997738842 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.007116239 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.05317698 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.993383704 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993924739 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.001085971 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.110418239 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.995128511 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.994180272 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.992728795 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.088555917 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.994901897 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.206899396 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.216897326 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.06593301 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.236163237 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.218699079 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.995688172 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.993888753 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994386891 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.009391396 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.995934134 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.994471921 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.004400454 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.99484142 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.994580714 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994948659 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.995953699 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.995229195 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.996179692 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.006702165 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.995533233 seconds)
  done (took 434.355531548 seconds)
done (took 827.491246785 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.588278189 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.669703905 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.566855275 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.598852706 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.56989177 seconds)
  done (took 14.917414059 seconds)
done (took 16.845938328 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.999246585 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.013996338 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.000561414 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.059929479 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.021126902 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.00741889 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.043755852 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.042522238 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.027015893 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.008508968 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.055559593 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.012561517 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.028929395 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.031173782 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.082532405 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.036662241 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.013420269 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.005264885 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.061887102 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.014265412 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.012576944 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.011646848 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.010518957 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.057282172 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.090242543 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.020183597 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.009056179 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.05770965 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.021028899 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.056343078 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.069443291 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.033167771 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.044193979 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.084943092 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.067394902 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.090363128 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.021456205 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.076794111 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.017412672 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.102943589 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.06632525 seconds)
  done (took 85.512240742 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.007087663 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.142728622 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.213661875 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.249207797 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006911527 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.217658216 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.068899269 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.135014332 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.138956767 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.221282159 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.23335854 seconds)
  done (took 25.565456306 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.005927253 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.142440821 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.247844189 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.048568061 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.008044796 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.224320597 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.074897333 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.136155369 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.144532785 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.22565135 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.241457044 seconds)
  done (took 25.43731122 seconds)
done (took 138.444903313 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.386899361 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.03794964 seconds)
  done (took 6.351389824 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.001923612 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.020824035 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.158177496 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.002613007 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.002636205 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.002201177 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.002245889 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.002601313 seconds)
  done (took 18.12009131 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.002211175 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.002596234 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.00164121 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.002596947 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.001952725 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.001463414 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.002845494 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.003057373 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.002285976 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.003110203 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.002556078 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.003314638 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.003790253 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.002422516 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.002645459 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.002457796 seconds)
  done (took 33.969758327 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.981849092 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.002100233 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.002891264 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.003211165 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.002907295 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.003593331 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.004721511 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.003730971 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.003396277 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.004386931 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.003607755 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.003232622 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.002953409 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.002932882 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.003817814 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.003913193 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.004589116 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.004141142 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.004833356 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.004081946 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.003589321 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.005963949 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.009142699 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.003766021 seconds)
  done (took 49.994695303 seconds)
done (took 110.378839229 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.233395398 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.608998464 seconds)
  done (took 8.772361396 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.008116927 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.004587549 seconds)
  done (took 6.013808195 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.004988458 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.005564206 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.00560687 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.005148355 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.005392705 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.005662229 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.005104913 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.005329971 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.005823104 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.005884988 seconds)
  done (took 21.985113783 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.005897064 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.006453735 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.00650999 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.0055338 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.006219843 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.005468981 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.006340288 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.981495855 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.003676088 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.006521048 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.005976717 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.006427318 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.993422027 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.007385127 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.006254632 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.006250041 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.006872497 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.006350445 seconds)
  done (took 38.004753447 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.006517498 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.007347737 seconds)
  done (took 5.946497142 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.006849976 seconds)
    (2/7) benchmarking "second"...
    done (took 2.007123846 seconds)
    (3/7) benchmarking "month"...
    done (took 2.00652815 seconds)
    (4/7) benchmarking "year"...
    done (took 2.006495311 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.007151974 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.006696196 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.006969551 seconds)
  done (took 15.980445446 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.007153403 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.151638098 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.204610953 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.609881345 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.00821864 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.009469274 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.894336097 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.009773515 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.011156645 seconds)
  done (took 21.840136331 seconds)
done (took 120.479929937 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.863632749 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.013394096 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.281198828 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.083028797 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.080661685 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.307292569 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.05013197 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.560457327 seconds)
done (took 44.178873187 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.071729056 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.006177259 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.037685563 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.039462371 seconds)
  done (took 23.016650272 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.008627193 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.35055842 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.028531772 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.969181664 seconds)
  done (took 23.306093971 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.384866135 seconds)
    (2/2) benchmarking "read"...
    done (took 2.366854101 seconds)
  done (took 6.690778918 seconds)
done (took 62.026040128 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.008560762 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.008034591 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.008616633 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.009548463 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.008613621 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.010074378 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.009233593 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.009899263 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.009997148 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.009234023 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.009362083 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.010099816 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.009708192 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00970118 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.009516796 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.010518471 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983283498 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.006229908 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.009849807 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010396373 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.009981953 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.010100344 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.009516084 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.009486409 seconds)
  done (took 50.134111958 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.009912257 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.010705932 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.997358776 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.009834577 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.011201852 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.010627045 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.010789824 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.009907439 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.010477144 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.981610017 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.997434463 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.011267735 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.010291347 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.011246046 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.009945636 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.010800913 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.010783874 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010817679 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.010954124 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.011216749 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.011335711 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010854558 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.010941471 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.011571908 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.011891855 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.011680803 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.011250977 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.011622055 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.011532037 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.98162709 seconds)
  done (took 62.177675901 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.012245952 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.012196173 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.012851806 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.012508741 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.011829569 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.012150698 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.012823483 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.012449351 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.01298818 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.012435981 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.012455932 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.000169276 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.012856212 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.012998625 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.012539885 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.012328609 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.011491448 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.012956981 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.012826564 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.012924465 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.012645904 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.012635674 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.013540296 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.014022793 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.014348767 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.014007347 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.013927166 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.014113832 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.013832455 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.014310862 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.013211435 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.014062242 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.014102321 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.014279948 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.013390749 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.013719567 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.015410693 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.014232564 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.01341706 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.003407861 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.014969401 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.014645716 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.015002685 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.013940436 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.014820799 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.014473104 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.015001276 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.015519997 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.015572292 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.014652588 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.013828831 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.014155862 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.015247426 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.015756669 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.015340996 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.015349477 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.015459454 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.01602165 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.014983952 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.016232717 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.01627361 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.015016346 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.016014299 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.015239415 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.015454942 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.015731117 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.01601417 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.016009462 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.016748648 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.019392847 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.006872209 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.01444752 seconds)
  done (took 146.928165957 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.016185319 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.016539901 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.0168872 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.015497096 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016468299 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.016139871 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.016317269 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016988996 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017458215 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.016521622 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016788567 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016774179 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017662786 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017265822 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.017826309 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.01750237 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.016513288 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.004831453 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.017145364 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.018009539 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017745166 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.017296138 seconds)
  done (took 46.301718871 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.018214279 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.006668971 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.017401973 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.01790548 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.017612249 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.017591834 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.017376832 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.018128822 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.017692125 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.018254471 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017962489 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.018049374 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.0181643 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017464283 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.01746205 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.019052612 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.018970834 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.019722767 seconds)
  done (took 38.256977579 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.017939579 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.018494137 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.018521032 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.017670492 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.018779967 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.019207211 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.018844698 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.0184925 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.019256256 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.019556849 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.996610732 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010950265 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.020012304 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.019671306 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.019342526 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.017467518 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.019193344 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.019913668 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.019304281 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.020000489 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.992454699 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.014993349 seconds)
  done (took 46.300644798 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.014554606 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.996959631 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.020001878 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.019337695 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.006747659 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.020253818 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.019814529 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.017265831 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.019312836 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.020037012 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.007411322 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.020975904 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.020349882 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.020920985 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.021040052 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.020968124 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.02090875 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.021313924 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.02149629 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.020654043 seconds)
  done (took 42.270914568 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.022216467 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021765546 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.021871828 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02225499 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.020946259 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.02244179 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022391398 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.022090086 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.02216109 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.022648424 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.022194842 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.023012707 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.022830331 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.021865881 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022548267 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.022382693 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022831311 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023281199 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.022589138 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.022126255 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022915095 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.022901623 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.023432736 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.023616989 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.023265474 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.022485425 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023241019 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.023679374 seconds)
  done (took 58.579181077 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.022073231 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.018578836 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.012625151 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.023862203 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.023061195 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.022774305 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.019119148 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.022688882 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.022165563 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.023135498 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.023379017 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.01929202 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.024264278 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.022994874 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.023612916 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.02348645 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.022553658 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.023949396 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.022641511 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.023491471 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.023551533 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.023372437 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.024343009 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.02370804 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022640288 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.02404961 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.024630176 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.024747685 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.023924511 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.024626263 seconds)
  done (took 62.62792525 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.044712309 seconds)
    (2/2) benchmarking "in"...
    done (took 2.041775901 seconds)
  done (took 6.035859683 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.024588271 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.024671155 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.023895306 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.02460061 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.024110222 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.025031448 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.024816558 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.024752698 seconds)
  done (took 18.145924311 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.025062469 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.028696504 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.025833616 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.006267956 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.024823382 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.032234066 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.026890693 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.026391004 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.027107247 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.026869251 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.030820899 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.030384814 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.034853447 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.028997184 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.026057935 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.027437293 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.01594735 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.028333077 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.027803512 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.025270335 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.029574091 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.026175657 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.025856421 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.010676374 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.025869165 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.029007597 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.037088324 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.027446493 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.028242748 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.991957219 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.032771001 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.026749973 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.027102845 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.02870702 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.013755261 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.027266956 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.034046734 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.027935762 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.027638335 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.026851706 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.029053107 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030659288 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.031343503 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.034780948 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.028743663 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.028119988 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.027275978 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.027533257 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.028094512 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.032061894 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.036345715 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.028584916 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.02817995 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.027731504 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.030284724 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.028603629 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.028677307 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.02085013 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.034112896 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.035047227 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.032166085 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.050078745 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.037538656 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.02963385 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.030235811 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.038451784 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.053588925 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.030608786 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.030825717 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.028574245 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.03631925 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.029040373 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.028459098 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.029040184 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.042307653 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.038397105 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.030000686 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.028966005 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.029204654 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.030572967 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.031358865 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030215922 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.030402154 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.030540724 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.04020386 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.056199548 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.029622082 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.030844914 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.032324473 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.031542402 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.035298928 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.031841299 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.030189272 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.029668345 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.032032484 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.032578729 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.031164626 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.029739162 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.02970352 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.039835433 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.030789388 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.02972109 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.03442767 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.040540165 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.031368098 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.031910021 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.031754425 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.031729357 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.039052669 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.032398211 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.032000856 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.030968867 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.032793079 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.037068414 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.031550913 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.034748919 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.041189811 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.039531184 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.033381389 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.036765001 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.035594284 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.034102268 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.042314934 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.058900747 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.032850937 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.035790245 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.037998782 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.045296799 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.036191835 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.033106385 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.035264892 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.032424944 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.033165267 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.034625444 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.033132534 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.033720639 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.032706161 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.033431857 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.033395303 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.033890913 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.036291441 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.034957741 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.03550883 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.032766178 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.037484455 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.033917849 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.03690021 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.040687188 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.034653673 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.034103257 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.033987634 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.03599888 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.03564449 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.03469329 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.03476297 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.034174004 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.034782867 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.034265963 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.0365387 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.034674578 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.035338704 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.035819091 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.039385242 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.035279358 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.035250817 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.036107036 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.03526415 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.034989773 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.036351457 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.035100761 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.037208922 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.035055419 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.039477519 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.034725431 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.034823979 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.03577351 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.035314539 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.034636434 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.039337639 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.047103423 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.039323381 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.0454081 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.035647812 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.042748754 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.03598258 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.037636139 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.037116845 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.037104541 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.036366416 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.03657313 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036539364 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.040011888 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.058127898 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.047287317 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.038718114 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.038239232 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.041265826 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.04030288 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.042602614 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.036965474 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.037335833 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.039241993 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.037688188 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.037499171 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.037091443 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.040003094 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.036791879 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.03680048 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.040608791 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.037268786 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.037912657 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.03925284 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.037368009 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.039626475 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.037099248 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.037724555 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.037636394 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.040564744 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.045311461 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.039878069 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.03772646 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.037849856 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.039748336 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.038659739 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.038137953 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.039612273 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.042286776 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.037659825 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.039667722 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.044719003 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.039145577 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.038625226 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.039214896 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.038972239 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.041459941 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.03855081 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.042456735 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.046783456 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.042479552 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.03896188 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.044487332 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.038759097 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.041103139 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.040005359 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.040821196 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.040461784 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.040688668 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.03978413 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.039112566 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.047206766 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.039279741 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.040772038 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.03992602 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.042524072 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.041865405 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.041901522 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.041439117 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.043785763 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.049327185 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.04628977 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.040882751 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.044381352 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.042886424 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.041883625 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.044435208 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.041478118 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.054513966 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.050279615 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.041310147 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.041489551 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.041573663 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.035220736 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.039122611 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.030112455 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.047459405 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.030494436 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.045252579 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.046092135 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.042025082 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.041915893 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.047470352 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.043009925 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.044878871 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.043443331 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.042996545 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.042296203 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.04210108 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.044432391 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.042389745 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.043810812 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.046389942 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.042313714 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.043464207 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.042423315 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.050513336 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.0426514 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.042967874 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.050458008 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.044525487 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.043184622 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.043622187 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.042747622 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.043920814 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.044117746 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.043201745 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.044470043 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.042728578 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.047107954 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.05472279 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.04659811 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.0521447 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.044891982 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.054180098 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.043616234 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.043542608 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.043201231 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.04748346 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.052080941 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.043364718 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.043141726 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.050909553 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.044900451 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.045465192 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.048940488 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.044578568 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.04511494 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.043988331 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.045572508 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.050694931 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.048037362 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.044211414 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.044685862 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.031719747 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.044779131 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.048097252 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.046195735 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.045506095 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.045946334 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.045449478 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.045293448 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.0461838 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.045366839 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.032995075 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.045121654 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.046302285 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.053113021 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.046251793 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.047019835 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.05035477 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.045738848 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.055035957 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.046661093 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.046787275 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.047383938 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.047096578 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.049044036 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.045944987 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.04666704 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.04650956 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.046352987 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.04711232 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.049489614 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.052577486 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.050555287 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.048820663 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.047342432 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.04888775 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.057197986 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.071911209 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.048717704 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.04941791 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.051621667 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.053406706 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.049627619 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.053399531 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.050807377 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.056162446 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.049289486 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.047487892 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.050629696 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.061092427 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.04761702 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.048138128 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.047823612 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.021361669 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.050467286 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.047882656 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.048832536 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.051438777 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.049500783 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.059165373 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.036280668 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.04938608 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.048237858 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.047981159 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.048046304 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.047556869 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.050102121 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.049586014 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.049862693 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.048523585 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.050675864 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.054459283 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.035678557 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.033117453 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.056434988 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.050067312 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.049333702 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.038647176 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.049246896 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.051140143 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.050332121 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.049669057 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.052254085 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.04837935 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.045676656 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.053519815 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.058778986 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.051032132 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.050173097 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.048670106 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.053032105 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.037141562 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.050419459 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.051937166 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.0575704 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.054318348 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.063041419 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.06044647 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.050795476 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.052006567 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.057993977 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.05862108 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.051146938 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.047327404 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.031512726 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.05341118 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.052320714 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.052566049 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.051104462 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.052093555 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.056370311 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.051485745 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.051258213 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.05182265 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.05097682 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.054668989 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.053320059 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.057799286 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.041896655 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.05101972 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.051087684 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.052657845 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.05363936 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.053976465 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.039913142 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.051386048 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.054526257 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.054859583 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.056921013 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.051306753 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.052148474 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.054167041 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.052364644 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.052651281 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.053212289 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.052677635 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.052498295 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.056244335 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.06173524 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.05256513 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.054158328 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.054296628 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.057357644 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.054069258 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.053754914 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.052664816 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.053020727 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.061348891 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.053066928 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.052874171 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.054331435 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.053502958 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.058680533 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.054807037 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.058152062 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.042279017 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.053833981 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.052648266 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.057266893 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.063696054 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.058672925 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.057463095 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.032965909 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.056361634 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.056656644 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.043058691 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.0538783 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.054453487 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.055464654 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.058890117 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.05633117 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.056589934 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.024506461 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.056803177 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.055217351 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.057474592 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.054908046 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.054642168 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.055155735 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.05684166 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.063901567 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.055865499 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.057241554 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.054782739 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.05874325 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.068099258 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.055468696 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05577002 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.055962873 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.057216378 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.056991655 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.064065025 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.064881504 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.059997255 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.056300399 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.062188445 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.074843934 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.058802453 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.067371454 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.08819817 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.057509713 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.057346362 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.056474725 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.057716448 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.056876678 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.059720966 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.044130982 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.063626705 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.057600914 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.056836987 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.064088765 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.056829483 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.056763409 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.057274457 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.059146805 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.063574434 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.058238185 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.064987784 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.05733667 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.057413147 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.056736468 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.061048699 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.057561567 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.056904079 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.056458293 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.059511861 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.058240583 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.057365756 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.066063769 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.058608749 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.035044053 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.067256892 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.068725746 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.058341546 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.554396354 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.055944942 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.060638061 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.059441576 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.056622959 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.059651311 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.064283988 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.06066446 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.06504906 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.05831422 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.057565687 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.057567129 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.056223328 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.056685362 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.069001504 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.069203889 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.057410876 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.058161631 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.063269731 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.056897714 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.062742539 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.062199637 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.058966973 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.0579754 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.056136569 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.055947582 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.054149879 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.055369585 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.058944997 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.063780895 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.056044088 seconds)
  done (took 1220.862202757 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.05423528 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.054308152 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.056022197 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.055780903 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.055549814 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.055016631 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.056024369 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.056055781 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.054561077 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.054581533 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.055345871 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.045266466 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.053772638 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.052796306 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.053498949 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.053056901 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.054163134 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.054495314 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.053673628 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.052730098 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.052987432 seconds)
  done (took 45.113273174 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.054144536 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.051551379 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.052574884 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.05253226 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.05198379 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.052597127 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.050381103 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05119957 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.051274244 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.050981892 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.052131677 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.050316471 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.051399989 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.051783853 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050736507 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039024159 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.050826323 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.050683978 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.050461054 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.053035166 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.050390834 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.050808144 seconds)
  done (took 47.09845727 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.050573569 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.051294122 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.051577431 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.051707395 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.050117112 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.052083395 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.051539919 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.053769409 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.050924467 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.053142598 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.058370277 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.060666927 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.050660618 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.053413436 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.051406756 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.051791737 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.197321295 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.051003435 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.050500633 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.051503651 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.050888033 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.057139671 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.050736403 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.049943134 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.0500191 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.050305184 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.049287889 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.048654603 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.049445866 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.051483198 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.055078839 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.048593649 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.048649763 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.051598861 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.04961027 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.052122106 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.053153353 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.048837839 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.048105807 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.047939623 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.059615317 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.073564381 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.048135677 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.048680899 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.055665822 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.049032151 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.047891709 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.052059679 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.05707519 seconds)
  done (took 102.672751798 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.049824245 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.048113399 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.048291265 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.048295401 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.048632367 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.048792169 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.047860898 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.048523281 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.048152336 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.048499141 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.049377999 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.049505736 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.049378304 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.04916288 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.048291699 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.04994586 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.049079217 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.049730249 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.049492359 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.048694795 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.049290269 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.049613067 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.049423352 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.017979942 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.050191753 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.049745456 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.049444001 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.049768891 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.049836927 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.050924976 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.049651987 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.049605739 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.050098981 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.051423441 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.051483647 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.049475314 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.050409789 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.050731975 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.049496937 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.051552123 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.050100411 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.050755379 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.050152937 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.05000015 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.051511638 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.050956696 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.051331444 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.05009313 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.049884122 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.051627936 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.051116923 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.050956702 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.050438449 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.051252275 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.051825919 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.050690851 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.050560937 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.051529349 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.051203994 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.052118416 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.050866706 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.051245371 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.051055967 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.052037139 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.046329575 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.046759689 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.046485779 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.04592273 seconds)
  done (took 141.330415344 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.042579389 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.041803697 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041933032 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.042151785 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.04344791 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.040812335 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.040911794 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.041172209 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.041394821 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.043042611 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039964033 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.040054918 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.039860678 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039394568 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.041148758 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.039261055 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.040018113 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039679707 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.040081871 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.040798667 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.039278353 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.038676762 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.039182972 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.040121801 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.040383942 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.038466549 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.037587614 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.037872089 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039155249 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.037674033 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.037585702 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.038010618 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.037678654 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.038028302 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.03808188 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.037432706 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037098605 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038553522 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.03750179 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.038644353 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.037350135 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.037476106 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.038216388 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.037902104 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.037214674 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.036136599 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.03648586 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.036987497 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.038580696 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.03671924 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.036445449 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.03640168 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.036895315 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.038192731 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.036641972 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.036120644 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.036425054 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.037760577 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036064709 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.036277505 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.036987778 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.03672685 seconds)
  done (took 128.375429169 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.03653927 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.035566585 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.036888585 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.035526855 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.03665592 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.036474612 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.035638168 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.036266979 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.036909992 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.036268792 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037186211 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.035747329 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036262625 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035246166 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.03576308 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038751601 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035309236 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035005767 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035944198 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035410396 seconds)
  done (took 42.68328959 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.034970753 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.035617318 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.035162378 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.035786182 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.03626947 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.034793592 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.034890503 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034859545 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035008789 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035283106 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.034766226 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.03531757 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034528067 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.036139848 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.035768914 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.035027608 seconds)
  done (took 34.523709313 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.034827584 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.034969111 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.037057406 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.03514542 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.03509228 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.030697258 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.035852399 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.034149122 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.033813747 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.034527996 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.034462779 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.035057913 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.034044591 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.035052135 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.034619811 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.033865176 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.035602326 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.033884827 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.034542096 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034671511 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.034762005 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.035204031 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.033256519 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.03439538 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.034382247 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.03457798 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.035218044 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.033823563 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.033383822 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.033953163 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.033264105 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.035140429 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.033161754 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.0345366 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.033357504 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.034015907 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.034658276 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.032963014 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.032603499 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.033026569 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.033918065 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.034954573 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.033804011 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.033030813 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.032964727 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.033301186 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.034864169 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.033090281 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.033530533 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.034042631 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.03345231 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.006322414 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.029494942 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.032420709 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.032763138 seconds)
  done (took 113.803835814 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.034075896 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.033151669 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.033373455 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.03363215 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.033472925 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.033596579 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.032861204 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.033013855 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032613322 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.033169242 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.020187514 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.03273766 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.033054599 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.032899895 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.034706021 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.019943422 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.032500982 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.033102002 seconds)
  done (took 38.529290505 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.035236042 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.032969444 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.001957909 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.032884102 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.033812281 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.033542207 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.03224264 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.033982142 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033895743 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.032595363 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033446311 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.032821143 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.032538953 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.033211453 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.031902438 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034267013 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.032297647 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.032187044 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.033674308 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.032589049 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.032593944 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.032404366 seconds)
  done (took 46.654016664 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.033643092 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.032733919 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.047831351 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.0509032 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.051965143 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.062486861 seconds)
  done (took 14.236042301 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034230864 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032864419 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.034673181 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0331168 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032839066 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034036618 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03263655 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033383041 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033581185 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033787224 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034666388 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033647604 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033804512 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033416746 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033527003 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03418713 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033922396 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033614139 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033555185 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034080164 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034649496 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033195773 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034850602 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034319123 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033579862 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032465617 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03355707 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03477399 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034540407 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035086648 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034853096 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034128738 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034531196 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034979134 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035439416 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034905785 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023969423 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034332397 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034891917 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033943225 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.03486416 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035397427 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035460796 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034295813 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035924551 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035246152 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035576138 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035974871 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0349762 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036983158 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03604142 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036266077 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03470658 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036523804 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036761794 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035779531 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03705865 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035839374 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036711773 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038245896 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036273577 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035503968 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037343908 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036127525 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037210702 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036842888 seconds)
  done (took 136.248302783 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036484323 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.036361328 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024859352 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036653005 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037535516 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036924707 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036855331 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03840725 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038146203 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037509158 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036356608 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037041781 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038425238 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037473437 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036533101 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03695941 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037121676 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037851932 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03862518 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038329161 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.0344461 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038709109 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037956181 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037819462 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038271268 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038018751 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039409129 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038072044 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037681236 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037061463 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038980185 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036794804 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038464032 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.038179408 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038325893 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038538598 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040212474 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039068467 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039075376 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038682034 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039101898 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027356776 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03859196 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039115894 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039537773 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039358112 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039531116 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038969297 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039593319 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032753699 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039141366 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040724483 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041187669 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040596228 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039207938 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039550755 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030030795 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040472163 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039574137 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039586333 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03939552 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041381288 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039443457 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039261198 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025336916 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039768535 seconds)
  done (took 136.44925635 seconds)
done (took 2828.28757274 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.151561413 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.151949548 seconds)
  done (took 16.267250112 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.207656949 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.102517902 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.227984486 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.156983189 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.051798702 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.046376531 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.042050303 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.046236354 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.136794657 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.041753394 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.061601026 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.042837031 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.04482056 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.043921858 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.045027326 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.042692598 seconds)
  done (took 55.308138754 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.043816563 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.045464226 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.045751993 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.043043121 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.054457185 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.120618628 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.067986235 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.050539222 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.057224165 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.07965208 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.062753845 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.051808295 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.040987822 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.049631352 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.107959025 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.091837853 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.103295399 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.116696041 seconds)
  done (took 39.19741111 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.119838227 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.052948967 seconds)
  done (took 11.140238959 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.074000226 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.042610314 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.077491863 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.058073606 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.047795309 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.04714471 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.085755515 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.080842702 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.062083735 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.074190866 seconds)
  done (took 72.615807213 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.049572594 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.045538177 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.356924328 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.054358467 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.050596208 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.072081476 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.046451913 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.075417298 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.050016395 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.043730529 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.055302024 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.360870831 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.057007001 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.04862941 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.476958673 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.055705944 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.053450751 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.077745052 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.076951082 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.04609408 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.053443265 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.050625084 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.21113574 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.769791986 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.046617278 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.045495348 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.055401873 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.046077126 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.046568085 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.049062861 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.049246503 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.047764278 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.049876741 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.045786937 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.05476063 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.05034249 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.525055094 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.063828106 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.053088818 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.133633919 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.088197218 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.052711459 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.814472714 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.049850532 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.04563327 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.054292368 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.724078136 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.132972625 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.032142556 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.207622835 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.380182982 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.059945512 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.21788707 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.188716894 seconds)
  done (took 142.615910608 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.043983405 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.278568735 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.196015755 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049089776 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.300646104 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2565553 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.048832009 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.090298582 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.049782933 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.247359922 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.296894868 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.14790028 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.04679867 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.04611958 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.043424565 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.047358373 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.189083927 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.112988323 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.049864629 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.04481987 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072583277 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.247073639 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.169591793 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.048754762 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.070460542 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.251920022 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.168249391 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.146104792 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.829430861 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.046391783 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.107742319 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.047490087 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.047660555 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.048382895 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.199915999 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140363677 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.127925781 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.051100129 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.042888104 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045632783 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.718274581 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244339139 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.139147879 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.16841614 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.297594858 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.258252489 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.657487374 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.039722061 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.670582145 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.206749018 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.247085059 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.257675803 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.160985781 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.046150684 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.327807744 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.044016247 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046945747 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.262934736 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.259109054 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.146833539 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.045880529 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.042453499 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.041760524 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.287796448 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.04732044 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.136811761 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.04780732 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.048098965 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.133892824 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.145013504 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.273809856 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.263338289 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.074997385 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.356402001 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.536170219 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.24521683 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.104830524 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259949521 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.044348718 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.038064779 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.117237443 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.871797256 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.296462005 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.282421125 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.236263068 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.068874286 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.692663277 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.043621361 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.232198401 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.234070367 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.274965673 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.290348715 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.278185303 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.371270256 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.048394659 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.043102238 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.396256837 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.160685586 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.987223529 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.396218968 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266798012 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.576050674 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.06842663 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.328490054 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.175023733 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.045725446 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.690272224 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.048757166 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.248565646 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.08729174 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.04755661 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.040518541 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.238353517 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.951647872 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.046302803 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.745776715 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.107076158 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054242322 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.255666664 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.050909912 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.297343283 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.050698616 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.282221126 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.635007749 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.076902084 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.223488432 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.292559116 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.678989442 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.361164435 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.281812814 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.162376075 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.270535162 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.844820373 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.052885108 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.308381063 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.054918796 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.046911085 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.216986828 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.053835915 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.195949055 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.052721087 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.319124348 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.069703612 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277509886 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.054804347 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.292342471 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.081802031 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.102940059 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.05310366 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.177808297 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.054096231 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.990758076 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.211879074 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.057058148 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.049978472 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.639988269 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.052811474 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.205009618 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.277447885 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072371124 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.122414298 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.615661121 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.051464007 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.136025433 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.070922536 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.328600788 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.05007233 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.300539588 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.00030397 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.52793534 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.055609797 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.289167995 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.233303118 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054557477 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.049150482 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.888043845 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.049719404 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.049122929 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.203993024 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.435509597 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.969008319 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.245339569 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.049589361 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.168892828 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.047674724 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.126505136 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.391569717 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.044054882 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.052757303 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.046686275 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.046162292 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.049022262 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.254178357 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.074144159 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.480730739 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.184970822 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.305377044 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.351391041 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.247599401 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.082615328 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.048236264 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.265908899 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.049055341 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.104316529 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.047367442 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.065340008 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.274084396 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.046434723 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.249858182 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.278592292 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.932993611 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.093481535 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.045589507 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.04597524 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.960946389 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.193120163 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.130221672 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.047279662 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.047299173 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.164033825 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.163520698 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.226387427 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.875618178 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.234371179 seconds)
  done (took 941.041993309 seconds)
done (took 1280.158200093 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.047428333 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.049192151 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.052742248 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.05126472 seconds)
  done (took 30.169082785 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.049619895 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.04994558 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.049762774 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.050341903 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.050374089 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.049466072 seconds)
  done (took 14.272173613 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.050257485 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.049477455 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.050225661 seconds)
  done (took 23.121690404 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.474660607 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.449434069 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.118679787 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.187282944 seconds)
  done (took 11.200500459 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.054948366 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.0509131 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.051136967 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.049917415 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.050763342 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.05175955 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.052060597 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.052423091 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.050613604 seconds)
  done (took 20.441476175 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.298930731 seconds)
done (took 105.478645878 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.059874915 seconds)
    (2/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.057926354 seconds)
    (3/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.306860796 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.128269225 seconds)
    (5/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.362053017 seconds)
    (6/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.615997792 seconds)
    (7/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.366959801 seconds)
    (8/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.361310214 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.90806341 seconds)
    (10/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.266161205 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.198806563 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.082889502 seconds)
    (13/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.704551959 seconds)
    (14/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.172463086 seconds)
    (15/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.844409634 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.079963206 seconds)
    (17/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.1445899 seconds)
    (18/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.061200042 seconds)
    (19/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.718255676 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.209439319 seconds)
    (21/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.913340237 seconds)
    (22/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.14521209 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.635029475 seconds)
    (24/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.622584437 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.075633638 seconds)
    (26/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.070732327 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.374991631 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.455782456 seconds)
    (29/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.059733534 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.075251632 seconds)
    (31/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.422948491 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.076674485 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.188690326 seconds)
    (34/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.161874555 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.422964646 seconds)
    (36/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.258709933 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.074756094 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.061088125 seconds)
    (39/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.354326586 seconds)
    (40/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.977078881 seconds)
    (41/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.191903583 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.155866603 seconds)
    (43/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.594896575 seconds)
    (44/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.621450447 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.10184813 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.151099212 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.290870822 seconds)
    (48/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.028491522 seconds)
    (49/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.022155534 seconds)
    (50/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.073865265 seconds)
    (51/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.382622966 seconds)
    (52/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.457603771 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.927999296 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.478972616 seconds)
    (55/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.06091344 seconds)
    (56/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.163010605 seconds)
    (57/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.164634483 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.982460058 seconds)
    (59/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.827057094 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.496434705 seconds)
    (61/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.062502191 seconds)
    (62/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.61725536 seconds)
    (63/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.392345474 seconds)
    (64/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.344892436 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.161100747 seconds)
    (66/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.131003758 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.310756264 seconds)
    (68/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.770763383 seconds)
    (69/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.571108791 seconds)
    (70/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.276410478 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.198500878 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.392964285 seconds)
    (73/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.244883614 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 5.7301605 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.305135838 seconds)
    (76/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.12673466 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.145684213 seconds)
    (78/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.321365905 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.761403685 seconds)
    (80/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.071940529 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.144938345 seconds)
    (82/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.148467173 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.343129405 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.072077933 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.174064021 seconds)
    (86/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.143338123 seconds)
    (87/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.057949363 seconds)
    (88/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.338311633 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.76560957 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.074396919 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.759198381 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.899724547 seconds)
    (93/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.069364813 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 4.487120431 seconds)
    (95/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.067026793 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 4.096679032 seconds)
    (97/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.459031373 seconds)
    (98/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.201511426 seconds)
    (99/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.416314622 seconds)
    (100/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.534609509 seconds)
    (101/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.40960047 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.937308322 seconds)
    (103/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.337642489 seconds)
    (104/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.350433484 seconds)
    (105/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.299466361 seconds)
    (106/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.079027968 seconds)
    (107/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.160354721 seconds)
    (108/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.268403559 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.071211549 seconds)
    (110/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.429831187 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.377401926 seconds)
    (112/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.849754631 seconds)
    (113/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.355935476 seconds)
    (114/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.281863455 seconds)
    (115/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.840944039 seconds)
    (116/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.265566642 seconds)
    (117/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.363751749 seconds)
    (118/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.335534158 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.364692818 seconds)
    (120/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.759919001 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.40715027 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.928901696 seconds)
    (123/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.070588765 seconds)
    (124/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.081665005 seconds)
    (125/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.077611219 seconds)
    (126/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.477274937 seconds)
    (127/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.44572356 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.090832074 seconds)
    (129/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.839122688 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.096943868 seconds)
    (131/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.067739589 seconds)
    (132/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.324305916 seconds)
    (133/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.386104617 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.198815257 seconds)
    (135/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.150097683 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.308748477 seconds)
    (137/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.148352061 seconds)
    (138/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.696524677 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.296186733 seconds)
    (140/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.171366916 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.327279348 seconds)
    (142/341) benchmarking ("sort", Float64, false)...
    done (took 5.77732299 seconds)
    (143/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.140284981 seconds)
    (144/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.12566323 seconds)
    (145/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.361417302 seconds)
    (146/341) benchmarking ("sort", Bool, false)...
    done (took 2.282450542 seconds)
    (147/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.217888559 seconds)
    (148/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.188481477 seconds)
    (149/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.484845756 seconds)
    (150/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.196613883 seconds)
    (151/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.38627503 seconds)
    (152/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.072990779 seconds)
    (153/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.304184014 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.943550195 seconds)
    (155/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.553019418 seconds)
    (156/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.070009331 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.183570882 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.082352037 seconds)
    (159/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.057768438 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 5.79522671 seconds)
    (161/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.083643631 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.069940796 seconds)
    (163/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.183658538 seconds)
    (164/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.084229886 seconds)
    (165/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.269979412 seconds)
    (166/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.240893583 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.375705344 seconds)
    (168/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.291094314 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.934491797 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.059005269 seconds)
    (171/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.167767258 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.071681174 seconds)
    (173/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 3.829800106 seconds)
    (174/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.377544203 seconds)
    (175/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.751479537 seconds)
    (176/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.9506672 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.395847226 seconds)
    (178/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.072570538 seconds)
    (179/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.212850046 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.204179468 seconds)
    (181/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.154897683 seconds)
    (182/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.256321495 seconds)
    (183/341) benchmarking ("sort", Int8, false)...
    done (took 5.027623791 seconds)
    (184/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.23267436 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.459021484 seconds)
    (186/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.183879453 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.089952993 seconds)
    (188/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.032419182 seconds)
    (189/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.67619953 seconds)
    (190/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.23942883 seconds)
    (191/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.223512475 seconds)
    (192/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.490014944 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.219058524 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.070907817 seconds)
    (195/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 8.558938549 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.954346569 seconds)
    (197/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.499876911 seconds)
    (198/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.476886412 seconds)
    (199/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.461157695 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.070578097 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 4.12827784 seconds)
    (202/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.081164322 seconds)
    (203/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.082417953 seconds)
    (204/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.071301208 seconds)
    (205/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.179743108 seconds)
    (206/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.080481799 seconds)
    (207/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.171240066 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.075032253 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.486906675 seconds)
    (210/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.19120769 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.0737533 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.140896959 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.208354191 seconds)
    (214/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.072104068 seconds)
    (215/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.142921937 seconds)
    (216/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.160284159 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.091684826 seconds)
    (218/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.2997538 seconds)
    (219/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.172120272 seconds)
    (220/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.07266527 seconds)
    (221/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.776519826 seconds)
    (222/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.160435973 seconds)
    (223/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.200731264 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.226197058 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.088897147 seconds)
    (226/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.072096111 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.285733177 seconds)
    (228/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.163793159 seconds)
    (229/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.46366343 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.827890202 seconds)
    (231/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.27469353 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.353135493 seconds)
    (233/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.081034157 seconds)
    (234/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.877018933 seconds)
    (235/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.086016546 seconds)
    (236/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.083982707 seconds)
    (237/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.968498993 seconds)
    (238/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.100031091 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.096599776 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.146107046 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.697322898 seconds)
    (242/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.091456862 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.365429398 seconds)
    (244/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.074829952 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.231091096 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.174655626 seconds)
    (247/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.15098307 seconds)
    (248/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.305239773 seconds)
    (249/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.208986512 seconds)
    (250/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.085235064 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.389132049 seconds)
    (252/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.156995766 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.089179928 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.126311622 seconds)
    (255/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.397507692 seconds)
    (256/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.366175277 seconds)
    (257/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.270056793 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.103745768 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.151238009 seconds)
    (260/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.148257299 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.168180448 seconds)
    (262/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.191494514 seconds)
    (263/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.198449965 seconds)
    (264/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.085829568 seconds)
    (265/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.086153905 seconds)
    (266/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.208808794 seconds)
    (267/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.191207879 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.781439454 seconds)
    (269/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.399444199 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.848174789 seconds)
    (271/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.393846886 seconds)
    (272/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.165518664 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.238216024 seconds)
    (274/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.377580875 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.081256904 seconds)
    (276/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.372243226 seconds)
    (277/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.987521844 seconds)
    (278/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.082112325 seconds)
    (279/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.719932584 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.188494793 seconds)
    (281/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.157765776 seconds)
    (282/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.078024984 seconds)
    (283/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.114710021 seconds)
    (284/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.206061154 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.079070964 seconds)
    (286/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.204497307 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.38417478 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.822314639 seconds)
    (289/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.013461895 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.173565544 seconds)
    (291/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.178789207 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.842868521 seconds)
    (293/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.424606855 seconds)
    (294/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.091709913 seconds)
    (295/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.218339656 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.206472648 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.472093484 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.284435703 seconds)
    (299/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.15916225 seconds)
    (300/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.362966897 seconds)
    (301/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.612588306 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.476482636 seconds)
    (303/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.415771555 seconds)
    (304/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.68645067 seconds)
    (305/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.349982312 seconds)
    (306/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.361248832 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.227398305 seconds)
    (308/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.503936861 seconds)
    (309/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.507359182 seconds)
    (310/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.140521472 seconds)
    (311/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.828773209 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.477146612 seconds)
    (313/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.094706823 seconds)
    (314/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.313298533 seconds)
    (315/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.32827949 seconds)
    (316/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.559328186 seconds)
    (317/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.197248587 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.25594973 seconds)
    (319/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.209112637 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.069904792 seconds)
    (321/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.078249409 seconds)
    (322/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.544492436 seconds)
    (323/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 3.588476698 seconds)
    (324/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.276070796 seconds)
    (325/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.129850782 seconds)
    (326/341) benchmarking ("sort", BigInt, false)...
    done (took 7.079180936 seconds)
    (327/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.187716971 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.382799413 seconds)
    (329/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.319988318 seconds)
    (330/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.274731384 seconds)
    (331/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.372551497 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.082814425 seconds)
    (333/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.506211537 seconds)
    (334/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.468141616 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.192894547 seconds)
    (336/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.240390484 seconds)
    (337/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.084410409 seconds)
    (338/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.086008446 seconds)
    (339/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.35381391 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.331522768 seconds)
    (341/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.233703444 seconds)
  done (took 1160.075014287 seconds)
done (took 1162.161294156 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100781838 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.081582615 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.572951237 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.091294728 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.083882222 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.06997615 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.581796574 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.111470478 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.098504611 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.585297263 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.09760738 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.088547329 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.103717948 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.116851029 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.09508053 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.103325289 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.09478236 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.114186518 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.116739002 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.095211567 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.134687522 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.094641459 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.088741291 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.140059049 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.082793254 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.097240984 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101971039 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.133939461 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.134659134 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.086073223 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.094387815 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.440037101 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.134985565 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.093088923 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.094964588 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.104550971 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.088682652 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.10514292 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103260864 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.104626768 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.084466234 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.099410309 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.093108342 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.075903012 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.089950115 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.08969716 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.091070276 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.209095378 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.104273667 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.421588706 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.138968624 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101938768 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.136911932 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.087219555 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.092132149 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.087598048 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.13534627 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.092690415 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.09616655 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.421838694 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.173020059 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.099567883 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.424005643 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.141948284 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.102304699 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.100642738 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.089696761 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.10361494 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.43912375 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.619656205 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.122689565 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.107825562 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.092065505 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.09387128 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.1064741 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.58249605 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.105926098 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.653500792 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.114882576 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.100283739 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.091719249 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.094730226 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.092836699 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.102651801 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.105092258 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.091493597 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.098374921 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.09280306 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.106842262 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.442641862 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.132571974 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.566651739 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.100993372 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.108412326 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.105389731 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.653997064 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.117178287 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103939869 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.091061627 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.442223156 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.130599604 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.106574866 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.095620713 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.098763752 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.201732178 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.106421334 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.106715888 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.09304824 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.112003703 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.100109613 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.075004709 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.108244837 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.107173255 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.12184889 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.106410675 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.092687353 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.102503501 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.093751288 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104967764 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.101272998 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.101392942 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.099353092 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.088076703 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.146066763 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.106438258 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.110394544 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.20403234 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.094878623 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.216009005 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.103655567 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.101039684 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.094685938 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.427156382 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.131910073 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.113849351 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.102859604 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.119020271 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.104955126 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.106408837 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.097080664 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.110802477 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.092447272 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.146956591 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.090099886 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.119560364 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.136983876 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.110797006 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.102281223 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.106994234 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.123744639 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.110772263 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.102294973 seconds)
done (took 328.928444018 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.135366894 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.090546901 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.16393286 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.089214647 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.157766813 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.146063469 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.088149618 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.064640599 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.091045387 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.47272116 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.09016952 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.095881592 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.088914068 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.090708027 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.139235082 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.091314747 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.090654945 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.32268165 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.089892317 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.149894097 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.091034517 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.091742011 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.091486832 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.472326409 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.092150161 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.090456821 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.150621665 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.090906216 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.331210155 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.087226339 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.091478502 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.330384074 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.139611851 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.103653782 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.097999018 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.098561463 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.158286495 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.103422064 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.137148777 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.138204003 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.167314396 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.125036982 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.092274569 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.090792504 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.097969392 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.092480011 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.091829387 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.122604226 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.092682542 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.099102121 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.325004257 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.098235746 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.100196054 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.092957368 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.092325358 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.106040397 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.093639974 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.092793836 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.152164991 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.091876653 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.138827863 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.481588072 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.473221067 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.093304598 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.094057964 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.093962524 seconds)
  done (took 198.441464629 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.160690388 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.177308753 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.159302687 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.097758621 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.144354034 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.161161632 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.097710929 seconds)
  done (took 17.012833837 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.100047095 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.093489533 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.096340296 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.116734808 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.094131749 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.232848342 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.106598713 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.099248534 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.120080215 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.094163722 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.43085407 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.118372886 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.10107621 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.092340792 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.10649247 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.123913725 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.096280831 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.095136979 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.19230502 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.173019675 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.100274275 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.103100266 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.123984066 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.105958865 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.094882662 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.095169361 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.095246989 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.101973796 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093783145 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.09558178 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.09615801 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.107761354 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.094372408 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.093875091 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.095549993 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.062248392 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.096441041 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.095464519 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.095224748 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.096201963 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.09514207 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.096104562 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.097249135 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.096613782 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.094963647 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.119534799 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.096708101 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.09772327 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.096585009 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.09620457 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.127141411 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.092597512 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.096781234 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.102501955 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.123785347 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.104477485 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.095336383 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.097313483 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.097742334 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.096375637 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.096012321 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.177099249 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.12031647 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.09902796 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.11972159 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.136304556 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.092625723 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.073260162 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.096208478 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.120050925 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.09766474 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.121121984 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.097757278 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.19380867 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.097671341 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.237687233 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.120854649 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.100855454 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.101865515 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.098480183 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.106840447 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.097509543 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.097708653 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.103956853 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.103446472 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.097926675 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.098045891 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.094392897 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.105809675 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.099309373 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.145708277 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.099571272 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.099115857 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.195469226 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.099596118 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.194518328 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.12528693 seconds)
  done (took 227.027939645 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.104907454 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.10041763 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.109567437 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.099738319 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.100454481 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.089706262 seconds)
  done (took 14.622660155 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.087490934 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.090531477 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.088699595 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.088471781 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.085780275 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.087917692 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.087042447 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.088719862 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.091106777 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.086042968 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.090835571 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.089137138 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.091144548 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.089447087 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.087929216 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.087803729 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.0916676 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.085877301 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.090459147 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.088825277 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.292743819 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.090849534 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.094397582 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.093791264 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.095692312 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.087491151 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.097491784 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.092370012 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.088811276 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.093025841 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.09946947 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.089085248 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.093818095 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.094176879 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.09499712 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.095077689 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.093756097 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.092809922 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.089115346 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.093431822 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.092635783 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.09006165 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.090667896 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.094863702 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.091749348 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.098184965 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.095403215 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.100541182 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.091072184 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.090637272 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.090194497 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.094249087 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.091232155 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.094903745 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.092353546 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.096783244 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.093628087 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.090492975 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.091651069 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.094715451 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.096693431 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.093269681 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.09153723 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.09783753 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.099510304 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.097848617 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.094770258 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.103834659 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.092121686 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.091098401 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.094229285 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.09583995 seconds)
  done (took 153.858980187 seconds)
done (took 612.980549968 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.177730893 seconds)
  done (took 9.186171732 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.166318721 seconds)
  done (took 9.276904121 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.399904448 seconds)
  done (took 12.416885502 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.110884142 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.107584719 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.105261492 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.093033109 seconds)
  done (took 30.437004413 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.364928727 seconds)
  done (took 9.377568907 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.100349352 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.087229758 seconds)
  done (took 16.271037327 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.25638269 seconds)
  done (took 9.268566797 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.556899709 seconds)
  done (took 9.604106898 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.099573215 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.112069174 seconds)
  done (took 16.245691221 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.096946743 seconds)
  done (took 9.108100233 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.898129828 seconds)
  done (took 10.003494613 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.098321395 seconds)
  done (took 9.13071842 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.104475296 seconds)
  done (took 9.118020325 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.001582656 seconds)
  done (took 10.01652305 seconds)
done (took 171.474551226 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.103474054 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.094626642 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.097353774 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.09480443 seconds)
  done (took 30.405387213 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.12971514 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.127548612 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.138241297 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.127258797 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.11811558 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.120111161 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.12752907 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.127165328 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.117297855 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.130839836 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.133129389 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.128073207 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.126909213 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.136706185 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.139633276 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.128939857 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.128493894 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.137528133 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.118633366 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.139048932 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.124467883 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.126680374 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.097182865 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.095197766 seconds)
  done (took 53.034753774 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.284269336 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.159046132 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.250621918 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.138805781 seconds)
  done (took 10.842098068 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.094015621 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.160286882 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.144366703 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.13859061 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.179830823 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.199847875 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.148059976 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.306151402 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.21108534 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.223540428 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.103071168 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.115811078 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.118171258 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.143762127 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.201724365 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.094522977 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.093090457 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.207686326 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.158046741 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.362358456 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.095652236 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.147524992 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.187959699 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.146624394 seconds)
  done (took 53.992455205 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.094097312 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.101308799 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.104643156 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.097322517 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.099235828 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.097461775 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.10299736 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.099257416 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.119026549 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.100657597 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.099181028 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.096278973 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.107646521 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.099049875 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.10021229 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.113950701 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.113020343 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.097212587 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.09907941 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.106242315 seconds)
  done (took 44.069779074 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.100817598 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.94138631 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.442114022 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.345661487 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.097314501 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.091991199 seconds)
  done (took 33.031236017 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.108353406 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.114358735 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.102816559 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.124013281 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.138313072 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.103803227 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.15561357 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.256241249 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.099481382 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.15354011 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.113132262 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.100526461 seconds)
  done (took 27.590206542 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.096394708 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.100005474 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.107622598 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.109814863 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.114469136 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.10855626 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.109545314 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.101557104 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.11248838 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.11662248 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.104862333 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.112598445 seconds)
  done (took 47.309388426 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.312271163 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.326649202 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337403779 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.587159625 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.408826019 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.079558302 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.382820871 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.313658511 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.814962384 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.824091859 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392230049 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080377614 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.048759998 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.025510056 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.998514599 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329905748 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10243525 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.957819027 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.363650825 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.153532758 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105159195 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.102203565 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099308063 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.388722336 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42969391 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10159272 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.315233112 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114789554 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100802867 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.322350021 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.451734648 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.147347131 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.303327896 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.359837377 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.445559932 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.149408906 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.208394768 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.158399572 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.134086146 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.140709695 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11136406 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.113714314 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.64356431 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.119094258 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.375147183 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103783548 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.111329676 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.200652867 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028849372 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.41173578 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215928928 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.10189297 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.137915107 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.533920008 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222750333 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345289858 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106982635 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.167667011 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149303788 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.329606849 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.208029553 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.214398624 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319574795 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.030289346 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.506664289 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223929201 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.105277115 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109970383 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.802576787 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.346473481 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.184251938 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.404709246 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.859891955 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.104839582 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105768095 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.148544888 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201637073 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.100396374 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.400912744 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.112373816 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.026370737 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203446994 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.505671722 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10848249 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.103287677 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111500177 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.949310654 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.032576481 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.200069203 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.336636955 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.428322217 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.104218779 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.10696543 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.126945538 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106742679 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055416555 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.545452588 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159950563 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.031801296 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.66925345 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.461843472 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.062426569 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.514355822 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.138796286 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388991911 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262991169 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.50965683 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.316793188 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351815294 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.636867741 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.110647842 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.724709993 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187776475 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182655438 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106959628 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.666387286 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.169852002 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.362232347 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219880949 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.107200608 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.034951821 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.118259006 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310855694 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.465597551 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152179959 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103168822 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.112308517 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.108326087 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.109647678 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.215298952 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123628887 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.405560906 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.182409892 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.107584787 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.04564923 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.108389398 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.392433858 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.573890989 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159213282 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36323913 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.374353203 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.804246828 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.70279586 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.04985273 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.378992936 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.17987423 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183642471 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.706079981 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247543076 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.204705367 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035682895 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.243414274 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.115437693 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.115587066 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.310729644 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.510940672 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.543117412 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.149140094 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.110012087 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.06222423 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.177464674 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340298091 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.197714951 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.136365824 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113042354 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.19311106 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337229079 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.11028353 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.037565686 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365931104 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.359772258 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.402456093 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.523871054 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.199766927 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.180225939 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121488771 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.324399372 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.192154684 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.757999461 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.661272305 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33717887 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.569523135 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.066236697 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.749276111 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.357390657 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.494476199 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128979681 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.563270657 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.179629204 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.683681791 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.135225486 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.635319639 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.036358622 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11605453 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.451899147 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.07436196 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.42418186 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.173986885 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158570802 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.115269141 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.11380566 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11787509 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.04929531 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22069279 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184177562 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185250049 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045989474 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.648282384 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.141745312 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.114526044 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.113379145 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.471738345 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.950705767 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066639888 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.115022654 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190948201 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.865729392 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.659725737 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.113437798 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.116078783 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.711385646 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.117045034 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.700040636 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.122226591 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.997185047 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141963128 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.348382688 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.813243386 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.399556418 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.185307455 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189770218 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.112998553 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114700751 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.815018829 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122359716 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.813989475 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40102792 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.390190098 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.564198584 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.179845247 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.324478599 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.130018406 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.115061837 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.621455182 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.139541546 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1149199 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319634531 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.628948319 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.412719507 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.074647832 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.201303698 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.113403757 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.389254249 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.115000166 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.521720655 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.799579877 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.124874693 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.116585591 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.383809732 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.799118534 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.116974319 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.088506103 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121835662 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.32955863 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.319066476 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40828163 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417278022 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.56823644 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.042426373 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121419663 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.193114411 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.361651982 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.11649121 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151291909 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.559260564 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.197197782 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.544216667 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.397982028 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.475880538 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.74888533 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.38300447 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.181526016 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.128733023 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.776363225 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249616829 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.052210404 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23672862 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.044927979 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.885326958 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410060955 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.132529887 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.388067452 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.097386155 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454403406 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.413504217 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.351687132 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168190079 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.142908994 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.076493761 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170915642 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.119532684 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.205077902 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.224464746 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.125116657 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.545093136 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148386673 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165357616 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.125698635 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.632015313 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.140754121 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119640331 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.812714428 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.140578447 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238511617 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191987925 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.894937958 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.506265299 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.138993062 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.991268907 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.764898773 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391416832 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.173629524 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.57333862 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163532658 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.525001811 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.119742412 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.332468139 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.123302175 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.575166602 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156829786 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.395986947 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0804685 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.331760428 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.336107446 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.148003275 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.123684084 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047207479 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.224612084 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.97780176 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.102217299 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.124942041 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.802197315 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.533548121 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.216644677 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.556423493 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.940468916 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.122784937 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.503378054 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.52167288 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.626144169 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146770235 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122526343 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.420538327 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.253985286 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.416103522 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.397519919 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129706902 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.149561185 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335242694 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246824003 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.041467166 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.595637699 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690479456 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.825769481 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.135827546 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.326216524 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.432978803 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.315841899 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148071356 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198060139 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.527756832 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.39241235 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.19166159 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050620058 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123384535 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.520169518 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.524745455 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.221666427 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36480033 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.447138314 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.569448755 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.480347012 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.439527529 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.543204475 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.566512985 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.536173524 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3408761 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.500381929 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.453483654 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.009127602 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.538234667 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339826704 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222424714 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419471332 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.004466193 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.834597506 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.36968946 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.127044059 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.053086505 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.333445208 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.127858252 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.363881591 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.691814123 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.376257176 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.363113361 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.591524779 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.665275611 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.206191383 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142120523 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.091336122 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.148271282 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145104364 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.127879218 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.600967225 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.416323927 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139247893 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066956048 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.795911796 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.052269203 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.340211181 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.206445469 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.153156221 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683485664 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355474869 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.225022336 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.42448799 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.249657584 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.152312682 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053412939 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.896207105 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.075431876 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.215925043 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.550508756 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143063413 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.130087762 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330330213 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.056310734 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173521939 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.132426805 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331278416 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.721387628 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398146033 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25170211 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.374970173 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435914126 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.017735314 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151317396 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401870673 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.053933647 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.641993841 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82517079 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.172985909 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197355533 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128528481 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130349897 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.400897343 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.429287211 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.228729806 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.595220558 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.150168705 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152282424 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.445149711 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.218704153 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.130172357 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.136431349 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.484526309 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.342520387 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102286606 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.117376143 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.340731195 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201955078 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.32534953 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.204914239 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.647313165 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.135264527 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.011723459 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.229928075 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.078198685 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.079166461 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.916543856 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.191853219 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.127894597 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40590608 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.789693081 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331609646 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.524254328 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.978179496 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.212752935 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163813516 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.132447708 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.133246443 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.517633173 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.434376265 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.129944316 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401507472 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17920611 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.134144331 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.795465543 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.099065641 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.132025792 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.832910329 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.000593462 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.863803516 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.526021208 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.144273345 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151172757 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.134180322 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.057326008 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.129803324 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.306845601 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.1265479 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.135949664 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.503817425 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.428776506 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221552137 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138488776 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.132356605 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.140144026 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.344832235 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.647088672 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147205539 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.83169032 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.336780047 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142326786 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.609383849 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.604234644 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.28419839 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.164182235 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.213024382 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372239295 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.678860145 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.218408087 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.100972986 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357774972 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.135894001 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.406461795 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407194639 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.135960607 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.344450742 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.501650464 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409981354 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.487379676 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.445321151 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.199153149 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.22446688 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.005228476 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.134317227 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.134170048 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.398257738 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18755311 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.132403024 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143214186 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.689542742 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.922579004 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607576877 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.296440435 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.437917585 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.991288017 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.888876087 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.136861279 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.062048415 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134026619 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.15676648 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.139622268 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.062890677 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841501345 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.858197028 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.348842523 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.444569668 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.067652645 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341124716 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.72297791 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.059680411 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.104070203 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.099210738 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.398540613 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062951442 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137593842 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.090319498 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.398836794 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.74502902 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.399860511 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.137302145 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08499227 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138148791 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.138812846 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.138094731 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.222821356 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.136421111 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254703015 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.403127398 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.490687925 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.240811726 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.776872043 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.861038179 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.073722593 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177625976 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.695292223 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.707378256 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.403373194 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.265539856 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.846122187 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.080410909 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.140485364 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156239159 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.394297548 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.138473678 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139859907 seconds)
  done (took 2225.498196371 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.147458121 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.580132847 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.17436268 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.168701301 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.160490093 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.176990951 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.176760302 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.16535257 seconds)
  done (took 59.799933182 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.158760288 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.237271433 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.170039303 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.161073065 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.155581225 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.1683154 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.405723689 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.188211778 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.157053764 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.162621295 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.159864978 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.158804275 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.159281824 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.154535866 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.163668276 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.488167153 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.186070964 seconds)
  done (took 81.513961681 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.220052379 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.03600949 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.160224007 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.838929939 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.168539574 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.525910643 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.158517024 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.160154724 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.27676929 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.455867988 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.164070497 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.178028784 seconds)
  done (took 93.466636548 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.162010014 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.16120214 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.162207577 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.161779358 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.163167271 seconds)
  done (took 12.883587834 seconds)
done (took 2775.516031246 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.402283828 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.258777662 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.233261436 seconds)
  done (took 6.562327272 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.303548353 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.355627875 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.467616556 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.490257443 seconds)
  done (took 11.694738106 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.44771287 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.537170424 seconds)
  done (took 7.056753919 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.593676048 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.165675232 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.551191276 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.163954073 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.163646594 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.166640852 seconds)
  done (took 23.573045333 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.164302438 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.162681942 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.161916557 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.161116217 seconds)
  done (took 10.722640399 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.159510455 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.884745062 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.164269749 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.171265282 seconds)
  done (took 22.452168508 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.377801776 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.192551895 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.93514909 seconds)
  done (took 10.57840557 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.790820119 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.615796838 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.769961975 seconds)
  done (took 10.248280235 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.31178933 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.147181074 seconds)
  done (took 8.532884969 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.300190205 seconds)
  done (took 4.374101389 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.997187874 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.477786497 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.631496405 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.705240523 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.740715286 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.384403874 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.492977869 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.432993344 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.56114737 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.577314912 seconds)
  done (took 28.074929993 seconds)
done (took 160.661552293 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.603343046 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.186776437 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.37205321 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.541541883 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.410795891 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.373116688 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.455231385 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.531993015 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.197945465 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.19560243 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.541587994 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.406753171 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.403759513 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.191683291 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.410333148 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.190718805 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.403559428 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.619507401 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.217415544 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.453262719 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.462671351 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.184155225 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.383485349 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.190241906 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.404303984 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.325914709 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.788551062 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.189575013 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.372282813 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.798580994 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.324232432 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.609711026 seconds)
  done (took 178.81668256 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.041476764 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.16245759 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.16353848 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.16338665 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.463829792 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.163056649 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.162922367 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.162324667 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.472542395 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.456383854 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.163271766 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.442582285 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.165069981 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.162676478 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.165210692 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.164852655 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.576420528 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.0753474 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.163529932 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.164743256 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.166271358 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.324232874 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.164456271 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.365775264 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.567423113 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.164735639 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.164198587 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.162745408 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.164291943 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.164904027 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.164230616 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.165395223 seconds)
  done (took 217.474879737 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.167236297 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.165181998 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.164559467 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.166360198 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.164778723 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.165258666 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.16752658 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.16520973 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.028496972 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.035768408 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.150797631 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.165533738 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.144128317 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.165861264 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.169875831 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.164606799 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.171157246 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.168001568 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.165755321 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.171159819 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.168269233 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.818061951 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.168026752 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.858704722 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.166144869 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.147935062 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.164685063 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.174535715 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.167073928 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.16761609 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.167076127 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.165796995 seconds)
  done (took 230.443853607 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.408126749 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.171836475 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.171460606 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.184418056 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.17227823 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.169471173 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.176643116 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.421776611 seconds)
  done (took 21.958962072 seconds)
done (took 650.789316764 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.534802856 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.908915366 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.299961757 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.192030116 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.421294995 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.238335467 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.189911829 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.250194871 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.839093976 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.26627548 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.584631855 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.196770538 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.891088194 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.218536275 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.306554237 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.244349979 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.536295672 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.795743398 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.329415256 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.847454171 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.390980261 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.121739017 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.269543033 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.8983586 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.595584767 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.139366734 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.209452378 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.539579466 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.194725338 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.427637071 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.845895046 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.459000543 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.206638437 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.191008553 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.244756104 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.234656393 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.387583003 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.20142516 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.302707531 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.912262587 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.845422568 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.715637948 seconds)
  done (took 112.508165181 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.181174388 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.177589463 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.177645865 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.17876179 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.18704049 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.17927176 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.178435937 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.179394198 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.177953396 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.178593892 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.179054639 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.18826515 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.178614968 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.187679899 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.178314141 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.178696024 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.179901634 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.187611035 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.179890922 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.17906054 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.178796371 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.180514841 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.176106166 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.178657891 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.179921549 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.179789914 seconds)
  done (took 58.781707045 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.175227739 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.356059335 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.463846619 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.210965465 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.175071596 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.176652457 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.205236141 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.182009053 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.177198462 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.17820792 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.265948544 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.181047322 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.187533007 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.461596958 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.206803412 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.178051433 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.178439434 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.174977125 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.363364658 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.189501935 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.206601693 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.183907056 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.206240801 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.191180119 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.178648978 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.177337337 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.179528245 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.638611045 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.18953796 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.271415393 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.238334719 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.206115269 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.568708476 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.4723191 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.247803537 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.183483727 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.179893703 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.317527004 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.191135059 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.178322826 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.207434514 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.18686148 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.468254492 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.707787612 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.191749735 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.180498088 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.635595045 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.328272084 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.228060433 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.191584839 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.475516036 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.209550339 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.177232515 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.179200237 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.214710015 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.191364757 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.178062816 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.460925184 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.197489611 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.208073159 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.187485725 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.179367433 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.373455415 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.185374866 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.358906372 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.186229826 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.186757266 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.18064386 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.471355461 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.210207341 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.703961681 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.194544915 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.179704533 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.272303313 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.360623995 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.644990043 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.197537566 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.373836148 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.585874829 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.197013483 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.183160171 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.625330203 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.220292158 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.19005274 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.181702839 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.182044391 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.175618877 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.226588034 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.206481941 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.619396632 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.701438576 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.478688041 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.208477382 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.194596006 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.180635186 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.461706669 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.189986581 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.179366144 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.465379059 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.728944928 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.195073693 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.18724807 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.684660766 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.199166643 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.209520634 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.192893641 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.48527399 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.211590102 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.273099201 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.179866785 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.186349642 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.184219714 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.211322822 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.191127767 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.182362699 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.674621698 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.334684894 seconds)
  done (took 269.414530899 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.185730969 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.177311192 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.180356089 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.178706839 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.178872047 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.182204918 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.179503244 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.181129911 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.182515487 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.180576148 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.17971125 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.182958037 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.185161844 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.182260633 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.217253835 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.184182639 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.670761498 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.179356614 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.18192035 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.181410816 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.756957347 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.188383467 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.184050021 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.18188392 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.179579929 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.183039722 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.18941489 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.183351437 seconds)
  done (took 176.29772223 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.183792471 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.231848236 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.197920967 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.231834903 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.200484215 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.184769503 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.205674544 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.20125857 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.189770206 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.184776924 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.185989492 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.212185822 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.193751393 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.262677173 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.213778541 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.213532092 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.263848612 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.192436794 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.187740909 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.185890516 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.231109014 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.197340221 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.210351882 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.23902323 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.199090412 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.231704118 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.198850721 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.188753645 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.186208193 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.277294234 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.178821445 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.211531817 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.220052827 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.203478218 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.27940165 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.28114246 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.271001251 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.216614701 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.189103208 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.188494937 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.188742867 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.186592124 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.233968278 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.202449085 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.186575166 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.279392195 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.208486155 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.18900398 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.211281613 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.189645172 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.196970254 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.202658246 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.220273694 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.28879444 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.237698667 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.2148758 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.208301564 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.205804147 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.187419993 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.26159858 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.194524768 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.279393638 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.211325861 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.188403133 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.189276947 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.192127053 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.23776422 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.226020327 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.266044807 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.19705597 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.263198154 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.24510181 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.202796423 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.190896307 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.189909169 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.237202551 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.276684723 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.246308223 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.249658479 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.223285162 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.195779516 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.188358774 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.189047038 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.216407282 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.19906516 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.281351285 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.283490637 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.197759801 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.189266759 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.192404411 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.191387553 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.210902263 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.242447414 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.230611236 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.274792021 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.224152726 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.224659726 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.201339141 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.202725966 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.196723514 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.219117565 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.198604432 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.203080551 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.521199292 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.224710279 seconds)
  done (took 235.128232267 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.528301248 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.231499868 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.25859599 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.468742009 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.547927093 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.083003924 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.22956722 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.237641563 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.249330851 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.353808953 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.301874946 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.282710003 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.226327673 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.212127713 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.231286856 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.247823568 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.27039426 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.526752606 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.339814914 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.715189107 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.229705247 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.492825075 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.536022873 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.577929229 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.277212749 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.612415752 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.839884071 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.329412268 seconds)
  done (took 71.542996298 seconds)
done (took 925.761037507 seconds)
SAVING RESULT...
DONE!
