cset: moving following pidspec: 4100
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.986670945 seconds)
loading group "shootout"... done (took 1.118981439 seconds)
loading group "string"... done (took 0.671650705 seconds)
loading group "linalg"... done (took 8.717164514 seconds)
loading group "parallel"... done (took 0.17075025 seconds)
loading group "find"... done (took 2.991184314 seconds)
loading group "tuple"... done (took 2.219490125 seconds)
loading group "union"... done (took 14.995009121 seconds)
loading group "dates"... done (took 1.483774991 seconds)
loading group "micro"... done (took 0.222247674 seconds)
loading group "simd"... done (took 4.818788974 seconds)
loading group "io"... done (took 1.082179771 seconds)
loading group "random"... done (took 9.628851989 seconds)
loading group "problem"... done (took 1.525641312 seconds)
loading group "array"... done (took 25.348294408 seconds)
loading group "misc"... done (took 1.90987135 seconds)
loading group "scalar"... done (took 43.870755436 seconds)
loading group "sort"... done (took 3.348701079 seconds)
loading group "sparse"... done (took 12.834152383 seconds)
loading group "collection"... done (took 18.67660241 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.527308281 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124093838 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128478783 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121768778 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187951828 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121808493 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131201789 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085357908 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.827281463 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139117676 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114987521 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435897152 seconds)
done (took 5.357839819 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166523326 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092279445 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083230013 seconds)
  done (took 1.364651491 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072207051 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061734703 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069341306 seconds)
  done (took 1.394197184 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066791897 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135611457 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067375919 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068391068 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068050563 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067516639 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067965342 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.070702966 seconds)
  done (took 1.740783241 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072042077 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067495178 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.0659658 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067770654 seconds)
  done (took 1.468707585 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065807823 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122940641 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065399031 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065042615 seconds)
  done (took 1.511419608 seconds)
done (took 8.922798977 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140129559 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.833786792 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.766883762 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127618741 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.25315458 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449752367 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124060617 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182665438 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089203712 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075084036 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121501966 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07856181 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.602566924 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399758131 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073097837 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17802788 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.658018762 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089041305 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135441061 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.469111729 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073484377 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088012531 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084744119 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071597823 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.329335805 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152054035 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.662980757 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.181040487 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070511255 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096707173 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.072533193 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078206602 seconds)
  done (took 11.037541269 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093455988 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090435325 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068913906 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124816204 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096915824 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072474003 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077328722 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069857277 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091195478 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126837398 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.094035568 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101220435 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068534149 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071182734 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076672071 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205691281 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082940196 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083789277 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069839258 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082761784 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108184205 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081032133 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080250898 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.079783112 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130903266 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169881943 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096582853 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098551384 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066602652 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079266358 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115242667 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127615167 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069128548 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.070740282 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122126531 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097402449 seconds)
  done (took 4.68338806 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.893584951 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097880103 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085620143 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076213546 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109653521 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115529048 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125438119 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126191443 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102611225 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070683098 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156882034 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.647750834 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.141967672 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071522467 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.098185931 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.122343261 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361985597 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065376456 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070656006 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068380074 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070780365 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069941254 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112853139 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066988669 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177277236 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.581875642 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070675446 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070139097 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096890929 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065676754 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140255508 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092478493 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069977272 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.550681822 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065159915 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063656483 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088592624 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092681549 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066736127 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.17780257 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.08005963 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067406758 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108616097 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080411035 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.491946858 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07078543 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.566757203 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225221144 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073268547 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071887418 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102738898 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064467797 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068135393 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.96854309 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125408238 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068439136 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.275751186 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069980806 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070322823 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071562178 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102845089 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069086661 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070409181 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074945326 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098999257 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.786411707 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090052599 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098032412 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06908232 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.488597415 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.079582912 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.086551715 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071170172 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071507276 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086159731 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.113026273 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066603037 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066082985 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106612726 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.088970195 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089651247 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069781398 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068243922 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067593878 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325396748 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.165283505 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066873854 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067685815 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479237134 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064123019 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066481319 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067665148 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088934501 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066579814 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064029327 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064821461 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099061076 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066846773 seconds)
    (98/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063425981 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.804518668 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070434812 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.46080574 seconds)
    (102/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066677134 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068501687 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103259045 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119252157 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06852311 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.097614983 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069640258 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065369493 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073713639 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066050937 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064772625 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06957902 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066974661 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06876772 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071020384 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069927036 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069477432 seconds)
  done (took 23.175733358 seconds)
done (took 40.990336819 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312252384 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080828771 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080936642 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080881893 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.08105608 seconds)
  done (took 1.875655015 seconds)
done (took 3.207598525 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132473329 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.094448016 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064537957 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100804076 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069158518 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101777072 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108827546 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104497009 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068754824 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068678877 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068757033 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.101996646 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104617878 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068597239 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098039096 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104035915 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069018153 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065043455 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068701393 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069476118 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.073886235 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066567262 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070487578 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070844711 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101611545 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070921855 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065016505 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099503882 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069034008 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098268272 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069392894 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069396092 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069077202 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100111256 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069167562 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099315638 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064713516 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069132075 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070006438 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070719182 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070180117 seconds)
  done (took 4.624280953 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071453007 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081715698 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083383207 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063604261 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073357764 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083294868 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063090373 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083818373 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088294528 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084650075 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083856624 seconds)
  done (took 2.14683251 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070714444 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083643903 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084347853 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062837756 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073549599 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086372192 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063222774 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083838017 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08649614 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08545385 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085852664 seconds)
  done (took 2.134838128 seconds)
done (took 10.165558271 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096762883 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065869362 seconds)
  done (took 1.414380415 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.21974873 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.620304596 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.375956509 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093327704 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072514955 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086154102 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201773362 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067535247 seconds)
  done (took 8.173122549 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.10299819 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068927682 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068195736 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.0679193 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068392395 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068783008 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069874335 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067820649 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069290899 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069530078 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072283094 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072003115 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072226843 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071422046 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069351033 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069901162 seconds)
  done (took 2.508086552 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103578954 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069887288 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10216929 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064054677 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07380919 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064526418 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072803317 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075184318 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071806613 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072962069 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074559456 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072675763 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073130951 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07362388 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074566678 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075126449 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074838269 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.0722536 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074691122 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075770489 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075096114 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075487084 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075802186 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073713435 seconds)
  done (took 3.193481605 seconds)
done (took 16.559287043 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174850939 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074685411 seconds)
  done (took 1.509815221 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067771376 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068909609 seconds)
  done (took 1.412981645 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073414611 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061143797 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07825718 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070259204 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061743949 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061735652 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077638362 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06365277 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06305537 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062165988 seconds)
  done (took 1.948099151 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063435882 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06931536 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067282169 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064618901 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067381374 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063282049 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065955094 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063795008 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071218338 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064171122 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068009 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085387267 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066254432 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083895316 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065474867 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06650433 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067787475 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065145449 seconds)
  done (took 2.508471165 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061828574 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062519787 seconds)
  done (took 1.407987494 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064586896 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063282911 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064527859 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064213787 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06250206 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061717119 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062438283 seconds)
  done (took 1.721208571 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419986088 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122241459 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340465191 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068771326 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076597378 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255381146 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064180753 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070328989 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069890184 seconds)
  done (took 2.810218605 seconds)
done (took 14.608992831 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082597075 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181417446 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087719252 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405550778 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091014294 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067436003 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113430899 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175078452 seconds)
done (took 2.510548753 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.21566778 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.166771522 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.368478048 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124920958 seconds)
  done (took 2.950699176 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.33308214 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078798455 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076542956 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067615559 seconds)
  done (took 1.855821136 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064589937 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071705333 seconds)
  done (took 1.428858446 seconds)
done (took 7.755776211 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072640906 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091683632 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061966282 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.068521884 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065882782 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064344703 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064723716 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065398007 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.074644761 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065978443 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063869579 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066692404 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.06635355 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066264749 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065703628 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065552928 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065633412 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065653276 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065797537 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064954529 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065806406 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066275099 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064805148 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065886541 seconds)
  done (took 2.937668531 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079437257 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065917907 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067044256 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067002616 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067398059 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067633113 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067546223 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066965011 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068925772 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067290102 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069238294 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069032169 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067130886 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069693419 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067080146 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06951681 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06887548 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067450789 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067342038 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069197085 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069040851 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068079679 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069778605 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06883485 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068622705 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069251501 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067279675 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067606301 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068591779 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06935769 seconds)
  done (took 3.367121409 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066082869 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061141756 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062048683 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071642944 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061887995 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062397568 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062135608 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06167013 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061942262 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062805759 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062447873 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062017251 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062289653 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061532612 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061900628 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062162314 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06649355 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081113417 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061857718 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061556522 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065986713 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061890627 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061553863 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061862339 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062897409 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062039747 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062093676 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062570699 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061817288 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062532838 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061969795 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065665765 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066910393 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062056975 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072237189 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066626732 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061917947 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065691961 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063148841 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061279325 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061698557 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061869063 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061544014 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061687428 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071995038 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06209251 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063046986 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.065893772 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062645791 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061810936 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062030224 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063733244 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067171077 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062847478 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061874313 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062647929 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061206159 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061948307 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061455648 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061497672 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061839099 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065140136 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063060443 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062641225 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081518236 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063204931 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071980662 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061574474 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062742673 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065370544 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062179284 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080117514 seconds)
  done (took 5.920333653 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071765397 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072462329 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079189129 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06996433 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064778239 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061443414 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065426831 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061283027 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070737123 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065594826 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061337245 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064797785 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070256159 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065590855 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062289502 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070492168 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065341173 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064403278 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061523202 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065609522 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062850791 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06491913 seconds)
  done (took 2.786271197 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135001813 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066280137 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10586511 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074338218 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068800548 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074513502 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066722942 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0661758 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067681752 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068254153 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06883913 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068412959 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07067271 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068393281 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068720911 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06816823 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067916787 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068589511 seconds)
  done (took 2.65242368 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077399566 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066134409 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089703155 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066534302 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066221708 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066176799 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069319357 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07017745 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065728713 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067515317 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.07171542 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067542905 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067519158 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067893408 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067176475 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067775714 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067386755 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06812574 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071819366 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071465348 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071857401 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071936406 seconds)
  done (took 2.853250044 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077351684 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064701834 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080140522 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066817387 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060266936 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060791054 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066511157 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066149911 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067485583 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066328068 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067089836 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062191642 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068166726 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067261939 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068909573 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066629135 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066162817 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067141826 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066502181 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062197493 seconds)
  done (took 2.656142281 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086486546 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063580879 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063008829 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082525386 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063276913 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063808449 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082853992 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063299137 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063583736 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084927395 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063357986 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063645675 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082280574 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084216269 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064736492 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083752904 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0829341 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083893466 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.0638913 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064966322 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087171096 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065588128 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084846963 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064921629 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064210268 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064133038 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063386433 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082430318 seconds)
  done (took 3.349353339 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064654088 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063469127 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064543862 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064285967 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063875533 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064313492 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064490816 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064756128 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06732307 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064584125 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065576264 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065680593 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065887772 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065278887 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065493799 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065493891 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065145417 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065996386 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065795448 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065893362 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065456723 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065579909 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065802 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065969597 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065880211 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065475395 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065906279 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065757302 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065213136 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065471918 seconds)
  done (took 3.280791908 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073063201 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071813222 seconds)
  done (took 1.467212671 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062795515 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077791434 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060102027 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072475076 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069178459 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064479828 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069246134 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068687128 seconds)
  done (took 1.861636224 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06715761 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090794977 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062796812 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062760381 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065708986 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131457011 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074885163 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074010942 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075798652 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065011566 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063162615 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074328209 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06227828 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076876522 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063861218 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071451999 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070110857 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080807327 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07714444 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061836873 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076875116 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064452532 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062297936 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064605763 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064133491 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071238304 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079135675 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076489807 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072139924 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061816858 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082783511 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062633163 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063886826 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072553044 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067226857 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063266194 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100306429 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063290684 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068031952 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06266198 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075200011 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083838638 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077379866 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081277466 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063043058 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063153617 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060832656 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063116432 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064262325 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070232036 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06106181 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068531375 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061154518 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062714157 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07135234 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062161472 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067418566 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070336539 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074734921 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071828629 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069978372 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076690596 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070168193 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068610144 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062143948 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080513501 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062782978 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074557367 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076203302 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062273041 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074278638 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060446114 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059719439 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060829851 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094524925 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063214231 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061878453 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060910964 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061031872 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062385158 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070713244 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065860099 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06850084 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064244456 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076102403 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069943791 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060950713 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066717529 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078947842 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064539178 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060983458 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078087673 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065259435 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061663801 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080304326 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07191724 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063476384 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063710801 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065808304 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075470724 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06305134 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060787471 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071091896 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064211612 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06445072 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066527192 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070429858 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061921456 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071924468 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066950466 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06334739 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060382563 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06627156 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062528717 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060963617 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071483687 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061653278 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075706843 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067944931 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075854966 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076541034 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072597741 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077926537 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061651456 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060206532 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079074602 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.07403272 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19973095 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080725425 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06235079 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073267305 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062009135 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063664185 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07174027 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060575109 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063891067 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061339891 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066793934 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062621718 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06274501 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066609998 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071076873 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07417807 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062570273 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07058232 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061891594 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076849488 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071293543 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065953689 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064762978 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062384292 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073566036 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06783539 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071604079 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062472353 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063532487 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062833757 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073842322 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072821852 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06525718 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070067349 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065929079 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062116675 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061985735 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062772602 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064995228 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064471606 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062630301 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069324081 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070256034 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075140792 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068220489 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070768126 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062170419 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062236613 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06478779 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062118312 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067256201 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072425626 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078695235 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074796846 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084235142 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06287623 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072487589 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064408814 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079735972 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076194721 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063978814 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06764994 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061785389 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06460673 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072699553 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074616421 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076587725 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077531804 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067151262 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067285269 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062535976 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078180998 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063553277 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071105036 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072723708 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067501645 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063146147 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064143245 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071684655 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067240161 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062561484 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07816613 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069318956 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062561476 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077243812 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063187724 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074180853 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062463386 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066204791 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068216709 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064716774 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072220131 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078770986 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061347557 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063066103 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078670882 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.0647355 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064648887 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070821815 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077975042 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067298094 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070928921 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073254947 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072000777 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066505223 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07213361 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063377625 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071755187 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065073674 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074888671 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062067448 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080453104 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061974246 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077371452 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062469443 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.0736691 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063373312 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071268352 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063357706 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078472074 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063717807 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06223149 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073550018 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060734109 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071145019 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061470258 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067017494 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068265343 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071780312 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063872299 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071483793 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202993195 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071696512 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068122458 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.07034516 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071292598 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066758168 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061678213 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070079805 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072600057 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070151288 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063791959 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063181784 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062413276 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071222402 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063235479 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062950767 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070102061 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066462174 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067245854 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063741299 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063417879 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06314056 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069552674 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071147819 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078935279 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070761881 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069344175 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.074072277 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061223099 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076882609 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061432738 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.06951934 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.0605954 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067403942 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070783493 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061648574 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081415298 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064825803 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070936429 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075529787 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072346484 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066753873 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083489736 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06632629 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071685007 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070858407 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067418527 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.0695319 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064613478 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071391453 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.07217535 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073960132 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064238402 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070504839 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072537298 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064477237 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071327251 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06488911 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071132417 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065119833 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062297705 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067353301 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074830601 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067604282 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068235025 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06356416 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061894717 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063344162 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069991872 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067608821 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072328851 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078836584 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062349446 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064168764 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062526628 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066819287 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080872586 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072752935 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070813028 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067946536 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061865485 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064396729 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065228654 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063530004 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06712656 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062271374 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062751286 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073386186 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064725512 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067400177 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063359211 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064038401 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072382124 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067694055 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06373625 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069095632 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062547588 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068083806 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061511397 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063957537 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067038995 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062063719 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066191349 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072635156 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079189559 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069385737 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071511809 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063816915 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070805015 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077740116 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069360306 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063604366 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071694184 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061454567 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08081613 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071974474 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070616232 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07147907 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062927113 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078794667 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066410717 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071952869 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077122009 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062927414 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06784173 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059890843 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07482553 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064357482 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059576459 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068095874 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067781312 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066814052 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073179563 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206275525 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070992241 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068024246 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06619348 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064934045 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065214368 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072591984 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080112896 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063963862 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067831395 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070883707 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071637037 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067575623 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07571109 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070993895 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064178012 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064866925 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066307376 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064095731 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074668038 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063622463 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067078374 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067410177 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062004802 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069493969 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079510269 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072989867 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072629536 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062512024 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062065998 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080523688 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065987622 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066208763 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070833725 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072023439 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075061485 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072922821 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079851948 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064262549 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068772052 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075543586 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06428952 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063002875 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066165905 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064702252 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071874159 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072831868 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070542499 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065110749 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069642169 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076247249 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06458904 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067367099 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.070748616 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06388091 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073555876 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070883058 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071945228 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064524641 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062616462 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066084375 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072268545 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070319204 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072231304 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063724722 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069484784 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076932056 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070851154 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066440806 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062667549 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066566907 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071950762 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067550502 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06252574 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067219328 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066569041 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070177381 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072438736 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067133687 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062427127 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080856392 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071035561 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072143847 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064995331 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06483534 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063502301 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062094828 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074498535 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062559132 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06469306 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067492127 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064789026 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080939241 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07140668 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079409452 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064311453 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067821696 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062781084 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072652127 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067213277 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063364553 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073241454 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062157527 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07876779 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075023455 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068673461 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062223773 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067612569 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.091967794 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077781941 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072448005 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071869732 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06629209 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07276111 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064391297 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073752423 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061998754 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060697757 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07192045 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070886954 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074217462 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06134974 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071770924 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06360724 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070323698 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069669327 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063466643 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063277209 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06327918 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071298729 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065730875 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070950073 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.209847952 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079024256 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063502158 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072949528 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071410803 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07246842 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075981398 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074086076 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069224799 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062397414 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069506549 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069061879 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062845683 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066720156 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064878512 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083398843 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063697983 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062985891 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075455367 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067739938 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06114721 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068096057 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066266244 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071740702 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062340518 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072157154 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065639278 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062237643 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06624611 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065835717 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060858631 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061042451 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061783242 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071136467 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066584068 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06288953 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080609666 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062756872 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.0699338 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072186731 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067900596 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063609152 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060238499 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062175797 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074467768 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078200134 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065969816 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071886157 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064339213 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07219979 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061768272 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071279717 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070707535 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072149523 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062875122 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063491549 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077998579 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079108825 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067992774 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072780011 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072533532 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064671376 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085081404 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071997837 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064324587 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073975632 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065339839 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062177156 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061907368 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064818168 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074539978 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062931576 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065738502 seconds)
  done (took 42.846491924 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098991328 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062007571 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061279766 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061397268 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072207357 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062530043 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061291775 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064887747 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06233036 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063651335 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061139654 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061422434 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071849 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074461694 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07195647 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065048521 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061560153 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061910494 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061491072 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062710959 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071219773 seconds)
  done (took 2.841134613 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064998979 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065281056 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065096474 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065797208 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064502663 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061189564 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06589295 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061281439 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065846244 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061585895 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065780892 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061761017 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061952792 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06265399 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063171089 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064999191 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067387795 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066805387 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062682294 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066605812 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064642543 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066525364 seconds)
  done (took 2.834376143 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06267774 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06211714 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06997883 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060810534 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060836556 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064149042 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061172019 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065204546 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065335647 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065413136 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069893753 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062552829 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060840419 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066072675 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060337676 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061980986 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103635595 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061787634 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062267596 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060833853 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063307082 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071295261 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062128711 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061868376 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066241933 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065517581 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061889114 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064779794 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063126261 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066688248 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063610988 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06160451 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071676775 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071175624 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06695584 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066592348 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063696564 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063164118 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062168654 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061721119 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069782026 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062124785 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061106342 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063047808 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070997883 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062310723 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06173962 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071850211 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062100987 seconds)
  done (took 4.615767832 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07103055 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112838053 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067051429 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093576305 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073627416 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066695219 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067520286 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097424993 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063540242 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064561999 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076930282 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07661881 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065513195 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067406205 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068231947 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06538082 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066466486 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064293655 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067816725 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063744073 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066214965 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068380893 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075799176 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076078792 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066791892 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064359439 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065195596 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066844317 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075784953 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06856194 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.069568831 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067699699 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075849535 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070580906 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064886766 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065351173 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07665586 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066101196 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066335414 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063712401 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064988027 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066814749 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069775706 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076406331 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064100667 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068429068 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064444767 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061463511 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074727444 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.06477222 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069695762 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077421383 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066336595 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064699379 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06510212 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075654298 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065064907 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06405786 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06896777 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07577039 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063780928 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066562432 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076798196 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065889724 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.0688037 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077154377 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070215071 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066369731 seconds)
  done (took 6.330656544 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070299654 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096177363 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071831499 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072169096 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071269045 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071478519 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071215722 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071027913 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071096526 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071498017 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071740763 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112144392 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067817411 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07566927 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07120688 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071435684 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071543106 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071400033 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071290408 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071483988 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071139348 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072064727 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071361946 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071743691 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073812136 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068148018 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072576013 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073394546 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07298052 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071778716 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074129457 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072081988 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071609352 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072349427 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074103814 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072110868 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062277751 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071652402 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071231686 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071090842 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067745378 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072229718 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071476827 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067667009 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071388819 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071007627 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072182514 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073990541 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078134225 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072320092 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071592722 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07281436 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073155804 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073436349 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074007092 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079973284 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072162137 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073692162 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073069349 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071854294 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071571935 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078543171 seconds)
  done (took 5.987789043 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074684624 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068169306 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.08013439 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061110353 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061284605 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070360619 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061159479 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061413815 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068073514 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068424831 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069453378 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070869667 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072601499 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069731387 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071711587 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073849774 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072257248 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07195933 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069710795 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072343709 seconds)
  done (took 2.840988837 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076184493 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079821761 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066699028 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070499676 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.0681545 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072455819 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.069206034 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068308557 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068635501 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06810729 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072948089 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073430464 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068638477 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072074077 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073085092 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072302826 seconds)
  done (took 2.579887969 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06505716 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068782119 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067788056 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062755803 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064654965 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061503817 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062230226 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.06096483 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063814382 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075440611 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062361937 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064660014 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06237989 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.06187519 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062635374 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066132552 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064992261 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063137518 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063767754 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068395179 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072333544 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064853221 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066099335 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062349061 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064213981 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070620689 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063356184 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064082641 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061915774 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064541852 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065515522 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070744963 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06612758 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064282879 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062629683 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063520057 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064221332 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.069696971 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066484279 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064171103 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062467741 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065818301 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064177313 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064564405 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065683477 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066473677 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065425695 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06948326 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063702962 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066456633 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064409527 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065368856 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064289071 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070884535 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066454313 seconds)
  done (took 5.032399863 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078428198 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067076962 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061032016 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061857395 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067501515 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068442523 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068290443 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068159334 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068445588 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06210009 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067974726 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067637691 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069065398 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068004345 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068621895 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068117805 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062243262 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067941498 seconds)
  done (took 2.665819014 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073492618 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067188217 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072887 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067496078 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068000869 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067697328 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063147605 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063083374 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062777831 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067511556 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06741324 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066992461 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062942607 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067201888 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067716461 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067466041 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067138636 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063355015 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067476246 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062873159 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067266086 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062536558 seconds)
  done (took 2.912594336 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088408058 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084137971 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128027433 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081986502 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.0907966 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073961137 seconds)
  done (took 1.99627016 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094272043 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104480391 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066919798 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067286147 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076473838 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071123179 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070659334 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071222488 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076595272 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075312183 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071368842 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07664066 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077112467 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072969518 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076957694 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078885656 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071694497 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071330426 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068117331 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077578173 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071220566 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076419649 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070979087 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070761253 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071064458 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072607756 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079209379 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074882283 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0710359 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077107523 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079301798 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071158928 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077177704 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075139643 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06767546 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076563706 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071241015 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078575491 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07424181 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071189927 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065955035 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074644846 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074858267 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070841924 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077036155 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069430124 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071175711 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069245578 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06951603 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0792403 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07453804 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071116376 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076645366 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079592849 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078418178 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081116801 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075600883 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073054512 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077058553 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075289299 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073178477 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07704961 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073309457 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075988246 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078605944 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071171358 seconds)
  done (took 6.383784013 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100859486 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066932982 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069782486 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07334624 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071026949 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06933304 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069340126 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069166721 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069558991 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067881916 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107137975 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070501824 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071706737 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071859206 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071814987 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071785774 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071385188 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073443713 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068800654 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081347616 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071568566 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072879874 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07169812 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071611103 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076065599 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077106704 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069186139 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069536741 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069307671 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069379707 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071212102 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070618162 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073369987 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068359649 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073064841 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071564899 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071007852 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073352056 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071622335 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077098233 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07288966 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079666894 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071451419 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071179664 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075421333 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06993989 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069364365 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067202732 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069649996 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066653508 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073239481 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074009803 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074013925 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073087437 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071908517 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071794339 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071796933 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072131347 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072358253 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07935883 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073684816 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071614255 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082117358 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071513749 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071421613 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073491446 seconds)
  done (took 6.292121465 seconds)
done (took 130.591005649 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218440631 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188662344 seconds)
  done (took 1.843424839 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075096879 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166298796 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075109092 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075349043 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108646385 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108414454 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076064407 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073127333 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075174643 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072617366 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13963015 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07627504 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072512013 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072641366 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07278179 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072795416 seconds)
  done (took 2.86870515 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108734029 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185240828 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082922098 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07068028 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114270378 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077223519 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072882443 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075758626 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077336678 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070950349 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106758055 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082121153 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074404691 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076876661 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073215243 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074459691 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075876137 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07695925 seconds)
  done (took 3.038084136 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098714939 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.08710427 seconds)
  done (took 1.650146581 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155110976 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105069503 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145638039 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329950899 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130443132 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126628212 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130066231 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125773243 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111076411 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122344826 seconds)
  done (took 2.940902873 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106266563 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10627252 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.311446463 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103451319 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083305333 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078014602 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075770504 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080333802 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076200019 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076521912 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122691706 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075380407 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073020359 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124162348 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099075034 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106877986 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071227058 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078459676 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079720197 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070972718 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076352018 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079875721 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179912868 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079096772 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100234595 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076045401 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077750629 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074805957 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075256847 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078468071 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079560207 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100161133 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078644698 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08262366 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077292974 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097568686 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071615898 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098532048 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075101925 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072904441 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075567173 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079325599 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072421416 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079055305 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075434698 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078007582 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079865392 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071271752 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075946398 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074204669 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072545928 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076757652 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076434681 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07815378 seconds)
  done (took 6.272021532 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108636667 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106564838 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070740485 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113541331 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106243192 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070616061 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104771475 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101590535 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109111048 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070265905 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069657212 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069511829 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.08103095 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079767991 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116650703 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108491071 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071996507 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070501954 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107358203 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107295822 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069308511 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102522373 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099745928 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107226337 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068895976 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069983463 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068808444 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069375768 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075398391 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075480427 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068815855 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075522053 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081123693 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075433279 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068345021 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068398999 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070165726 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076989783 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076315184 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077100386 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074740695 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068575105 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070692975 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070203436 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070752604 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07040464 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077311354 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077969725 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077201682 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070788608 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070807615 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070470355 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071386511 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078184743 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077689024 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079353596 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078512885 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070765378 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070995634 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072404678 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080211431 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079805849 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077527146 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070074634 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077739974 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069223336 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077886881 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080910901 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069695158 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069408402 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069268137 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069311364 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069254888 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07523683 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074852328 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069903161 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068833983 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06887871 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077082749 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074619812 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068874848 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074294243 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068419122 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069719138 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069123731 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069388604 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075553352 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07565631 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069506988 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068851474 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069046774 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068665263 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068335255 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074281464 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07644574 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076327537 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075976429 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070784939 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076752015 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076147303 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068995572 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075977925 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069144474 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068695249 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068622815 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073925404 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072865518 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074560245 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068456737 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069150799 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075731833 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.215789922 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070962038 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076241543 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078986204 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076419163 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070607354 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080945313 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070091943 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077573041 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069867642 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077571932 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069972868 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075412353 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069429208 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070339587 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071000946 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078621713 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072133299 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071284555 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072192587 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071600944 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078088931 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078731175 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069907683 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074897267 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076160607 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069861258 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075180173 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069305546 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076510293 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069320114 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069225236 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068361699 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078217155 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069631327 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069004943 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069321125 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077542585 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069199974 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076900898 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075224681 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068980689 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07901589 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077349004 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074932754 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078102581 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070297244 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069440276 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069026235 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.0691101 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074746894 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075698783 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070018236 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069571056 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075343824 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077526344 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068858131 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075818773 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074793931 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074899561 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072282369 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069102809 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078499715 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.308390592 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074917711 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074504979 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075406402 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069147899 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074413278 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074739802 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06917072 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081352491 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068904402 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078988152 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075459627 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07439104 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075552837 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076568694 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077143322 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07766774 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079148665 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068877295 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069279319 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075464271 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068889148 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06888402 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074971727 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06943377 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069482025 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080103384 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069402447 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077505389 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068572169 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075428586 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068785852 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069342288 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079739471 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06866838 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069158197 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074437332 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069090525 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074026505 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076985357 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074016995 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068245891 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06871774 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07436632 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074556325 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067975115 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067563211 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068210247 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072580689 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07273176 seconds)
  done (took 18.695709751 seconds)
done (took 38.788398344 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172156708 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11654173 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208725883 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19828773 seconds)
  done (took 2.269437493 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101164935 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06605663 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081100307 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090336565 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065956643 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076439869 seconds)
  done (took 1.995272687 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200893078 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174321092 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240543453 seconds)
  done (took 2.120089312 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366704603 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148493657 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215840944 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503293768 seconds)
  done (took 2.827938384 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110330187 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100914735 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078151524 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11164688 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085271811 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063581266 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133876472 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070406637 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099670376 seconds)
  done (took 2.424587686 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129943676 seconds)
done (took 13.311638261 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.239291343 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.152192268 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.123606575 seconds)
    (4/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.125126963 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.118334651 seconds)
    (6/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.177149456 seconds)
    (7/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.105818628 seconds)
    (8/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07530702 seconds)
    (9/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075457304 seconds)
    (10/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.259968132 seconds)
    (11/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077392122 seconds)
    (12/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.216148725 seconds)
    (13/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.18826572 seconds)
    (14/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227791899 seconds)
    (15/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.08048234 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07737807 seconds)
    (17/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075169218 seconds)
    (18/341) benchmarking ("sort", Float32, false)...
    done (took 0.138493354 seconds)
    (19/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.075173674 seconds)
    (20/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.177128529 seconds)
    (21/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080583901 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078276536 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.155096602 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134063865 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078480136 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.122072391 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130408408 seconds)
    (28/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.201291261 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150162108 seconds)
    (30/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070551526 seconds)
    (31/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.207596179 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.091774561 seconds)
    (33/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071466811 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09567004 seconds)
    (35/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066710958 seconds)
    (36/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078188904 seconds)
    (37/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.217065838 seconds)
    (38/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.077213228 seconds)
    (39/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.199085105 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07530261 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.18108279 seconds)
    (42/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.143643864 seconds)
    (43/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.180993147 seconds)
    (44/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094519505 seconds)
    (45/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.167251176 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.091477909 seconds)
    (47/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071145274 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073369293 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073341797 seconds)
    (50/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076001785 seconds)
    (51/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065007403 seconds)
    (52/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.077050379 seconds)
    (53/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.241875645 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067105081 seconds)
    (55/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.184072742 seconds)
    (56/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.147928267 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.170812511 seconds)
    (58/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076314915 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.076768013 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126603187 seconds)
    (61/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.170982312 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148841856 seconds)
    (63/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.214492333 seconds)
    (64/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162514539 seconds)
    (65/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.195941383 seconds)
    (66/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087862936 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065368121 seconds)
    (68/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.196571843 seconds)
    (69/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.21203025 seconds)
    (70/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.153157272 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.08961732 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.214160771 seconds)
    (73/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.078574511 seconds)
    (74/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070657413 seconds)
    (75/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083942393 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067632295 seconds)
    (77/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.172885899 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.288850212 seconds)
    (79/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.169570687 seconds)
    (80/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.085436919 seconds)
    (81/341) benchmarking ("sort", BigInt, false)...
    done (took 0.270676829 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07807309 seconds)
    (83/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.167866213 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068444847 seconds)
    (85/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086108655 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093169151 seconds)
    (87/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079585568 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085518785 seconds)
    (89/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154638142 seconds)
    (90/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075219379 seconds)
    (91/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074811427 seconds)
    (92/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.180390802 seconds)
    (93/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.185269759 seconds)
    (94/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.23720344 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074782295 seconds)
    (96/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133988041 seconds)
    (97/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075463418 seconds)
    (98/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073281414 seconds)
    (99/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073742975 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068040317 seconds)
    (101/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201469412 seconds)
    (102/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.16440471 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117785516 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087102519 seconds)
    (105/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072207494 seconds)
    (106/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.1444101 seconds)
    (107/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066588911 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073023063 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.088463599 seconds)
    (110/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.162735782 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119184851 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097974046 seconds)
    (113/341) benchmarking ("sort", Int8, false)...
    done (took 0.153588027 seconds)
    (114/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069405681 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068573945 seconds)
    (116/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.076124318 seconds)
    (117/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.198537984 seconds)
    (118/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.071102218 seconds)
    (119/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141032877 seconds)
    (120/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073901233 seconds)
    (121/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.14248368 seconds)
    (122/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.144465926 seconds)
    (123/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066294295 seconds)
    (124/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066668542 seconds)
    (125/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066514959 seconds)
    (126/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.082034967 seconds)
    (127/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067080755 seconds)
    (128/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068091797 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13340292 seconds)
    (130/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.19811213 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.081380552 seconds)
    (132/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.06614031 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066566996 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065755759 seconds)
    (135/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067105121 seconds)
    (136/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.197906647 seconds)
    (137/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138946967 seconds)
    (138/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066815873 seconds)
    (139/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.18836968 seconds)
    (140/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161109365 seconds)
    (141/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067403742 seconds)
    (142/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095157717 seconds)
    (143/341) benchmarking ("sort", Float64, false)...
    done (took 0.13635306 seconds)
    (144/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066102099 seconds)
    (145/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152421175 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.083792924 seconds)
    (147/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076438094 seconds)
    (148/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068999816 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067063371 seconds)
    (150/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.161781512 seconds)
    (151/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074999108 seconds)
    (152/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074730457 seconds)
    (153/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066020383 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125985551 seconds)
    (155/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.076564258 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171748888 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123665928 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073421484 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.199618021 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064376844 seconds)
    (161/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065466891 seconds)
    (162/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07592576 seconds)
    (163/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066443318 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.151489838 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075726722 seconds)
    (166/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065370516 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 0.140759653 seconds)
    (168/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065744896 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06516865 seconds)
    (170/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08101117 seconds)
    (171/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092265269 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.065745162 seconds)
    (173/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072976751 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087894157 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.089022604 seconds)
    (176/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089473181 seconds)
    (177/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07283126 seconds)
    (178/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075080766 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.229408852 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 0.068823271 seconds)
    (181/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08399941 seconds)
    (182/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152981553 seconds)
    (183/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067897106 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090726313 seconds)
    (185/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067247245 seconds)
    (186/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067877452 seconds)
    (187/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076541048 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157251188 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08477475 seconds)
    (190/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.06684381 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066343028 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083622381 seconds)
    (193/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066442562 seconds)
    (194/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070303821 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075863348 seconds)
    (196/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07857152 seconds)
    (197/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066649018 seconds)
    (198/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064907338 seconds)
    (199/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075531182 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178744006 seconds)
    (201/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079485975 seconds)
    (202/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066455524 seconds)
    (203/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145723322 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.06786879 seconds)
    (205/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067260783 seconds)
    (206/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069405519 seconds)
    (207/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078157977 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073386715 seconds)
    (209/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072362081 seconds)
    (210/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.075935594 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149393368 seconds)
    (212/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06846777 seconds)
    (213/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.23103957 seconds)
    (214/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075281827 seconds)
    (215/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067853936 seconds)
    (216/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.166987435 seconds)
    (217/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.171211663 seconds)
    (218/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.084368425 seconds)
    (219/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08351847 seconds)
    (220/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154256353 seconds)
    (221/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084389144 seconds)
    (222/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066244033 seconds)
    (223/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074234573 seconds)
    (224/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068721131 seconds)
    (225/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068963601 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141090791 seconds)
    (227/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.221485698 seconds)
    (228/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067337765 seconds)
    (229/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067338699 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067638864 seconds)
    (231/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.168060671 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.221042327 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066558959 seconds)
    (234/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068733548 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096485033 seconds)
    (236/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067582677 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075715395 seconds)
    (238/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068340646 seconds)
    (239/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074345224 seconds)
    (240/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069851142 seconds)
    (241/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075513788 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069556422 seconds)
    (243/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070850799 seconds)
    (244/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.07071424 seconds)
    (245/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072332391 seconds)
    (246/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06542048 seconds)
    (247/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069607352 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078626304 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077217893 seconds)
    (250/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073710186 seconds)
    (251/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066582744 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073513848 seconds)
    (253/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073631819 seconds)
    (254/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067722107 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090893438 seconds)
    (256/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066446539 seconds)
    (257/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069932452 seconds)
    (258/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.066682012 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073631109 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069886505 seconds)
    (261/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074422526 seconds)
    (262/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067306906 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.067447722 seconds)
    (264/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066280026 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066018082 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.06757276 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064323133 seconds)
    (268/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.189039207 seconds)
    (269/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178663721 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077449486 seconds)
    (271/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.067879038 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066644831 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086108619 seconds)
    (274/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067831619 seconds)
    (275/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066516062 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121876225 seconds)
    (277/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066044319 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.065876038 seconds)
    (279/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069482048 seconds)
    (280/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069331972 seconds)
    (281/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066321026 seconds)
    (282/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076643484 seconds)
    (283/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066658691 seconds)
    (284/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074228112 seconds)
    (285/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065280307 seconds)
    (286/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089372827 seconds)
    (287/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082300006 seconds)
    (288/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06555976 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091644861 seconds)
    (290/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067896474 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066738477 seconds)
    (292/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064027079 seconds)
    (293/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065429937 seconds)
    (294/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065859453 seconds)
    (295/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065609801 seconds)
    (296/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.064341388 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066052171 seconds)
    (298/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068074614 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079678692 seconds)
    (300/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065942377 seconds)
    (301/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.06571226 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147735973 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189090616 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065393683 seconds)
    (305/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067982427 seconds)
    (306/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066078442 seconds)
    (307/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.260634208 seconds)
    (308/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069615928 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089228325 seconds)
    (310/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080638205 seconds)
    (311/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.068451695 seconds)
    (312/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068428323 seconds)
    (313/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070247425 seconds)
    (314/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066730556 seconds)
    (315/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066683257 seconds)
    (316/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076093882 seconds)
    (317/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067817375 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155288554 seconds)
    (319/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081174088 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148653233 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068661621 seconds)
    (322/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070676887 seconds)
    (323/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.157719944 seconds)
    (324/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069496871 seconds)
    (325/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.069415808 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088164821 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08120211 seconds)
    (328/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.068697404 seconds)
    (329/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069562478 seconds)
    (330/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067576735 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068243486 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094991522 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069168426 seconds)
    (334/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.07017719 seconds)
    (335/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.068751859 seconds)
    (336/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07673449 seconds)
    (337/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.068533811 seconds)
    (338/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069088421 seconds)
    (339/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.071416126 seconds)
    (340/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.071627931 seconds)
    (341/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066333164 seconds)
  done (took 36.964319931 seconds)
done (took 38.490935315 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092237862 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080983894 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078656795 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076184433 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079567809 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078117994 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078411265 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078992528 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07979852 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079768946 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080069658 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067639016 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076552357 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083412678 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077139947 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084324922 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.08104428 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.083932086 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069533323 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082756049 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.095627125 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080696372 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077427693 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082464381 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068495004 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077841723 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093209381 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.09006909 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073508383 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075687419 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073982711 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082190053 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073989046 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072574194 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075490742 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071991804 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076060265 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073658279 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08893908 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072094153 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066318284 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079577977 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.078768543 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076730106 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078348836 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080678048 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074104119 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082843651 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068462514 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079757792 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092364657 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071768469 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073203208 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074667568 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.0717886 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075612863 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075047592 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080194148 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073402921 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080071231 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.0805621 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076728186 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067742625 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077154701 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075638822 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075761731 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067244856 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073438343 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068014869 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068061398 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067214243 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077330014 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075564357 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073314123 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067987018 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068187403 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.068090359 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080597214 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074481705 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07684827 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067655984 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073307515 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073013458 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068598478 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073386962 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080057272 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067478166 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068170075 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067744542 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082915778 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074854475 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067705725 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080214268 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073285241 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073295349 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066291143 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065861548 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070813601 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07464293 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065950016 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065260381 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070665026 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070813162 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074869615 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066268624 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070806753 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071179379 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065157468 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074841595 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073236101 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.07514721 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079045475 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07445878 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078048046 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066415839 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065577264 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077591185 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.068468177 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073272291 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07639634 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073513595 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075001072 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066159074 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064990836 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070374041 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072483557 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065966721 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066391857 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066362223 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075191918 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072896444 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06481528 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065532314 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073839712 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07417415 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064714661 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064226526 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074065453 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.0652446 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072031585 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071322369 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074210353 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066557264 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.214496811 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066425443 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067351508 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066161971 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.07349131 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073601143 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.068423689 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077437433 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074581427 seconds)
done (took 13.05835969 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067564745 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106006562 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073824334 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082875084 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.07860206 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068518975 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070467019 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083424971 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070757037 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086636182 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094618662 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088622099 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093940206 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065614283 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06915062 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.07013709 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067753245 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076793514 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083937346 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092806521 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.09828063 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068514879 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078306172 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086232396 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079637727 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085814855 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.0682936 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068815346 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069618006 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123633675 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093032835 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066773642 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067864533 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080307616 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081003314 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07473022 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069902562 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073508353 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069823834 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069013053 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071595485 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083653555 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072891043 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071452178 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067919932 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.069337224 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069225141 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073069582 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082563977 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.0758356 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077080378 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081259756 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070800464 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067607551 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066046343 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070333575 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06687574 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067557615 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067023429 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066686854 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067390897 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069276557 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067730827 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067185038 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070081317 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069624981 seconds)
  done (took 6.615507382 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083442088 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093195235 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081656573 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082508841 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068393053 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069494961 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070211229 seconds)
  done (took 2.198237689 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069152858 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074896378 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079315277 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07961645 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089466969 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076630284 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067110309 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098505412 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066543548 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076156771 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082357732 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080230701 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070195309 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079372579 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067323155 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079266115 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067762473 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073953748 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074681505 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080981765 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071606942 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096681754 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080928982 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069664615 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083311423 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077313996 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071963546 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069604091 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070452721 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068922674 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06882994 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089205321 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073278429 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079331961 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067548719 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066288 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071347979 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067648981 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.070920218 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075899629 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070907928 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066591751 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067567118 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067652752 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068136587 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071467623 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068026086 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066869353 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066831522 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074429606 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065858506 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073329743 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069175476 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071864586 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071648094 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072009544 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073891557 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067353124 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074307422 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073359613 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067021534 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079435192 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078710109 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071137196 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078659218 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075292799 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073678062 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070489429 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067463015 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066411369 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067721784 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078732411 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070810447 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069397877 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068177162 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071613177 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070473797 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082502315 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082232228 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079881188 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069768643 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067195977 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070564675 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081834344 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071859604 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067703691 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067986485 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066462733 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071976742 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067551511 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074573682 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069195446 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076559591 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071674067 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072005073 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077465148 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069490282 seconds)
  done (took 8.743495424 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070514941 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069191463 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067764947 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068168973 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068559436 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068267677 seconds)
  done (took 2.096853539 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090755575 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068136038 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.0793314 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068117535 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090191437 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075322314 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075742686 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072089627 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085468767 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079904276 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076360447 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079662327 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076498486 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071526794 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076508193 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070823239 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076377348 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072614888 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079665278 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072277347 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083410279 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071907284 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072128434 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082125693 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072894752 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070722538 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070646189 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080217454 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079415605 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069903051 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071627133 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070880267 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075800887 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068936857 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074003449 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07533581 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067789511 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075425376 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071276955 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072345856 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.077907227 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069574571 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071949919 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075297806 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071692112 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078321983 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075598021 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073695233 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076312966 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075444471 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075768688 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070518208 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07275557 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075465092 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078380141 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072337301 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075701226 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07648201 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070061969 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076066408 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067440775 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071044511 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069285672 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070295638 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072194558 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073023761 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075958984 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069632781 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069970655 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06813353 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074486224 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06803246 seconds)
  done (took 6.998634491 seconds)
done (took 28.291906495 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552543782 seconds)
  done (took 2.182218971 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.582690696 seconds)
  done (took 2.251897522 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.37616585 seconds)
  done (took 10.042319717 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.305424757 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.33216171 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734580042 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133560652 seconds)
  done (took 3.214819013 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.759121865 seconds)
  done (took 2.434172689 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229321354 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220234766 seconds)
  done (took 2.133961212 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337095465 seconds)
  done (took 2.004547109 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.140045529 seconds)
  done (took 2.802986988 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228457503 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160792944 seconds)
  done (took 2.064282735 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.535875669 seconds)
  done (took 2.205156227 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.405827779 seconds)
  done (took 6.08094045 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235010679 seconds)
  done (took 1.943970784 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231093278 seconds)
  done (took 1.905986074 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.04916644 seconds)
  done (took 3.719883398 seconds)
done (took 46.665489207 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085503686 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087586968 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087439069 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082882558 seconds)
  done (took 1.984987673 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075514519 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071163528 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074593067 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074918123 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072460242 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073586469 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074168196 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.0694304 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072348069 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071133759 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069720768 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07095495 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07376709 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070895447 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073640269 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074397067 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070896319 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071238931 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.07339175 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071305815 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073987313 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071554294 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06945483 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071082315 seconds)
  done (took 3.403816149 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079415889 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073325746 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076233638 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071739525 seconds)
  done (took 1.977599001 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077555737 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077991706 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087094836 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091581864 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077918055 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078372133 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084862653 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085275121 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066361562 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08826938 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069027008 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068209069 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067975318 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086314342 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08433123 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063739736 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064881874 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07788594 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077402712 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080432105 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069640362 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067154491 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079040727 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078277158 seconds)
  done (took 3.525393448 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080033099 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066874157 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079128666 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092262225 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093241322 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066380363 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079987871 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093626032 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128190679 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066429234 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072499081 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066459908 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104881525 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066494697 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081575684 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11004667 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112612894 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070285299 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099774887 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066107191 seconds)
  done (took 3.377828085 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076437646 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070519597 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071166411 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066585757 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077682259 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074041767 seconds)
  done (took 2.129818851 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069167619 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068757935 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067650527 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073051918 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068485468 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.06837872 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06815423 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066675123 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066494059 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067731532 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067429934 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067915787 seconds)
  done (took 2.505780606 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158640745 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070184634 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070819393 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066802556 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.0716549 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067328377 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081877565 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069868496 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085479087 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067330527 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067731049 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069457492 seconds)
  done (took 2.63519131 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101530778 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101963148 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146525681 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117781408 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11704933 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097181776 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119819791 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095124656 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161402625 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137741081 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117311439 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094522603 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087765794 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070096421 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100540208 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102516185 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136511635 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073649475 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113588773 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165318214 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115214373 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.115187878 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123776312 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116777506 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081994988 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122242513 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094621839 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102812937 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125199066 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110385611 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119752463 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098191005 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072628542 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.07209207 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149728951 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10179368 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107543053 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093712328 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100802826 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089282425 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107564789 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069927035 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088644855 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106557107 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085330139 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117532226 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088153749 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104980133 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081368611 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130683917 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106701353 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099877331 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08610813 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104050924 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130347283 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095798315 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110407002 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10643201 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082266259 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117384624 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099831096 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253679655 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09596812 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082095083 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161224064 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090793543 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11349383 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11418792 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083425846 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091969631 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103468419 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130734564 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108332678 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107868882 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11494815 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096367244 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111567918 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093453315 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129303001 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094516512 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074350639 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105351964 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12941716 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086618991 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10123333 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132975793 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094903972 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078480207 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.0935485 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119346294 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081097668 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097303149 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070481545 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098661494 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107960945 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098032511 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112783379 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107799996 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079483385 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124938409 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109822566 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07405004 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118102426 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09934158 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15286405 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096432269 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076805623 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100217593 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094826119 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148856239 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085897128 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081695753 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099587396 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14244669 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094940523 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170549718 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097298064 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12951693 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097665309 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088393599 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075487421 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090112983 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101878699 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10676262 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101737287 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088620727 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077507723 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086458376 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094937869 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.252887987 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083104455 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115500456 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103160244 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07649917 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090080384 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077773133 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126966569 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079092023 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109481895 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127164787 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079892418 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105846397 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098956315 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108706554 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098038914 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108707962 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143813851 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11704987 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080310818 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084857406 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108915423 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14276412 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11393117 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086233449 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078163335 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100277635 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111568599 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098419176 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107361067 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101349539 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109229446 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098367405 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141846357 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118126595 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09134819 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095596185 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097038148 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123624993 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077880587 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156056418 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094732141 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119194897 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08587564 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141481451 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114337304 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090539523 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085553901 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096049843 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104969193 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106389875 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143875001 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096357719 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073331443 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093838375 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132411429 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077026437 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10063328 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090998798 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09330077 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11792811 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083748592 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081722347 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068799029 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101277669 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13462855 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069876103 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275835447 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.114350849 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104775568 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105644675 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070342135 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100926784 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139501617 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106868861 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14136536 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117827383 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102252613 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119826264 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100783845 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106409304 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080975988 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126571993 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135201835 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097195037 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092078792 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135477729 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119252181 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136070406 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097118021 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115667354 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105700098 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101712245 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10403446 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102396571 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145627758 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120979587 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125451472 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08684756 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106932822 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109874263 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136823547 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083200324 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116918501 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076605564 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112341036 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078653531 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108131429 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080406062 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113616018 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080550083 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1008166 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070479289 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075150778 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142346477 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113086493 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090019221 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087131334 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.1371432 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131452709 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081311121 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10293111 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105003668 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100652578 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100900449 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107994698 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085531306 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094326348 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.272502153 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081395106 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083360186 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10086907 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094894778 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108535904 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085764889 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076289753 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137249688 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105602498 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096153936 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078904788 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096009382 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122616192 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090741578 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088782092 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105823588 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104505714 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14130148 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091031992 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098710018 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11813069 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081737756 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093619337 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071023787 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085514564 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076962074 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110042098 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077046657 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109429429 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069743077 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131294589 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087819485 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093745455 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103677159 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098941545 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129280241 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09297545 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129768719 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091169689 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102876913 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108649278 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09551249 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081843316 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105034335 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096839324 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113659507 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097097043 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106355821 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111120416 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095078621 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141982036 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090615859 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121167858 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107285409 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10879499 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104832118 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11783226 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138235277 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114143954 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113679447 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076482318 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084931455 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106011427 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101244276 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145474244 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103351026 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072632323 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087557888 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092056572 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.256165883 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106845634 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084008039 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142960844 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088013009 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088354 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114265903 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091275136 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098722868 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077550895 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096883023 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101706561 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095495729 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095645112 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108832826 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118184611 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115262019 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133596656 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099957589 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093984593 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119691558 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111055113 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11223728 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087311086 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087456387 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125524072 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103094278 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128627878 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100908291 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095562595 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103783602 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092039735 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10066393 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097819718 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110574697 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081930602 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076945047 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069557777 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073486102 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119105857 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109954967 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09984249 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09957648 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073550503 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104533097 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100219341 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073348855 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088320441 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094911234 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10017932 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085182448 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092931757 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114794797 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092426717 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10438201 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100518635 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129807366 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100788652 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090113944 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144984922 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129053099 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089522662 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093973689 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072937017 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080663695 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102271689 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144088772 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117514707 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077367379 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.244799903 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079666419 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088870035 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073958019 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090123449 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09136029 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106582595 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094478893 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113863684 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104860928 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076846164 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104296671 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09862082 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093502906 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097306874 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103457941 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106626026 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124298683 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101692707 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098102845 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077503657 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081521418 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077126729 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080580422 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102931342 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078328649 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077485441 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13075052 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09223501 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105808127 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109685153 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086022425 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076837426 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134041707 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070271243 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136006362 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072352762 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083834818 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082342078 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080683863 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094852185 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105950158 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097182472 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11429267 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107297184 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105619669 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111418664 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156756836 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07222398 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148430336 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076925832 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076144187 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077085963 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112286059 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090793461 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105775018 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141576616 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090446815 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093619941 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078343076 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129587443 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09941142 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104373376 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087333327 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079570656 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129893145 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081013261 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072704156 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087062535 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111499022 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072812221 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104057038 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.247573935 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082408388 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115516625 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632226696 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092176213 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077652172 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090404865 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14353839 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129600994 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084726566 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110075672 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120391055 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091609077 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084915393 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109338044 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184112823 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075246059 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095582935 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105172684 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099001751 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093769646 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092975972 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088944208 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092849992 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086766177 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081225477 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108622769 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088885961 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093103341 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098672829 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084900542 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081400633 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132076634 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105283968 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083363172 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089664992 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10180852 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08879079 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092270107 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070981478 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115170498 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092407151 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102303433 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092709531 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.1096946 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121728986 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089564166 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113528999 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089657575 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110076411 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085426628 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079178449 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103479725 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079631823 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078600369 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118568353 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085074809 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094324997 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106009563 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096886101 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115706238 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11967338 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112536263 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098344605 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079550134 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086707233 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087940185 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07650581 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078860308 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074350913 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077200258 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.271227392 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087805427 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086505588 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116763014 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083673835 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105469763 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101671087 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11102729 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084412434 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102607051 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110007932 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091667822 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104617075 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101856511 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129349694 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147830299 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100422315 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125051952 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134498358 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077836115 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07682901 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069731847 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115708136 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080916635 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082463986 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08284153 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133810206 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083256065 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09571783 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231730576 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081605076 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082622998 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097988505 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071201716 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08439776 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109490167 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085727095 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081905422 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10007641 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084804659 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118599777 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112373369 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090403746 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083830895 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082249553 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094615355 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105287309 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129676648 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091076687 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076525238 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107331902 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104025079 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124851093 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074171853 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082101407 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130760849 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09274052 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10483045 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081285201 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121124967 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134031917 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091372786 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135020588 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072472994 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084787501 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090407998 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12640159 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07545018 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088889568 seconds)
  done (took 65.287651679 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150284003 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144277839 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083545233 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098570472 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188254921 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198032892 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120905399 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097132621 seconds)
  done (took 2.955428502 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069208292 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084505022 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.085191292 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20887481 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109125078 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068662401 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07436763 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082873782 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067915878 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067728554 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102382275 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068544984 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068275969 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366439335 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067173671 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072884022 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067983303 seconds)
  done (took 3.558944514 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326683798 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.440637027 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.221531739 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.89495346 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139377433 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486677351 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077697595 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083751421 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.629885838 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37053456 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135970889 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089557783 seconds)
  done (took 18.736981998 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077034739 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079477632 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078976737 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07586273 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075421245 seconds)
  done (took 2.246352752 seconds)
done (took 116.017822542 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084244492 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173190049 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068370101 seconds)
  done (took 2.114500461 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083146198 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081943909 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082282792 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079652383 seconds)
  done (took 2.169641173 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075742642 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077620962 seconds)
  done (took 1.988626786 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224432484 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.17581939 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090860348 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083618679 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080384413 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081010743 seconds)
  done (took 2.091260945 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073205428 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072731461 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073119923 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072760326 seconds)
  done (took 2.124878883 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069234635 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067152685 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069852761 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07226255 seconds)
  done (took 2.113794708 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086115752 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084042021 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112776937 seconds)
  done (took 2.116883993 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084285578 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084304672 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079199785 seconds)
  done (took 2.089199953 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110093506 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097701916 seconds)
  done (took 2.029585022 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081518916 seconds)
  done (took 1.921902797 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091184457 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099054431 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142316531 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107762493 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140700864 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.1264363 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077890679 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078366111 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074018489 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073504778 seconds)
  done (took 2.847906993 seconds)
done (took 26.020737292 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079717567 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369655117 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360564837 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088147556 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.673862347 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357801783 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.017779696 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091951034 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100850677 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068994922 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086201683 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649900725 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.010017117 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327143846 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.994884437 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329313339 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.661615924 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069813005 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068562151 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069023278 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.001747443 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068930525 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069621475 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069738188 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652669294 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375693415 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069820272 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330345902 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068934878 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071394665 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357371612 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070177222 seconds)
  done (took 16.493114058 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071561261 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123977366 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073303486 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085169117 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071404919 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070751357 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071976189 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069729245 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111931801 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069694847 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086341892 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069271191 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073145037 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070838818 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089253212 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069440011 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070846133 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070536636 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069742653 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069944284 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087641131 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069858737 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069844683 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070009069 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07013154 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082393013 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070619695 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069733544 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072729245 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071514943 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072497483 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070588472 seconds)
  done (took 4.290637314 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12258032 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127305232 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075018013 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11074 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121771668 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072256321 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153279312 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095257421 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115735564 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069310822 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086625632 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069452859 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104857515 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070703765 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089497952 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069305079 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070340955 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070268848 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069328205 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07008246 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087669302 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068995568 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069925953 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070170423 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069760339 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08424785 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070214105 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069357961 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069464497 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071539112 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07366622 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070109365 seconds)
  done (took 4.566740275 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070622057 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072736201 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080969779 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082608249 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068051374 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069991959 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071359354 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06786676 seconds)
  done (took 2.447087594 seconds)
done (took 29.650393827 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080810724 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069224583 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072436476 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090326362 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075305393 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07131332 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066026918 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075400087 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072393401 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072543986 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074377702 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068677903 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071294971 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066305682 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073294077 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066946297 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073187112 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071234738 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071233647 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073238163 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069645009 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072964988 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075438593 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072021545 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071376387 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071562252 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076501497 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073486476 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067539196 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070326578 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069516012 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081121991 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073542398 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073494508 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067090381 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06700758 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071396025 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069446429 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073635727 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076370029 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06953222 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076013225 seconds)
  done (took 4.871966327 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089389144 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095266987 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087037235 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082996985 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107679344 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082859727 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091514179 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080124694 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078955257 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091204165 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074959211 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08021737 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081836337 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07648499 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079030497 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075676848 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080606514 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074611836 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079064144 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079433283 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091242783 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072962729 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080042979 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080309087 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07478968 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080918613 seconds)
  done (took 4.019498246 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074488961 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089135895 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093573896 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142529875 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111617768 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084386541 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083257549 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.104794374 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102031195 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069621081 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072848966 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09525587 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097877176 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076451686 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107538122 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087274648 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082051841 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070375922 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076237227 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104328897 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092241969 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087979894 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101453099 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089087472 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.0686968 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078476894 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075188203 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084149911 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07629394 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081386549 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073010477 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072419611 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069793937 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081583047 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073003257 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067507389 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090612621 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081727596 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084908405 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107130233 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079184424 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070625153 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099509943 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134644868 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071439505 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071543344 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072738832 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081688443 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070238912 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099140337 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087221391 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068586206 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087783953 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070072259 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070059487 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085442152 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07055361 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070500245 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081209924 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075358959 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090054482 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073886318 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089845594 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068603224 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079958704 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07073492 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070391725 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06762585 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104557174 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075983351 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121345918 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069949139 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066867176 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081260034 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080738795 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075677624 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068688628 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08850167 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081065782 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072781185 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08047153 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071509879 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071581908 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103963869 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06784026 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066901055 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066954912 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071083095 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071803901 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068995866 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082510502 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068564223 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072071885 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084401633 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068817017 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069544021 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.07120404 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069892453 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068020686 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079007951 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072643168 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070359978 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081127226 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070111928 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071805762 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083433072 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078960738 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067881813 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069841095 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070849947 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070453014 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07326616 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072683012 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071047823 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076285126 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076263849 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074342145 seconds)
  done (took 11.27530775 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162311237 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150930947 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070045509 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.147486553 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077457018 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073484316 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148782112 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088566881 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069729588 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071034346 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068809277 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097110723 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092672285 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104090379 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073646675 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070075922 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094852913 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102978227 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150988342 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145385431 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093237344 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076714633 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071946875 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07052328 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070830302 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078128335 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085576501 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077555135 seconds)
  done (took 4.592357188 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077037188 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08522103 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073500999 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093283509 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088374979 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.0700378 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071569351 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070242337 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086847357 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076140892 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069589608 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073463046 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073317722 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070504643 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069936982 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076172491 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075972116 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068979572 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073424029 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074074428 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079626308 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095102195 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074181295 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069909944 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071915221 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069113629 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076117398 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079035452 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069004059 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099300808 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066488164 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074108033 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08309478 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070878489 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068957746 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069716426 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070088308 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069817198 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069869376 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067715816 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067792562 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074039073 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067994702 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074985202 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083411821 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076199132 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070781379 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071767706 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072555081 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06660012 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07231261 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072593939 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072159758 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077676563 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073409568 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071783528 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.07117467 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101680579 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075576221 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068586037 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068752444 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067903125 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071430778 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077278581 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086527826 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071041022 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067774549 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069508841 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074159721 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083321633 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068480843 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074723493 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06620236 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069482661 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071877806 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072354622 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070542527 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068229218 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068970815 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069807368 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069127221 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068951177 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068430033 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072384922 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067029043 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067984627 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070101076 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071069863 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076221516 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068587811 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072764198 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070911369 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067976593 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072001626 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07446206 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072466326 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089063709 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078209088 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069729736 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067710523 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083722885 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071056039 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.0690718 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074808999 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073589991 seconds)
  done (took 9.644661092 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092093741 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070915457 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089408945 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095939264 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081958096 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.077888038 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086887444 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072950568 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088981433 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071436933 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081092076 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.070299382 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085359449 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080689583 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.073134434 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082295919 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074599243 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092559269 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086862864 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.070572073 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081176192 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084302975 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084846589 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090054553 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089799734 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090760468 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083535249 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072326073 seconds)
  done (took 4.222028636 seconds)
done (took 40.482584665 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.939527141 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.10753911 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.929841116 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.146932209 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.23254808 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.027578708 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.051827777 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.925402507 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.99986212 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.956064635 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.239231014 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.344815121 seconds)
done (took 68.824568429 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.978592241 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.078683747 seconds)
    (2/2) benchmarking "String"...
    done (took 2.147660615 seconds)
  done (took 6.08164603 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.527557884 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.927228896 seconds)
    (3/3) benchmarking "different"...
    done (took 1.978100773 seconds)
  done (took 8.290733892 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.031404793 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.943685039 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.187352966 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.926601063 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.937976958 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.337034814 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.744799865 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.389207334 seconds)
  done (took 32.327319039 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.206190343 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.18142602 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.670869576 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.698698484 seconds)
  done (took 16.666416479 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.546547818 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.188624636 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.188936486 seconds)
    (4/4) benchmarking "different"...
    done (took 2.184358116 seconds)
  done (took 11.025112267 seconds)
done (took 86.359503959 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.92922143 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.135621511 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.935097166 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.08350309 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.944931706 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.960335041 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.93097805 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.966987595 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.928903039 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.933091879 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.366984779 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.929264943 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.926558843 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.969525211 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.932109252 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.969633164 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.611509587 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.941870461 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.941750609 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.509901198 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.427833671 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.94659485 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.944300766 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.986716603 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.039419034 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.948686865 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.495698377 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.937052037 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.543255897 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.957856565 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.932244089 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.934195501 seconds)
  done (took 209.802461417 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.930804996 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.025134478 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.089243819 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.951419479 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.461901408 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.126203934 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.070803035 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.490207547 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.936703073 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.951657942 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.107832399 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.930827936 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.108574556 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.888155884 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.926710842 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.940282136 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.168021131 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.127958633 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.934911822 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.119112909 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.935074016 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.942800567 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.908765951 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.08654919 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.948903744 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.999112353 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.949345202 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.938737177 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.117149873 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.136535627 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.95294025 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.97321823 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.12507107 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.787226991 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.953163355 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.96188651 seconds)
  done (took 175.866913374 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.109836516 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.939510999 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.994620593 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.067762452 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.688146519 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.666668144 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938770353 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.933598382 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.932291057 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.940042759 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.934308619 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.000148506 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.510030192 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.952036078 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.931557679 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.924391824 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.928409204 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.250644592 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.939361833 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.930775318 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.932666518 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.995366776 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.305608771 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.067912453 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.923104582 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942789516 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.068192163 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.943098103 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932583306 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.067253948 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.936469351 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00975957 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.067508702 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.944217842 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.014045255 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.940928567 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.423001032 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.932219096 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932256737 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.933204173 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.995131056 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.932964316 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.016998575 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.023066925 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.933085059 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.944420384 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.007074597 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.572493477 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.935689005 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.933003681 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.933711978 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.933213153 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934171086 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.137849832 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.937709667 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.960192155 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.539068897 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.934232053 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.933608294 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.933587584 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.933128698 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934455973 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.941314067 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.972340701 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.740686263 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.196471696 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.324334843 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.736888985 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.937489263 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.751974124 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.991612265 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.933798831 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.934480819 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.012950486 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.934311999 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.934104417 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.933663946 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.934014194 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.021230418 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.014117393 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.935795879 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.068923992 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.939043878 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938045349 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.008344739 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.284667041 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.136027406 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.950297204 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.996850488 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.936041923 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936782983 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.95339362 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.099181875 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.93880996 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.936163243 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.93593865 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.112516611 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.938525047 seconds)
    (98/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.935902568 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.030068107 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.160883797 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.012299274 seconds)
    (102/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.93668696 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.189097251 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.185320152 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.943744448 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936945295 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.951985075 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.938664317 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.937479849 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.947842668 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.93757397 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.936782641 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.938440825 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.938844104 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.93797314 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.938622145 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.950104545 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.937625623 seconds)
  done (took 426.853633526 seconds)
done (took 816.542451035 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.607242081 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.67956043 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.527996865 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.557212392 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.526732162 seconds)
  done (took 14.768815672 seconds)
done (took 16.638001313 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.969602697 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.955706879 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.943840987 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.999853787 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.965598912 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.951176705 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.984676169 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.982679376 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.969021587 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.949503501 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.985853787 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.956470711 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.969462488 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.973113148 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.016184056 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.977401344 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.955908385 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.946553758 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.996926149 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.955079915 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.954177173 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.952213797 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.951616788 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.989643927 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.991653754 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.963123419 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.951592757 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.989121807 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.963070072 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.991165121 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.008747912 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.973737338 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.971384583 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.016893002 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.998100616 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.022841696 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.961917513 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.008862556 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.958815199 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.025109013 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.998266805 seconds)
  done (took 82.917398212 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.95101379 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.095685835 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.157019238 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.981903006 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.950014289 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165327123 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.006140605 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.076360117 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.086318427 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.161855474 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.164516828 seconds)
  done (took 24.673241659 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.949769765 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.098588331 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.162398293 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.984178246 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.952212729 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165247986 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.013840756 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.0782571 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.086293051 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.165908108 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.174544449 seconds)
  done (took 24.713788577 seconds)
done (took 134.174009611 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.318967105 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.972997261 seconds)
  done (took 6.168003756 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.942972418 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.961731633 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.094826217 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.943814036 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.943160709 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.944647743 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.944281215 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.946770523 seconds)
  done (took 17.597088799 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.945965343 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.945081312 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.944963041 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.94596814 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.945186109 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.945414287 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.947138577 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.946710926 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.946230607 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.945737537 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.945129986 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.946186304 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.945814784 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.947816207 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.945948899 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.945261176 seconds)
  done (took 33.010272637 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.945924261 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.94678128 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.945646031 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.946025807 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.945674747 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.946176475 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.947740209 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.946760261 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.944961782 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.947378181 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.946544927 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.946874264 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.947029804 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.934371763 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.945917558 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.947560259 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.946230659 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.946938757 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.948181872 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.948322951 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.947403868 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.946016698 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.950978208 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.945943344 seconds)
  done (took 48.587621509 seconds)
done (took 107.245313848 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.15164537 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.495325173 seconds)
  done (took 8.523933822 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.953583232 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.947395251 seconds)
  done (took 5.847224668 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.948546278 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.947059773 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.947718881 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.953250307 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.948294145 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.948067131 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.947519111 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.948502894 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.948015808 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.949509958 seconds)
  done (took 21.365700469 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.948180977 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.948288107 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.947340668 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.948884614 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.948037644 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.947463522 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.948230887 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.950396778 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.948840239 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.949258668 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.949754475 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.947908324 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.948336332 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.9473684 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.948737271 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.948777342 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.948473201 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.949441692 seconds)
  done (took 36.951994412 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.951796214 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.949043879 seconds)
  done (took 5.776583873 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.948821365 seconds)
    (2/7) benchmarking "second"...
    done (took 1.948486038 seconds)
    (3/7) benchmarking "month"...
    done (took 1.951626618 seconds)
    (4/7) benchmarking "year"...
    done (took 1.949356878 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.94891336 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.94967026 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.950892667 seconds)
  done (took 15.527287347 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.950374303 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.091217008 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.148674478 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.573165062 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.951799589 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.952298551 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.846651087 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.951862549 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.954599394 seconds)
  done (took 21.300502404 seconds)
done (took 117.171271545 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.795661758 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.951403854 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.164579218 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.025899989 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.028759656 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.243537153 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.973826257 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.491217652 seconds)
done (took 43.553698775 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.029294002 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.949318966 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.978767824 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.97866279 seconds)
  done (took 22.787484877 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.949930351 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.268018546 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.974184555 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.879796989 seconds)
  done (took 22.969013633 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.328947239 seconds)
    (2/2) benchmarking "read"...
    done (took 2.304012563 seconds)
  done (took 6.516916762 seconds)
done (took 61.184285429 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.953437637 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.950864951 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.9511576 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.952715537 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.951222304 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.950782798 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.951097669 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.950332779 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.95221631 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.950135686 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.951137298 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.952353144 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.950728666 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.94999254 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.952037336 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953982899 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.951846177 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.951687087 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.951712857 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.937472726 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.952996406 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.939821329 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.95174691 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.952588589 seconds)
  done (took 48.695290772 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.953658813 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.953406189 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.951680113 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.951970146 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.952496214 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.952499435 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.9514329 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.953285052 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.952837587 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.953027793 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.95224625 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.954361819 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.954043314 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.952732155 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.953162425 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.953105787 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.952878629 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953559916 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.951442686 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.9549335 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.952812771 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953116737 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.953683597 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.954409688 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.953578385 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.954960786 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.953861675 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.952428327 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953186 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.953294597 seconds)
  done (took 60.478056252 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.954377263 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.954475303 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.954596641 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.954565296 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.955595467 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.954430123 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.955524295 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.956022565 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.953957773 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.955746631 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.954388681 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.954405305 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.954558298 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.955787328 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.955685029 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.953122047 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.926095306 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.952007382 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.955512589 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.956053434 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.956528183 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.955617207 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.955832928 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.95516833 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.955236658 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.955935505 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.955437123 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.956780843 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.956879363 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.955858972 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.959375646 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.957271208 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.955876392 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.95700979 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.955547166 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.956715413 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.956253018 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.942901222 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.956990331 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.957819203 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.956349937 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.956252208 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.956996469 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.955885562 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.957826656 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.958803095 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.959865449 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.961199297 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.958267686 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.957441451 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.959599394 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.958269659 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.961130514 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.9595497 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.957463501 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.957197368 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.959193223 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.960397282 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.9591518 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.957915373 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.961295847 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.957444579 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.957737326 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.960969141 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.958351296 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.960149116 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.957932028 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.959762154 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.958728246 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.928160936 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.958408575 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.929033222 seconds)
  done (took 142.684938201 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.92667112 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.957737291 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.959846161 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.959773217 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.959853892 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.95885766 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.959839284 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.959904817 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.960073957 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.944490615 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95944159 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.960725148 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.959722107 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.960620882 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.96070465 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.943925352 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.959175688 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.959558181 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.95955471 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.961558801 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.962930203 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.960946088 seconds)
  done (took 44.931370339 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.963898467 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.959823663 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.958656054 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.960045004 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.961843811 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.960023311 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.961205165 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.960677821 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963701638 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.960589861 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962863446 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.960496362 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.962014895 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962402395 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.961266496 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.961434251 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.962375077 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.96243827 seconds)
  done (took 37.196801357 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.963461385 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.962238366 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.96150052 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.962008371 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.962515186 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.961726344 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962676563 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.963664384 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.960405618 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.963673827 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.961921172 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963077728 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.965323704 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962639443 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96147546 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.962929681 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.963419717 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.964056898 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964070455 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.942880601 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.950604249 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966528967 seconds)
  done (took 45.046219731 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.963125304 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.96345834 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.962283601 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.961196934 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.964576872 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.963198478 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.955088741 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.938210979 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.96334913 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.963134183 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.964020059 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.962906988 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.964940755 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.965462196 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.964632784 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967254157 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.9654893 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.958085764 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.963641187 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.966080743 seconds)
  done (took 41.133324139 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965180336 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.964471182 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.965653937 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.966349373 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965754012 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.966277468 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.967451774 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.963952698 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.965189133 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.96498985 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.964973413 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.965213067 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.964367467 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.966131886 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.963580744 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967132423 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.964493314 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.965083268 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.96570208 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.967316119 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.966577049 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.964612754 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.96551987 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.965972954 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.964725379 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968325485 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.966383649 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.965190098 seconds)
  done (took 56.929963126 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.965518039 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.966990437 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.965943679 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.966350265 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.967032067 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.965935772 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.965749643 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.967798388 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.96476831 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.968036923 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.966090097 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.966799562 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.966971154 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.964132167 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.969101124 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.966630695 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96799747 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.966872157 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967315319 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.966753689 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.966360771 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965895667 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.965879895 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.964231485 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966086936 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.967155188 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.96720262 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.968725611 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.966896002 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.967946175 seconds)
  done (took 60.895601678 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.986098162 seconds)
    (2/2) benchmarking "in"...
    done (took 1.987056281 seconds)
  done (took 5.869173635 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.96716275 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.966768722 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.965989291 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.968179778 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.967948446 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.968900364 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.967929067 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.965690508 seconds)
  done (took 17.635535273 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.969175493 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.969338227 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.967239551 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.96726223 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.967521317 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.975704092 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.969430458 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.96798428 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.969583589 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.969261623 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.97460565 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.972823202 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.975661005 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.972073548 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.969938497 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.96745634 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.968698723 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.971417601 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.971743007 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.968268787 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.969971165 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.969150934 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.967987071 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.967961087 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.967957725 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.970871551 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.97926335 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.969636821 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.969401913 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.967794206 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.976066845 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.971913268 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.967877482 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.970116135 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.97011108 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.968812365 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.975604506 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.969751466 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.970160862 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.969815701 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.971148809 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.971681909 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.97235293 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.978250427 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.970182117 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.969196188 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.970975454 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.970692623 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.970263975 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.973860798 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.980367194 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.9709168 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.970360216 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.956905261 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.972396792 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.970971445 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.969247123 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.973327322 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.976798929 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.976921655 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.974080907 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.993378456 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.97912819 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.970064572 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.970127068 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.980039482 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.994573548 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.970895143 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.973049885 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.971578485 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.978070121 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.972313296 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.9716895 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.973867051 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.987499802 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.98054457 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.974303438 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.972284606 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.973162678 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.972667566 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.973878438 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.9720623 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.972251801 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.971955863 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.982867193 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.998207581 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.971361691 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.972458985 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.974152576 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.973066523 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.975675867 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.974516163 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.973762568 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.972879198 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.97384554 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.975915318 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.973368168 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.972727545 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.975001628 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.984473115 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.972569831 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.973675831 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.977052312 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.979669901 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.975998787 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.974888016 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.974597904 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.974024676 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.981318426 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.974575635 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.973527895 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.973935129 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.974500192 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.977758596 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.974978338 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.97771114 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.983165162 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.983653799 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.975255255 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.977441617 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.980009209 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.978239926 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.986082634 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.998825005 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.974869955 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.980747805 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.980880298 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.986817879 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.979496448 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.97409843 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.976521168 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.976813163 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.975498705 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.977557396 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.976139087 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.976414842 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.975729679 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.97419717 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.975303109 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.975066742 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.978504978 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.977062892 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.978268675 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.976474082 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.979705877 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.976738432 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.979240415 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.983549301 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.97755162 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.975746019 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.975233514 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.976841516 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.977107922 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.975520773 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.975897654 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.975701304 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.978113358 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.976227957 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.977897441 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.97682963 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.976145401 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.978403629 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.980908701 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.97686113 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.976372156 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.976394119 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.977356835 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.977111408 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.978603035 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.977045047 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.97903865 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.977940949 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.97334812 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.977349008 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.976341487 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.975979299 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.976127669 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.976584065 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.980668324 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.9888683 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.96682775 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.987738455 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.976958164 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.971531328 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.948257067 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.976342386 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.977890539 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.977822549 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.977142028 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.975069925 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.977538009 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.981012532 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.996443064 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.987822864 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.979654119 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.971980541 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.953770936 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.973534554 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.984138718 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.977369553 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979452382 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.97982838 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.977900487 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.976764912 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.979633318 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.981567119 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.977981932 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.977087581 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.982205998 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.978501841 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.978776739 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.979585901 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.978060881 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.981901311 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.977312309 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.979236911 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.978061827 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.978770404 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.986770047 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.981501476 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.978551498 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.978635545 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.977831597 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.978507826 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.97940519 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.981736634 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.982199523 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.979521435 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.981247913 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.987664454 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.980531686 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.978789151 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.981192096 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.979894484 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.981800971 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.980830006 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.983896541 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.988467526 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.949116181 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.978801699 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.986309581 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.965975194 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.984424401 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.979998954 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.980917821 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.980617035 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.981971909 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.98065796 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.982010933 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.987786867 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.980914725 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.98242229 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.979722159 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.968595414 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.982169065 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.982576421 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.98067363 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.971301583 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.966231636 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.974347337 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.982766143 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.983645533 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.98363429 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.981980847 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.986452383 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.982162794 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.995641481 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.99089225 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.982367789 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.981681467 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.982191844 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.987186359 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.981391316 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.981858609 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.990312276 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.982692735 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.983559066 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.986281869 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.98248311 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.98138072 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979514919 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.982902972 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.986434031 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983910995 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.983773764 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.983758835 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.982225462 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.985671371 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.983727653 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.985314818 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.988199928 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.983107099 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.983802391 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.982691785 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.993711681 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.983246946 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.984904971 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.991965885 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.984669069 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.983351364 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.985031239 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.984611876 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.985055195 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.98468896 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.984054833 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.986107901 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.983547879 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.987869122 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.996463112 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.988234681 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.994262271 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.98546833 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.994756584 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.985691482 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.985838187 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.985759761 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.987781749 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.992980324 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.983751037 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.98702088 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.993837165 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.985683302 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.986072686 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.991961797 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.984334712 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.987148247 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.986292788 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.986380214 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.991721828 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.987336762 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.985128346 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.986299907 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.985965832 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.985289968 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.989486893 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.987462185 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.986836569 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.987883541 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.98516258 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.985943451 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.984703896 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.985778365 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.985695166 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.984337356 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.986277877 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.994500043 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.986322212 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.987410032 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991145481 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.986899984 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.996080492 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.967537096 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.987436248 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.987258093 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.986500267 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.990443034 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.986307665 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.988120828 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.986405218 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.950727805 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.987557695 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.999410038 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.995583975 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.991723799 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.989377004 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.987584708 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.988554424 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.999290013 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.011999498 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.986930216 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.989671482 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.993484991 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.994974088 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.990233694 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.994816085 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.990308787 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.996967831 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.990433216 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.989095054 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.991820668 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.001577404 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.989980774 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.989873813 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.989435141 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.992931648 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.990748294 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.988547126 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.990773597 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.991769921 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.991925695 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.001404192 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.987957216 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.990665358 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.988016059 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.988928391 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.990576517 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.988709794 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.990510017 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.991369827 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.98988753 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.989895444 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.991479806 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.994864527 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.989829524 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.993524375 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.001152862 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.991131679 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.990522361 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.992328727 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.990082155 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.992500421 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991233972 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.991593541 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.99425373 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.991441349 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.994095711 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.996643382 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.999952645 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.994225993 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.991707136 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.992165555 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.996389291 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.990878816 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.992482346 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.993972693 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.000391124 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.996144258 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.003140776 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.000682224 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.992399449 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.991971947 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.000458534 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.000543645 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.992852992 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.994047175 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.989341433 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.994566919 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.994552529 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.992713527 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.993589577 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.992158416 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.998244799 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.993005795 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.992479426 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.992600352 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.992645259 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.994544937 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.996241762 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.998545506 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.992168681 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.991883646 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.994978889 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.995855595 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.996450005 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.996364314 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.994096067 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.993391247 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.995075912 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.996192697 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.998399374 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.993468041 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.99492217 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.996986606 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.996212717 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.994410003 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.994422604 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.993661879 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995536622 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.997747028 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.002845507 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.993037664 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.994491957 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.994660078 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.998768873 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.993261899 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.995295949 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994108663 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.995523275 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.00258715 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.994900993 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.994709203 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.995809452 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.996121295 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.000164488 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.980695469 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.992568907 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.996262637 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.997530094 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.996040166 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.002437836 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.006448459 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.002966197 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.000631099 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.005231653 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.000005303 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.999843969 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.996794408 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.995681076 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.998818118 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.999128246 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.00072282 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.000027555 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.998584979 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.997004068 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.99818347 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.997030974 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.99961225 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.996484094 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.997563963 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.001515498 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.010140793 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008798068 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.996676496 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.998704125 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.997310124 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.002950942 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.012640437 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.999231086 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999979765 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.998914101 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.998879834 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.000790718 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.006606978 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.006102106 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.002780835 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.998270488 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.00469349 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.018517933 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.999880466 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.009352152 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.032694717 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.001349933 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.002475193 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.001913612 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.987975741 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.002526877 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.98863003 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.000183604 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.007436003 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.999661375 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.000292409 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.007599405 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.99900267 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.999102743 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.998102927 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.002712909 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.005566463 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.000878863 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.00625312 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.000498505 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.000841234 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.002472939 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.004371637 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.001291125 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.998749954 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.99983235 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.00320547 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.001305713 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.001279531 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.010557796 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.00104506 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.002168943 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.015650135 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.501105576 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.002131059 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.000814565 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.999698949 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.007378223 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003687074 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.000649708 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.004361465 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.008836973 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.005359001 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.009467706 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.003721198 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.003735091 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.004348438 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.002210019 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.003155187 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.01831065 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.016177419 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.003797807 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.002658614 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.008132251 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.001112372 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.01009483 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.008124531 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.000424144 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.005098149 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.001440234 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.000608728 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.003137157 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.003885702 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.006879111 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.011578839 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.001887642 seconds)
  done (took 1186.324028296 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.001374393 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.002498766 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.001981166 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.003410883 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.003291216 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998241078 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.996681417 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.997696898 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.996507641 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.998415489 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.995690589 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996251949 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.996641664 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996449958 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.996914732 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.996696126 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.998503464 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.996152048 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.995878239 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.996286471 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.995248477 seconds)
  done (took 43.88955259 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.996059335 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.996477944 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.997106051 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.995293765 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.995485369 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.996204554 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.995950346 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99636234 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.994430073 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993852704 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.994969441 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994934935 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.995338656 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.995717906 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995510046 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993937341 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.994544121 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.996242241 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.987697321 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.987428075 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.986877131 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.988073039 seconds)
  done (took 45.793886139 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.987793555 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.987702236 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.989006678 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.987216808 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.987936613 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.988050484 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.987840718 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.990474261 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.988106317 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.989176729 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.996411855 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.995041319 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.986613078 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.990709165 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.987666336 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.986458951 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.13261725 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.986869192 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.986965694 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.986813747 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.987818446 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.995024095 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.987283008 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.987425918 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.987829981 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.987572892 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.987397035 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.98709681 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.988003406 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.988913973 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.993528734 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.98754936 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.989514817 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.991209172 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.988217213 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.989146172 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.991167818 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.986964978 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.987269309 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.987018561 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.998004379 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.010894915 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.986051948 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.986128969 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.994752724 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.986593613 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.984659708 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.988723867 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.99348044 seconds)
  done (took 99.542409805 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.981846973 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.983729876 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.983662523 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.984192405 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.983821604 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.98429963 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.9829074 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.983420976 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.984406284 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.983731111 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.985861317 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.985817906 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.984671107 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.985367088 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.984845935 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.984415884 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.98421047 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.984860476 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.984831814 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.984745883 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.984643719 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.985503252 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.985643721 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.98520693 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.985200652 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.985137885 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.985075645 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.985333016 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.979580912 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.978341461 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.986060687 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.985451832 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.985285152 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.984945252 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.986022748 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.986207619 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.98596155 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.98576791 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.98537932 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.986299726 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.986584237 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.986676542 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.986175699 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.9865072 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.986287221 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.987059065 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.98622997 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.986176867 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.986899116 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.986030906 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.986823952 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.985971624 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.98663216 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.986360569 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986287553 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.987076523 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.986491002 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.986197426 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.987301361 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.985920393 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.954374496 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.986339504 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.986014525 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.986859758 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.986862525 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.987750995 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.98624893 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.986677217 seconds)
  done (took 136.887375038 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.988134673 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.988696097 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.98767209 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.955504374 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.98744073 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.987372514 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.987621486 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.986579569 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.986813648 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.987083763 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986272763 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.988118089 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.973361591 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.985776147 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.98548359 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985995724 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.98693245 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.979851917 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.980249044 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981318926 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.98045409 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.982941963 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.980767196 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.980396175 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.979824354 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.981075884 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.98083045 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.981182012 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.977742723 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.979531091 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.978809113 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.980484311 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.979005816 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.978104549 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.977907799 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.978068357 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.979219674 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.955802552 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.964657462 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.976586331 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.976943436 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.977645817 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.976366821 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.97387073 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.97456207 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.977381373 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.978095447 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.977067867 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.97597594 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.976138832 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.975395007 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.975155758 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.976537193 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.975772516 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.974780909 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.975560576 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.977789068 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.976484736 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.9759611 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.976620316 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.976787191 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.976843737 seconds)
  done (took 124.62490039 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97347333 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.975082865 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.975036792 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.976340621 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.974565981 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.947109719 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.975328764 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.975803675 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.976644855 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.952595834 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977616914 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.978148195 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.978174531 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.977465631 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.974442609 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976346699 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976936733 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.976257953 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.974473827 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.978191795 seconds)
  done (took 41.369763044 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.974972637 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.97529652 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.975966792 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.977060107 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.976071574 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.973611375 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.976648365 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977750471 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952943574 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.960871846 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.975970701 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.978924194 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976489302 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.974980587 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.948184578 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.972879985 seconds)
  done (took 33.452383148 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.972966513 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.974086818 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.975624271 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.97409315 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.973787107 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.974963437 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.966959218 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.973678066 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.973909721 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.976578958 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.974115515 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.975574431 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.961602222 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.973371123 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.971843489 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.974007545 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.97537052 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.974689312 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.971853364 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.962650763 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.974269109 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.975385423 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.973737229 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.972657001 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.972526382 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.974246193 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.973829407 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.973760821 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.971814535 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.971390172 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.973683404 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.971847715 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.970877902 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.972500148 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.975779177 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.971301851 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.971114514 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.972981279 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.970696742 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.972268314 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.970400526 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.97220924 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.973045002 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.972993533 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.942375513 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.971313645 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.97189291 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.973432833 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.969335467 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.974025481 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.971247536 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.97086931 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.974535657 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.970522939 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.970992665 seconds)
  done (took 110.363540703 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.971110996 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.972113215 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.942104815 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.968372681 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.970209745 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.971043017 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.97194349 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.976072328 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.960358029 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.969893397 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.949411963 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.960566681 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970849968 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.971365702 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.974485249 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.970739937 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.973950511 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.971878542 seconds)
  done (took 37.315853097 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.971896479 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.97321842 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.971950749 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.970812115 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.971629503 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.97100308 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971387642 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.971293464 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971905121 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.973390666 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970648852 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.971206395 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.972131221 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.970480486 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.970952255 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965474987 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.942692621 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970961237 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.970792637 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.968507299 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.944101386 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.965998886 seconds)
  done (took 45.201370706 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.971924137 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.972211181 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.985301801 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.988672831 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.990834767 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.972324675 seconds)
  done (took 13.780995694 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.943465909 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970235055 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.969374473 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.958596294 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97151354 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971068206 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96948352 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972045356 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971501422 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971669616 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970571585 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971543004 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971029911 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972768446 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970856793 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969344794 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972448364 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970791375 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971710415 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969211495 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970174911 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969619225 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969413385 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97083566 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971184706 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968934958 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973558434 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969700416 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972093773 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970169089 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972852375 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971992401 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968652071 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969868309 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971114245 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970268338 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969473148 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965452634 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97199445 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974858883 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.973022884 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967713603 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969973226 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973333005 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972514443 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971774089 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970685991 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970472964 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968344953 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973791655 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973203997 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97272515 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970517428 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970298787 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974049429 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969383299 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971633603 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971201315 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97323446 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.975768264 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96983646 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968138666 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974393153 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968644929 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971762491 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973601976 seconds)
  done (took 131.953851395 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97392204 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.97419958 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973851494 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.975170645 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968151069 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975709962 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973629621 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970665729 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966899284 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973577033 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970354326 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972630878 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97711249 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972900677 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973160555 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970922739 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975172131 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970073416 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974751969 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.974322318 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973824474 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971622446 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970289115 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974887103 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971656556 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970488522 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978168378 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972205631 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970674692 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971686262 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971640188 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971916395 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972195911 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.975782491 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976712519 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969307863 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976125407 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971472224 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975446258 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975687406 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975275651 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969600575 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976444593 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97439213 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973891347 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9736129 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972329624 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974271401 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978653454 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976010227 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.975043227 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97508641 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973400354 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978054441 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.977398094 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97496282 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977155775 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978948984 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976389434 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975026886 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974185508 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974318595 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.961220756 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976330829 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972072331 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976959728 seconds)
  done (took 132.155709927 seconds)
done (took 2746.039110602 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.02837041 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.98148183 seconds)
  done (took 15.917557614 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.132279264 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.999539289 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.152191035 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.083526319 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.001311617 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.974453431 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.968987124 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.97042609 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.061567606 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.972622429 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.004544569 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.969162884 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.972502147 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.971271848 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.970863412 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.971447798 seconds)
  done (took 54.070951117 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.978526264 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.976819415 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.973514841 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.972226236 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.987771336 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.057752123 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.995263642 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.976352202 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.988905224 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.002751559 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.990626259 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.974328375 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.984240324 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.979826879 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.063361868 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.020058374 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.028221836 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.0483188 seconds)
  done (took 37.893293317 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.054111592 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.978138901 seconds)
  done (took 10.93322614 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.972572955 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.996104625 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.98316771 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.983747458 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.974227294 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.978567146 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.994414305 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.002638001 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.001176464 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.982693566 seconds)
  done (took 71.767228874 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.95530393 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.975452526 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.280207849 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.978392678 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.982244101 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.004101804 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.970301137 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.006807469 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.971954461 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.97009673 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.981668808 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.288884313 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.987560695 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.972598731 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.3172679 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.984280185 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.978542581 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.013156151 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.006580807 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.97400124 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.981662378 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.97869166 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.141822978 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.6890865 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.972997902 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.976510503 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.980083097 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.9736008 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.973395866 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.976591155 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.975868161 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.975872042 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.983823448 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.974947155 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.981108982 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.975967726 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.474040029 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.993489327 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.981438234 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.058001653 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.016867916 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.977349455 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.789627241 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.973870672 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.972726131 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.984164712 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.661803668 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.044362569 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.973921116 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.143550994 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.354661804 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.992444708 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.141268417 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.143111174 seconds)
  done (took 138.678090616 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.973381839 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.209320934 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.1261575 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.972641323 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22754125 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.181879595 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.973237989 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.024590943 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.975008356 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.17422904 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.230914843 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.074022076 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.972954833 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.977017056 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.969886889 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.971337049 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.125540465 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041076167 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.973811374 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.972854068 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.000809071 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.177021791 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.093046283 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.974593734 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.002751117 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.178125739 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.091073757 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.08125284 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.799069018 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.973415419 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.037415537 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.9736303 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.977522091 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.978506181 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.127604849 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.072713835 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.055331993 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.977978804 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.978488917 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.97629121 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.655106462 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.176574278 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.070085438 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.096260207 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.223089529 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.189321283 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.587294935 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.976978204 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.600806263 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.143688115 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.179452241 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.184437317 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.093457213 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.977517172 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.273873049 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.977107867 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.975130881 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.196401255 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.196707477 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.076868402 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.976604324 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.977977031 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.976526538 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.214962073 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.976972512 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.070682475 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.979163473 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.976085596 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.070028735 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.076325794 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.201881051 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.194990468 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.00753432 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.298262144 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.472211351 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.183010283 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.04126731 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.196075266 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.968879737 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.975074903 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.059440118 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.81403048 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232095691 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.217728784 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.17445504 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.005395049 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.62898101 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.976686654 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.16314839 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.165457114 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.215892575 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.222937679 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.208659122 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.357344351 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.97855635 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.978339352 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.288810458 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.09416689 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.926764132 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.335447185 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.205543154 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.552570269 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.005703148 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305509201 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.105111811 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.978721473 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.613278437 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.977323529 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.18306136 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.020437184 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.978974748 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.982063801 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.166305071 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.894311459 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.979177407 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.926135206 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.039437418 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.982713721 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183323053 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.981246766 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22736102 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.981782434 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211243915 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.604325729 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.008848399 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.153735679 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.224650977 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.609713779 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.269873185 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219241345 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.092105394 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.247187852 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.980582621 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.982862754 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.238293948 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.980163796 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.979614018 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.148222592 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.98420895 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.122891153 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.983146958 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.245266454 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.998306431 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.233261004 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.980137335 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.217893379 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.013668333 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.029218786 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.981129711 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.104040671 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.984519796 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.820941165 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.141537598 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.983943779 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.981257404 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.569598408 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.983590723 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.134476408 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.208480007 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.002670449 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.050615579 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.546394926 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.979521235 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.068362536 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.003207598 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.617098145 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.98360478 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.236219379 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.958832068 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.467179208 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.983133137 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.216914083 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.217646037 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.986806353 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.980099836 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.824809196 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.984726701 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.984881392 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.137026961 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.957884885 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.904125392 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.180797199 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.987018396 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.108616726 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.985535943 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.060812915 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.307990135 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.984221257 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.984283764 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.98871623 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.988161318 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.983547478 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.192660207 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.00911534 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.41555827 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.11716725 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.239673319 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.288956927 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.1828551 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.023261632 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.990085098 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.203439324 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.984738514 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.045822176 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.984696152 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.005517988 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.210789296 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.985411768 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.187379289 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.216185847 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.885055789 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.031529706 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.98555277 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.984773611 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.960418092 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.127802039 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.069324688 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.987037919 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.987889397 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.098610606 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.103621894 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.162594952 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.806337254 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.1273052 seconds)
  done (took 926.484115632 seconds)
done (took 1257.64918589 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.985573765 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990078603 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.986572146 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.989485249 seconds)
  done (took 29.861190242 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.987063604 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.987355907 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.98876042 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.988589886 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.987833676 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.98687212 seconds)
  done (took 13.839766962 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.986557285 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990365246 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.990671676 seconds)
  done (took 22.878627614 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.416112772 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.393942262 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.062337872 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.127522481 seconds)
  done (took 10.912897732 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.991295075 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.990029182 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.988785592 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.988221428 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.990236248 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.98743619 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.990563416 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.991782159 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.990500748 seconds)
  done (took 19.828198043 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.182855983 seconds)
done (took 103.415535181 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.019457533 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.122404519 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.272017036 seconds)
    (4/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.695820026 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.854063187 seconds)
    (6/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.120663468 seconds)
    (7/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.00367468 seconds)
    (8/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.066376038 seconds)
    (9/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.075830018 seconds)
    (10/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.988850201 seconds)
    (11/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.131333431 seconds)
    (12/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.007090415 seconds)
    (13/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.193413445 seconds)
    (14/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.291967749 seconds)
    (15/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.10949048 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.004636463 seconds)
    (17/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.99956162 seconds)
    (18/341) benchmarking ("sort", Float32, false)...
    done (took 5.658450863 seconds)
    (19/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.097241049 seconds)
    (20/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.074398285 seconds)
    (21/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.988877707 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.0679111 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.013324966 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.086888179 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.005715644 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.083825024 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.116622818 seconds)
    (28/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.970140094 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.015916986 seconds)
    (30/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.047573907 seconds)
    (31/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.730490288 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.378748391 seconds)
    (33/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.138611261 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.583046361 seconds)
    (35/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.995003027 seconds)
    (36/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.204661326 seconds)
    (37/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.760923491 seconds)
    (38/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.251847725 seconds)
    (39/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.147418023 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.005787436 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.084747771 seconds)
    (42/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.36871015 seconds)
    (43/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.251930895 seconds)
    (44/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.991302576 seconds)
    (45/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.144513375 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.251025954 seconds)
    (47/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.068865794 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.073534537 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.219901733 seconds)
    (50/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.993955538 seconds)
    (51/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.070298219 seconds)
    (52/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.285214538 seconds)
    (53/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.524105175 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.452931742 seconds)
    (55/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.079850277 seconds)
    (56/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.99008524 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.361747622 seconds)
    (58/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.3471645 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.185142005 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.995096426 seconds)
    (61/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.26356983 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.990055025 seconds)
    (63/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.393178245 seconds)
    (64/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.102426278 seconds)
    (65/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.286505817 seconds)
    (66/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.410248061 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.308605513 seconds)
    (68/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.413117638 seconds)
    (69/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.310080522 seconds)
    (70/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.581512833 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.84127777 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.198855275 seconds)
    (73/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.385456538 seconds)
    (74/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.050536283 seconds)
    (75/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.242546188 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.754064817 seconds)
    (77/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.459333773 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.117006016 seconds)
    (79/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.261320322 seconds)
    (80/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.077356813 seconds)
    (81/341) benchmarking ("sort", BigInt, false)...
    done (took 6.992815881 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.99450724 seconds)
    (83/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.006270772 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.557428259 seconds)
    (85/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.364211306 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.993355726 seconds)
    (87/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.996498249 seconds)
    (88/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.520980813 seconds)
    (89/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.992628361 seconds)
    (90/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.006641711 seconds)
    (91/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.122240462 seconds)
    (92/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.208697969 seconds)
    (93/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.16016054 seconds)
    (94/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.409467709 seconds)
    (95/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.10444152 seconds)
    (96/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.993819441 seconds)
    (97/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.995957036 seconds)
    (98/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.218817115 seconds)
    (99/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.998693789 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.995311197 seconds)
    (101/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 3.94142992 seconds)
    (102/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.277906068 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.1248279 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.888093859 seconds)
    (105/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.142058275 seconds)
    (106/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.10898547 seconds)
    (107/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.197507085 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.07173119 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.327973711 seconds)
    (110/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.632978039 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.137244908 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.586623944 seconds)
    (113/341) benchmarking ("sort", Int8, false)...
    done (took 4.955222643 seconds)
    (114/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.996524059 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.336618189 seconds)
    (116/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.130930314 seconds)
    (117/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.780707427 seconds)
    (118/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.34990875 seconds)
    (119/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.44425762 seconds)
    (120/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.969566736 seconds)
    (121/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.075870735 seconds)
    (122/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.104044229 seconds)
    (123/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.0696444 seconds)
    (124/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.439048914 seconds)
    (125/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.127487495 seconds)
    (126/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.267325123 seconds)
    (127/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.707975989 seconds)
    (128/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.270348897 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.136176995 seconds)
    (130/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.166145092 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.315716497 seconds)
    (132/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.085761433 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.38023244 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.383235165 seconds)
    (135/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.022181278 seconds)
    (136/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.237164409 seconds)
    (137/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.097570467 seconds)
    (138/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.215511458 seconds)
    (139/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.997306446 seconds)
    (140/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 3.735470971 seconds)
    (141/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.106904616 seconds)
    (142/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.037454978 seconds)
    (143/341) benchmarking ("sort", Float64, false)...
    done (took 5.705206162 seconds)
    (144/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.993073492 seconds)
    (145/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.982371137 seconds)
    (146/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.371601731 seconds)
    (147/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.296226723 seconds)
    (148/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.268759773 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.321775684 seconds)
    (150/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.139818847 seconds)
    (151/341) benchmarking ("perf_sum", Int64, false)...
    done (took 1.983284082 seconds)
    (152/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.00940268 seconds)
    (153/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.129022907 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.626789927 seconds)
    (155/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.100657101 seconds)
    (156/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.056774928 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.419978662 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.191287379 seconds)
    (159/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.233515053 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.076893877 seconds)
    (161/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.207468545 seconds)
    (162/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.250551727 seconds)
    (163/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.128248662 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.030097826 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.291280768 seconds)
    (166/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.113291977 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 2.219880244 seconds)
    (168/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.273474738 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.24828432 seconds)
    (170/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.451069245 seconds)
    (171/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.009701024 seconds)
    (172/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.114454642 seconds)
    (173/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.182997765 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.325950189 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.994904636 seconds)
    (176/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 3.750362448 seconds)
    (177/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.01060892 seconds)
    (178/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.015039914 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.998590148 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 7.379790237 seconds)
    (181/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.275643138 seconds)
    (182/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.965193901 seconds)
    (183/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.32170501 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.879815764 seconds)
    (185/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.418550114 seconds)
    (186/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.177465763 seconds)
    (187/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.109380667 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.753324058 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.872514785 seconds)
    (190/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.109740144 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.214856245 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.13008245 seconds)
    (193/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.29659377 seconds)
    (194/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.469863788 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.015883957 seconds)
    (196/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.00127811 seconds)
    (197/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.185714677 seconds)
    (198/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.147622833 seconds)
    (199/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.331878267 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.108038721 seconds)
    (201/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.665437798 seconds)
    (202/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.167053014 seconds)
    (203/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.002640054 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.391261667 seconds)
    (205/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.100769226 seconds)
    (206/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.314678482 seconds)
    (207/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.023578919 seconds)
    (208/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.078615865 seconds)
    (209/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.061841941 seconds)
    (210/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.012482784 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.000467694 seconds)
    (212/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.264993951 seconds)
    (213/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.298387905 seconds)
    (214/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.012129522 seconds)
    (215/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.386772495 seconds)
    (216/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.145405415 seconds)
    (217/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.001698759 seconds)
    (218/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.637411583 seconds)
    (219/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.880689462 seconds)
    (220/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.90620928 seconds)
    (221/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.883859242 seconds)
    (222/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.557568578 seconds)
    (223/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.010279066 seconds)
    (224/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.001857146 seconds)
    (225/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 4.685311971 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.125253955 seconds)
    (227/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.000781786 seconds)
    (228/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.349438445 seconds)
    (229/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.223458129 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.022484146 seconds)
    (231/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.194694808 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.271176185 seconds)
    (233/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.260299125 seconds)
    (234/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.970962501 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 2.98869322 seconds)
    (236/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.312976431 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.150888224 seconds)
    (238/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.29087393 seconds)
    (239/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.017244473 seconds)
    (240/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.242443631 seconds)
    (241/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.346019564 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.525295045 seconds)
    (243/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.232268688 seconds)
    (244/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.110904886 seconds)
    (245/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.018588739 seconds)
    (246/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.00744022 seconds)
    (247/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.26193504 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.645632173 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.298333252 seconds)
    (250/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.020942346 seconds)
    (251/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.241353244 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.022669826 seconds)
    (253/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.004365872 seconds)
    (254/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.679088647 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.884356037 seconds)
    (256/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.008562127 seconds)
    (257/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.064883327 seconds)
    (258/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.003831332 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.063580868 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.080840183 seconds)
    (261/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.017443293 seconds)
    (262/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.00231833 seconds)
    (263/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 8.761008227 seconds)
    (264/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.196389771 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.1235965 seconds)
    (266/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.433382128 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.188357517 seconds)
    (268/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.003931158 seconds)
    (269/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.00100986 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.655699599 seconds)
    (271/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.043678886 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.319258231 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.069723562 seconds)
    (274/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.005245754 seconds)
    (275/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.109098158 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.007608794 seconds)
    (277/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.120749568 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.318092281 seconds)
    (279/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.210195823 seconds)
    (280/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.119789147 seconds)
    (281/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.15867848 seconds)
    (282/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.011106685 seconds)
    (283/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 4.991377716 seconds)
    (284/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.026534425 seconds)
    (285/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.400860588 seconds)
    (286/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.014295963 seconds)
    (287/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.208511687 seconds)
    (288/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.134617361 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.664952558 seconds)
    (290/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.936597518 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.008118667 seconds)
    (292/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.107175287 seconds)
    (293/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.199323128 seconds)
    (294/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.434924204 seconds)
    (295/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.007214371 seconds)
    (296/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.183279165 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.47599251 seconds)
    (298/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.191117931 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.821361826 seconds)
    (300/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.099870373 seconds)
    (301/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.443885243 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.006126551 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.011205818 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.408009022 seconds)
    (305/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.010442255 seconds)
    (306/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 5.633975242 seconds)
    (307/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.654266908 seconds)
    (308/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.511591586 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.228385476 seconds)
    (310/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.489863123 seconds)
    (311/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.38612552 seconds)
    (312/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.138652339 seconds)
    (313/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.102462717 seconds)
    (314/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.38306967 seconds)
    (315/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.149896198 seconds)
    (316/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.028189518 seconds)
    (317/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.318009887 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.012892965 seconds)
    (319/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.483438355 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.156495525 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.328303105 seconds)
    (322/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.446872116 seconds)
    (323/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.007669284 seconds)
    (324/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.765676766 seconds)
    (325/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.328921526 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.921151736 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.941722777 seconds)
    (328/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.136282516 seconds)
    (329/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.412780273 seconds)
    (330/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.087838811 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.353527837 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.786605403 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.347629649 seconds)
    (334/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.011030485 seconds)
    (335/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 4.64094962 seconds)
    (336/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.02046319 seconds)
    (337/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.41078662 seconds)
    (338/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.011286376 seconds)
    (339/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.201599171 seconds)
    (340/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.166963564 seconds)
    (341/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.23546186 seconds)
  done (took 1144.648556975 seconds)
done (took 1146.657693567 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.030565468 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.013076411 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.522209213 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.022449609 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.015211515 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.014817229 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.532439811 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.046100172 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.029790881 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.533383516 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.024437977 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.015076423 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.029544284 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.048556293 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.025496768 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.028574285 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.019666798 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.039245834 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.047436204 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.019563651 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.065644091 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.019576937 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.016375441 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.066360539 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.006903679 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.025382485 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.036585646 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.065329243 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.066086304 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.015957435 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.018749709 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.379904766 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.067493362 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.021563071 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.025464023 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.029037173 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.021150435 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.030106544 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.033709789 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.028414245 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.015495254 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.029765632 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.020758142 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.01997075 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.015427207 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.014885433 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.020052822 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.142377611 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.029174867 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.359067027 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.077486738 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.035418244 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.066942018 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.019402777 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.016799132 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.017356208 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.067694349 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.020057219 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.018564123 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.362893457 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.114914978 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.031762009 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.35957989 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.080759893 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.024429621 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.029783795 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.014141928 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.024507629 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.377670118 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.57901587 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.050071649 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.038195297 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.002714789 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.018457662 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.030732107 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.531582221 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.030724591 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.59267996 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.040744449 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.029651061 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.021366616 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.019190967 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.015158431 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.033843345 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037277178 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.002077289 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.004512638 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.024751022 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.029794977 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.380492976 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.066366365 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.523819228 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.027349278 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.040963714 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.036731825 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.601549408 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.047109718 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.034316428 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.023444719 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.378397875 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.063725746 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.037091284 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.021060852 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.032682995 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.134763243 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.038082749 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.038992615 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.020221292 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.038748032 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.0275906 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.018915283 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.031327286 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.042563731 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.052420496 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.037293817 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.021585772 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.029849942 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.029783228 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.036943191 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.027427853 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.025383558 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.030497931 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.023124016 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.063827346 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.033194539 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.033465946 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.133751254 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.025543025 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.144652748 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.034157221 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.026226441 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.017889757 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.365203694 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.06591547 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.040892064 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.02750565 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.043608672 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.042201389 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.039729799 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.022331618 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.034443993 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.02207538 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.073561956 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.021546849 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.047448324 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.073313826 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.037110317 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.023719008 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.035602562 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.054406199 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.042377015 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.028291849 seconds)
done (took 318.271316642 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.066533017 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.018842892 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.096447333 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.018114798 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.087270804 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.074901574 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.022737118 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.02000643 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.019166124 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.401992948 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.02228307 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.023276526 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.018999571 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.025323631 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.067941435 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.022545466 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.020665488 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.250218178 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.022137979 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.079909875 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.019790952 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.022289008 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.022608408 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.409780366 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.025579963 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.019018339 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.080981106 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.022006669 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.265073784 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.021428768 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.021935746 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.265197224 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.082707083 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.035188661 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.030402747 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.028394905 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.087074811 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.032546267 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.069897823 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.070127915 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.10034273 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.056190185 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.024312273 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.022898131 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.029226777 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.024217735 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.020402248 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.055741347 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.023633328 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.029580037 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.252260443 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.033908259 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.029362832 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.023315094 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.023264533 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.038589383 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.025693484 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.024861774 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.081720401 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.021515101 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.074122446 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.408517466 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.404958975 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.0240632 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.021288262 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.028513182 seconds)
  done (took 193.85638868 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.089728872 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.101368072 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.090044229 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.033556782 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.073948416 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.092301119 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.032699425 seconds)
  done (took 16.459168658 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.027749084 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.023415772 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.048756757 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.046623055 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.027177781 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.163392235 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.036658 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.030615523 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.052664245 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.02534622 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.359606429 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.046444028 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.034926478 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.023723309 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.041297256 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.052859517 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.028111697 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.024695813 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.12101393 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.109128425 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.030174876 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.020859904 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.03316388 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.039877188 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.026387452 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.029040585 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.011522183 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.035938764 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.025290655 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.027874992 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.02346106 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.039731083 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.026751087 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.012306723 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.025289301 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.025855444 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.031324017 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.02445263 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.026524525 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.026130052 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.026884351 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.027742496 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.024819743 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.026233581 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.024243734 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.048999279 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.025481159 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.027103423 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.024960989 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.028259045 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.055100481 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.026462318 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.028184182 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.032790289 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.068880445 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.032794303 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.029924597 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.025584493 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.028633554 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.025714019 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.025623332 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.108949568 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.049459524 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.02514306 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.048819025 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.068249816 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.026841046 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.026496609 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.026233323 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.053014222 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.028171818 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.049869092 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.028641453 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.12531144 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.026815371 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.168942123 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.049118698 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.032651282 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.030531687 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.027333757 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.035847896 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.027673267 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.030642262 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.034656221 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.032688482 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.026931068 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.031761645 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.028762795 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.038082989 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.027617997 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.073769449 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.028053903 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.03056376 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.125690877 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.029674507 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.126246499 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.053157178 seconds)
  done (took 220.262896414 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.034580889 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.029241978 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.042606759 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.030757008 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.031013939 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.035336656 seconds)
  done (took 14.154602625 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.033839577 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.03349614 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.029145024 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.029510472 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.03192821 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.02992603 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.030924925 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.029289252 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.03428887 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.028174439 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.032810524 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.029067437 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.03129071 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.029820912 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.031185959 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.031797063 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.030797109 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.029714101 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.030223961 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.029246228 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.232080828 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.031541879 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.029500391 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.033117064 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.034763994 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.029197173 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.04082923 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.030310957 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.032292341 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.034385042 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.035313265 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.03072237 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.036534368 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.036645573 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.034515199 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.033771509 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.035597949 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.030987075 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.030203436 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.030589478 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.030499388 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.032047929 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.030689411 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.018725453 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.034323267 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.038922378 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.0368803 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.039865223 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.032055621 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.033607318 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.031532471 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.033464062 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.035804516 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.03259053 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.037983654 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.041610501 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.035760692 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.032163326 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.031242535 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.035178832 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.035974343 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.035743169 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.03480761 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.036461499 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.041634339 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.035128311 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.036030406 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.022144089 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.032739464 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.029272424 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.032494435 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.032893964 seconds)
  done (took 149.513380214 seconds)
done (took 596.189180738 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.114316608 seconds)
  done (took 9.068419342 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.220261831 seconds)
  done (took 9.276832794 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.516489128 seconds)
  done (took 12.474775829 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.05997866 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.069589231 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.047507371 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.038845974 seconds)
  done (took 30.183963877 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.276536027 seconds)
  done (took 9.232496864 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.042893054 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.031604488 seconds)
  done (took 16.100989974 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.046524484 seconds)
  done (took 9.002498667 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.478843088 seconds)
  done (took 9.463543815 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.03893154 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.040114528 seconds)
  done (took 16.056731553 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.037776641 seconds)
  done (took 8.993629109 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.921478901 seconds)
  done (took 9.970251935 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.052529197 seconds)
  done (took 9.028218088 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.048727733 seconds)
  done (took 9.004929572 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.033287203 seconds)
  done (took 9.989943784 seconds)
done (took 169.80113324 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.040270813 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.033926775 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.032700389 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.030071077 seconds)
  done (took 30.09179588 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.071194633 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.06183538 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.078480865 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.0690239 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.062539414 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.059066066 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.071886028 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.070670398 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.048312105 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.068175687 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.069823038 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.068326864 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.068972552 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.078815164 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.078675242 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.043696164 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.06869046 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.070301806 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.062202165 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.078774626 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.067716382 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.069664326 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.034396381 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.037878487 seconds)
  done (took 51.515817769 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.226177359 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.102178284 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.191346951 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.081679854 seconds)
  done (took 10.559734058 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.034899727 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.097919903 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.087525972 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.08230672 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.121109218 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.138437322 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.087345069 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.246817019 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.150736587 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.161053188 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.042666838 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.054901828 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.060156464 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.081410071 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.13973972 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.035269363 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.034165523 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.148351816 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.096591418 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.251284546 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.035434312 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.08900695 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.12919903 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.091847067 seconds)
  done (took 52.455111556 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.037694958 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.044649888 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.043431585 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.03915764 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.039859245 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.040009957 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.044453283 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.037973873 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.060303399 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.041068576 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.040584693 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.037302156 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.045383935 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.039997173 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.039645132 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.052586526 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.051877018 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.03903769 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.040237207 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.043297509 seconds)
  done (took 42.816962776 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.036900517 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.883314214 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.383650791 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.289902847 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.036118071 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.035832702 seconds)
  done (took 32.623058991 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.050629142 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.05918866 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.044213667 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.059977578 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.085164687 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.043867626 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.101148356 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.17882759 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.046878048 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.09843609 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.058684542 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.046750666 seconds)
  done (took 26.83483448 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.038472549 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.001935991 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.046614122 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.050969622 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.048872102 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.03423829 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.046931134 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.034093675 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.038554746 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.060529155 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.048571095 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.031978744 seconds)
  done (took 46.443982607 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.254395045 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.264458195 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254771895 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.630815917 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.351387204 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.023342994 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.324993219 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.250827892 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.767348056 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.799743268 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331102474 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.021384247 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.988405885 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.965085588 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.957773308 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.284609573 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042820885 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.897345618 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.291722255 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089649836 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041709796 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.042319839 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.027182262 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325529915 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355542311 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039699793 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.253621248 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055579328 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.085142498 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.250884416 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.4954596 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.092490431 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.238580378 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.303904532 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.375702265 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.199916742 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.044622349 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.199856066 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.084553995 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.077566404 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.051446754 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.053397842 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.58243542 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.052957853 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.315458327 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042189041 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.149130979 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.031996602 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.965084247 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.308599938 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146033566 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.034547148 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.07836979 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.473660156 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167263753 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.28836942 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.048068741 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.211195525 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100803052 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.240838218 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.266404796 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.036309217 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.257741032 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.968580015 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.395719265 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16870031 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.04998019 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.048436279 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.746991358 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.290342942 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.127488373 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.319752763 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.806808799 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.044896205 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.048876293 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.08809122 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.139294556 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.0482377 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.344490677 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.040456023 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.972210549 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14658598 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.444004446 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051451035 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.045191675 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055781319 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.894636691 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.971423396 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.142337056 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.248465757 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.372662675 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.046510921 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.047154175 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.068955109 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046887231 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.977248754 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.600582931 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.11161132 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.974961022 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607025135 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.504325422 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010234126 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.504310058 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.087458189 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.326948773 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.360335679 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.454033201 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.25689599 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297607041 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.596502495 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.052194267 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.662799581 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130244231 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125253299 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047366488 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.606461513 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.210959228 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.289136351 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.164711377 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.046373124 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.974494874 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.060654136 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.250168787 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.506786521 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103799587 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047890673 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.05346017 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.050080231 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.051411528 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1645689 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063581824 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.337921329 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.126763715 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.051138896 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.988257244 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.056425177 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328403294 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.680955019 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.109940806 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30343183 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.318654557 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.750740117 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.648230232 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.998258258 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.315452534 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.125322413 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124275422 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.628022706 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.186799192 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.146445867 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049597163 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.165404748 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.056833441 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.038333278 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.420157678 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.467126465 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.480249043 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.094778913 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.050776445 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.006361423 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.222401741 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291532869 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104013088 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.084041201 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.054053686 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.133802965 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279191957 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.051921386 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.978130344 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29727387 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.298219289 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.33835388 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.461822176 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.105692892 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.124237056 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.060867578 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.264972455 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.134080885 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.713469978 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.600676251 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272880934 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.612438474 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.021835458 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.694337016 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.257160683 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432205907 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071658554 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.507383382 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.217577201 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.714923345 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.080708407 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.579393821 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.979859743 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057563799 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.392251677 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.01513449 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.364154254 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.120268418 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117742669 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.054370355 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.05402062 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061386326 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.959288294 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.159486509 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.123514424 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127747112 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.981087424 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.687692646 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.09246626 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.054106971 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.053438901 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.355113557 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.834831659 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010093066 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.052423017 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137348395 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.798514002 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.603004535 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.059835254 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061535695 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.648904058 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.064089109 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.792426197 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.176600139 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.801975204 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.088288555 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.249892574 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.754325999 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.337621131 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.134503233 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132419795 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.05280922 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.061799917 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.757026404 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065002475 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.757029708 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.3355715 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.336840244 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.500421548 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.123737367 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.256665973 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.071453558 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.055935444 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.530144162 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.063910755 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.029518651 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258632212 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.558175651 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.321122292 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.700186907 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.140611382 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.058905839 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.321767842 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.059696256 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.524973264 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.741642917 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.067988946 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.058604473 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.322044928 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.744505608 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.058380998 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.969337202 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064367839 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.27558753 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.262466371 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332726287 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.35394803 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.505437465 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.985196566 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064546153 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.086346117 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.300494292 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.057635175 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.095125365 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.505760292 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.113292233 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.488348543 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.338560433 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.382259349 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.696370249 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.320911097 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.125797797 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.069973054 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.710938433 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.190403427 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.988834369 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178510573 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.989204481 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.735775083 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346358209 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.075293516 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.326346761 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040971442 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392665197 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.357892999 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.268469833 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.105414185 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.088936664 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.0596296 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.087291418 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.062416236 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.244090786 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.17384487 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.065524572 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.585507732 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093923688 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.077545918 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.066807217 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.564253407 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082754953 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.060918083 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.756299504 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.084413963 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180542521 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134779411 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.800025546 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.552460127 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.08647882 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.018427709 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.716414544 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3241815 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.119456548 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.515889862 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109726778 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.434020695 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.064801145 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.259885874 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.061210141 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.627492153 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080809755 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.326424858 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.019559185 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.277731235 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267930792 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.091839439 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.065614806 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.988049164 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.228033144 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.954407932 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.043604144 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.059433824 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.734106588 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.452310768 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.256241368 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.482156995 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.880999034 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.065620408 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.383761247 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.458526577 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.67558682 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095095217 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065860095 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.33642978 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.194928163 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.311349421 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.358250245 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.071347409 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.089399616 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278918763 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194116418 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.984734924 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.543808066 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.646159468 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.76234393 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.072779448 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.266846016 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.333625651 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.339135175 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096913827 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143186931 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.468129592 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329049714 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.13488759 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.992386299 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063818277 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.457196093 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.463796488 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.161809113 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305331127 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.378001286 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.664329109 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.525802551 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.488502409 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.450078784 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.510307965 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.470608774 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280205948 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448510337 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.393067211 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.657314727 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.480261968 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.282192259 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1610102 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.344724925 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.944229037 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.777473293 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.311376027 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.070377671 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994586377 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.274046059 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.075445366 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.540897611 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.587442693 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.313569235 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.263655282 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.539472109 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.611330251 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.245001291 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.089850178 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.034139113 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.092444822 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.084704293 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.067982196 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.54651876 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.356024924 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082459108 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.007540766 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.739034588 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.994988561 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.28051967 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.246770366 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.101140156 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.623675633 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.274395148 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.165166853 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36084863 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.304351147 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.101230669 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995382983 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.742030876 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.014300939 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.1172186 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.495236463 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0828166 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.070114276 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274213941 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.994302574 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113162767 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.074742417 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26892738 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65461006 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337068758 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195000527 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313115384 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374674604 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.90984405 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094037417 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339948624 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.993746584 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.683350871 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.747353306 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.109932142 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140705727 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067729552 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.07245208 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.340736363 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.339642957 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.159501792 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.648675676 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.102842037 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.094091803 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.343949173 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.161539717 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.071657434 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.074744972 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.54357606 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.303023645 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.069048435 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.049139142 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285855145 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14591598 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.268722155 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144532892 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.584249517 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.073598853 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.933482759 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172201851 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.019784017 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073593371 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.772362766 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.130576221 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.072028705 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345242364 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.726184165 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.276093644 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.468195343 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.970829024 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.25463823 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11078061 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.075963923 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.070659062 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.465492533 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.373530337 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.072248511 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.339408753 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117524243 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.076041015 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.733053019 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.041359574 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.072740286 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.810587894 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.969782498 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.802466967 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.470575694 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.092132413 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11801559 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.076037503 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.998060658 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.072007323 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.240571242 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061949357 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.088583984 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.44627916 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.322398932 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162337368 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080884809 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.072420865 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.0774927 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285098268 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.588106998 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088631401 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.776170215 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27712538 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.080484119 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.55348892 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.51825688 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.332162673 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.112994005 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.259254377 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319521848 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.61827792 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.262572723 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.050921619 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.303002044 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.077704391 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.347624102 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.351379655 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.075879567 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.287094689 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.559282631 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.360969906 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.427195448 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.384482274 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.139684349 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.270483772 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.969419723 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.08201404 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.081044963 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.338428845 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131310376 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.074608905 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.08423282 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.643271948 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.751326954 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.549445128 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235770333 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.332246753 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829005398 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.832818494 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.078666276 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.01029509 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.063844335 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102739469 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.077921988 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.005074888 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.807157102 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.798494659 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289032977 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.389001949 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.004369123 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.283649779 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.678310288 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.005799621 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.051400268 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.079380491 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.33948307 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.007562618 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079162323 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.030931754 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.297175709 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.783484999 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.343321936 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.076925482 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024425608 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.082492398 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.08081302 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.077974347 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.164176492 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.08010767 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194429913 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339248623 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.39933659 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.1767252 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716224871 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.81975597 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014348758 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120044367 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.691288282 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.644429592 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.295325954 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.202146224 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.812916567 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.024084793 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.083848872 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093836963 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.322211399 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.082900472 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08121232 seconds)
  done (took 2192.447902947 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.089269958 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.113059693 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.132313465 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.140524943 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.185910765 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.157657484 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.144235281 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.153810307 seconds)
  done (took 59.115980873 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.077667141 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.070792666 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.085946319 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.0773167 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.069292889 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.124391149 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.27357067 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.107910043 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.082274387 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.085691678 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.079247059 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.086617706 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.087596658 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.078469802 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.085676042 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.389448883 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.125730018 seconds)
  done (took 80.006004917 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.140503187 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.891179072 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.08647276 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.784311114 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.117440472 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.418452302 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.084366047 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.084459766 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.188615046 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.380327722 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.116269819 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.089394783 seconds)
  done (took 92.381931407 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.0828382 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.081824376 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.079435088 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.068204184 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.079532611 seconds)
  done (took 12.392898239 seconds)
done (took 2731.70254954 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.325784712 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.176556347 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.152974994 seconds)
  done (took 6.328173467 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.222041255 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.273432256 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.388161548 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.392703165 seconds)
  done (took 11.282637316 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.363672249 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.453980204 seconds)
  done (took 6.817037439 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.45139825 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.084777507 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.468964899 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.08447495 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.083727527 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.086362597 seconds)
  done (took 23.261293521 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.080671594 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.083326802 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.081486427 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.081859386 seconds)
  done (took 10.329879221 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.079361921 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.852801615 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.08317059 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.091586247 seconds)
  done (took 22.109724762 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.296232712 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.130884077 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.850274359 seconds)
  done (took 13.277804086 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.702358414 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.528893233 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.696058181 seconds)
  done (took 9.929279615 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.938510077 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.902213059 seconds)
  done (took 7.841380017 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.224076887 seconds)
  done (took 4.225398032 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.919490836 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.3952107 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.553998777 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.597040983 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.662677847 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.296194179 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.400281442 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.35369511 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.483318342 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.482191219 seconds)
  done (took 27.146627507 seconds)
done (took 158.877161323 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.496210031 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.117088789 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.292678409 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.456929389 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.326643877 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.294019403 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.380687421 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.444875064 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.128373497 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.114052136 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.45688594 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.314946967 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.337044087 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.10443576 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.338873988 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.102122009 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.405117827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.521854811 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.135832406 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.381007132 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.390418474 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.101326417 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.300031051 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.117219715 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.41079487 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.243420595 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.675164215 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.104681545 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.286443836 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.711862761 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.246432716 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.531440557 seconds)
  done (took 176.271551384 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.077434817 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.086973646 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.08555365 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.083125684 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.44908349 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.085162743 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.083292034 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.085466131 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.292111063 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.27325967 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.088121765 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.435416486 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.085148919 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.083729082 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.088689699 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.084485618 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.399474132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.089033823 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.089018227 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.084648233 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.088000382 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.304308408 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.087650833 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.317989753 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.382281118 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.08898417 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.088080133 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.092291591 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.086483461 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.0873223 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.086024566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.087614462 seconds)
  done (took 214.932413335 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.086321294 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.090230345 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.087806602 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.089847409 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.090906024 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.088971197 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.089532602 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.089085485 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.872081079 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.858698921 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.091505606 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.091909298 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.091591921 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.089188997 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.089192647 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.090397837 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.088792775 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.09013667 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.087811384 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.0939675 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.088337632 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.810615036 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.088427468 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.845434903 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.09126188 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.087840538 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.086642617 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.088951078 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.089021767 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.092546824 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.091091545 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.09130365 seconds)
  done (took 227.907169586 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.328746486 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.089252236 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.090290109 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.101819756 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.092699684 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.092524796 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.093701756 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.330829912 seconds)
  done (took 21.227905345 seconds)
done (took 642.352235889 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.443463853 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.81156455 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.224454509 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.11677614 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.348434195 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.155007211 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.108496808 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.167728303 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.757981371 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.177508836 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.523565382 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.119810869 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.852285696 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.138875986 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.225451633 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.163309518 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.452605579 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.713347207 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.241537787 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.759750446 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.312363154 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.028797382 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.190155768 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.801703549 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.535135898 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.051641002 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.131050503 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.46105437 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.113525157 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.347462105 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.791359888 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.366857495 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.125900692 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.111575575 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.163711216 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.142320632 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.302366373 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.122400108 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.220882195 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.827464861 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.756846024 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.627791192 seconds)
  done (took 109.04535821 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.101415659 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.100587899 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.099186743 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.101099008 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.105857136 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.097567554 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.098598601 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.096091113 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.099966722 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.095971816 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.098122087 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.110148582 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.099112399 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.108316121 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.100544482 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.09961689 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.088467259 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.106073656 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.103029422 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.064031433 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.102367698 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.099182314 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.098332012 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.102881975 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.098951952 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.101754443 seconds)
  done (took 56.600055574 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.094536226 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.230836524 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.360070344 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.126696465 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.097737328 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.098805038 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.122184298 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.0997425 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.098706415 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.072454852 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.205214095 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.101858286 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.110573342 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.370558519 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.122041962 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.095737937 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.096345204 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.097132043 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.255030087 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.112181984 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.124025991 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.100772634 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.126850843 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.109226375 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.097512717 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.095244517 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.099215487 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.503713405 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.10587895 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.210035522 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.140397413 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.129403654 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.441884039 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.380160034 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.162385302 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.103112275 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.083248124 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.229179517 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.109118843 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.09665721 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.12678996 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.105215557 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.375019326 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.60463791 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.112420717 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.09590304 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.49768821 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.262711056 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.130984598 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.107586601 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3829923 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.12608134 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.098365704 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.100263349 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.134085744 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.110643329 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.096297342 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.34323447 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.113425258 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.124394836 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.101545948 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.084746606 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.260757909 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.106835761 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.24837264 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.103850907 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.10402095 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.098324412 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.372787537 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.126690071 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.608722184 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.114710894 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.097508727 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.211079267 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.257252314 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.525598193 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.11280055 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.262003996 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.456664915 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.135126065 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.107522618 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.488655057 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.137655756 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.108983569 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.097729084 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.099140021 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.098589939 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.142072956 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.12579907 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.523678847 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.60932525 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.361384151 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.136989772 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.112295112 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.100581122 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.345265119 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.112042958 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.097317989 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.374286486 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.634470033 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.114727574 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.105763714 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.591519836 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.114417626 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.128698191 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.109997957 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.391822996 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.128734561 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.142600272 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.097944605 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.106110731 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.100747868 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.13180132 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.111292943 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.100096352 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.576024314 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.267988995 seconds)
  done (took 259.004499886 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.102075026 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.099434837 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.097195694 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.099491173 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.099621147 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.099700341 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.09678622 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.100337686 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.101318001 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.097406201 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.098348296 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.100983996 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.085586041 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.107100533 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.134984759 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.103150363 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.587559039 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.100397824 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.10139006 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.101915548 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.677728838 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.105942737 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.098190386 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.105224162 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.101529923 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.103618988 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.108184505 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.132901912 seconds)
  done (took 173.975534437 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.09899289 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.153510423 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.112983278 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.150205749 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.112213844 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.105435882 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.127222567 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.117494956 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.109199655 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.104752528 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.086214402 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.120140225 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.110689613 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.200886328 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.133318614 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.135854756 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.20600721 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.11098707 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.105637015 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.104810567 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.154261994 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.112889565 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.131904058 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.1648683 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.112380852 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.16067756 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.115522693 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.103871396 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.103073149 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.222715226 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.120624326 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.138681922 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.134979879 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.125642364 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.219663574 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.220572615 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.20755032 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.135162551 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.108748659 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.106736517 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.10503965 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.106972147 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.161600586 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.116286509 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.106652394 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.218784746 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.121191819 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.106671555 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.131045951 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.106344166 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.120015505 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.12228711 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.141480787 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.230539963 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.152234697 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.130850858 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.12992087 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.122238726 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.105143665 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.20479672 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.108502713 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.220785129 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.125065809 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.104210533 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.106837028 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.111568974 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.152525822 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.14109196 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.207357773 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.116882172 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.203507394 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.160325106 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.122342382 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.108204846 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.105995889 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.162334701 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.221755711 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.164518091 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.166440711 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.144452388 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.116805975 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.110975159 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.111175976 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.134809861 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.116594292 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.219388133 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.225346156 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.116953189 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.106298501 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.109799072 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.106762445 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.132274215 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.173859577 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.152226112 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.213848692 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.146653742 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.151794656 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.114856791 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.12148083 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.109632819 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.13852766 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.115116737 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.119095977 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.439112888 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.138111806 seconds)
  done (took 226.87114654 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.464996348 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.155764022 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.173024415 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.384719374 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.455230512 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.000055996 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.149306457 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.152063022 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.163904468 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.278500601 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.220941372 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.200009317 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.147507162 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.129137454 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.155711104 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.168064704 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.195197991 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.455874945 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.251873834 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.6548377 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.147638093 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.429499154 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.452288987 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.490150197 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.195673867 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.540022358 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.750185048 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.249770112 seconds)
  done (took 69.244647649 seconds)
done (took 896.75194415 seconds)
SAVING RESULT...
DONE!
