cset: moving following pidspec: 32210
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.903559377 seconds)
loading group "shootout"... done (took 1.161174337 seconds)
loading group "string"... done (took 0.670118313 seconds)
loading group "linalg"... done (took 8.581759818 seconds)
loading group "parallel"... done (took 0.169648524 seconds)
loading group "find"... done (took 2.941033135 seconds)
loading group "tuple"... done (took 2.113120304 seconds)
loading group "union"... done (took 14.923003954 seconds)
loading group "dates"... done (took 1.451004904 seconds)
loading group "micro"... done (took 0.245144607 seconds)
loading group "simd"... done (took 4.786668315 seconds)
loading group "io"... done (took 1.058400588 seconds)
loading group "random"... done (took 9.542627421 seconds)
loading group "problem"... done (took 1.502117913 seconds)
loading group "array"... done (took 25.133042839 seconds)
loading group "misc"... done (took 1.888520424 seconds)
loading group "scalar"... done (took 43.156869597 seconds)
loading group "sort"... done (took 3.283877531 seconds)
loading group "sparse"... done (took 12.952443899 seconds)
loading group "collection"... done (took 18.489950396 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.531651553 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124028159 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129548924 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122023079 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.180988425 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122093378 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132099444 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085836212 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.849963684 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139006023 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115983856 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.434787338 seconds)
done (took 5.410563679 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.171826011 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.094278171 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083690789 seconds)
  done (took 1.402572826 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072099734 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061272115 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067931017 seconds)
  done (took 1.426945181 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066191475 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134876213 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066955537 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067424076 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070352809 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067176677 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066838808 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066591087 seconds)
  done (took 1.769757353 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072382781 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068059129 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065916789 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067770962 seconds)
  done (took 1.502043937 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06589378 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122656527 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065478886 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065619114 seconds)
  done (took 1.545655636 seconds)
done (took 9.132535547 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140942894 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.815578104 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.754233631 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123814835 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248874451 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450393108 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124759315 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.184337537 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.08954904 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075562974 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122391679 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078129874 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.448120316 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399932251 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071625671 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.1742069 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.641417516 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087041119 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133022953 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45179292 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074082744 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088019703 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084549764 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072022332 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.356838844 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156487709 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669332928 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096685291 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068788226 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095351705 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071079783 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078557203 seconds)
  done (took 10.788821238 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093837002 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090454421 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069330877 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124322976 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09667205 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070834851 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075889963 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068241155 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088898016 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124643879 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091978979 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099041283 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066801995 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069407682 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079950844 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197562529 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080896553 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081605839 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067886695 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080940068 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105973272 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078388901 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078750077 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07829815 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130004364 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169221509 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096950605 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098318268 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066918319 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07934692 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118315297 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125851981 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06893501 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06608649 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119891005 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096929188 seconds)
  done (took 4.675369677 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892608916 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096291858 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083189486 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074654342 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106849133 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114133865 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.123138979 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122683186 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100797698 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069442477 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152146747 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.643480989 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.132477739 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.075419708 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.12011956 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361627406 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.060680009 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07050843 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068481318 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071871864 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070439653 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112791647 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066652263 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176089452 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.587550621 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071885961 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069796462 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097549673 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066601965 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141753611 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.097068661 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070661209 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.558479742 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066593847 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064616174 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089423558 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093750566 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066331901 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067305948 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077701833 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.176214458 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109840854 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080299966 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.492341844 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070390052 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.563638087 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225185653 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07344547 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072090771 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101906849 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064999385 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068343782 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.15070099 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.120945337 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067305349 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272227235 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068231405 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068536513 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069302755 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099563967 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067721972 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068904467 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073389984 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096920614 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.795347894 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089531985 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096652808 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071573725 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399831004 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073832029 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069995839 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070027995 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.113567996 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111164669 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066674242 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066804338 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106923342 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089074585 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089247921 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07004518 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067927275 seconds)
    (81/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.084064824 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066235353 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.351614453 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.154822613 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066761114 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068257509 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482911729 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065065125 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066641028 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069576103 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090069263 seconds)
    (92/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067017996 seconds)
    (93/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064390515 seconds)
    (94/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065295364 seconds)
    (95/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099369569 seconds)
    (96/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067957751 seconds)
    (97/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.331553321 seconds)
    (98/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.18195119 seconds)
    (99/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.458696992 seconds)
    (100/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06932065 seconds)
    (101/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103105227 seconds)
    (102/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119763465 seconds)
    (103/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068702776 seconds)
    (104/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.069272451 seconds)
    (105/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065595367 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095275826 seconds)
    (107/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065265078 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068181328 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065660912 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073734315 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065779518 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064701055 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069679981 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066057428 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066743147 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069148113 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068401569 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067809857 seconds)
  done (took 22.913089756 seconds)
done (took 40.500114761 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.313559381 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078496589 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078878664 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078596783 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078763767 seconds)
  done (took 1.904673651 seconds)
done (took 3.270246583 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132685568 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075804027 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065132467 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100488039 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069080601 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101531057 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108706637 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104215174 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068894528 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069121794 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069157263 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102749388 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104979687 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068949159 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098149061 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103882079 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069291767 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067977826 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068995786 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069348935 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068762987 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06471272 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069154654 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069218558 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099166462 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069087164 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064801764 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09862482 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069168571 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099049887 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068612263 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069348445 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069729868 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100056795 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068984709 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099908611 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064805916 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069373887 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068943234 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069189739 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.0688409 seconds)
  done (took 4.629731815 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071204153 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081999289 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083669374 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062475677 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072117087 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082764536 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062826531 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082378465 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088106794 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082942438 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082179248 seconds)
  done (took 2.172649262 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070654834 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083380141 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087878142 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062870387 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073792795 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084028597 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062506903 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082880018 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086216461 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083980769 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084107136 seconds)
  done (took 2.164500591 seconds)
done (took 10.261627672 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097357247 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066138774 seconds)
  done (took 1.450717081 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224415637 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.624468008 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.290520236 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093134501 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072448344 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08598403 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202530083 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068090192 seconds)
  done (took 8.134574594 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.099504103 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.073349369 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068498553 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069763705 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067945662 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069167039 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069012689 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068648458 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068618848 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068101006 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068067399 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068394672 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070008629 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070367057 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069072399 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06910099 seconds)
  done (took 2.534991868 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103789406 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069822596 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100012515 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063009317 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072274387 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062980823 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071244518 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073633823 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070420511 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070918133 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072849138 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071419102 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071696224 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071454045 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072712017 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.07322444 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073231416 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070583549 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072855273 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073597733 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072821854 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073084974 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07339623 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071842729 seconds)
  done (took 3.188069007 seconds)
done (took 16.612109014 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174775705 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075365748 seconds)
  done (took 1.546503695 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068360472 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068819773 seconds)
  done (took 1.449606993 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073651871 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061233623 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078400101 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070951064 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061480331 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061695689 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077608784 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061748361 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061744561 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061532215 seconds)
  done (took 1.981492239 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06363416 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069213809 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067349592 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065573429 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067365053 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063213617 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065800482 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063367866 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069885693 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062416322 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066169733 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08355381 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066068801 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084568239 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065936743 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066542234 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068095547 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065903008 seconds)
  done (took 2.53877301 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06213757 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062317202 seconds)
  done (took 1.442655742 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065143593 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062107425 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064904277 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064750065 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062004473 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061878284 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062117331 seconds)
  done (took 1.755306403 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422340309 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122257754 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341712785 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068717795 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076705791 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255414646 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064318739 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068912406 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068949171 seconds)
  done (took 2.846641917 seconds)
done (took 14.885538154 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08229486 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181646675 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08787703 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.404291615 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091194444 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067078039 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112893438 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.172831837 seconds)
done (took 2.534947008 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214962587 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.241696102 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.391065014 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124501907 seconds)
  done (took 3.078708704 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336862585 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078821767 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077082639 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067336097 seconds)
  done (took 1.889493894 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064931506 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071656745 seconds)
  done (took 1.463066396 seconds)
done (took 7.9798735 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072412044 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062431053 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.06836332 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064547211 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064335919 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063681006 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064862381 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.104592216 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061918727 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064593376 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.06615932 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064786788 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064688049 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064337594 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06516141 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062481358 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064243133 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064341981 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063906899 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06442154 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062213479 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06449483 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063856913 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064109122 seconds)
  done (took 2.946069002 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079588781 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066289719 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067241856 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067531276 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068015566 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066795326 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067413368 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065899515 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067219603 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065803952 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068048742 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067537385 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065603219 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067817161 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065837887 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067952898 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067505672 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066169162 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065872976 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068141462 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066808194 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066369408 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067673834 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066882838 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067875939 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067462121 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066227587 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066213659 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06711888 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06778615 seconds)
  done (took 3.364677426 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066686458 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060717894 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061059842 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070560187 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060810991 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061576441 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06104765 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060909966 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061011225 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061676759 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060709045 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06086498 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061581808 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060518605 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060351462 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061832865 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065382489 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079513925 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.06079335 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060480338 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065091311 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06092808 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060474127 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060959555 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061356158 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060999284 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061027973 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060979647 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06079926 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061255169 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060491173 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064651511 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065845555 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060649958 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070582767 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065393063 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060584745 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064743983 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061753815 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060545219 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060925116 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060373775 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060345659 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060758429 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070605652 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060822579 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.06174148 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061133792 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061165317 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060840587 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06070391 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062190511 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069193494 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061763564 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060349041 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061242694 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060348506 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060984286 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060480715 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060119088 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060327017 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064125061 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06195929 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061263778 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079893421 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061828665 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070326047 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060392857 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061693778 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063917981 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060998017 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078197808 seconds)
  done (took 5.867838336 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07213319 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072986082 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080415041 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071288316 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065288613 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061803285 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065210585 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062174322 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071120541 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065970685 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061701678 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06559892 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070582504 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065771553 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062891478 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070585918 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.0654878 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06500492 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061577613 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065482755 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063082672 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065404671 seconds)
  done (took 2.826672707 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136452425 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066362033 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105988218 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074468009 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069032569 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075212667 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066625104 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066497802 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066420259 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066952252 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067359021 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06727668 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068837861 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066795294 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067340004 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066870004 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06656264 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067001664 seconds)
  done (took 2.677815292 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077067707 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066367474 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089848853 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066568136 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066295241 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065769909 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069800966 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07016858 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065997787 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066319342 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070889614 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065893528 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065760445 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066601004 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065750499 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066776128 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066249601 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06623149 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069939054 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069529507 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069609368 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069719969 seconds)
  done (took 2.864124749 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077165589 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065717666 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080888219 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066450325 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060998616 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061336771 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066393884 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06549102 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065872375 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06507583 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065440852 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06105533 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066859389 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065433577 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067345796 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065880886 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065212581 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06609128 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064999687 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060520914 seconds)
  done (took 2.671981774 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087007316 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06367207 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063524124 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082669841 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063404278 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063737355 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082708992 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063339988 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063530479 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085166751 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063545433 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063312056 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082716638 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083521452 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063979073 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083033706 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083165144 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082786159 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064187141 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06366505 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08555814 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064037922 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083200473 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06351408 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063558538 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063559183 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064225674 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.08301349 seconds)
  done (took 3.372526801 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064815053 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06414106 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06395313 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064368707 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064588005 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064232825 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064889312 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064938917 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064434395 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0648112 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064582565 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064618567 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.0668978 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064428646 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063956926 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064026726 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064449853 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064533905 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064650669 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064131534 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064193258 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064231282 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.0648167 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064624482 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064789156 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064069134 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064671705 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064395254 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064036223 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064547697 seconds)
  done (took 3.29074286 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074090018 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071893904 seconds)
  done (took 1.501279437 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062505395 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077883362 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060236154 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073162261 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06944279 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064436677 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069640415 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069022994 seconds)
  done (took 1.896232586 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067162118 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091331193 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062161433 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06342372 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065539119 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131813516 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075084535 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074513208 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076561052 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065830739 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063682768 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074447144 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061901187 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07553457 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063611546 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.0715535 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069753041 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080119391 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075656092 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061009682 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074379678 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063277601 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061067109 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063674986 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062799481 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069481269 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077977915 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074804462 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071201638 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059941437 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080775694 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061127864 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062599513 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07071011 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065279231 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061479685 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098088946 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061703726 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066317228 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060910946 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073728425 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081869464 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076121968 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079407925 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063372662 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062894651 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06092803 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062994432 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064881252 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071167198 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061307412 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068608783 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060530184 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062731653 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071915263 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061897895 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066351244 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070656639 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075260254 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07167418 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070262111 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076787984 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070048975 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068706694 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061969761 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080936192 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063411743 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074385354 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076001152 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062486695 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074599807 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061164978 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060502244 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061112155 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094802755 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062880873 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062780832 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061576556 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060987709 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06282506 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071006976 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066726368 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068752065 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065052938 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077404582 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070906623 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061818466 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067686483 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07915662 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064605591 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062126474 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077397848 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064663586 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060548361 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078769768 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070725807 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062879489 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061991477 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064712592 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074489946 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062914171 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059758172 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069812498 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063215449 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06363135 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065553206 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069243228 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061266906 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071395655 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065966681 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062910966 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060077138 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065364234 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061916257 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059619163 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070087244 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060516455 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074972711 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066836842 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074798275 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075326838 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070909482 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076147463 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.06008681 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059104332 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077190723 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069221325 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.198061166 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081248425 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062671047 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073553971 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.065251662 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063723205 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071793502 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061602698 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063939165 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061424884 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067294868 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062909062 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064036018 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067639038 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070666131 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073858981 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063218297 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070530537 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062088122 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077358257 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071752249 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06665779 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065382205 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062262092 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073855237 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068638181 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070762544 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061363014 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062304594 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061845369 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072056079 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071571268 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06318638 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069529512 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065631336 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062685628 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06211218 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063125714 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065240844 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065152561 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062857485 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06976484 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070349633 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075500968 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068958526 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070734824 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060725388 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061159162 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063744895 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061049031 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065865044 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07114677 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077244977 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072929855 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082703952 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062043474 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071378802 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063561481 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078701148 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074593872 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062525175 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066184987 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060327555 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063153166 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07052833 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072778804 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074794874 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076620259 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06639144 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066007147 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061304086 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076724951 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061986059 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07014859 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070594791 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065890964 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061761866 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063031431 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070978325 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065663127 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061993183 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076833896 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067363661 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061091881 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075516066 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061832032 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072320694 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060923161 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064685953 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066702463 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063803754 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071391234 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076405569 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060502892 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06240169 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077375352 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063239365 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0630183 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069620597 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076655376 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065775882 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069793219 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072116956 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071821704 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065955705 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070842314 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062382723 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070395846 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064511726 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073274749 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061107376 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078374171 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059898333 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075830084 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060959319 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071747444 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061091231 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070776955 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062217056 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077700962 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06261391 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061439616 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072351964 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059579159 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069859164 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060534094 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065810666 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067227767 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069934989 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062439354 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069593777 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.201585419 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071905071 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067596256 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070551112 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071969806 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066538129 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061495152 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070491509 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07326159 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070029692 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062808769 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063189946 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062620223 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071143031 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063103178 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06311964 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070547231 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066874051 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.06778487 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063984975 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063608164 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063347374 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070166527 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072062671 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080057567 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070734913 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069223841 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071217518 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061431048 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077054632 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061575319 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072360946 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060788361 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067172542 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071344328 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062002237 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080428991 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063166665 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069658771 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073833533 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070192651 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065179145 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082038709 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06499316 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070530797 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069997174 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065924338 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068169947 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063648034 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069854334 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071611995 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072219164 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062662398 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068822709 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070702734 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063232689 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068977781 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063403506 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069921542 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063267068 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06078576 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066010612 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073303548 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065859691 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066253062 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062086358 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060591503 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061854105 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068078131 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066324234 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070406657 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077064151 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060859167 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062806317 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061356832 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064953279 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079469102 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071473315 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069772552 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066407395 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061149134 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063577719 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.0638638 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062198517 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064523545 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060514624 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06074931 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071949795 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063285517 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065795365 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061647502 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062369191 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071102473 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066569586 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062383503 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068152713 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061621802 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066427554 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060741667 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063334517 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066076291 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061209202 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065129373 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071873713 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077810565 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067842082 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070655797 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062099127 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069050685 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07668664 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068265233 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062321486 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07106953 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060922477 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079366915 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070517329 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069611916 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070733636 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061855984 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076911494 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065264679 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070263775 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076080615 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061800165 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067329614 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060923588 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076248657 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065001052 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060021138 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068164319 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068301995 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066616929 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071659522 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.204628397 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.07044456 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067769603 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065917706 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064152359 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063964184 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070795768 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078019158 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062657929 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06633625 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070380216 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070416323 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066407748 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074021362 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070446095 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063418851 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063253554 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065299679 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062951443 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073705219 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061916236 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066069377 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066127952 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061287293 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068361638 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078243503 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071271684 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071076814 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061619655 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061113586 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07867215 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06537423 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065197808 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06975481 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071432407 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07423553 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070925163 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078888523 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062260285 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067339717 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074397791 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062733738 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061499155 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065888318 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063332022 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070483494 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071732185 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069321962 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06372889 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068168653 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075046076 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063191132 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066044091 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066200726 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062304676 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072261233 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069814319 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072811945 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063007132 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06093364 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064762049 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.0705844 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069375206 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070947671 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062737801 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068407514 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075321236 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069689404 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06486075 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061206112 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064672376 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070417823 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065872393 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061075397 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066193625 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065198161 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068530239 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071238392 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066348888 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061532722 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078064921 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069582087 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070600983 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06350424 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063169019 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062277321 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061120205 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072861364 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061431343 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063563909 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066041402 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063352075 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078944597 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069890833 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076959261 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062797435 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065879224 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061151358 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070870511 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065827006 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061982926 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072376731 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060917353 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076831957 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072808128 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066521267 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060966454 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.087169924 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069158029 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076506294 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071296241 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070308783 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064942942 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071253922 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063231333 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072429338 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060903802 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060097594 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071049907 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069881432 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07325532 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060565517 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070372429 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062528117 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068857726 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068858887 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062732487 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062155612 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061510321 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069505486 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064956558 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069374303 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.206734936 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079197 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063428268 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073666103 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071373951 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072882596 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075618396 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073750951 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069428081 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062190833 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069575685 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070196154 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063045389 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.0662554 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06486923 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083413761 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063184954 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063132317 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07559134 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067816104 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061913672 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068469145 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066575846 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07186997 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062781133 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072590708 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066208514 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062715642 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066250134 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065934173 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060564982 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061022382 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061689403 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071551959 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066266878 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06184812 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080494901 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.0634742 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070257523 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07300154 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068052384 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063095362 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060993773 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063462716 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074834958 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076986601 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065157306 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070925379 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.0629957 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070765246 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060633363 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070565123 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069472501 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070186809 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061330087 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061694082 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076208792 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076932047 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065893867 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070475814 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070339924 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062929242 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082473723 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071093578 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06286045 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072594273 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064039731 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061112904 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06106002 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063207231 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072900829 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061201954 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063802029 seconds)
  done (took 42.376264474 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099487357 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062638609 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061111519 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061309924 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07185637 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062364867 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061773209 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062335644 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062538005 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063980008 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061261343 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064306932 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072530133 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074720443 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071522058 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065454843 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061624429 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062228717 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061672421 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062015875 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071012398 seconds)
  done (took 2.864594834 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064580719 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064956829 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065520774 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065726312 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064671581 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061233205 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065416042 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061282447 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065895939 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061954583 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065974235 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061563789 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062334039 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061977157 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061795372 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063315429 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065986015 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065570147 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061726267 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065916878 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063512867 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065981359 seconds)
  done (took 2.850766872 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063475244 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062192168 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070265309 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06082065 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061363898 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06458956 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060778206 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065269933 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065427269 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065497071 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070511574 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062549796 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061046973 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067480329 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060855479 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062179893 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104310708 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062007702 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061950873 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061331121 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06373901 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070402863 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06140038 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060941002 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065134768 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064088299 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060713523 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064443476 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061768955 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065570779 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062378665 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060834827 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070112681 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069702417 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065517864 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06603975 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063013188 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062079069 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060752922 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060991118 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070013019 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062887444 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06150284 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062612962 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070014875 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061063633 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060483066 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070681343 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061050987 seconds)
  done (took 4.620499147 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071872585 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114171262 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067208663 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095189751 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073730223 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067013116 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066974145 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095462474 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062246998 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063135136 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074492179 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075078699 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063985215 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065253638 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067904763 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064175532 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064409939 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062915573 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06698075 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063216441 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066344172 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067851279 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073503595 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073899272 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065088273 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062896034 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063652194 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065061483 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.0739989 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067306426 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065564484 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065841222 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073789142 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068543058 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063993167 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06343576 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074962452 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064490888 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063691953 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062303907 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063732167 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064942209 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068304899 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075221551 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064420872 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068560484 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06457034 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061986663 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074482909 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063873543 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068409947 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075777208 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064614393 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064581549 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065256998 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074046004 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06389398 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062626426 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06462605 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073718392 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06248274 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064793377 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077130208 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063935848 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067458648 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075174073 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068809445 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065092465 seconds)
  done (took 6.27414122 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071442268 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095846783 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072552411 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072901642 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071439358 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071888398 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071958529 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071940313 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072116377 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072345425 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071714387 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111557456 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06865932 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076574556 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071738745 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071975405 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071888369 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072181964 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071505404 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071474725 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07158056 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072389044 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072140858 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071849675 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074228874 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06793467 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071213219 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071322781 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072174343 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071573965 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073955328 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071840863 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071625707 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072061684 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074517717 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071401871 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062623873 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071333525 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072301847 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071915263 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067822087 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072307043 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071858718 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.0681626 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071722634 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071424957 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072868794 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074265931 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078411358 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072115589 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07173968 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07203844 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071571006 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071790142 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072212702 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078169172 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072218251 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072121012 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071692986 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07218516 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072021413 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078525059 seconds)
  done (took 6.014043088 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075033363 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067969879 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080307137 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061442386 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061373258 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07083279 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061380051 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061557062 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068339685 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068897595 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069658514 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070944602 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073091804 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06979999 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070761739 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072830068 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070750573 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070441471 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06782012 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070259349 seconds)
  done (took 2.86100879 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076640111 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080232183 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067109074 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071105137 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066746822 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070724869 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066533782 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066909057 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067685533 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067151904 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072721626 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072331898 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068043242 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070629417 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071602528 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070927804 seconds)
  done (took 2.592650096 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065065811 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069525399 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068035589 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063139561 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064614215 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062100513 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063730456 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.0609914 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064665318 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075875798 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.06294439 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065182793 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062870611 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061627017 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062086258 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065313212 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06372491 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06251096 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062976456 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067023205 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070603553 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063178432 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065121195 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062728709 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064755998 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070896978 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063788418 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064684531 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062515065 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064966026 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064914608 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069394545 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066315651 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063131549 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061683754 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062232378 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062701977 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06493752 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.0649134 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062868595 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061125807 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067512095 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062642079 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063273473 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06391321 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064911494 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063893471 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068132966 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062317895 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064682295 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06313857 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064278537 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063081587 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069566367 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064662227 seconds)
  done (took 5.024830181 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078381128 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06676024 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061516931 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061288989 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0663362 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067426831 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066945596 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067278393 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067554436 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061272617 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067464625 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066028496 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067139227 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066867605 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066862942 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066572652 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061112007 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067039675 seconds)
  done (took 2.675489547 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067801739 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061793991 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065806357 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063293823 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063651418 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062132321 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061956141 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063193179 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062632221 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063751258 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063570971 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062845905 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062910166 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063137387 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061549578 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063459709 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062752619 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061508535 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063153767 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061612583 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061967639 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061501386 seconds)
  done (took 2.859240606 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088776639 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084872064 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128646612 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080791997 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089001837 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072258547 seconds)
  done (took 2.019493462 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09492573 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104325818 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065943366 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066202318 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074585529 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069578828 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069452834 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069569123 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074897368 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073155331 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069611501 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075055691 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075060115 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07100846 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074826447 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077021889 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06958516 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069410347 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066546767 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077138038 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069692517 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074603133 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06995724 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069346744 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069773036 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071659334 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077532995 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073131618 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069482037 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074998218 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077293102 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069633424 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074531539 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073440396 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066650683 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074818173 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06938467 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077446467 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074953989 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071263632 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066032645 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074962118 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075315369 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071131903 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077865259 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069820097 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07107835 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069865766 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069731122 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079395499 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074834065 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070976347 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074817252 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077497012 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077340267 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079286878 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073613872 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07163062 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075039156 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073879188 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071039427 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075091933 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071115688 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073782067 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077147034 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071260306 seconds)
  done (took 6.330360965 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101330962 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066825279 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069611398 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073749584 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071642417 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0697436 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070194821 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069924559 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069407168 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067182412 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105260359 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070447827 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071613315 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071301931 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069878151 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069822184 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073288851 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071508203 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067541178 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079574624 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069950421 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071344957 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071396893 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071129083 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073598101 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077360242 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069405689 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069766669 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069604773 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069369634 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07127314 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069914413 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0706917 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067009763 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071418677 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069713936 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069177753 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070842546 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069731931 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075156971 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070997036 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077482268 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069753047 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069820212 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07319329 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069631677 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069324838 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067350838 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069396801 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067097443 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073747658 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073564782 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073307745 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071156868 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069545648 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069936519 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069912275 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069637508 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069612614 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077212931 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07138383 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069355235 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079644902 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069632176 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069580973 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071396484 seconds)
  done (took 6.250424361 seconds)
done (took 130.224041077 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.221142215 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.193609432 seconds)
  done (took 1.879520178 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075634743 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166476416 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075744104 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075112719 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109198686 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108042659 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.075921942 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072396168 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074948938 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072468801 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140088178 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076402066 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072948304 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072697556 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072880886 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072730176 seconds)
  done (took 2.897174002 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108401315 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185611342 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082319378 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071034293 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114930766 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077093211 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072512279 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075412406 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077022276 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070755967 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107959866 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081588311 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.0747892 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077553678 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072826127 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074494372 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075951435 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076909564 seconds)
  done (took 3.064736866 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098142571 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.0864475 seconds)
  done (took 1.677558736 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156499642 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105675586 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145113863 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329588426 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130388609 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127284217 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130611707 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125524004 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110676816 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121639234 seconds)
  done (took 2.970471302 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106569333 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105657505 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30877463 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102868701 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082651321 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078029996 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075786349 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079968118 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076035226 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076954274 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122131115 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075879236 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073321465 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123577251 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09885082 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107011328 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071655218 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078547581 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080485257 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071194271 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076338383 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080052699 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178558593 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078697303 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100482333 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075579473 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077392319 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075000316 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074651462 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078537046 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079539922 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099662885 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078950068 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083244682 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07698607 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097484976 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071995949 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098933558 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074594923 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073269435 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075900542 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079630838 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072578714 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078455188 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075693608 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078014333 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080221238 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07166271 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075553589 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074304543 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073048484 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076969616 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077074435 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078222384 seconds)
  done (took 6.295840381 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108152071 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10631205 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071069311 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113747334 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109310225 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070857293 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105327387 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100921087 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109200424 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070248034 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06968795 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069725456 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07715202 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079745771 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116665141 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108865476 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072248982 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070197669 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107912724 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107690338 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069630151 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102733082 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10017757 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106917928 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069040736 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070531626 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069207592 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070514302 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074973899 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076202855 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069193081 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076513526 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081534198 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075770707 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068702096 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069033029 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069025659 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075680935 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076940432 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076673251 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075246137 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068930851 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069252405 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069501336 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069751146 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068338081 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074977462 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076132867 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075222019 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069065159 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069706647 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06900468 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069270042 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075852526 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074803409 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076755124 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076026314 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068939118 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069540711 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07100383 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077177153 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077020698 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076723088 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070442482 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07743363 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069734995 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077630123 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080680334 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069184072 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069627285 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069149092 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069078238 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069694136 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.0748437 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075705392 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069759032 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069424536 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069269222 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077444518 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075075513 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069144447 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074508716 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068579146 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069309439 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06951522 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069989711 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07463209 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076301727 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070050464 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069097857 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069609498 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069322878 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068586273 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074353711 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074999618 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075536331 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074896201 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068743287 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074277526 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074414826 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068729238 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074154512 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068631446 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069268412 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069045552 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074366633 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073104322 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07526524 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067920658 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067737122 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073132072 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.213042579 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070324297 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076275273 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077988572 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076137854 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069369926 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079094564 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070159509 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077920742 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069659545 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077998195 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069934425 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07585174 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069569841 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068924447 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069817859 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075433062 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069903094 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070127831 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069696683 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069981132 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075776392 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078702404 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070046028 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076323298 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075832491 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.0704685 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075888198 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069974461 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076353233 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069508677 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069729967 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068971414 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07812186 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069104309 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069980915 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069832436 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077551831 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069719379 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078250941 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075080902 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068922456 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079366754 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07740704 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07513553 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077756287 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07029347 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069919472 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069481517 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069382159 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074525378 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075789231 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072965367 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069578501 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074893091 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077566787 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069140073 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07499099 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074939545 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074885204 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069651785 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069946645 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077925201 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.0771858 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.307412358 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075236172 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075980336 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068965016 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074685333 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075407634 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069106041 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081407989 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069193043 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079148245 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075241205 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074228925 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075396737 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07689249 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077298011 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07799664 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079274304 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068979177 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069105841 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075039435 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069083099 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069470329 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07542569 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069938306 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06983024 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08012494 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069150536 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07735439 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068870214 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075403722 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068581931 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069587544 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079925672 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069117588 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069869132 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074857068 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068996296 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074769085 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07715695 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075056463 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069242322 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069558438 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075017001 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075735206 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068874459 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068578574 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069195123 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073170887 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073051045 seconds)
  done (took 18.680340465 seconds)
done (took 38.969611561 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170595988 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115651572 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207857508 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199226438 seconds)
  done (took 2.290023188 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101862476 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066284741 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081061935 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090302901 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065762361 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076340144 seconds)
  done (took 2.022007522 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199997807 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173233656 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239500394 seconds)
  done (took 2.145535047 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36619265 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14868081 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215457518 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503066685 seconds)
  done (took 2.865528735 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.11000672 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100623411 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077672799 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11144874 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085641325 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063287865 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133881399 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069960841 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100120508 seconds)
  done (took 2.447165353 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129722166 seconds)
done (took 13.461751907 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.11708295 seconds)
    (2/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.27183795 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.218554417 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.219026889 seconds)
    (5/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.220332267 seconds)
    (6/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.222002292 seconds)
    (7/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.253765311 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.092706828 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.162267506 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.122410131 seconds)
    (11/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.197982593 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.106995656 seconds)
    (13/341) benchmarking ("sort", Int8, false)...
    done (took 0.152326117 seconds)
    (14/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.207268161 seconds)
    (15/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.197231883 seconds)
    (16/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.240568625 seconds)
    (17/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.187428636 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074863122 seconds)
    (19/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.197669323 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076949387 seconds)
    (21/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076281208 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.092691504 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077912898 seconds)
    (24/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081308551 seconds)
    (25/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.24181404 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170687746 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078951676 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078244665 seconds)
    (29/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066312544 seconds)
    (30/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.08293678 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075497775 seconds)
    (32/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.176621058 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175330402 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087537063 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.092532261 seconds)
    (36/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083500224 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077326631 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066993081 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076345832 seconds)
    (40/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143018505 seconds)
    (41/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.07709512 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077837392 seconds)
    (43/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152915362 seconds)
    (44/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.154956518 seconds)
    (45/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.082273247 seconds)
    (46/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.0665331 seconds)
    (47/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.075571751 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085747747 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.088260239 seconds)
    (50/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074158281 seconds)
    (51/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073385382 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074246247 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126881206 seconds)
    (54/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069521797 seconds)
    (55/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066005891 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091652417 seconds)
    (57/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073372261 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088212047 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130950601 seconds)
    (60/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171613516 seconds)
    (61/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.087356339 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074985435 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.146237158 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.254286922 seconds)
    (65/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264247981 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.07586908 seconds)
    (67/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069658663 seconds)
    (68/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.179941782 seconds)
    (69/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074389561 seconds)
    (70/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.090514519 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.090453685 seconds)
    (72/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.141863831 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12458984 seconds)
    (74/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.121920464 seconds)
    (75/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073993979 seconds)
    (76/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.184641606 seconds)
    (77/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.362187131 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.071561611 seconds)
    (79/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.159065688 seconds)
    (80/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084564702 seconds)
    (81/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067947205 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.101250684 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076361055 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091249623 seconds)
    (85/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067735407 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075615426 seconds)
    (87/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067942547 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068889813 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.12656479 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076141042 seconds)
    (91/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.138432679 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.185384914 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088655111 seconds)
    (94/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.164822759 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06676454 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068078851 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070223083 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151384966 seconds)
    (99/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.06655644 seconds)
    (100/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079517755 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073523406 seconds)
    (102/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.167372623 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.152686179 seconds)
    (104/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07756544 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093068936 seconds)
    (106/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.222800047 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074199022 seconds)
    (108/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.201832148 seconds)
    (109/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.143477805 seconds)
    (110/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066999354 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.19835404 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153622433 seconds)
    (113/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.228839033 seconds)
    (114/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065508127 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.09225128 seconds)
    (116/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066318991 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123749226 seconds)
    (118/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073555059 seconds)
    (119/341) benchmarking ("sort", Float32, false)...
    done (took 0.138548314 seconds)
    (120/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.145183352 seconds)
    (121/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.147240046 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.158420984 seconds)
    (123/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074771067 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083743957 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070071179 seconds)
    (126/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066541552 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.08867812 seconds)
    (128/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066895667 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087080759 seconds)
    (130/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06682313 seconds)
    (131/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.219037226 seconds)
    (132/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068598996 seconds)
    (133/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077543764 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075940614 seconds)
    (135/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075376262 seconds)
    (136/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.147427661 seconds)
    (137/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164661679 seconds)
    (138/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080750581 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07487342 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074426471 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076229853 seconds)
    (142/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070612999 seconds)
    (143/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065056465 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147730998 seconds)
    (145/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.15296067 seconds)
    (146/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066711543 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.195631734 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07652831 seconds)
    (149/341) benchmarking ("sort", Bool, false)...
    done (took 0.145631841 seconds)
    (150/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093371481 seconds)
    (151/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066819792 seconds)
    (152/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066511944 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.081313076 seconds)
    (154/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083506112 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065745839 seconds)
    (156/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.06606301 seconds)
    (157/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07399227 seconds)
    (158/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.22631006 seconds)
    (159/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067040686 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073406204 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075261575 seconds)
    (162/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.162708413 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 0.067670126 seconds)
    (164/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067700548 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.066660503 seconds)
    (166/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.066095952 seconds)
    (167/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067624686 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155558079 seconds)
    (169/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.178823122 seconds)
    (170/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067117486 seconds)
    (171/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065168271 seconds)
    (172/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.193833486 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088463039 seconds)
    (174/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083046312 seconds)
    (175/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065881496 seconds)
    (176/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.082868662 seconds)
    (177/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.142251967 seconds)
    (178/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06711872 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074931383 seconds)
    (180/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066379944 seconds)
    (181/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06619742 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064603874 seconds)
    (183/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.254736961 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067426237 seconds)
    (185/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.086041727 seconds)
    (186/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.067938044 seconds)
    (187/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.16629791 seconds)
    (188/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069427375 seconds)
    (189/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089868514 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066833816 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066514908 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068884278 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148306244 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066906657 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073927925 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133743421 seconds)
    (197/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074805721 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066626618 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066824413 seconds)
    (200/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094617918 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066823764 seconds)
    (202/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074921115 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141385198 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143983333 seconds)
    (205/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068391703 seconds)
    (206/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06759695 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092110691 seconds)
    (208/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.066855511 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065336771 seconds)
    (210/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070574685 seconds)
    (211/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.198683009 seconds)
    (212/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.18017108 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074412197 seconds)
    (214/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.07022146 seconds)
    (215/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066603608 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066273201 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077228073 seconds)
    (218/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067017784 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073544851 seconds)
    (220/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085543793 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073635979 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088176425 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153187836 seconds)
    (224/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.0668806 seconds)
    (225/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073388953 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068500867 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067036035 seconds)
    (228/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.200224221 seconds)
    (229/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074271427 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066648606 seconds)
    (231/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14665936 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070377784 seconds)
    (233/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.14359324 seconds)
    (234/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072138721 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.117427004 seconds)
    (236/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066745787 seconds)
    (237/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067363778 seconds)
    (238/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070200312 seconds)
    (239/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164886199 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076820153 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078805852 seconds)
    (242/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066690584 seconds)
    (243/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066744256 seconds)
    (244/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066742669 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073714258 seconds)
    (246/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06814112 seconds)
    (247/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067257313 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177285793 seconds)
    (249/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078973261 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074036981 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06989659 seconds)
    (252/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075937471 seconds)
    (253/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077552441 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065009922 seconds)
    (255/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065178007 seconds)
    (256/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132046434 seconds)
    (257/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151988753 seconds)
    (258/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066243839 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066211093 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066581541 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084242091 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067699765 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066958005 seconds)
    (264/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069796944 seconds)
    (265/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066663565 seconds)
    (266/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066854322 seconds)
    (267/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066759159 seconds)
    (268/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066889257 seconds)
    (269/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066456674 seconds)
    (270/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067618424 seconds)
    (271/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068995414 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066262369 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067119409 seconds)
    (274/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.200393138 seconds)
    (275/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066625959 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064702821 seconds)
    (277/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065652204 seconds)
    (278/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073360221 seconds)
    (279/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068123692 seconds)
    (280/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071220376 seconds)
    (281/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.0753045 seconds)
    (282/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068823372 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133085519 seconds)
    (284/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067728848 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066721647 seconds)
    (286/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067242739 seconds)
    (287/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066958125 seconds)
    (288/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089583781 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150119609 seconds)
    (290/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069671902 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066623605 seconds)
    (292/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073752191 seconds)
    (293/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070039178 seconds)
    (294/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.200298084 seconds)
    (295/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068763747 seconds)
    (296/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.066606511 seconds)
    (297/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138575172 seconds)
    (298/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077576484 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114046785 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065791001 seconds)
    (301/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.18993952 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.170258104 seconds)
    (303/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065909158 seconds)
    (304/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066500104 seconds)
    (305/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068259493 seconds)
    (306/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151090924 seconds)
    (307/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067018306 seconds)
    (308/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.234913602 seconds)
    (309/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.069150325 seconds)
    (310/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068079579 seconds)
    (311/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.067942741 seconds)
    (312/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078026908 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067857043 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117605897 seconds)
    (315/341) benchmarking ("sort", Float64, false)...
    done (took 0.139688608 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067086461 seconds)
    (317/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067974842 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090169667 seconds)
    (319/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182071324 seconds)
    (320/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066299045 seconds)
    (321/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073286378 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078751778 seconds)
    (323/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066688434 seconds)
    (324/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066554866 seconds)
    (325/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069180843 seconds)
    (326/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071167816 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06745579 seconds)
    (328/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067101756 seconds)
    (329/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074454199 seconds)
    (330/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066130932 seconds)
    (331/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065583069 seconds)
    (332/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07898986 seconds)
    (333/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.07038943 seconds)
    (334/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.06946455 seconds)
    (335/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067751267 seconds)
    (336/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075425355 seconds)
    (337/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067062585 seconds)
    (338/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078614454 seconds)
    (339/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066793525 seconds)
    (340/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085981652 seconds)
    (341/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067412828 seconds)
  done (took 36.933560771 seconds)
done (took 38.484531928 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090515807 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079196931 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077791661 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074914862 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078262673 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077252034 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.0783243 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076435536 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078151102 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077630483 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077811265 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06585427 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074204656 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081469604 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075518289 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081942273 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078644519 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081524166 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067265125 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080808601 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092789784 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078318993 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075147859 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08026042 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066522154 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075636273 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090011193 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087100328 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072769306 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075763901 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073492745 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081838735 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073912618 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072347941 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07942964 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.07230397 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075859212 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07307472 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089229457 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072268102 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066691186 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078683944 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073571739 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074130615 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074576194 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078537241 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071152589 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079158939 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065836338 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077156872 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089109611 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071613517 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072955475 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074470968 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071223808 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075210446 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072511351 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077162446 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071446304 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077750036 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.07727252 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074571338 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066022296 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07495344 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073818139 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073690469 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065169217 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071528621 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065900203 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066291704 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065415039 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074895097 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072976043 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071131729 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065305071 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065997186 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06577104 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078045955 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072243157 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075896157 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06647402 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071494895 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071108495 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066668949 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071004848 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077863063 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065263348 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066506876 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065666708 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079935799 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072569541 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06595465 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.07755934 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071304033 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070848446 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066099408 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065591519 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071167866 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073892602 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066360173 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065661999 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070814887 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071019382 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074893343 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066841551 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070731646 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070654223 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065079124 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074761499 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073674385 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074899853 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079272207 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074568129 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077847561 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066366198 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065223915 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076136872 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066874012 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071173242 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07409792 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07161283 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074495877 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066486319 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065196234 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071536165 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072620846 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066400893 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066823371 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066481092 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075474557 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073506683 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065152817 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066069033 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074717013 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07440037 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065005184 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064847892 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074444839 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065424858 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070773881 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070885376 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073847306 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065441611 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065386339 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.211144532 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066691766 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065922069 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072064473 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071675749 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067526674 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075554986 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072617456 seconds)
done (took 12.884622977 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06775966 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105730384 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073333668 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082512574 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078504069 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067798453 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070097296 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08321884 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070609455 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086394795 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094585778 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088656529 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093289278 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065808018 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067043631 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068363884 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065970966 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074379842 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081205412 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089923614 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095434634 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066776277 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075888566 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083278361 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076885298 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083539855 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068024013 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067632773 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069784583 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12284298 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092626464 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066396965 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067768675 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080204541 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080909571 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073827143 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067622294 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07127958 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067945299 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066639647 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068466606 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083781867 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070399723 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070834508 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068813306 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06851013 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06726053 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070133558 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080036949 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070155927 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074549459 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078326633 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068556855 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067011318 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065224008 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070437165 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066712874 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067743 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067272028 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066757383 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067479143 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069408119 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067968311 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067588018 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070451833 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069441335 seconds)
  done (took 6.56035066 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083754468 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092502148 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081661216 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081890045 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067473152 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067667877 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067125137 seconds)
  done (took 2.206825824 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067807837 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075086743 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079419415 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079710566 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088831568 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076948358 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067752633 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098707188 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066380174 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076049672 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083362678 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080397813 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070691758 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079363848 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067712997 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079095916 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068271555 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074578196 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074883754 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080558769 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071088435 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097057501 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080862414 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067821813 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080982345 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074861374 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069677836 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067543387 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068072773 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067444719 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06702978 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089021495 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073362332 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079104744 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067814925 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066490465 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072045939 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068258646 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071153503 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075871159 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070201671 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066856629 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067663574 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067382369 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068028746 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071284706 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068287261 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067025663 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066941845 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074433623 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066388788 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074028141 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069574836 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072627785 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072107327 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072448958 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074451375 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067575944 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07487479 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073659229 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067918651 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07969074 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078589789 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071030857 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078594844 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075742199 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074009357 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071446493 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066784629 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066474191 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067665379 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079207769 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07079853 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069469178 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068447062 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07244317 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070937335 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082781405 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082634898 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080403318 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069864481 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067438244 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071048172 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08271433 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072545098 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067163113 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068552532 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067234678 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072611559 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067902723 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071957606 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068024213 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073881045 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070018779 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06977511 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07515412 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067626937 seconds)
  done (took 8.744882141 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070321466 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069769999 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068659626 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068644483 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068613594 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068876267 seconds)
  done (took 2.111992674 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09141838 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06833347 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080305201 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068267392 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089893091 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074221935 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074324672 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069579511 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083821517 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078116383 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075006633 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076983523 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074201932 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069990164 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073696343 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06904641 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073752699 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070957887 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077934061 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069808671 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081229265 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069776107 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072628943 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079362534 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070932946 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068843281 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068913146 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07795683 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077714112 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069229781 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068927656 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070736701 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07633089 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069180942 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074053599 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075987662 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06802528 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073822011 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069943806 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070723255 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076413299 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069704216 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069845737 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07292145 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069395309 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07581567 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073431731 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071062364 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073494177 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072717898 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073181053 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068223049 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070828345 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073357619 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075882067 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069310153 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073115076 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073824308 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069424332 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07609921 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067594399 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070835792 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069112463 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070660755 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07260072 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073187087 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076178745 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069784835 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0695338 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068308584 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073013464 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06781939 seconds)
  done (took 6.922015705 seconds)
done (took 28.196760105 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54750491 seconds)
  done (took 2.191722371 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.585951977 seconds)
  done (took 2.2691126 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.390537096 seconds)
  done (took 10.073810197 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.307213403 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.334134947 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.740626551 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133279843 seconds)
  done (took 3.242319836 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.755745173 seconds)
  done (took 2.450576497 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230251261 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220252075 seconds)
  done (took 2.15500905 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335812893 seconds)
  done (took 2.021406934 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.144848893 seconds)
  done (took 2.827335287 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230236142 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166012544 seconds)
  done (took 2.085974725 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540107276 seconds)
  done (took 2.223236676 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.270548143 seconds)
  done (took 5.958874874 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23514868 seconds)
  done (took 1.963685947 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230328025 seconds)
  done (took 1.922211353 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.050124005 seconds)
  done (took 3.735478434 seconds)
done (took 46.811514254 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084795015 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087863996 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08752395 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082047615 seconds)
  done (took 2.006163936 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075214986 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070855332 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074382034 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074422822 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072253663 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073407111 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073838771 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071303146 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072033069 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071191852 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069762633 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07098249 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073927603 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070893306 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073847598 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074668953 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070905118 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071028327 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073575217 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071962423 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073841111 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070923601 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069273745 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071050682 seconds)
  done (took 3.424207195 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079865679 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073386229 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07628894 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072092827 seconds)
  done (took 1.996359726 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078125679 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077451746 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086121432 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091596738 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077743516 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078157299 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08510429 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085853901 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066956562 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088111209 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068696934 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068156704 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067812446 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086409219 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083987535 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063493552 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064927394 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07840501 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077745061 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08070765 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069974062 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066381241 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077848054 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078014152 seconds)
  done (took 3.542522118 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08062681 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066363902 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079964765 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091579021 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093024399 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066241576 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079852831 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093162638 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128434792 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066434506 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072891237 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06639144 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105163002 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066667845 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080938997 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109808927 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11296594 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070347857 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099791429 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066557494 seconds)
  done (took 3.402784957 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077225384 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070430879 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071416633 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066369431 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078235667 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073607593 seconds)
  done (took 2.146698939 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06939812 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06934455 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067709596 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073002743 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071194798 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069234202 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067838088 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066690622 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066789158 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067266804 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067784811 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068348631 seconds)
  done (took 2.52514216 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156556884 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070271438 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071054571 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066724027 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071716863 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067293328 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081719812 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069139085 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084857388 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067920341 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067783186 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069850694 seconds)
  done (took 2.647675536 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100634121 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10107809 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146081134 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117572333 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117339235 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096835627 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120297147 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096128756 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161463731 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137611244 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11694335 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094333256 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087635818 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070480962 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099976521 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101930993 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136810832 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073207183 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113577162 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164536411 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114726788 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112835366 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1225369 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11693631 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081637354 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121662248 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094910525 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102721074 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124703796 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110427914 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119070886 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097948796 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072684899 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071963565 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15041774 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101003428 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108060309 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093704166 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100361093 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088232725 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107295066 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069833357 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087462026 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106250898 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084719973 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11663326 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088477734 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103675694 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081913429 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131790717 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106207029 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099682407 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086225287 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10406379 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130029696 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095552027 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111291586 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107282068 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082759197 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117215609 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100392165 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253658721 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095512758 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081965235 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161423263 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090397897 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113217284 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113224695 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083855473 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090695787 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103831596 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131811957 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107345689 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107866867 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115312847 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096018951 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110827798 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092769928 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128353619 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093891349 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07365362 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105315648 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.1292204 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086092736 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101027463 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130340019 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093310895 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078226875 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092666459 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118994797 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081694324 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097170511 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070235268 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098249422 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107796486 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097546295 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112503967 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107509339 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079036301 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124774009 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109129207 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073229555 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117439463 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099522311 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152711318 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096157595 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07739836 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10028868 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094407952 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148221346 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085952597 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080911817 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099335807 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142207003 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094849769 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169685202 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097489267 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129450714 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098375158 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088353128 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075719948 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090550593 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101808778 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107236265 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102107341 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088635205 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077068998 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086651249 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09562397 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.251562578 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083101545 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115432726 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102851571 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076852703 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090305606 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077610929 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126089943 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078988658 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112362016 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125319748 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079534197 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105846203 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099331119 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108728587 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098826359 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108506366 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140640751 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117157156 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080653056 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084655525 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108954606 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143372052 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114636711 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086501979 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077784638 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100524135 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112150142 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098190253 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107355679 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100992113 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109342131 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098363925 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141294626 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118309035 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092077664 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096387571 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097497955 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123793716 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077501516 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15582138 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094862552 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119132691 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085827578 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141251341 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114630301 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090653772 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085592128 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096538642 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104948067 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106012075 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143983636 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096276621 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073609148 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09357441 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132532108 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077167829 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100319383 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09118872 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093989645 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119025403 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084310597 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081820318 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068449888 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101428812 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134732827 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070283362 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112141254 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117772351 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100025561 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.101962401 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069011478 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097891346 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135888646 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104024697 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136762856 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114546948 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099098505 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116150377 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.097779074 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104147604 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079011639 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123370203 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.127726554 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091089209 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087818299 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127096138 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114289041 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.127187318 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.092461112 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108605338 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.099906601 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097073663 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097222164 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.095756459 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135415508 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116237666 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.11998284 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08472898 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102118133 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105707393 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128151285 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079903101 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111683658 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.074206394 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107359302 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075335489 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103398397 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07821046 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109043427 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077762412 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096399855 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.06851619 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072236221 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134207368 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.107372733 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087047432 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08347801 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.128489668 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125496934 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080456516 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098782391 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101474268 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097689189 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096982832 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105115312 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.083208789 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09008536 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.387132916 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08342861 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086490981 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105108383 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099026379 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112117458 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087997297 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078778694 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140627593 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108830546 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098778819 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08092677 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09877694 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.126143918 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093368071 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090465705 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109115592 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106708624 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144196969 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093200158 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.100550727 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120665928 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082561483 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094887553 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071210483 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088096511 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078903195 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111151155 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077661567 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109839944 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070450154 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131926893 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088453942 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093882031 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10373694 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099002637 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129441809 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093535251 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132915734 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091260738 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103002413 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108872154 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095522662 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081488723 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10492648 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097374064 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110589164 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097530322 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107533526 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111319054 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094943744 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142896292 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091381654 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121802779 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106980622 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108735437 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10461963 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117719466 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138483124 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113450949 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113178304 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076512319 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084412977 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106399279 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10155711 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146626109 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10333594 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073160616 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087961625 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091738593 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.261856128 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106376554 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083746255 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14289313 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088297194 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088347379 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11506225 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090922281 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098925062 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077886653 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097439753 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102042213 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096411942 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095554149 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109566818 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118365384 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115462973 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133806779 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099744672 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093575044 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120119888 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111670444 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111986549 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087508017 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087816806 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125389265 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103537172 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128740952 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101079022 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095905579 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102640253 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091857343 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100246765 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097550252 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111376058 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081976696 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077343553 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069993287 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073764978 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118926583 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110099507 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100256658 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099536404 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074223688 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104809412 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101068163 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073504105 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088886337 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095663971 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100679809 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084985564 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093409386 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115121222 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092442999 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10475395 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100125984 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129192613 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101504042 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089685096 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143996613 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128685199 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089164306 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093993689 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072191735 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080921977 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102630925 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14611442 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119231789 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078626749 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.246707033 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.07871825 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08809309 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073079348 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089541642 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090628505 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104307246 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094068803 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113339892 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104625921 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076780277 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104009069 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098919207 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094035665 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097495828 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103552297 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106897292 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.12524656 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102332151 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098345005 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077634413 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081851418 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076839031 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081653412 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102899483 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078460933 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07731432 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13174044 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092264951 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10591046 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110438799 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085731231 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076491066 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134539885 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070258576 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135383631 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072495997 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083519127 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082258684 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080530416 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094771638 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105957232 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0971567 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114304118 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107021956 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10604019 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112184491 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156722852 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072018528 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144954144 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077222712 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076926577 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076972125 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112026758 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091136904 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108894036 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14143548 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090240054 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093734232 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077991625 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129031062 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099385057 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103931358 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083788891 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079807026 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128975637 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080884212 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072123164 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08752207 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112613322 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073417569 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.263675643 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086726903 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081289067 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114270001 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631697482 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091403 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07755618 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090204914 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143709712 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129695062 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084721551 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110154454 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120159519 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091673665 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085242038 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108837385 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184423183 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075619565 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095599864 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104528931 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099153124 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094148345 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092751356 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088814362 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094009775 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087209652 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08070418 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108796554 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08916436 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092372073 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098825384 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084894135 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081088624 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132216883 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105186276 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083122819 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090042732 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101915227 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089058481 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091869282 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070357978 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114590612 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091900787 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102330238 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092306343 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108463362 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121085652 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089674209 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113667108 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089590797 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109899364 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085797879 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079177937 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102686565 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079166906 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078428303 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118089171 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085072198 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093330852 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104787098 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096817462 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114685459 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118912149 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112128371 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098680261 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079907498 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08684789 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088754467 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076573146 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079590401 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075639376 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077291206 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.270172359 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086999729 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085926105 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116112264 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083286875 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104936924 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101823809 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110374405 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084787679 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102367055 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110108593 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09168208 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104919283 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101894588 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129707168 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146478656 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100287047 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125106024 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134503602 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077699974 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076518392 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069815787 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116013428 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080951184 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082198988 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082584248 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134671699 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082578021 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096294134 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230764368 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081973928 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083299499 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097397048 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071277065 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084157074 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10904216 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086192314 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081981154 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100053148 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085356933 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118823922 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112715425 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090262223 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083699545 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082221792 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094653663 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105836556 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129752589 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091229613 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077063396 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108145476 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104367586 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124482263 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074275272 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081808455 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130832225 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093979208 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105014975 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081166175 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120856064 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134238759 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091079893 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134912961 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072784127 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085189275 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090260073 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127446793 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075885843 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089500981 seconds)
  done (took 65.047436589 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149826941 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143704202 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086294357 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099262949 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188372201 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198337437 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120730086 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09753594 seconds)
  done (took 3.004507024 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069174598 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083904136 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081895567 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20869748 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109184268 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068573422 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074860844 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083056017 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068594065 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068768011 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103456708 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068578761 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069189792 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369788006 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06765942 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073201272 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06834576 seconds)
  done (took 3.611871256 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326375541 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.39045829 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.22068321 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.630353758 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140698362 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485853961 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078258415 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083296559 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627065991 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.376575348 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133901204 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08877776 seconds)
  done (took 18.466302709 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076757892 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079071707 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079905087 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076067949 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076035647 seconds)
  done (took 2.287131189 seconds)
done (took 115.823166132 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084246528 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173679116 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068762144 seconds)
  done (took 2.159375609 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083359557 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082134547 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081910962 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079772549 seconds)
  done (took 2.216960129 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075459757 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077499838 seconds)
  done (took 2.03419198 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223879688 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.17634977 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091130767 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083254336 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080718483 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081083217 seconds)
  done (took 2.140771805 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072864079 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072697756 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072985365 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073113938 seconds)
  done (took 2.173938232 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068527567 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067422614 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069578176 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071817316 seconds)
  done (took 2.16149196 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08574126 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084178564 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113310542 seconds)
  done (took 2.16577403 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084187865 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084359202 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079018734 seconds)
  done (took 2.135245045 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11041493 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097738749 seconds)
  done (took 2.09204445 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081351118 seconds)
  done (took 1.969430242 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090670883 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098763401 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140813554 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108187579 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.14147674 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127621607 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078542509 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079167962 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.0748602 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073992121 seconds)
  done (took 2.898641218 seconds)
done (took 26.604093805 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080098785 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.37022631 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361860008 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088795804 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.673035868 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357548453 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.003683724 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092349338 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100909088 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069679036 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086371934 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650066193 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.990945106 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327433059 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.974928077 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331896813 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652338668 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069837211 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068912967 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069830243 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983933419 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068805599 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069349588 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069826334 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650663755 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374693338 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070620978 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331954831 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069450876 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072127125 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357448961 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070324862 seconds)
  done (took 16.470999742 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071059092 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123568264 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073347166 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085364332 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071691784 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070773454 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07236145 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070228452 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.1115471 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069750075 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086910103 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068674289 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073379729 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070855528 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088828345 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069735648 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071098259 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070419584 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07023516 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07353932 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08840858 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069213253 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070426801 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070276993 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069756519 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082496178 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070743686 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069718863 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069267756 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071721631 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073182689 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070710146 seconds)
  done (took 4.343935869 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122224647 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127355026 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074984016 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11056198 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119236794 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07157327 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151607748 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092689837 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114640414 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069734194 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087162527 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069891258 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105552239 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070873808 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089895543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070044241 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070858204 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070098366 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069295772 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070260122 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088568985 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069307962 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069956114 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070242582 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070375058 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084417873 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070909406 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069662066 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069636417 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071621403 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073398709 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071101424 seconds)
  done (took 4.614522585 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070515528 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072998513 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081210511 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082260595 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06817621 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070441125 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071363204 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068145783 seconds)
  done (took 2.49504717 seconds)
done (took 29.82733703 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080273702 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069744361 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072265754 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088699081 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07593756 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071448366 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065753602 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075961226 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072679377 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072692516 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074467503 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068345002 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071353261 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066057485 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07389945 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067276081 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073942811 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071423517 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071950594 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073052385 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069808704 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07286576 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075521212 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072007579 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072033209 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071893843 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076310294 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072940238 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067850007 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070165476 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069740976 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081515095 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073682726 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074130561 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06723959 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067146161 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072022024 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069282519 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073664734 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076247663 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069852719 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076461566 seconds)
  done (took 4.922539682 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089325149 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096462862 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087778895 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08304301 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107884813 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.0830185 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091729671 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080577009 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079846813 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09091214 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075648978 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080666512 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082017163 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076594721 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080378965 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075938972 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081194478 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075198894 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080063153 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079681132 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092039741 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.07323877 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080678778 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081104405 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075082789 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080940294 seconds)
  done (took 4.07836415 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074786329 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089509927 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093158056 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142768892 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111376155 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084090578 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083272097 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098833375 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102515541 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070061319 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073474764 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095615213 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097996025 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076058515 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108613555 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088306273 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082035111 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071608529 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075759821 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104440718 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092053043 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088350351 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10188965 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089728828 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068385198 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078600178 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076517872 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085308116 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077086581 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081447207 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073429711 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072913026 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069879459 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081787802 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07366508 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067251327 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09457369 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081649596 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085382341 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107522201 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079398707 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071536988 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099817196 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134273194 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068900037 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071619582 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072637482 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.0813372 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070172774 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099512516 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087957329 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068938673 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087990015 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070762883 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070606386 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085445168 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070626228 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.07133951 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081278685 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074927745 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090034474 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074041949 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089859738 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068912772 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080388931 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070378795 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070590837 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06783533 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105197125 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076776698 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121756355 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070700917 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067342322 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.08121055 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080407781 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07610776 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068713815 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088798976 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081569808 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072859465 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080726786 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071879386 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072086188 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104025556 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068117991 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066845624 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066927718 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07160602 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072503898 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069396324 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082195484 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068469098 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072368359 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084532976 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069014636 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069479481 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071720395 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07002448 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068728789 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079571841 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072724406 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070755652 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08142983 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070396104 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072510245 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083776265 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.07874377 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068482266 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070479834 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071790833 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070973971 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073740364 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072422448 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070928987 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075863303 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07608758 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074472423 seconds)
  done (took 11.348223113 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16472375 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155637708 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.07039223 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149975776 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077505934 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073823829 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151939061 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088547446 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069865204 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07075012 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068899752 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09808624 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093511989 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104316671 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074159335 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070904317 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095066391 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102791234 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153289075 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147599748 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093008163 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077480614 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072021389 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070970115 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071083378 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079057139 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085116126 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07720961 seconds)
  done (took 4.661946097 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076456538 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084742743 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073953134 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093419425 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08787648 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069980657 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071448384 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071221253 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086785958 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076559726 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069625861 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073585265 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073364067 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.0706193 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071093155 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076394988 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075861794 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068857056 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073538218 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07423956 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079700674 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095076645 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073661272 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070216703 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072739648 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069662458 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076283325 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079629044 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069705162 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099568553 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066812317 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07396033 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083417191 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07071176 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069523762 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069957878 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069874449 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069858123 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.06984017 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068093401 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068033356 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074729273 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068673612 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075936992 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084030422 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07718142 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071063172 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072138189 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071894 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068886732 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072899491 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072804741 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072219085 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077829256 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073167932 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072458546 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071093929 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098724362 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075576437 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06904357 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068547021 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067727144 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071301436 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077032062 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085918405 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071005199 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06808736 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069406851 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073879118 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083612386 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06946352 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074896074 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066587543 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069985627 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072210451 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072523142 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070873166 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06804258 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069374806 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06964721 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069666928 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069956798 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069134069 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072096791 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067682789 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06819951 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069769262 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071207335 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075856095 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068738044 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072688483 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070862499 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068651084 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072067642 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075126427 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072224893 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089700221 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077860803 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070182285 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067795123 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083909088 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071822395 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069163706 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.0746985 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074103555 seconds)
  done (took 9.707018541 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092285185 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071087287 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.08990151 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096463513 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079792568 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075101947 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084057478 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070660198 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085717614 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069075586 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078643612 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068551682 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082843069 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078844146 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071550442 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079892898 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07221718 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090756837 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084318949 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068633271 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079538383 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082355432 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082408998 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087354049 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087191781 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088377363 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081612269 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072095304 seconds)
  done (took 4.216897609 seconds)
done (took 40.837290725 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.99961132 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.155880864 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.984766706 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.182101984 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.256383606 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.107064917 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.107778358 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.978178199 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.153129193 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.012950002 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.291824536 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.394913788 seconds)
done (took 69.60446242 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.009761826 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.130918245 seconds)
    (2/2) benchmarking "String"...
    done (took 2.199684618 seconds)
  done (took 6.244201239 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.583791528 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.98275283 seconds)
    (3/3) benchmarking "different"...
    done (took 2.034570855 seconds)
  done (took 8.513678945 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.077406691 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.015515907 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.239194442 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.980070662 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.987502689 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.329357677 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.801673145 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.4463226 seconds)
  done (took 32.713953674 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.247678836 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.207169586 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.755227763 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.786762056 seconds)
  done (took 16.960602568 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.591840842 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.246797323 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.247357275 seconds)
    (4/4) benchmarking "different"...
    done (took 2.239447861 seconds)
  done (took 11.302299193 seconds)
done (took 87.838882985 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.982166765 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.055707394 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.993782509 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.137445805 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.994276922 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.014896099 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.991053334 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.017535246 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.983539317 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.986986907 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.424920176 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.982595117 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.982951017 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.016412982 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.982736043 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.035608722 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.523479126 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.991904471 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.003468222 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.569752825 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.463899511 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.99555971 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.994295641 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.220749343 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.292699624 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.015917715 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.585805966 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.990817937 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.686367997 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.99911702 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.982880487 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.987233261 seconds)
  done (took 211.790243089 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.984004988 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.052216539 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.103579481 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.022095883 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.459815669 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.186250962 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.139019902 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.527427823 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.987790615 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.007695217 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.214141606 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.986984185 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.235055255 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.007971211 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.979777676 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.994545293 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.237782585 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.238065039 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.983950208 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.170438955 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.988023687 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.096672184 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.047913088 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.196201404 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.032680815 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.001227504 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.011816075 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.994348603 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.192273994 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.225052776 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.018868437 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.035945323 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.195268603 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.864966527 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.002884966 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.015268974 seconds)
  done (took 178.355120391 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.162059981 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.999057133 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.052675965 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.127799526 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.76008454 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.73646147 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992310977 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.977208338 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.990287294 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.997135671 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.992985869 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.059132444 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.815751982 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.003989963 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.991125396 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.99158082 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.800762959 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.992823879 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.990646282 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.991759798 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.054987647 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.365976058 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.129153161 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.992626119 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.001123344 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.129434704 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.001373463 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991531633 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.129311314 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993796684 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.069746929 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.127586691 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.000683869 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.072611677 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.999240908 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.488180532 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.994216302 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991743778 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.992657903 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.053586251 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.991437246 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.087063878 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.082805687 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.992295176 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.00538133 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.064490287 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.665745445 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.994843693 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.991694229 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.992905693 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.992481076 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.993632498 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.482067589 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.991430193 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.019398347 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.631281031 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.994672602 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.993047144 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.992446473 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.992776925 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.993206342 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.99947307 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.03022693 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.807258614 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.196476184 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.382655284 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.813687936 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.995185492 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.641701131 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.051164109 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.99475773 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.071503218 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.993856355 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.992988087 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.993076019 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994417511 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.084797621 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.076064963 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994655563 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.133084304 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.996836544 seconds)
    (81/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.995023022 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.993983936 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.019414996 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.875266331 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.998410889 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.005963397 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.050800753 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.994794527 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.994233457 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.000730581 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.083525855 seconds)
    (92/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.995940764 seconds)
    (93/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.995138048 seconds)
    (94/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.994641537 seconds)
    (95/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.096111676 seconds)
    (96/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.995201777 seconds)
    (97/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.145155069 seconds)
    (98/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.215095605 seconds)
    (99/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.066128204 seconds)
    (100/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.238023322 seconds)
    (101/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.23239303 seconds)
    (102/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.997540519 seconds)
    (103/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.994685179 seconds)
    (104/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.99481856 seconds)
    (105/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.994816716 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.010080107 seconds)
    (107/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.996190727 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.995109476 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.994739694 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.006253322 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.996509294 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.996896558 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.995438534 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.996875829 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.997395006 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.996769319 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.010028316 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.995955133 seconds)
  done (took 435.930964365 seconds)
done (took 830.206832138 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.609659428 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.687455636 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.585222634 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.621288939 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.590185803 seconds)
  done (took 15.021772029 seconds)
done (took 16.95321205 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.025878574 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.012918553 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.002421917 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.052834331 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.022176033 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.009044191 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.043223335 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.042278203 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.026930118 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.00980742 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.047027464 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.01413175 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.027792502 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.03191592 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.073589613 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.036760486 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.013816306 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.006764336 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.0531207 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.015255394 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.013713079 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.011046663 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.010542289 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.049053875 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.082126957 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.021464004 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.010911077 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.048484663 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.021943012 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.047530906 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.067439363 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.031738871 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.044890248 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.075018275 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.06070653 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.08105053 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.02147545 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.077795042 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.018049488 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.087721756 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.055801288 seconds)
  done (took 85.436971349 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.009985923 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.146792788 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.215856711 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.038656325 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.008078308 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.224226888 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.062447309 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.13270369 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.139186143 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.219264522 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.241053388 seconds)
  done (took 25.374469631 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.006698786 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.142835991 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.217567957 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.041804223 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.009073895 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.225544819 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.070704674 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.142392381 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.146671621 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.222787484 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.229096205 seconds)
  done (took 25.394773603 seconds)
done (took 138.137790046 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.373646278 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.296497526 seconds)
  done (took 6.603431545 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.003206171 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.023586172 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.159454853 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.002970865 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.00339192 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.005127258 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.005115133 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.004134086 seconds)
  done (took 18.140330769 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.005470376 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.005761825 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.006890556 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.005663625 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.006484454 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.006486602 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.006175017 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.005496593 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.006303236 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.005459845 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.006008806 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.006458256 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.0056843 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.006037882 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.005688866 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.005522791 seconds)
  done (took 34.030082755 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.005664714 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.005410747 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.005710474 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.007297174 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.006246619 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.005927752 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.993809705 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.005099847 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.005871944 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.005659527 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.005512906 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.006148301 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.005551111 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.006352711 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.005484984 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.005309462 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.992146997 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.00644615 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.006795395 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.006921483 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.005840667 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.006284687 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.010300113 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.005258903 seconds)
  done (took 50.055963196 seconds)
done (took 110.771769054 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.25385542 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.585775879 seconds)
  done (took 8.773144012 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.007770804 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.004693531 seconds)
  done (took 6.012574983 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.998295942 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.997655593 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.998590159 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.998141867 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.999393906 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.998498637 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.997088355 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.996720574 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.99647203 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.998291295 seconds)
  done (took 21.913076001 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.99719266 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.995405997 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.996435808 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.997069954 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.995136858 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.997123344 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.996194418 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.995925871 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.996247368 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.996484226 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.996502296 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.997677437 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.996715368 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.997077121 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.997230392 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.996394276 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.997678796 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.997126535 seconds)
  done (took 37.865446363 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.99741143 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.996797495 seconds)
  done (took 5.919950362 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.996758143 seconds)
    (2/7) benchmarking "second"...
    done (took 1.997810374 seconds)
    (3/7) benchmarking "month"...
    done (took 1.997017857 seconds)
    (4/7) benchmarking "year"...
    done (took 1.996685659 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.996932611 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.99756709 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.99809725 seconds)
  done (took 15.906337388 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.997238026 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.149580454 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.202840157 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.594279941 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.996470442 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.998784194 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.874986284 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.998518868 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.998804839 seconds)
  done (took 21.736674012 seconds)
done (took 120.061928054 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.835279295 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.994176453 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.205567454 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.064993886 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.055560337 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.274488302 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.024273081 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.521819714 seconds)
done (took 43.899326748 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.987694497 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.979024939 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.012645487 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.014131888 seconds)
  done (took 22.91740151 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.981655669 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.308368386 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.000282063 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.919537361 seconds)
  done (took 23.134520046 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.359982049 seconds)
    (2/2) benchmarking "read"...
    done (took 2.338132207 seconds)
  done (took 6.614856161 seconds)
done (took 61.569250882 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983548194 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.984043158 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.984912503 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.985127645 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.985792859 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.983249788 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.984082817 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.984393713 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.983692414 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.98539322 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.984909636 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984300301 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.984434942 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983457499 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.985402177 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.98466623 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.983936189 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.984476804 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.984485955 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.985346368 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.984697884 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984539822 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.984494398 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.984502204 seconds)
  done (took 49.541687101 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.984288531 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.984023211 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.985762945 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.985404467 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.986861086 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.984681562 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.985014794 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.983300058 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.984367447 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.985629475 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.984093093 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.985404422 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.983096104 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.983732739 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.985768257 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.983464257 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.983682758 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982961676 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98315775 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.983494992 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.98257219 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98213227 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.982230189 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982574905 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.985008336 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980604429 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.98139648 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.981633143 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.980412464 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.98322178 seconds)
  done (took 61.425170039 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.98070992 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.981396872 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.981401885 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.982096105 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.980368755 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.979924838 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.980498083 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.980161152 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.981556479 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.980285621 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.980349926 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.980481445 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.980001115 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.981947755 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.977810117 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.9782267 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.977930525 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.978129822 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.978881341 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.97862495 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.979093636 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.97803493 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.978345852 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.977934146 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.977464336 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.976172428 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.977981913 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.978758919 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.9780575 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.978244915 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.977642153 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.97790347 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.977158191 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.977819016 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.978882694 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.97719177 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.977726697 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.976846394 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.978028343 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.978327855 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.978412489 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.978380749 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.977392024 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.978339268 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.9780186 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.977278668 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.977959511 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.977478356 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.97759672 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978557236 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.97709257 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.978059076 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.977034509 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.977895949 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.978912475 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.977544471 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.97738214 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.977596871 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.977310997 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.97873878 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.978523255 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.977611169 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.977625422 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.977160252 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.978701606 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.9758651 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.976541075 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.976066943 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.977463734 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.977363356 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.977191594 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.976916637 seconds)
  done (took 144.354192759 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.976971334 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.977858024 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.977073875 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.97884084 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.97707815 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.976502324 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.978191346 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976069727 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975956669 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.976404955 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976355401 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.977890874 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976471323 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.975981556 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.97540462 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.976537452 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.977517661 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976207069 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.976335661 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.977348552 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.976752951 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.976196076 seconds)
  done (took 45.395154919 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.976093439 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.975248114 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.975248972 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.976747067 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.976261556 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.975452533 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.976103715 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.976187154 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975024138 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.976696774 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.976450967 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975887043 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.975656661 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.975192756 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976054665 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.976551133 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.97518542 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.97683149 seconds)
  done (took 37.47155837 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.976596462 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.977292093 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.975788549 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.978110794 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.976371459 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.977424586 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977695331 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.976663701 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.976435282 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.976561429 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.977252055 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976037812 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.978074866 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.976410971 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976894763 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.9784378 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.977231323 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.97680766 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.977038034 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.978175083 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.977742161 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97827848 seconds)
  done (took 45.402605989 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.977498458 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.977410178 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.978487883 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.97799822 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.978169976 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.977927321 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.977404278 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.975639392 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.977276376 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.976827982 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.976382731 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.978537399 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.97924785 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.978309331 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.977266789 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.977769845 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.979064784 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.979448122 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.979115112 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.978885663 seconds)
  done (took 41.464487037 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.976524275 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.977925306 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.977987491 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.976667696 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.976682374 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.97670728 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.977210632 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.977421436 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.977242134 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.978304573 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.977562678 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.977973558 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.977864216 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.976302402 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.977342755 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.977850959 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.978369542 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.977698938 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.977823618 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.976509452 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.977348769 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.978390175 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.978499077 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.977993526 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.977616678 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.977762206 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.978627702 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.97829625 seconds)
  done (took 57.280029993 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979118355 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.979344497 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.980206599 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.980852446 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.980322548 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.980475016 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.980914844 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.980758506 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.980079702 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981088065 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.97752027 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.980037002 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980904733 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.981386241 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.98023111 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.980722124 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980662239 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.981397996 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981080242 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981617966 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.981003151 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98062356 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.981570333 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.98067963 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98159624 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.981151046 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.982105161 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.981518043 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.982822748 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.981885029 seconds)
  done (took 61.332876949 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.001267303 seconds)
    (2/2) benchmarking "in"...
    done (took 2.000001743 seconds)
  done (took 5.911195618 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.982388466 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982977689 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.981892926 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.981682249 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.982738426 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.981616101 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.982152352 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982607896 seconds)
  done (took 17.767594316 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.982413644 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.983598769 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.983011386 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.982061571 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.981808377 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.988603845 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.980803346 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.981794056 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.982509236 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.982027787 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.985120614 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.984101083 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.988979869 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.984563656 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.983411907 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.981327483 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.983175686 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.98298905 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.982475839 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.982932557 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.985119755 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.982014645 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.983702931 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.981775797 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.984256721 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.983280726 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.990854156 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.982419361 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.982500722 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.984309935 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.98949889 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.984610817 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.982516949 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982748734 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.983493195 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.985794266 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.989606342 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.983458438 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.983246487 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.984456328 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.984295281 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.983598998 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.985604895 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.990654781 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.982348445 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.984121591 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.984558003 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.982888477 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.983130025 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.987029198 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.99328967 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.98363615 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.986260053 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.985493635 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.985110487 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.983609388 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.983320985 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.984804561 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99036352 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.990601159 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.986189648 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.003253877 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.991707436 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.984849696 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.984026329 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.993023337 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.005676732 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.985153423 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.986211351 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.985982146 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.99154634 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.986817179 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.986947005 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.9866112 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.998245773 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.99148375 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.985181873 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.987957761 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.988091549 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.985445133 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.985510684 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.986020481 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.984421215 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.986242681 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.994645739 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.007281594 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.986001163 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.985398031 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.986729113 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.986416213 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.990434487 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.988100767 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.985731858 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.987067156 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.987403966 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.98844379 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.986458325 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.986029982 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.984762021 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.994374969 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.988674928 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.965940819 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.980659436 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.994048034 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.988366097 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.985971755 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.986794704 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.986445364 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.995326138 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.986165499 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.988444474 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.988852271 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.987213797 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.99190762 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.989022884 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.989532421 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.994364579 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.994917067 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.988379735 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.990262706 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.990471522 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.989568816 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.995571907 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.009319861 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.989309451 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.990363508 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.991782284 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.998651311 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.990474654 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.989211067 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.989479163 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.990663357 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.989273692 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.990062588 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.990776573 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.988128581 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.990311522 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.987979767 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.989273029 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.989085226 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.990664733 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.988639323 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.990164271 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.988629525 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.991345754 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.988156718 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.990364322 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.995522338 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.988763471 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98862447 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.991548545 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.990856458 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.989978289 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.989956238 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.991095286 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.991042675 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.988992733 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.988779451 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.991097029 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.990026346 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.992067305 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.9900644 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.996108429 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.988948324 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.990903928 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.989178462 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.990229646 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.99060354 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.989920392 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.990422519 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.992180902 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.990169031 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.994019518 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.991770826 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.991061919 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.99079118 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.991585014 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.989153444 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.994749133 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.001288251 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.993144488 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.998754888 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.993073282 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.997831005 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.993537821 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.991859082 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.990687991 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.991567693 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.991667659 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.993514207 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.993158807 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.994392791 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.01273353 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.000650814 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.993763629 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.992132251 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.996439274 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.99666395 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.996754539 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.99434921 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.992140758 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.993850492 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.992161975 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.993232969 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.994272062 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.994950106 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.991889721 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.994772236 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.995356702 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.991733116 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.978739511 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.992561661 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.994891394 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.993810724 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.995338505 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.992057812 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.992585164 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.994602735 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.000010933 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.994367268 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.994840945 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.994103767 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99440995 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.99589516 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.993825364 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.99357857 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.995578186 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.991659643 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.994350139 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.000948737 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.994124497 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.993627204 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.993361549 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.996921928 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.995588782 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.995444409 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.996716774 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.002328552 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.996064511 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.996316347 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.998946321 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.996553342 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.996392043 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.995547325 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.995638728 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.995312487 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.994534556 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.995219171 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.997108736 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.002036221 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.996279839 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.994196288 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.996421529 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.996222045 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.995887428 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.996897563 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.995557767 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.997480969 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.002092008 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.000464213 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.994838327 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.997916826 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.969652899 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.996075903 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.000913795 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.994879416 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.00929096 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.003006736 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.996902434 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.998037974 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.995320126 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.998592946 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.998593754 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.996872657 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.003689331 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.999677072 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.9960897 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.002521003 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.996787386 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.996047422 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.00203468 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99722078 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.00012502 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.997465076 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.996876882 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.996711527 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.998376378 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.998991782 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.997001951 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.998019835 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.002334605 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.998408182 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.997367604 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.998988127 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.005682193 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.999338023 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.997803583 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.00453841 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.998799237 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.997182515 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.998726123 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.99917064 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.997672754 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.99730003 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.996755357 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.998301617 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.998503934 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.001282789 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.007830376 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.00008072 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.005096993 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.999390025 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.007724388 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.997906939 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.000217641 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.998562286 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.001271405 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.005121479 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.000148454 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.997301943 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006206645 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.998581539 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.999108146 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.00326448 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.001363565 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.99858958 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.998920689 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.999404453 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.002211765 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.002462171 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.001940067 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.99885331 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.001309811 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.999152232 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.001746133 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.999402935 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.999541148 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.000245753 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.001340116 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.000722378 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.000312891 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.00075988 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.001012818 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.002499812 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.001719052 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.007113349 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.999784067 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.000505747 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.003924898 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.003469653 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.009281147 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.001077868 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.001129553 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.000228781 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.00261309 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.003955201 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.003330022 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.000716625 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.000424578 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.002540711 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.002107086 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.012390792 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.008551127 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.003602836 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.003074321 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.000613188 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.002165054 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.009720466 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.025405169 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.002556549 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.001822323 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.996308774 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.009486145 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.002983481 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.007638063 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.004704207 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.01023773 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.003088292 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.001440797 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.004566905 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.013279299 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.003260274 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.004800571 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.004267588 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.007431553 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.003781641 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.004350568 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.002548506 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.00538203 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.00354969 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.013494701 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.005419439 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.003716865 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.003053122 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.005120926 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.003212434 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.005235978 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.003510261 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.004578674 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.003440026 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.002625628 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.00375939 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.00712034 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.003250816 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.006888319 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.012387751 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.004012868 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.004255447 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.004610212 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.004378494 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.005154777 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.00457201 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.002882 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.005343339 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.005986792 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.005390036 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.007143654 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.011791814 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.004833548 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.005974585 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.007435977 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.006602076 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.003330223 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.005559335 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.005855386 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.013533759 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.006894033 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.014163634 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.012964419 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.004414192 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.006416754 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.010930118 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.012781149 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.005501617 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.003705229 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.005178935 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.006823153 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007882166 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.006318838 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.006590891 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.004670851 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.010264637 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.008249397 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.005700869 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.006841815 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.007782496 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.007861631 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.007619896 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.010508782 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.008444969 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.008694882 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.005015058 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.00604774 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.006775001 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.009495095 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.006201224 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.008826014 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.00789806 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.007881712 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.013090242 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.007864735 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.008687523 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.008139721 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.008373219 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.00814846 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.006048038 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.006531773 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.008978571 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.010980282 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.013547043 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.009461049 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.993189288 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.993935649 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.010038816 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.007225081 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.008374033 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00724633 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.009306062 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.014851166 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.010620283 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.00772979 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.007590375 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.010506859 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.014474628 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.009126493 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.012569619 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008387992 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.00825832 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.009860405 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.011419455 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.015217184 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.013308282 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.011325948 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.017355398 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.012006253 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.008781275 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.011232965 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.010537128 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.007582888 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.009975826 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.011504911 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.009343217 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.011317761 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.009926735 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.010120419 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.00850341 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.01057261 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.01156911 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.011787972 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.012417594 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.017415004 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.019076556 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.011299393 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.011484077 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.010132486 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.012057286 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.019613558 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.010857464 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.010086371 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.010352771 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.010708072 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.01132222 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.016675176 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.016995665 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.014440086 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.010799197 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.014192428 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.026880768 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.012097229 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.018763383 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.040118746 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.010824568 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.011423237 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.010496975 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.011335301 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.011155233 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.013413513 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.010597038 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01702167 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.010937256 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.01285076 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019055477 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.012794967 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.013088108 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.010966362 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.01207054 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.016735007 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.011825594 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.018638397 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.01174068 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.01328603 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.011859581 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.013741436 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.014019135 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.014300353 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.0139247 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.013395038 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.013818891 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.013241876 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02119909 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.013796641 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.013457255 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.025952922 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.481974283 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.012064332 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.014942069 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.01215102 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.017639681 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.01480164 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.014386374 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.016164013 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.021719659 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.015080092 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.021525219 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.013412899 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.01439137 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.012522317 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.013791841 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.012746774 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.02472961 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.023152571 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.012164599 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.012361628 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.01928478 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.014521191 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.020327911 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.018203614 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013187335 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.013764762 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01354466 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.014975585 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.014703396 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.015821944 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.018132363 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.021900924 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.01420567 seconds)
  done (took 1194.291410791 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.015565092 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.015406004 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.015615152 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.015809472 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.014697101 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.015124222 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.015121533 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.015379061 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.015327628 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.015582116 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.015644189 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.015832198 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.016364128 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.016400644 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.016254525 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.015708643 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017306905 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.016019792 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.016413123 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.016121071 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.016105465 seconds)
  done (took 44.273718907 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017375714 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.015997296 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.016568725 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.01567927 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016576103 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.016722768 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.016399093 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.01722739 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017289733 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.016848251 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.016846815 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016998332 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.017327144 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.016065087 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.016703074 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.016167042 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.018237199 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.01745256 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.017223592 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016816741 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017355533 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.017816845 seconds)
  done (took 46.315326907 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.015576044 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.015822949 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.015222876 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.01834156 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.991582173 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.016675304 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.017823483 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.017458387 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.015104632 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.016423581 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.02222405 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.025843084 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.018873893 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.019469043 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.017084351 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.016867669 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.164272937 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.016638648 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.017919211 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.018529278 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.017219847 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.022935449 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.018749853 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.018897329 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.017404458 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.01666185 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.020058974 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.019341055 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.018816698 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.017484412 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.021804743 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.01916089 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.018942449 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.020934402 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.017423417 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.017323567 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.023108665 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.018773228 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.020032204 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.02084781 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.026014479 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.041263634 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.019238886 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.018545207 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.025418385 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.019496715 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.020083342 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.020827698 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.026921943 seconds)
  done (took 101.026780065 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.020464249 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.021219412 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.020689453 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.020327385 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.01996627 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.01984518 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.020574541 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.020446622 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.021133788 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.020597287 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.020350178 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.01975947 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.019739909 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.020397228 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.022069419 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.020751394 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.020445407 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.020333517 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.021764764 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.021356691 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.020679719 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.021323765 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.021967167 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.022334082 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.022495794 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.021857516 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.02163929 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.022375722 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.021933014 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.021918865 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.021614191 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.023031313 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.022574639 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.021813457 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.021979256 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.021751389 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.022038583 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.021732701 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.022232024 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.022750877 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.022454741 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.023523119 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.022714013 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.023120598 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023840087 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.022196813 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.022863844 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.022925921 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.023224798 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.023406192 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.023402258 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.022694057 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.023888576 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.022952873 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.022990502 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.023496526 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.023158595 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.023123035 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.024296921 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.023390351 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.023510464 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.023889018 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.024167141 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.023332726 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.023559661 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.024042531 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.024015312 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.023564268 seconds)
  done (took 139.45481489 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.022996135 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.022534794 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021764293 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.021876944 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.022904841 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.022616083 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.022443766 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.023045113 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.02224675 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.022206443 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022549188 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.02435384 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.023066072 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.024375077 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.022622275 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.022761836 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.024059182 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.022513328 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022599379 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022494992 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.022645606 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.023542319 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.022965759 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.023282131 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.023223184 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.022869123 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.02305477 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.023617308 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023638443 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.023959927 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.024111021 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.023905142 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.023162382 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.024087109 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.024093134 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.023589447 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.024886838 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.024484159 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.024886774 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.024006634 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.023306316 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.024498931 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023968421 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.024047679 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.023940744 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.024235715 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.024727464 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.024772766 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.027665498 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.023342088 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.024196717 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.024467695 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.025660539 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.024287449 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.025269216 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.026790584 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.025012227 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.026002118 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.024667351 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.025356151 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.02586662 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.027826959 seconds)
  done (took 127.432028233 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027036216 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.02744491 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.027152105 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.026455833 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.027498694 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.028020301 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.027551099 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.02842944 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.027582663 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.028120623 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028139527 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.027714034 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03097721 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.027744656 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.029345499 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029110585 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.028845393 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.028737328 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.027752396 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.028760455 seconds)
  done (took 42.516114367 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.028582122 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.028022851 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.02862959 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.027965319 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.028822624 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.029562669 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.028630971 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029006206 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028353594 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029278689 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.029577822 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.028962766 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028929795 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.029948583 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.02864579 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.030487137 seconds)
  done (took 34.418038982 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.029982001 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.030263185 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.028263723 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.027426945 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.03057425 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.029941109 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.028640334 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.030409515 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.029591783 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.03015899 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.029421343 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.029895616 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.030273082 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.028619355 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.030641942 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.030081977 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.03083019 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.030226924 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.03177408 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.027547827 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.03058867 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.031084106 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.030384438 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.030041834 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.029980774 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.032431061 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.029905231 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.030906466 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.030943237 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.031150282 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.031181397 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.031800681 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.031510806 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.030512328 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.028379303 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.031713834 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.031534022 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.031466506 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.032011422 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.030808104 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.031527163 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.031896342 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.031811185 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.032544605 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.032263385 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.032102662 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.033063277 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.032437923 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.032260551 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.032583512 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.019329484 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.029477266 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.032210052 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.032900955 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.033740824 seconds)
  done (took 113.63979146 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033731708 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.032314215 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.032861382 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.033861972 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.033457816 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.032458123 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.033981561 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.032973472 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032563571 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.033317286 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.033553984 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.033728465 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.033093889 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.032566798 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.033369396 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.033369825 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.033615511 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.032830077 seconds)
  done (took 38.556658635 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.033379451 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.033515449 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.033800103 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.034059729 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.03319597 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.033564964 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.033663894 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.034316225 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034129334 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.033743067 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033670246 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.034991532 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034174174 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.03341003 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.034179954 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034515659 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.0352648 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.035067126 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.033608239 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.033913002 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034701134 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.035303453 seconds)
  done (took 46.709330878 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.031423255 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.03254345 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.046283656 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.050597027 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.052053646 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.064786385 seconds)
  done (took 14.225631287 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035604047 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034637769 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.033958975 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035702487 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034891303 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034016444 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036377629 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035271086 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037847486 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035215643 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035665268 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034738756 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035789003 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03502104 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035646015 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036385754 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036289166 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036755978 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035802421 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036157444 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035477498 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035758714 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03714601 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038017515 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035926959 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036356617 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035683321 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036508018 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037016627 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036473981 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037000711 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035915074 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036371216 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036746136 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035390707 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036363185 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036027612 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036192934 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036983232 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036589567 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.034514457 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035144999 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035174316 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036243756 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034428643 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035279483 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035147375 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035401567 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03583262 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036245453 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034699964 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033492433 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008321306 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032030554 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035276644 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036134183 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035207472 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035531036 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035754881 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035251519 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036242709 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036590564 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036674528 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037420724 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035708978 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036063233 seconds)
  done (took 136.296339654 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03655087 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.037331557 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036476001 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035659949 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037257243 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037101421 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035589653 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036510786 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036230414 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036866518 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037531978 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036973528 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035916184 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036777201 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037205036 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038528821 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037029099 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036059392 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036304895 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037441967 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038016988 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036520273 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037562953 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03732287 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037524848 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037007226 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036757684 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037134085 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036952164 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036745451 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037070389 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024994223 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037939016 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037598418 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037992203 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037497261 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03728566 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038196804 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037900254 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037512385 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038749999 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038046739 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038198328 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039246606 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038340093 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038789399 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038413046 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038181393 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038882812 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03874897 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038676915 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038158257 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038729627 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039831696 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03872671 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038197939 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038483481 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039321 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038724241 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038714453 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0391108 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039577552 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040479025 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039454353 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039564453 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039104768 seconds)
  done (took 136.44557374 seconds)
done (took 2784.869143707 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.069349352 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.139606538 seconds)
  done (took 16.174126741 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.204413702 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.082199354 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.224848566 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.155419871 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.04895062 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.057175126 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.039865081 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.039754152 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.134501034 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.041666264 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.062986906 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.040236423 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.039924057 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.039672032 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.040573799 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.040350439 seconds)
  done (took 55.27299851 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.045196071 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.045562696 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.044894398 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.040653701 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.054727336 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.120190411 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.066999691 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.047444155 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.057783769 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.0750695 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.062095967 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.050014143 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.051347198 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.049721515 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.132277644 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.092138394 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.104158598 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.120927481 seconds)
  done (took 39.227811621 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.126354436 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.057860331 seconds)
  done (took 11.158074699 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.066265493 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.038982703 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.047497333 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.055832435 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.039414872 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.040149922 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.074849714 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.066475707 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.06650606 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.067196692 seconds)
  done (took 72.573797073 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.044706787 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.04550044 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.305431073 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.052863687 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.051691501 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.069756673 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.044544781 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.075872519 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.048464221 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.039489883 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.054652834 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.313299869 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.057440846 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.043954943 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.467928737 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.056359882 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.048265292 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.07674765 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.079724812 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.048061583 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.048938276 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.048725616 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.205161121 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.756957131 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.046036422 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.049865048 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.049985453 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.044784133 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.044376775 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.044468209 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.046320867 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.042664317 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.049976955 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.047370083 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.050628976 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.047359959 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.537491187 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.0671253 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.052034565 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.13070037 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.090837819 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.050505023 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.838548107 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.046611155 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.044659373 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.053161444 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.736626608 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.13899658 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.048251215 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.214671675 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.39279304 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.063375373 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.260940227 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.198559006 seconds)
  done (took 142.584870979 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.041568467 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.278069136 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.195610429 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.043831046 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.299772911 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.25306977 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.045738903 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.089522722 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.045251244 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.2457457 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.294322689 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.147912841 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.046123769 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.042556468 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.045303967 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.042864129 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.188304217 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.101510783 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.02695788 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.043245895 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.068560357 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.244711867 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.166323512 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.045107293 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.070611898 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.251026136 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.166161297 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.147296412 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.817435333 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.043237228 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.106279827 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.046779835 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.046273091 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.044161588 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.197132875 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.139587147 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.128160496 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.046670717 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.043427136 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045491001 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.714902905 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.246721273 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.13983745 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.168299338 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.291845194 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.261371205 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.657144105 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.044157487 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.669001541 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.20918869 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.250118986 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.253410007 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.164810986 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.04949868 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.600884452 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.044820325 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.045635506 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.267604632 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.264163759 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.145134737 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.048763461 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.046077156 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.044578484 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.284316589 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.048269911 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.137040289 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.048151856 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.04748447 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.138642724 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.146762178 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.272688926 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.267151463 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.076707698 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.377458386 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.53199291 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.249152239 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.111114077 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.267535363 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.048877999 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.047173788 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.125141351 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.884275019 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.298352927 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.287668423 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.245462882 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.077396402 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.695852992 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.045505331 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.234025684 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237626586 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.280960605 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.288512827 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.283837 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.393216612 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.04553749 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.046870579 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.365339526 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.164095113 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.99684499 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.398462715 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.275691973 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.534424369 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.073607407 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330927384 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.177221803 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.049862742 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.693959854 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.046541663 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.252612173 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.087045309 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.050411539 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048720219 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.237238352 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.955187308 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.048233949 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.749643147 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.108455083 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054108563 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.253374442 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.053210562 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.294069935 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.051599328 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.280747313 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.687782998 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.080787074 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.275114344 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.291000359 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.67986908 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.288633761 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.291792555 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.163876959 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.27216952 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.857410837 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.048358229 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.310841509 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.051484044 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.049932762 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.217963349 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.052039657 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.192076013 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.054630759 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.314752901 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.070861022 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277927075 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.057955319 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.288647336 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.083098144 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.099969099 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.056870665 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.180291162 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.052213188 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.896056626 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.207504851 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.054992553 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.050919749 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.835568224 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.05145889 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.198547634 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.275590254 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072032314 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.119620923 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.619079666 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.044691865 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.139246831 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.07332738 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.677494248 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.052612662 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.298782596 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.01091147 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.527650274 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.051049947 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.285256007 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.23909603 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054202048 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.051305274 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.894117489 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.05225831 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051171356 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.208019527 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.499419899 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.95645948 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.249750973 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.054675933 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180676674 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.057453677 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.128699345 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.395583373 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051917858 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.052735579 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.052394958 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.051961664 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.052730911 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.313059847 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.078950053 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.487157477 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.189031194 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.308864478 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.360940428 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.249410788 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.094178298 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.056426017 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.275732179 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.056708596 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.11468884 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.055573349 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.07320496 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.281334585 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.057010915 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.258983804 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.287559842 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.116896749 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.101039743 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.057832793 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.052680024 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.971421637 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.19831173 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.126243938 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.044786027 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.054885992 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.167993655 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.175850829 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.236614645 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.873096211 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.175228767 seconds)
  done (took 941.368161449 seconds)
done (took 1280.3280998 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.053868728 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.054731577 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.058104918 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.057032299 seconds)
  done (took 30.205698245 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.056489625 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.055790854 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.05642104 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.056910932 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.055748381 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.056503151 seconds)
  done (took 14.320387319 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.056191748 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.055688721 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.058114801 seconds)
  done (took 23.153320633 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.490851431 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.467984729 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.134377158 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.203490965 seconds)
  done (took 11.28045906 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.06204528 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.057092379 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.057623533 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.060460724 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.057254323 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.057341104 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.059309002 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.058301444 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.058067022 seconds)
  done (took 20.519094303 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.193782502 seconds)
done (took 105.655966939 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.858445252 seconds)
    (2/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.064809364 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.114302792 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.262869439 seconds)
    (5/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.075599094 seconds)
    (6/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.115318525 seconds)
    (7/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.058668498 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.3031259 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.186113957 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.702573184 seconds)
    (11/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.254507005 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.356734167 seconds)
    (13/341) benchmarking ("sort", Int8, false)...
    done (took 4.983164785 seconds)
    (14/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.189326299 seconds)
    (15/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.374657224 seconds)
    (16/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.381344191 seconds)
    (17/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.174523797 seconds)
    (18/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.189392219 seconds)
    (19/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.275912392 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.074842719 seconds)
    (21/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.070631294 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.057117196 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.814942286 seconds)
    (24/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.057133959 seconds)
    (25/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.539294326 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.057638259 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.080849668 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.217779498 seconds)
    (29/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.364756476 seconds)
    (30/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.193387582 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.078910525 seconds)
    (32/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.258767833 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.161857513 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.922085159 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.170037103 seconds)
    (36/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.329108617 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.284671593 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.817145796 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.143885658 seconds)
    (40/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.193828221 seconds)
    (41/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.203471045 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.70636789 seconds)
    (43/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.182307932 seconds)
    (44/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.650111244 seconds)
    (45/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.076522359 seconds)
    (46/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.135791443 seconds)
    (47/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.742130074 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.569458549 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.297214499 seconds)
    (50/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.077696162 seconds)
    (51/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.146558414 seconds)
    (52/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.140666001 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.828691484 seconds)
    (54/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.214982327 seconds)
    (55/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.169215413 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.824276004 seconds)
    (57/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.155788038 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.971748176 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.199442773 seconds)
    (60/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.021976485 seconds)
    (61/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.760833314 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.075090376 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.516292708 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.048587003 seconds)
    (65/341) benchmarking ("sort", BigInt, false)...
    done (took 7.158033625 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.318878457 seconds)
    (67/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.140795643 seconds)
    (68/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.331782161 seconds)
    (69/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.802066145 seconds)
    (70/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.217404758 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.686398904 seconds)
    (72/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.4566514 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.062591271 seconds)
    (74/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.132100495 seconds)
    (75/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.825982444 seconds)
    (76/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.617837886 seconds)
    (77/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.289257362 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.653780423 seconds)
    (79/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.549012015 seconds)
    (80/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.845701276 seconds)
    (81/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.17210586 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.047776607 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.082131285 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.394524452 seconds)
    (85/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.278066084 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.080364881 seconds)
    (87/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.373185242 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.069234291 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 8.562480785 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.103937064 seconds)
    (91/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.212601484 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.184905184 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.45689479 seconds)
    (94/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.205484558 seconds)
    (95/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.32665865 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.063962873 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.27994656 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.087896007 seconds)
    (99/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.69870585 seconds)
    (100/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.586979681 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.15567513 seconds)
    (102/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.178586198 seconds)
    (103/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.01904942 seconds)
    (104/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.068980059 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.871697993 seconds)
    (106/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.072144382 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.09057155 seconds)
    (108/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.379042048 seconds)
    (109/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.19035318 seconds)
    (110/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.784639288 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.571187006 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.093832677 seconds)
    (113/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.446680517 seconds)
    (114/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.070204134 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.878785644 seconds)
    (116/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.347593352 seconds)
    (117/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.952088658 seconds)
    (118/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.183906542 seconds)
    (119/341) benchmarking ("sort", Float32, false)...
    done (took 5.724422876 seconds)
    (120/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.30997835 seconds)
    (121/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.424499559 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.307527721 seconds)
    (123/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.167103835 seconds)
    (124/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.362835637 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.341252609 seconds)
    (126/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.869147374 seconds)
    (127/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.576591138 seconds)
    (128/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.158137608 seconds)
    (129/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.9773529 seconds)
    (130/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.346114278 seconds)
    (131/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.067826841 seconds)
    (132/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 5.101231186 seconds)
    (133/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.077949096 seconds)
    (134/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.144519776 seconds)
    (135/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.077516626 seconds)
    (136/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.065417206 seconds)
    (137/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.446382337 seconds)
    (138/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.969172625 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.087980104 seconds)
    (140/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.162063582 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.307283016 seconds)
    (142/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.146840315 seconds)
    (143/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.164653502 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.092413698 seconds)
    (145/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.027085175 seconds)
    (146/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.072892695 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.436006077 seconds)
    (148/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.373405871 seconds)
    (149/341) benchmarking ("sort", Bool, false)...
    done (took 2.282510307 seconds)
    (150/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.06862304 seconds)
    (151/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.207543899 seconds)
    (152/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.408108674 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.367712023 seconds)
    (154/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.352715414 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.340336841 seconds)
    (156/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.171989522 seconds)
    (157/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.084212342 seconds)
    (158/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.476480947 seconds)
    (159/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.390956778 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.098966195 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.084371356 seconds)
    (162/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.155202932 seconds)
    (163/341) benchmarking ("sort", Int64, false)...
    done (took 5.698567875 seconds)
    (164/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.071034462 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 9.98165543 seconds)
    (166/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.433740986 seconds)
    (167/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.06853535 seconds)
    (168/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 4.451124729 seconds)
    (169/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.237003683 seconds)
    (170/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.050369425 seconds)
    (171/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.339492903 seconds)
    (172/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.3569048 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.95663696 seconds)
    (174/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.233948352 seconds)
    (175/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.359894148 seconds)
    (176/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.273663868 seconds)
    (177/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.350101199 seconds)
    (178/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.070682064 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.099127034 seconds)
    (180/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.26767047 seconds)
    (181/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.403662917 seconds)
    (182/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.176233901 seconds)
    (183/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.52591033 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.225031111 seconds)
    (185/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.306543376 seconds)
    (186/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.286602714 seconds)
    (187/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.218197307 seconds)
    (188/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.196474468 seconds)
    (189/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.184447265 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.370841135 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.187425605 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.077971115 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.073124531 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.391275755 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.086352515 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.20153746 seconds)
    (197/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.149019162 seconds)
    (198/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.386786418 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.771595936 seconds)
    (200/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.107863426 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.388292625 seconds)
    (202/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.086746971 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.193261627 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.203102711 seconds)
    (205/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.068887317 seconds)
    (206/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.156009714 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.689057957 seconds)
    (208/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.3914557 seconds)
    (209/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.089839185 seconds)
    (210/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.147691399 seconds)
    (211/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.278230295 seconds)
    (212/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.072112001 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.308783911 seconds)
    (214/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.179230851 seconds)
    (215/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.501833027 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.408848449 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.22139396 seconds)
    (218/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.440635879 seconds)
    (219/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.089463371 seconds)
    (220/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.460478313 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.472254301 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.220913617 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.07213029 seconds)
    (224/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.074204023 seconds)
    (225/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.42686753 seconds)
    (226/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.298870448 seconds)
    (227/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.496346856 seconds)
    (228/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.496101856 seconds)
    (229/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.087317469 seconds)
    (230/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.420946231 seconds)
    (231/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.073414101 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140074329 seconds)
    (233/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.250001641 seconds)
    (234/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.103837657 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.193127248 seconds)
    (236/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.475960581 seconds)
    (237/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.26853889 seconds)
    (238/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.170958855 seconds)
    (239/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.203856599 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.372363642 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.70443742 seconds)
    (242/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.573400675 seconds)
    (243/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.164304316 seconds)
    (244/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.381120425 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.09377844 seconds)
    (246/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.072195009 seconds)
    (247/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.55859932 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.074305755 seconds)
    (249/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.731975387 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.107290701 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.149992141 seconds)
    (252/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.097524244 seconds)
    (253/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.073086904 seconds)
    (254/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.202180445 seconds)
    (255/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.211928417 seconds)
    (256/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.072497464 seconds)
    (257/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.070878362 seconds)
    (258/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.285625359 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.473523311 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.469774063 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.980567143 seconds)
    (262/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.511107821 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.616634769 seconds)
    (264/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.347199875 seconds)
    (265/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.187208917 seconds)
    (266/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.325672228 seconds)
    (267/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.301533157 seconds)
    (268/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.826195032 seconds)
    (269/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.153326941 seconds)
    (270/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.153038102 seconds)
    (271/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.853964058 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.334292275 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.239428472 seconds)
    (274/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.469851539 seconds)
    (275/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.204572662 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.089888626 seconds)
    (277/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.274313227 seconds)
    (278/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.109951655 seconds)
    (279/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.904122004 seconds)
    (280/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.16995684 seconds)
    (281/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.078551263 seconds)
    (282/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.723985172 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.200836207 seconds)
    (284/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.074422282 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.465497658 seconds)
    (286/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.854978779 seconds)
    (287/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.36334432 seconds)
    (288/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.092145126 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.072241875 seconds)
    (290/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.146555016 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.847321904 seconds)
    (292/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.081081736 seconds)
    (293/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.446973009 seconds)
    (294/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.388255692 seconds)
    (295/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.981512899 seconds)
    (296/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.08381507 seconds)
    (297/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.225269007 seconds)
    (298/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.553476833 seconds)
    (299/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.21746731 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.420069659 seconds)
    (301/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.078516628 seconds)
    (302/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.075310894 seconds)
    (303/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.284852594 seconds)
    (304/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.076382821 seconds)
    (305/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.275482357 seconds)
    (306/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.07573514 seconds)
    (307/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.232305581 seconds)
    (308/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.483295797 seconds)
    (309/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.409389739 seconds)
    (310/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.37635042 seconds)
    (311/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.61597344 seconds)
    (312/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.2077943 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.266225567 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.209315482 seconds)
    (315/341) benchmarking ("sort", Float64, false)...
    done (took 5.800327257 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.415185826 seconds)
    (317/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.51892835 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.963190478 seconds)
    (319/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.254057787 seconds)
    (320/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.334544355 seconds)
    (321/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.098015517 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.90407572 seconds)
    (323/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.502652225 seconds)
    (324/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.293437397 seconds)
    (325/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.177270465 seconds)
    (326/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.227489489 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.075075954 seconds)
    (328/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 3.891844279 seconds)
    (329/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.158586958 seconds)
    (330/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.189585263 seconds)
    (331/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.182964396 seconds)
    (332/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.62888742 seconds)
    (333/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.165044301 seconds)
    (334/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.969932073 seconds)
    (335/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.171544054 seconds)
    (336/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.09455983 seconds)
    (337/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.317918664 seconds)
    (338/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.764552064 seconds)
    (339/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.086504947 seconds)
    (340/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.170198778 seconds)
    (341/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.240117454 seconds)
  done (took 1159.767523491 seconds)
done (took 1161.843967627 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.102172649 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.080551501 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.58634546 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.092279847 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.080092487 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.08426065 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.59865371 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.11062557 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.098370429 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.597861834 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.092026099 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.080372978 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.095804604 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.115448563 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.090886362 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.094604729 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.085991403 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.106646037 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.11541025 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.086083614 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.131506874 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.086816318 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.080171068 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.132780765 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.081376574 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.094806562 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100650077 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.132969549 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.132658633 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.085220607 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.086409792 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.443064455 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.135843702 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.086969368 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.092049731 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.096115643 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.08767945 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.096748739 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.099645237 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.097388799 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.081033474 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.091917296 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.086145872 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.084184332 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.081909404 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.081500635 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.084059076 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.207407487 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.098238268 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.425072888 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.144954643 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100571029 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.133510974 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.085325035 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.084300686 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.085880467 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.134623087 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.088701349 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.087756593 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.424739923 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.17873878 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.097954151 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.426605729 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.148410045 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.093462292 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.091929072 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.082634088 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.100308436 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.444647526 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.644345929 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.115721536 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.103749828 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.08725393 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.086011094 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.097255835 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.598432305 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.09867726 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.669269756 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.111291865 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.098139056 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.090275966 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.086565828 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.085840146 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.100664547 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103288399 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.0836848 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.09031501 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.09043297 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.097247256 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.447589829 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.131534526 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.589858283 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.092708265 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.104649221 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.103116105 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.669699438 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.114429434 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.102712155 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.087985793 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.446810383 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.129851866 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104043832 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.089870576 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.096171194 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.199924694 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.103743769 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104806269 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.085585185 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.107496305 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.091958037 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.085494786 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.098941598 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.105513913 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.120989954 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.101774951 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.085785595 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.094365928 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.092193003 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.102812584 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.095812905 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.0926289 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.096997157 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.086915222 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.137665271 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104566529 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.101873171 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.201524807 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.092548171 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.212291269 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.10130648 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.093079532 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.087265028 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.430261842 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.135617396 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.10995403 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.092620767 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.111814992 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.109528957 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.105555797 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.09023664 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.103803741 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.090282849 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.140458934 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.088156217 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.113888997 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.140659598 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.102516434 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.094766122 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.105724883 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.122614202 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.10927803 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.092460966 seconds)
done (took 328.574940149 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.134273535 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.085766427 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.163062365 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.090310671 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.155096433 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.141625999 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.090073617 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.091397553 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.091821167 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.472373597 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.093120985 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.096606658 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.087304083 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.090660583 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.135688701 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.090743868 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.091751868 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.322193293 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.090427542 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.147941007 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.087690836 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.089806242 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.092572147 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.477071835 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.091023043 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.089114254 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.147470951 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.091444163 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.327267027 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.088610714 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.08810608 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.329402865 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.147528276 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.106167581 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.100626547 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.09969866 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.157141428 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.102890472 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.136212186 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.136261301 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.164389732 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.123405669 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.089524088 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.090943457 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.096562047 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.091783517 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.093309311 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.126516585 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.092837091 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.098332105 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.3235315 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.101277315 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.097559304 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.093779529 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.093847782 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.10804319 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.094420764 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.092515158 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.150030897 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.092267856 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.138251523 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.479364741 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.477040652 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.094821301 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.090974747 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.09450767 seconds)
  done (took 198.453743268 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.15794342 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.163990433 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.159176723 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.096469495 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.14031014 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.157613297 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.097653085 seconds)
  done (took 16.989902563 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.097852068 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.095695994 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.115608646 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.116043071 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.093549141 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.232614504 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.104768379 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.099968678 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.118744306 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.093730908 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.427226441 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.114966008 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.102962048 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.092017677 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.103655216 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.120764982 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.094304309 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.093298659 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.189614314 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.170905269 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.100903206 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.103834367 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.121867242 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.104430903 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.096299674 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.094389032 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.092848277 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.100666063 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.095645817 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.07841215 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.081779483 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.106337749 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.096805343 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.092818434 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.096017781 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.097512434 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.093514644 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.097557745 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.096778649 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.093746311 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.096804864 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.095412257 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.097108703 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.09619881 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.096114658 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.116839984 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.097357545 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.098082767 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.097880292 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.097479307 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.123362471 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.098019632 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.097832115 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.101345259 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.134755493 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105425923 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.096935303 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.097739175 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.098026573 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.097829851 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.097041381 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.171832936 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.117301284 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.097620724 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.117944138 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.133563802 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.097282121 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.100903033 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.097753559 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.121279238 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.099266178 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.11928404 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.099325082 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.195414641 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.098915098 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.2387895 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.118079621 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.099007038 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.098739566 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.094705673 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.103754545 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.098329643 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.09847683 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.102640639 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.104570159 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.098759193 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.098980699 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.096642691 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.103713048 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.099126155 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.139835153 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.099108492 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.097519201 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.19494452 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.099334824 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.193626192 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.122955885 seconds)
  done (took 227.048418772 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.101716675 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.098480964 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.110458134 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.098085642 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.097425584 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.102029356 seconds)
  done (took 14.629358503 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.099348426 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.103705584 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.100749344 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.09955548 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.09833888 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.098401042 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.100051995 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.09913585 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.102175542 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.100026101 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.099402533 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.098682761 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.099781396 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.098710668 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.074391712 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.09625675 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.100951906 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.100920374 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.1005193 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.098893622 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.305501271 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.099159791 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.100384183 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.108894254 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.103363423 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.100685524 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.107957795 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.101847977 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.100938607 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.105006058 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.104910085 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.099630485 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.109838055 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.104994474 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.105997484 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.109364498 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.105484721 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.100065977 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.100725386 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.100533395 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.100313372 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.10056948 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.101879593 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.099828334 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.100634628 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.113545159 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.103964053 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.10845696 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.102834428 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.100431726 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.100821907 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.101948668 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.101186894 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.100650148 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.111635129 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.106682383 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.105533188 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.101164143 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.100870146 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.108707204 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.106991158 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.097810487 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.102140878 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.107567535 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.11021447 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.101183568 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.110361815 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.105413871 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.101074657 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.103509317 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.102271247 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.103529148 seconds)
  done (took 154.593616609 seconds)
done (took 613.730190302 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.18756393 seconds)
  done (took 9.213358089 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.224908951 seconds)
  done (took 9.336199956 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.682695513 seconds)
  done (took 12.710080494 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.129643745 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.148375801 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.141344441 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.107924404 seconds)
  done (took 30.564829841 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.342860951 seconds)
  done (took 9.368991468 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.111881012 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.099007359 seconds)
  done (took 16.288017846 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.144529827 seconds)
  done (took 9.171217202 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.186161519 seconds)
  done (took 9.243307133 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.121947389 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.127515191 seconds)
  done (took 16.294604601 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.103582724 seconds)
  done (took 9.129808915 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.895722907 seconds)
  done (took 10.00928776 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.111563692 seconds)
  done (took 9.157264496 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.168432509 seconds)
  done (took 9.194576721 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.18471648 seconds)
  done (took 10.210776616 seconds)
done (took 171.919472796 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.109996091 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.102015362 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.101327837 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.101352242 seconds)
  done (took 30.441606359 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.140121202 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.140796893 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.149404549 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.139318818 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.13027329 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.129765899 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.14095001 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.141122213 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.13126517 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.138335391 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.141509716 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.138063347 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.139616895 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.149968525 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.149413409 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.137355389 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.14052221 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.140716423 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.131024867 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.150965991 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.140228932 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.14120884 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.10704768 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.105963706 seconds)
  done (took 53.322866858 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.293982595 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.170186682 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.257775035 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.149879627 seconds)
  done (took 10.90063506 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.105895134 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.16847243 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.158428511 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.152010872 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.192477623 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.179768548 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.159663761 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.316539634 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.222016444 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.234815089 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.114277993 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.128350077 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.132263431 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.152722086 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.209797742 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.107421063 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.106759387 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.223415254 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.168627403 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.317735707 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.108253299 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.160236651 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.193440814 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.160208056 seconds)
  done (took 54.202117104 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.10848326 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.103736302 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.115337704 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.109194692 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.109075993 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.108549783 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.115947618 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.111356487 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.131172483 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.110595712 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.109248625 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.108813049 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.115751861 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.109151011 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.108834556 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.121748818 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.123420698 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.109974613 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.113551456 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.116048631 seconds)
  done (took 44.290308751 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.105062965 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.951571459 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.452957059 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.35641277 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.104767355 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.106715213 seconds)
  done (took 33.108307838 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.119816367 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.124898581 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.113369872 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.129842274 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.15574266 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.114896263 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.168197934 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.250716287 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.115687174 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.166260224 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.127873675 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.114677413 seconds)
  done (took 27.732840254 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.118003605 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.108051643 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.108820749 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.119663332 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.11801543 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.115999154 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.115295739 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.105126334 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.121406676 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.126366436 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.11550105 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.118536731 seconds)
  done (took 47.422784564 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.325290753 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33684245 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327451932 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734368115 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.429498246 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.091026291 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.397344618 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.320514504 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.858440901 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.874922993 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.405865801 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.088627779 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.058258459 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.036492746 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.028979398 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353975219 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109684823 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.968184892 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36778701 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.15574224 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115155376 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.112472652 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113009659 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400934759 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438329169 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114387043 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.324443309 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127220966 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111349698 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365025984 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.598510313 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.165056237 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.313323639 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.372310885 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452354146 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.171354901 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.214252649 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.311371089 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.158144437 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14666635 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122638523 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.121916332 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.60199896 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.121522475 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.385182096 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11341525 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.113881313 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.20970517 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038531114 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.437114278 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221213905 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.111791044 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14808094 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.549135683 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232960194 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355215504 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117908301 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.321153037 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170997044 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.378424564 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.218468542 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.212494735 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325294515 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038476322 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.464995709 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233050631 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.11579257 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118050508 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.813380407 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355415173 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.194109828 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.451446816 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.86657858 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.114840938 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116602936 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.155442481 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203550911 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.112377189 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.415139275 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.101573661 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.040396939 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.219634909 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.514599887 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119402132 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.118363988 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122362919 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.961923457 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.040674291 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.210745848 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.380331176 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.433447743 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.115441065 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.115354362 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.138467461 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118446064 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05955581 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.704085765 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.182452248 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.040920845 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.677935759 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.597417136 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.083336867 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.599198162 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.160634784 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39332375 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.270081002 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.522826623 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.328770022 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361712516 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.648772619 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120608826 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.730977912 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196733499 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192080624 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115750508 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.673315195 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.325279495 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.424688479 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226467294 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.115770123 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.04258222 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.127027963 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32000155 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.60078663 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.174255706 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11672144 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.121376415 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.116260648 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.119019302 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.231232162 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132813501 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.409333119 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.185802982 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.117686661 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.053937827 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.122401163 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.399776286 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.819191926 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178181651 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372300939 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.38095374 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.81987962 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.717781335 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.060461947 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.390551594 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.191426416 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195011265 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.69937707 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.258639265 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.217433363 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119956484 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.256882736 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.129339328 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.122855494 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.571381993 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.537310743 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.543198668 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165353242 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121143419 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.069239989 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.334540745 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.365146686 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179958458 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.149304716 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.126192551 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.205218249 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348588832 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.126416582 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.047355234 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.370315022 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364408742 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.413141062 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.530825782 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.184746508 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.191350047 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131319284 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.334198674 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.204060891 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.77938835 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.667328613 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34337452 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.712402687 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.088532508 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.757747924 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.400034532 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498656574 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138065335 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.575118862 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.334368299 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.837177835 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.154778441 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.65264731 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.049167495 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12818119 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459324908 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.079540888 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.43750848 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.178107456 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187847657 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.123937216 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.124421882 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131293892 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.032511893 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.229778584 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192517633 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196710386 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049458841 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.853825209 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.164549293 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126215117 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123222173 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.435485464 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.90746729 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078566376 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124661673 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200679048 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.863309429 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.677422717 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.126915427 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128728881 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.730638969 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.132835801 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.036422094 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.230536967 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.876846005 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.149500538 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.391609144 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.820555917 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41268546 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.199382027 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201268885 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.125312787 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131544327 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.825580415 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134835102 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.826010456 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.411468113 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.395971926 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.565432672 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.188262962 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.332825671 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.140880543 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.127774195 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.606362398 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.151782153 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128238477 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329181873 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.64595444 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.471600047 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.763101223 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.211974721 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126585339 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.395370673 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.127375208 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.617923943 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.831744928 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.129037993 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.126625936 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.378966408 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.812234044 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.128135273 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.036840753 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134894735 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.339320005 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.330138904 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400209767 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.425405789 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.574677376 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053351163 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132652927 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.159441606 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.371116122 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.127048917 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.162946741 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.567717558 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.200236244 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.557059256 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.412641905 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.519817119 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.758857521 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.393576187 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.191318969 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.139544481 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.796497333 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.257818132 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.061719845 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246358523 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.054312627 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.807200203 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420942245 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.146359598 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.398821615 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108563531 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.467773507 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.424616582 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.419559984 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170159465 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.157975178 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.128798771 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178505934 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.129444095 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.361831466 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.247376868 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.135122753 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.694548282 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169515212 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176020615 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133971143 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.642122922 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151124689 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129856683 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.821878739 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.154704491 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248585882 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201919237 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.877169122 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.64144887 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.158678102 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.086565857 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.777563717 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.399868177 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.185691241 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.586183764 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163963132 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.509049397 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130467265 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.343653028 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.135552375 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.739819222 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178049221 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402943445 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088416212 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.344011336 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334026196 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.159983284 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.137417109 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058065635 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.239787957 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.037624152 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.115412872 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.134709985 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.813007212 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.534466499 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.371739293 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.573470513 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.951172277 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.134005583 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.4558752 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.52055637 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.781820255 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166913845 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134935345 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.44833645 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.257616277 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.422813728 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.392261704 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140873043 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.158724421 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.345297844 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259275949 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.051704804 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.628827361 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.718194256 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.833580805 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.143611637 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.336564746 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.450385865 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.448546779 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168639443 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.206372315 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.537183458 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.39897441 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.197512563 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.059546267 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133503267 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.528893451 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.532990258 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.230431399 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374505265 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.442675927 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.816614599 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.634723195 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.590182171 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.49853544 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.570014287 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.5455832 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352340885 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498522946 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.45707433 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.017566225 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.546911182 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.347285395 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.223596052 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414502069 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.009714215 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.844096685 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.379130592 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.139465115 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063393766 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.341135986 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.139719543 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.671554119 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.655463469 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.383847905 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.388123351 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593818546 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.674207074 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.357884818 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.161822465 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.101383016 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.160548876 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.155711463 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.136302427 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.631314352 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.430340915 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149606642 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075294077 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.809742084 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.062636822 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.349109278 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.360940211 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.17323855 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.692748914 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.380067265 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.228569179 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426683572 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.412690222 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.173494425 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06283124 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.864422078 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.08431708 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.198208395 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.563068597 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152831784 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.14037771 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340774557 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.066266616 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183766622 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.143115097 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.335888574 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.715874873 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412107413 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259695732 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394684286 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.439720134 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.967031307 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156068518 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410891622 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065256175 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.783312997 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.843769324 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.179025031 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209211788 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138796361 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14126068 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410072033 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.455332869 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.232111364 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.733398785 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.171493766 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162120102 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.452770831 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.221103206 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.140664418 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.143783452 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.64179497 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.373615888 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139908476 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.112149024 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.353029443 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20204413 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.33493565 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215109435 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.654162441 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.144582883 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.953155077 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.230923442 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088426172 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139431436 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.826936817 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.201481744 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139875708 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.410615279 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.789038085 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.344320437 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.536263575 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.009912171 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.36811747 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182864836 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.143058829 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.275776115 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.427508324 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.437850867 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.140828286 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409635132 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184719575 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.145600758 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.803181834 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.108237377 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.140977719 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.811000157 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.027235854 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.87199756 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.536940573 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.14972454 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184888528 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14504255 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.071298969 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.143251638 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.310703011 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.152669301 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.149083539 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.508104802 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.442866901 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223490986 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144154032 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.14323992 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.147022902 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.355079001 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.656649615 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157880082 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.842716316 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346368206 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.145794401 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.638822192 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.596713767 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.434303053 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.182270962 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.368301189 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386877852 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.679488656 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.378601408 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126650835 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37029252 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.145006572 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415468341 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417282281 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.144248108 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.356098015 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.646877442 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431643447 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.501704808 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.454829885 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.203948612 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.379816772 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.048608701 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.1462211 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.134352502 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409013934 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191385491 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.143524461 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152180851 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.694923635 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.820049709 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609584234 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.297961927 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.461386063 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.907057464 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.899502174 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.146916213 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.07109367 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141341797 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.173364327 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.148231599 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.070796515 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.876376287 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.866257826 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.357969378 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.452300592 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071956141 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349418808 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.744021313 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.070884702 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.113724 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.14541593 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.402039492 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073488337 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.148549076 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.100231773 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.413016107 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.870642781 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417926271 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.145552053 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089612503 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151385369 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.146094781 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.143294366 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.231206562 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.147579639 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262948134 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.411088853 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.499146689 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.242733055 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.787543744 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.881187387 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.084434895 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190847831 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.761763964 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.715896638 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.416223794 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.267618752 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.877419032 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.092311905 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.150497645 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164337178 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.386137519 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.152851877 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14970359 seconds)
  done (took 2237.729112717 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.212850526 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.201645676 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.204361163 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.214935274 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.253496844 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.193172753 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.185136338 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.220696881 seconds)
  done (took 59.754449802 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.144149866 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.082851882 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.152726569 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.146749205 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.144617478 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.150535715 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.338494058 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.173970417 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.145960545 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.150540441 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.146438974 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.149640174 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.145761287 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.147812473 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.150682809 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.45298795 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.168165779 seconds)
  done (took 81.080945102 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.216637905 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.555880757 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.162502292 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.889751981 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.172019758 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.552855501 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.165687311 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.159329697 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.296318208 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.457246908 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.170547837 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.166157736 seconds)
  done (took 94.482059331 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.160726928 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.160248616 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.160907475 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.159799509 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.16071111 seconds)
  done (took 12.884845858 seconds)
done (took 2789.443657443 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.455229699 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.256473176 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.238219165 seconds)
  done (took 6.576560542 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.310095594 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.363146231 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.473398182 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.478108734 seconds)
  done (took 11.712021947 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.451385526 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.533039683 seconds)
  done (took 7.067599913 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.5854505 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.166578171 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.554485775 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.163979978 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.166624016 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.165905496 seconds)
  done (took 23.584828228 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.168470904 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.167290742 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.134921265 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.166974901 seconds)
  done (took 10.720673482 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.161183437 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.94725189 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.16128684 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.171216738 seconds)
  done (took 22.523638555 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.377405946 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.218439345 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.936007905 seconds)
  done (took 10.614155157 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.776535599 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.618878868 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.771924214 seconds)
  done (took 10.250946528 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.30815566 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.15280267 seconds)
  done (took 8.541267454 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.308755368 seconds)
  done (took 4.392367993 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.994381708 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.477115206 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.645587318 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.686324999 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.759918252 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.383834219 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.510527028 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.454730247 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.565403168 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.619956604 seconds)
  done (took 28.181375183 seconds)
done (took 161.009885616 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.618459397 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.192707881 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.376945607 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.553680176 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.416035763 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.376752178 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.462544054 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.544061887 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.233656172 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.21316792 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.552052495 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.411062608 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.407228943 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.195045602 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.414754337 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.198805468 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.409553223 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.641768479 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.233072397 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.474734309 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.475916793 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.197145115 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.39855781 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.217994922 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.411939234 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.328390164 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.804139457 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.19832531 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.384684712 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.820326676 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.333860492 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.621324539 seconds)
  done (took 179.204180192 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.053559935 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.171782014 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.171887388 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.171976329 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.432584729 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.173072326 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.173980525 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.17063781 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.489841949 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.471262667 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.17236627 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.422130921 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.171437316 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.171894987 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.16297288 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.172504849 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.606437251 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.097608424 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.17303293 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.172770412 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.174873387 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.294712564 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.194751789 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.306507506 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.586421346 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.172222018 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.173149986 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.172489742 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.172380349 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.170875004 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.173137352 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.173102658 seconds)
  done (took 217.657877424 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.174109915 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.175009008 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.175400255 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.175411068 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.17470386 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.175423514 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.173910904 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.173550669 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.07461685 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.050556803 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.174697947 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.178495824 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.183491134 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.173780603 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.17444408 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.174845031 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.174603773 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.174871592 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.174057649 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.179098949 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.18094871 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.848949104 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.17543176 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.875708453 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.176000029 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.177510921 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.175107076 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.175990402 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.173888312 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.175925986 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.178899142 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.175841826 seconds)
  done (took 230.865617609 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.411093639 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.171556648 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.173520797 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.184414283 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.173271536 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.172311056 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.175646749 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.423023149 seconds)
  done (took 21.975545846 seconds)
done (took 651.804357448 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.544973168 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.951823445 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.307498302 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.195122171 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.427962689 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.236860671 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.188090285 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.248821717 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.839757627 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.257573044 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.606586442 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.19810825 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.929684428 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.222826304 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.307672791 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.248627143 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.525867719 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.798960315 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.325880812 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.854457286 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.396780877 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.144314499 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.272449395 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.876514296 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.617396497 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.164227774 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.233193652 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.542141784 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.19573971 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.426429042 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.834126856 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.458891731 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.208822834 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.192081243 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.242759132 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.221913899 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.390807918 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.205883383 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.291528395 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.941958796 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.86393554 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.716419708 seconds)
  done (took 112.746575653 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.178512697 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.177516872 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.176891022 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.177442325 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.187099653 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.17818929 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.17817938 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.177758921 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.177157618 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.17770693 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.177790847 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.186664511 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.178904463 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.187120435 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.178735702 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.178713473 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.177853856 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.186960775 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.178140266 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.177704008 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.17796069 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.178108716 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.17534709 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.178211573 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.178594968 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.179559013 seconds)
  done (took 58.765429853 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.17696158 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.351070357 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.452291668 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.216423356 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.173517119 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.176481894 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.203327568 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.18691858 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.177214823 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.175986976 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.26799157 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.18561893 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.186781903 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.450052968 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.206728415 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.166097093 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.18005043 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.175295106 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.358800184 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.190847355 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.206217289 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.18829062 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.204301901 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.190624596 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.178042618 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.176382116 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.17808813 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.599931731 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.188541964 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.271568005 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.234594781 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.210044581 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.528099263 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.463076329 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.24878388 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.189196587 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.180785879 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.315789971 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.189322284 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.17550101 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.204953349 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.185350758 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.45425006 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.690205953 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.192885784 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.179161329 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.598187824 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.329560734 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.226150059 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.191743737 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.464066137 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.21060019 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.179426596 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.177927923 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.213781094 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.191281206 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.177121355 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.412611166 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.194026914 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.2061062 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.187602773 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.178189676 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.367731297 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.187363995 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.355209228 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.187299502 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.183709772 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.179373026 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.458235189 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.211702002 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.685071808 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.193153237 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.179980009 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.274101824 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.360462679 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.623286996 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.19337799 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.367233862 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.543789084 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.217222399 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.189503041 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.586469333 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.22034576 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.189603779 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.180704586 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.181316372 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.181128784 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.225375468 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.206337908 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.604064281 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.682303543 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.442862973 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.219924332 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.192795792 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.179881371 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.426432732 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.19355435 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.182456245 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.453023919 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.711568666 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.194638468 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.185361825 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.653045763 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.196185648 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.208908967 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.190823283 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.471510753 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.212712347 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.227932996 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.182787664 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.185455728 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.182196718 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.209631102 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.191624937 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.182618483 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.657004706 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.335640998 seconds)
  done (took 268.805456006 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.184316011 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.178984805 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.179968118 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.179073199 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.179136653 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.180550075 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.178482972 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.178129188 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.180493075 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.179082605 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.179841827 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.177985804 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.180203077 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.181555085 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.215523707 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.182046795 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.668963015 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.178663176 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.179169831 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.182790066 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.753371477 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.186426196 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.180970809 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.182710147 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.180490124 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.181915343 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.187493162 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.212004182 seconds)
  done (took 176.298839155 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.185187789 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.237081361 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.196199546 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.229317428 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.198784695 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.184964651 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.206789026 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.197486889 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.18845257 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.185435129 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.184474813 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.21344145 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.193174311 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.284256438 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.216099891 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.219474271 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.284145745 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.194850213 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.185472872 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.185068087 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.231198342 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.19764626 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.214552241 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.246678631 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.198788879 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.238692455 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.19890485 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.186381208 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.183166736 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.299399716 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.208257382 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.21850499 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.219175808 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.205559788 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.303749586 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.302452515 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.293095173 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.220755886 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.188734241 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.186504308 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.185662525 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.185372165 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.239944673 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.201774246 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.184788148 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.302916304 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.210073498 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.187236363 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.210420243 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.186835019 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.198255661 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.203138075 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.221588128 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.312218863 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.237629959 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.21505809 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.209648354 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.20339087 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.186176229 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.281676442 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.195618593 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.303666068 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.211358286 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.186737643 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.188993255 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.191104939 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.236918984 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.228414795 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.286879156 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.194312558 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.283233564 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.246268221 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.204052739 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.18940499 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.189276261 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.242128401 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.296934407 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.245750211 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.248768106 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.222883118 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.19624214 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.185626193 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.188585986 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.214595206 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.19865091 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.305273519 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.305442096 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.198881386 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.189469878 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.189538143 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.189788452 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.211882422 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.251962154 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.229034428 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.295939925 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.225983325 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.210128306 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.188482952 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.203699894 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.194753527 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.222033908 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.198403168 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.202555757 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.514197656 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.22656941 seconds)
  done (took 235.513522294 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.549407725 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.234097736 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.256965093 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.451012793 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.544883359 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.080163585 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.22719495 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.237470779 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.246764302 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.360921376 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.299217346 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.278361381 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.227220543 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.210662063 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.233073488 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.24840912 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.268092639 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.521718028 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.339973737 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.731010301 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.229918626 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.527368881 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.537394381 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.57141404 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.273799752 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.633208893 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.833736053 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.327830162 seconds)
  done (took 71.594433826 seconds)
done (took 925.817941889 seconds)
SAVING RESULT...
DONE!
