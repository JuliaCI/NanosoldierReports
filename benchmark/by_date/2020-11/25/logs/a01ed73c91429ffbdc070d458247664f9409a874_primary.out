cset: moving following pidspec: 7634
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.87320706 seconds)
loading group "shootout"... done (took 1.24389199 seconds)
loading group "string"... done (took 0.671171273 seconds)
loading group "linalg"... done (took 8.631469657 seconds)
loading group "parallel"... done (took 0.16889014 seconds)
loading group "find"... done (took 3.046012931 seconds)
loading group "tuple"... done (took 2.152243296 seconds)
loading group "union"... done (took 15.037548257 seconds)
loading group "dates"... done (took 1.456934903 seconds)
loading group "micro"... done (took 0.220905293 seconds)
loading group "simd"... done (took 4.81533344 seconds)
loading group "io"... done (took 1.086994788 seconds)
loading group "random"... done (took 9.596742929 seconds)
loading group "problem"... done (took 1.521153196 seconds)
loading group "array"... done (took 25.374650569 seconds)
loading group "misc"... done (took 1.907207047 seconds)
loading group "scalar"... done (took 43.860180699 seconds)
loading group "sort"... done (took 3.350907207 seconds)
loading group "sparse"... done (took 12.865075949 seconds)
loading group "collection"... done (took 18.86495505 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.427084461 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126811482 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.130949937 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.12427138 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.183904838 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124120221 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133624763 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08730916 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.846414428 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138990183 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117797321 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439135813 seconds)
done (took 5.31205309 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169910403 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.094141776 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085410907 seconds)
  done (took 1.388911994 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071904197 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061816896 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06875012 seconds)
  done (took 1.412468746 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066301892 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13528827 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067905724 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068148377 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071850931 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067912323 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067837522 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067730655 seconds)
  done (took 1.760538223 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072980722 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069158449 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066932538 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069491044 seconds)
  done (took 1.491288842 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066062859 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124716964 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066176002 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066717566 seconds)
  done (took 1.533600628 seconds)
done (took 9.054949175 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.14279742 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.830324232 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.759298475 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126675699 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249275348 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.452901666 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.1244616 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.18600007 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092154691 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077465283 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.123774757 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080385037 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.402696984 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405266422 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073653863 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171612728 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.642422914 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087691996 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133051956 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.472244963 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074198444 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089711092 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.088200166 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071446869 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.335350874 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153494698 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.677706988 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096475522 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069264582 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096709773 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073263846 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079950699 seconds)
  done (took 10.784999215 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093648579 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090400068 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070002639 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126147929 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096317821 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071991214 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077190725 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069260135 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091151731 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126895259 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092490448 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100780138 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068556779 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070924753 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.081975233 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199001346 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080340373 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083122407 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069753025 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082569561 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108442147 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080699414 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080280007 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080278737 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133045429 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172630158 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09799212 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099214964 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068628785 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081087898 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120198021 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128271069 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068766492 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066927349 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122141445 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096876575 seconds)
  done (took 4.714562177 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892665677 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097819673 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085286623 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076058821 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10953852 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116008131 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124265336 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126149048 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102588694 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071139718 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155868698 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.648451056 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.137667888 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071847023 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.123675979 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365331773 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065259112 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070554216 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070143031 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073348324 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071786516 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.114869372 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067694185 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178871128 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.589290392 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072035978 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071829898 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098536228 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06743712 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.096004236 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.146077594 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094545659 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072229771 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.554537471 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067373142 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065432961 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090089212 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094223661 seconds)
    (38/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.084981997 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.184054437 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070646033 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081260789 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068469531 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112036556 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082454083 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.497669947 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071973046 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.569513518 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.228772877 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075643047 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07387628 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104312957 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066053236 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069173927 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065984132 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.859062422 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.124401061 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068195938 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276611713 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07028582 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070222972 seconds)
    (61/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06590407 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070990218 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101918103 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068866028 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070363648 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074947764 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101634786 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.797948912 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089210892 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098864747 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069416228 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.411413303 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073721586 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070522373 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071517216 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086062363 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.113874199 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06850461 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068157404 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110355444 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091716151 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092528065 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071972945 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069320255 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068456289 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325341814 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.16293746 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06687902 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067739997 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.486835053 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065775602 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067657585 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069812611 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091268382 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068776686 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065587642 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066143408 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101084473 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067119971 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.810146381 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070088551 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.466901732 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071966926 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.109118638 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122458463 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069363226 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098429506 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070414169 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066775158 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075535361 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067384983 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066129062 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071131343 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067593453 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068376618 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071150315 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070282163 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069061312 seconds)
  done (took 23.18437437 seconds)
done (took 40.79217465 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.316931622 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081289217 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080862701 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080703272 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080979635 seconds)
  done (took 1.905727098 seconds)
done (took 3.266985381 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.134202601 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077407845 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066333603 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10349283 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070809676 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.10384841 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.110509289 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106797964 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070445676 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070243673 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070767637 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105119387 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107708915 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070845717 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100620322 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106607894 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070960743 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069208207 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070147317 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070546563 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070645483 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066579945 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.07064672 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070719468 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101436374 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070846475 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066568072 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101098819 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.07051293 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100956574 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070531725 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070351568 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070193215 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102047841 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071040434 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102245265 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06639227 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071054906 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.07093273 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070931487 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070551843 seconds)
  done (took 4.691855948 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07159882 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083610004 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085514243 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063291208 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073151118 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085047222 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064072073 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083696079 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090279264 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085119562 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083860176 seconds)
  done (took 2.183904374 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071230675 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084897778 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089011948 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063461539 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075296971 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084910602 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063702917 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084508149 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087615934 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085341557 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085586812 seconds)
  done (took 2.170102779 seconds)
done (took 10.329395858 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096679647 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067674476 seconds)
  done (took 1.4412365 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.228220831 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.510482097 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.384401713 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09384978 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074274873 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087570755 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.20322678 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069450363 seconds)
  done (took 8.117345298 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.101268462 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.074526075 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070365982 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069631756 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071966154 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069764044 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070391687 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06951561 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071445969 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069709626 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070570471 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070195817 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070995576 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071290446 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069687821 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071002176 seconds)
  done (took 2.558782871 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105702297 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071205336 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101475745 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064295138 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073982996 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064315437 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072596155 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07464499 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071776043 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073060149 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074025925 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072992195 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072959457 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073333148 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075453219 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074607677 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075089073 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072800627 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07439081 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075690279 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074418395 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075230403 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076097915 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073612571 seconds)
  done (took 3.224884574 seconds)
done (took 16.638758451 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175920037 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076861904 seconds)
  done (took 1.539117283 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068817684 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070856055 seconds)
  done (took 1.444568119 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074125049 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062122456 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080784402 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072414505 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06313512 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062888102 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079207993 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063116707 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062973417 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063333092 seconds)
  done (took 1.987823837 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06378262 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070728983 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068520305 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066793854 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069380931 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064452924 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066955998 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064834824 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071345924 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063576958 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068558423 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08571702 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067778005 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086642788 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067587112 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06795804 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070095119 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067149205 seconds)
  done (took 2.558365486 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061333143 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.064284321 seconds)
  done (took 1.441981639 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064972789 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063572825 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066237033 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065265854 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063509778 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063091858 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063650927 seconds)
  done (took 1.760587892 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.429011545 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124625707 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.346820552 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070360144 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078737065 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259970275 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065398404 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.07016333 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070032776 seconds)
  done (took 2.871110847 seconds)
done (took 14.923506347 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083046483 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18472668 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089971611 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.408846306 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094166827 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069204475 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114643601 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177052432 seconds)
done (took 2.558679965 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214967211 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.249399027 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.397460436 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127395995 seconds)
  done (took 3.09574554 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337054296 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079921484 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078973397 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068864137 seconds)
  done (took 1.895497874 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065645225 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073188111 seconds)
  done (took 1.463587404 seconds)
done (took 8.003540305 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073561188 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06393229 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.09363791 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.069467178 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065893099 seconds)
    (6/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.066560526 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065637873 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.075945968 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065959355 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063616978 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065388677 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066288472 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065982478 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066212875 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065444892 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065949453 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066110343 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06541864 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06570513 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065581836 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063532126 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065811184 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065241234 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065479 seconds)
  done (took 2.974730512 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079643488 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067585981 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06884048 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068403928 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068916813 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068854359 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068767064 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066881985 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068596441 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066817769 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06891964 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069210969 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067026721 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068977763 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067314126 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069228997 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068619065 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068153569 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067133136 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069140027 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068633065 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067554354 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06887144 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068934234 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069402797 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06904337 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067821695 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067285243 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069233529 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069328615 seconds)
  done (took 3.405435191 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066933486 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061762913 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062305328 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072304393 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061553968 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062129458 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062843142 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06162003 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062065118 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063214121 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062557664 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06211676 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062439354 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062213968 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061794906 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062451712 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066524439 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081036755 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062113007 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061923304 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066438448 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061985057 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061705478 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061862551 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062738502 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062110886 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061972922 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062537223 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062143851 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062421888 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061793694 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066088655 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067210109 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061703896 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07164304 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066818107 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061748286 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066112377 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062676934 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061999941 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061886116 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061299609 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061931507 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061705989 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071830356 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061997086 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062832378 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062778571 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061809391 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061941031 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061931149 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063872201 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070681617 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063144218 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061553246 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062397738 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061649854 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062847069 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062183456 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061875403 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061677991 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065110248 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063179843 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062464859 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082042957 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063287468 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07179274 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061640785 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062793782 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065232502 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062414193 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079757652 seconds)
  done (took 5.956734251 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072599391 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074300688 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.08151779 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072381325 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06653415 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06320603 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066650847 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063504278 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072862333 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067465277 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063381236 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066638115 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072455835 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067446073 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064814824 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07235623 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067240144 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066495059 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063244943 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067208631 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064219633 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067039513 seconds)
  done (took 2.856226461 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135651059 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068371394 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107514847 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076747054 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070695308 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077229693 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068085827 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06800117 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06775876 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068664158 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068771089 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0681452 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070259472 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068682594 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068707323 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06821905 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068067399 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06861904 seconds)
  done (took 2.698874178 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077025073 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068470463 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091882519 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067881417 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067418621 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067437235 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071314648 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07195141 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06756626 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067860051 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071987522 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067186699 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067618882 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067706723 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067418484 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067498846 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066900276 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068091197 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071932431 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071287209 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071234223 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071735627 seconds)
  done (took 2.893688598 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077385457 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066454884 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082331433 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06849524 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062503555 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062177873 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06785041 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066578125 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067915284 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066223669 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066581467 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062467453 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068676367 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066703284 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068669066 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066892717 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06620892 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06710145 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066786335 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062436752 seconds)
  done (took 2.697346129 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086691756 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064994953 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064942661 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084367873 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064953102 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064813298 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084729391 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065278311 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064844843 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087007353 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065171689 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064971373 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084993987 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084969816 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064850151 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084639303 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083892359 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085490056 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064714862 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064982519 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086528836 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065170555 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084541181 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065242959 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065133607 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064980732 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065112498 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084053514 seconds)
  done (took 3.409917941 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065215399 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06528804 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065058317 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06531038 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065196335 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064888086 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065620714 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.0661477 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065536979 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066684742 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066009529 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065687876 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06854995 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065462997 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065758127 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065352666 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065761057 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066102698 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065983738 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066168144 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065673831 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065276864 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065071299 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066098411 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066214005 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065667216 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065439062 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065739395 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065496213 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065643206 seconds)
  done (took 3.325098674 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073528677 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073612582 seconds)
  done (took 1.500720253 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062960798 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079491588 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061734226 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074841746 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070758726 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06575252 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071217536 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070526728 seconds)
  done (took 1.90568822 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067043209 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093339655 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064175341 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063940234 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067467113 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134235936 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076783955 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075704249 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077717579 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066810801 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064904259 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.077173003 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063394807 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077246799 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065505644 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072892427 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070909302 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081151808 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076853481 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062385521 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075778618 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064408992 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062560657 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064821208 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063799358 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070461637 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079576648 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076135884 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072509676 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061336452 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082866948 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063034764 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063849018 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072276785 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066986466 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062811682 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099765967 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062847837 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068057043 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062402565 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075037787 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083831815 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077613568 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081105935 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06498709 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064775785 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062663782 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064804858 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066258905 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071705061 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062574408 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070573385 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062018612 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064092361 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073717877 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062866496 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068278955 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072266477 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076439248 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072999565 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071755061 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078678151 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071784544 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071085421 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063925176 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082817772 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064338128 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075800576 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078480499 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063817869 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076116405 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062245193 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061270432 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062441736 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096976188 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064473707 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063726676 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06300742 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063190183 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064155383 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072503284 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068577536 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070593782 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066242657 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078993817 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072172862 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063137679 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069374472 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08114947 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066080332 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062701571 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079065525 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065768635 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062085851 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079888792 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071867668 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06363941 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062789682 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066184319 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075430517 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063211832 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060967532 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070147929 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064230246 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064592605 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066727273 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069951884 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061705413 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071787922 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.0665421 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063124202 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060668256 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066001227 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063092356 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060792423 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071013978 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061942453 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075743413 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067965548 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075605707 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076374616 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072409015 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077191784 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061910403 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060410715 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079819829 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071326867 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.203501075 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081243582 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063739664 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077821786 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063125769 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06560283 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073754586 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062847014 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065633486 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063245974 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068059068 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064039418 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0651556 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068479148 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071331389 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075550491 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064550069 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072173623 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063623724 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079120522 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07318309 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067874242 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066379811 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063753363 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074948954 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06955245 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072758214 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062590861 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063498961 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063230978 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073917075 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072635105 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064602694 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070785341 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067215062 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063149639 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063395594 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064051146 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065956684 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066485888 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063974937 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070808864 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072121705 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077324774 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070402463 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072003897 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062006267 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063029321 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064761183 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062524712 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067562657 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072482062 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078980013 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074893783 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084304995 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063096764 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07285862 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064589047 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079889092 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076734368 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064679199 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068232884 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061559013 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064637692 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072998697 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074571068 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07648413 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078315669 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067382294 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067338172 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06268414 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077822219 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063220543 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07187171 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072896439 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067640475 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063372776 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064520611 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071995128 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.0672847 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062800643 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078965724 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069236119 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062266887 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077919374 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063233874 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074138655 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062399705 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066166128 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068208557 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06434787 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072314774 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078540048 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061753375 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063212505 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078241379 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064701075 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064071016 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070699246 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077844171 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067285967 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070648893 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073202771 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071610553 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066360795 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071571066 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063457597 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071524132 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065071325 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073618511 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06213411 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080051939 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060989498 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076767451 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062253454 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072662622 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.0627926 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071285406 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06282935 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078692172 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06312256 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062903611 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073178426 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060667718 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071483702 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061028312 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067013172 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068760403 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071171923 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063735255 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071308019 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063413766 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.216046636 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06947427 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072916249 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073754165 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068489468 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063062475 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072611062 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074876478 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071494927 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064691559 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064259344 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063615623 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.0731967 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064737196 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064550919 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071338951 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067543533 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068886196 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06472596 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064786055 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064719944 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071540727 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072863233 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08181381 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072094673 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070621682 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072277701 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062897137 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078553304 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063259591 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073010221 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061689922 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068926294 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071919509 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062884448 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082282507 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065065858 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071367394 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075585774 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071841664 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066725138 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080916698 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.067432804 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07192771 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071140599 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067446803 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06914357 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06495752 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071478319 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072790222 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074223557 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064030255 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070663948 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071952924 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065071947 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070835321 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064889724 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071387078 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064846722 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062034045 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067304603 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074677821 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068306066 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067597967 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063881398 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062204437 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06339784 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070035258 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067562406 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07200509 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078554075 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062006138 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064468746 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062452624 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066115494 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081700899 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072698402 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070844066 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067472929 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062451411 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064572561 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065065376 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063624241 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066655392 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062055476 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062235793 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073661342 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065059697 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067602938 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063210838 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064330737 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072956746 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06840184 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063715206 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069840673 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06285533 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068296717 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061984621 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064699104 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066974953 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.06200061 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066404471 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07311325 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079552193 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068977893 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071827855 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063689076 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070262958 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07806538 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069909926 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06370545 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072282019 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061985459 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081108431 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071777751 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071155273 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071927903 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063058996 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078297371 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066549223 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072049572 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077483016 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063143287 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068250296 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061234446 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076667376 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065964001 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06111794 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069856515 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069505416 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067529584 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073831014 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.211042975 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072540633 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069350296 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068007916 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066035464 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064928247 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072569934 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079506504 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064269764 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067978269 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072150121 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071633518 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067363948 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075444241 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071143109 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064304047 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064751758 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.0669425 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063853149 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075325199 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063824876 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066967292 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067487312 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063113286 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070588177 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07997852 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072825741 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073491688 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062816739 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061953232 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08101722 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066604022 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067004335 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.0710363 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072687628 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075378003 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072807356 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.07965923 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063415714 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068013354 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07570843 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064073391 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063164026 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066231268 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064385884 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07179447 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073449208 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070756718 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06514573 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069739363 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076511386 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064356323 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067506171 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06826612 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063691018 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073882501 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.07114488 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07511808 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064608386 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062443875 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066305752 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072060435 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070704387 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072262604 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064080917 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069641404 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076476718 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070398186 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066099204 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062379451 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066503362 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072277093 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06798952 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062693752 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067664024 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066321998 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070544405 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07244038 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067935295 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062469334 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079709044 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071758952 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072427723 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065333225 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065541519 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063504057 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062314084 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074548419 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062235701 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064814533 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067515974 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064959176 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081356133 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07186434 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078759516 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063711304 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067424767 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062736374 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072623749 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067338075 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063235591 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073943119 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062169471 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077841406 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074902225 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068353035 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06231197 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.088077435 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.07083542 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077259163 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072628652 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071822077 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.0661663 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072365004 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064321921 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073752661 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06212764 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.0608156 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071658289 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070984234 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074370005 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061810825 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071836074 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06373592 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069921515 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069395836 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063452677 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063325703 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063536262 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071001528 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066209643 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070734486 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.212917912 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081153262 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065650177 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075296764 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072953391 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074322131 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077610172 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075021086 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071348707 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063782737 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070330342 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071109613 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064480235 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068193011 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066548027 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085491368 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064568188 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06508889 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077899788 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069369871 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062931769 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070241975 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067732518 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073877294 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064759083 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074563088 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067118592 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064555082 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067561899 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06751419 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062144823 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062405983 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062447475 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072737282 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067153057 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062818967 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082488173 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064553284 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071992243 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074156006 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069664231 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065172389 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062406463 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064541571 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07612087 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079170194 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066336953 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072053949 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065289212 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07254757 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061893075 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071854461 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071416828 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07172696 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062871554 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063369127 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078364673 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078750348 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067774596 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072305389 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072037698 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064758912 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085143746 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072248891 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06425722 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073816143 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065525667 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06249205 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062130154 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064767783 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074757396 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.0628134 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066132493 seconds)
  done (took 43.229787163 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098849227 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064036323 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062697505 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062877099 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073791744 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06395463 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063159929 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063784831 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063879583 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065294753 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062444424 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065735289 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074094446 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076453304 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073455333 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066343312 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062962598 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063613342 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062995439 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063429304 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073196691 seconds)
  done (took 2.905392625 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065290227 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066500727 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067211674 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067947383 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066504556 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063203452 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066897471 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063120099 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067842786 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063757891 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067828095 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063645153 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063523138 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063059127 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063352247 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064624574 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06717646 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066656897 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062795531 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067086699 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064378447 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066782488 seconds)
  done (took 2.891860721 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063178483 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062107169 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071904649 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.0621023 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062159458 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066356581 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062429574 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066876148 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066792807 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06681745 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071512451 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06354164 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062314227 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068838336 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062294211 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06324704 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10591095 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063670979 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063498305 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062384551 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065451707 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071857968 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062340439 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062338001 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066474421 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065740244 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062045925 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064712676 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06344019 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066693221 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063871606 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062079985 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071488702 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071296362 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067319171 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066929885 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064111725 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063448208 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062281489 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062540483 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071052585 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063850996 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062588663 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06411451 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071309376 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062435436 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062466435 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071537424 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062402326 seconds)
  done (took 4.692268867 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071553791 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115880537 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068328498 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097194752 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075593654 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069042157 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.06859978 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097656064 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.06359068 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064483071 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076434938 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076958405 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06585069 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066868678 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068276219 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06550471 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066380067 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064412613 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068184577 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065109624 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067863624 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069701279 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074865429 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075901017 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06645819 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064623903 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065070042 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066676444 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076069885 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068317372 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067014616 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067387296 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076065542 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070152801 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064989721 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06544482 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076735456 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065927342 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065402893 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063890268 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065271707 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067173618 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070028022 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076901617 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066038786 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070430265 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065657256 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063689132 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076235747 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065508201 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069068854 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077700256 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066806255 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065522594 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066984046 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075806071 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065879913 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064086018 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066306634 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075890844 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063698084 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066784968 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079468277 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064947111 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069042282 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076794085 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069994869 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06708222 seconds)
  done (took 6.395816946 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070641267 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098032108 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073396107 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074055727 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073706767 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07349776 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073819795 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073666886 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07337644 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073713509 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073752452 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.113619504 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069561825 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078099513 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073241683 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073624677 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073345928 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073687691 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073616407 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07357829 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073165187 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074010244 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073050865 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074011082 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075930832 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069350757 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073649605 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073053315 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073945359 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073333062 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076978227 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07319451 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073314765 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073693974 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07610982 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073818286 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063940483 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072935743 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073632271 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073180899 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069681979 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073512457 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073268801 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069738235 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073305057 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073197325 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074251615 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076145182 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080508769 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073539387 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073971703 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074686229 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073407147 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073742303 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073966612 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080376525 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07402216 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073986577 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073460739 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074204756 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074185993 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080525227 seconds)
  done (took 6.132429414 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075207679 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070027083 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081881837 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062978362 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062228463 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072328954 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062855821 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063008748 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069842601 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070004287 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071749985 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071995152 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074512342 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071661016 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072283148 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074427053 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072040387 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072114161 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069442564 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072601001 seconds)
  done (took 2.904805196 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077313373 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082152526 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068714843 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072013054 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068665701 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072301559 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067344243 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068131677 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0683603 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068682086 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073454945 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073779665 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069237602 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071942837 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073330565 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072741015 seconds)
  done (took 2.625890929 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065039825 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071188193 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069952735 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063943521 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066290604 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063190304 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063922687 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062338805 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065879701 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077410016 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063717688 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066866523 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064444398 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.06291163 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.065512762 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066180828 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065181842 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063696595 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06389512 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068246261 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072384428 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064293193 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066623893 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063572269 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066347653 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072880447 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064586086 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066241531 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063712613 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066258103 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066166158 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070618122 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066413966 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064182593 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062734125 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06375193 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064476672 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066392729 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066595641 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063746813 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062266377 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06895022 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063798508 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064378641 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065441099 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066589817 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065890144 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069795438 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063691949 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066340529 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064394936 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065819825 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063929296 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071142805 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066224358 seconds)
  done (took 5.109330951 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078835601 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068313531 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062755727 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062296495 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068200441 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068571699 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067980532 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068409496 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069277367 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062544904 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069123532 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067508853 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06875938 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068314379 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068596068 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068499905 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062779535 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068079875 seconds)
  done (took 2.713685114 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067536714 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068221228 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067378674 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064322146 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064719462 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069399464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062920942 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06438019 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064861714 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064857187 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064794301 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06457711 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064425981 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064669283 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068737566 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06470514 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064172614 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063177678 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064417077 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062819933 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06933635 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06339964 seconds)
  done (took 2.922733293 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088184723 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086407699 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130137159 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.08195518 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090974135 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073953257 seconds)
  done (took 2.039093765 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094471104 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.10648251 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067120242 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067675998 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076270956 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070598078 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071155501 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071158856 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076463799 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074890567 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071009028 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076833048 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076765897 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072547931 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077001964 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079135213 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071523728 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071325113 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067915948 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079122168 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071237596 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076748797 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071095666 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071439723 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071167491 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072993066 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079323545 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07530264 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071175785 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07690659 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079409485 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070790928 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077007739 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075013439 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068532831 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076460652 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071503994 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079431248 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076991773 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073747086 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068176854 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07728171 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077352841 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073248403 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07915054 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072004399 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073043829 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071619152 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071844137 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081383536 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077047811 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073183467 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076932355 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07991819 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080422948 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082030975 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075385505 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073668857 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077428508 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07556544 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074011848 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076889331 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073055601 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076045989 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079790941 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07299781 seconds)
  done (took 6.467051606 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101242295 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068771761 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071361782 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075192313 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073670282 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071283662 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071791416 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07121528 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071681875 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069057423 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108002672 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0722807 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073867541 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076317222 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072411786 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071678922 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072497912 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073109311 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068922725 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081692843 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071477424 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07337917 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073305377 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073419744 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075281861 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079331129 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071527016 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071529041 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07137181 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071427061 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073063306 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071720822 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073189453 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068828627 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073118636 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071370038 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070911076 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073327171 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071723489 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077489356 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073178695 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079592014 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071480805 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071110305 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075395847 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071105352 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071220899 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068606075 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071719458 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068946725 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075707139 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075290383 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075824536 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073504849 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071780017 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072135889 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071659362 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071631322 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071549728 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079750311 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07323249 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071808881 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081532507 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071686604 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071546416 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07368615 seconds)
  done (took 6.393298785 seconds)
done (took 132.378480934 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220104945 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191978169 seconds)
  done (took 1.885031655 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075588689 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.170208087 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075854836 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.077742503 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.111933626 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108704456 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076303702 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074943921 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077601841 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07521992 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14223139 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077086093 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.075290122 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07513673 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.075586799 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.075025563 seconds)
  done (took 2.940000335 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108828397 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.189025133 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084597544 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072846246 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.118014094 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079725521 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074916595 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078647263 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080069635 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072919139 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110675694 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084336253 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076513596 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080017719 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074606309 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076437474 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078152162 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079492145 seconds)
  done (took 3.12085586 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098677664 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089442732 seconds)
  done (took 1.692611061 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156684358 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105707678 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146229048 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33070321 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133502336 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130250713 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133864694 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.127626731 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111489416 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121754737 seconds)
  done (took 2.989901384 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106590809 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108966405 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314201061 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105558723 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084994981 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079906347 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07800674 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082511892 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077716357 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078909297 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125093975 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077457546 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075203898 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127523251 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.101729169 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109709988 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073241696 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080585662 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082345514 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073071785 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078424749 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082330878 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.18074183 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081131298 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103258376 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077935644 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079858557 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07758298 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07675587 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081489422 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081975632 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103056664 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081029586 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085190754 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07998405 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100836724 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074579419 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.10211791 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077054011 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074781366 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077992653 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081912898 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074732183 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.082491193 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078055342 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.079904489 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082234258 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073140006 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077599863 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077305795 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07516017 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079310886 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078960969 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07960298 seconds)
  done (took 6.430974816 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108866791 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109281332 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072979903 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11738867 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10912199 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073225696 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108484302 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103674768 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.11203608 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072588158 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071790264 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07188151 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079212047 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084047488 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120738969 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109339861 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074728896 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072658067 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110710526 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111101993 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071982086 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105404291 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103921035 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110414891 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070764097 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072592629 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.07079564 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071470508 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077220163 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077998334 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071352715 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079318301 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087864649 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078649531 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070717587 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071137687 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071261953 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078619215 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079295905 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079686859 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077731119 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071013681 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070812656 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072249401 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071999623 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070372207 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077309327 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078569106 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077607935 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071090461 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071267953 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070747646 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071458287 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078305694 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077422455 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079658388 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078999331 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071392206 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071426807 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073318118 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079996475 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079652181 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079048197 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072376276 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080168291 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070963366 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081819022 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084944075 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071466049 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07184167 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071726896 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071026825 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072285025 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077314251 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077911034 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071734118 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071379034 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071080214 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079363161 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077282936 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07099378 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076743137 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071109417 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071477335 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071919904 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071775185 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076906421 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078578697 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071804071 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071090903 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070624871 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071420137 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070403832 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076827499 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077420262 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07760082 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.078188826 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070438372 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076528208 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076127786 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070139951 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074688076 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.0700658 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070753441 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070378454 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07585716 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07507363 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077182357 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070132143 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069958315 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075378388 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078130338 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.211908794 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078845868 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081762237 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079366717 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072107427 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.0819965 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071571628 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081276318 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070371161 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080659315 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072283158 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078222591 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072123607 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071241434 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071437416 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077922964 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07200649 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071456315 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072300359 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072063033 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077880753 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08163377 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072578246 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078432827 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078089173 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072805928 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077500694 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071694566 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079174847 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072025537 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071465578 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070118944 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080466807 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071470979 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071430185 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071313693 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.08095947 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072151618 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080031513 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077849383 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071081734 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.084647912 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080175909 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.077378496 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080882289 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072670769 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071947848 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071509073 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.074825048 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076996121 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078680312 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072407601 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071608243 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076918706 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080557194 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071236189 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077125806 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077792421 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077712213 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071858791 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071612451 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081044329 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078869752 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077846399 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.303125168 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079041648 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071592389 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077061843 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07775994 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07143217 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08511168 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071783676 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081924518 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078545532 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07680951 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078783219 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079780466 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080447649 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080990218 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083716882 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071867402 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071182217 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077789897 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071823041 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071205345 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077468792 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072267447 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071470985 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083106737 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069761445 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078722011 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070585033 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078613614 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070806545 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071931167 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082917695 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071673896 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071882433 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077335073 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071456252 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076948832 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080128784 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075941335 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070433642 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070843871 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076729277 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077343305 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070281259 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069751377 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070404647 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075604066 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.078073205 seconds)
  done (took 19.206718464 seconds)
done (took 39.785724368 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17599292 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120904099 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212049176 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.206022441 seconds)
  done (took 2.310875322 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101914234 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067737959 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.08448007 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.093618963 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06796265 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079619217 seconds)
  done (took 2.0359165 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.2016131 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178352413 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241501597 seconds)
  done (took 2.152591598 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.374306274 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153446092 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221543617 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508734261 seconds)
  done (took 2.894136229 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113204746 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104645473 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080877904 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.113473057 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.088971871 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065872035 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.136276036 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072739893 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.103307116 seconds)
  done (took 2.478701835 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13402553 seconds)
done (took 13.576341803 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.260347934 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.242960555 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.169114794 seconds)
    (4/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.112169176 seconds)
    (5/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077764114 seconds)
    (6/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.079388576 seconds)
    (7/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.191602606 seconds)
    (8/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.12004679 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.226308246 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.186091426 seconds)
    (11/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.263576308 seconds)
    (12/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077143762 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078869788 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.095146726 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.091086193 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080877535 seconds)
    (17/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.078501951 seconds)
    (18/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068729745 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.253610105 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081727618 seconds)
    (21/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.222524497 seconds)
    (22/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.105467118 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.124813377 seconds)
    (24/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.076800212 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.079566406 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088559392 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137458087 seconds)
    (28/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.280474286 seconds)
    (29/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075618772 seconds)
    (30/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075921713 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.220458818 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077578865 seconds)
    (33/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.23775794 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068745368 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.078173303 seconds)
    (36/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.085297276 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.184846517 seconds)
    (38/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077864923 seconds)
    (39/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07696388 seconds)
    (40/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.203110187 seconds)
    (41/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.210384884 seconds)
    (42/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.147735095 seconds)
    (43/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.079356806 seconds)
    (44/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.207618116 seconds)
    (45/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.081606946 seconds)
    (46/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093935429 seconds)
    (47/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.09658474 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.075806826 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.0754936 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.094317245 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068532452 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.096547532 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080593022 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.081738191 seconds)
    (55/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.198919464 seconds)
    (56/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074781646 seconds)
    (57/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.167975299 seconds)
    (58/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.077184984 seconds)
    (59/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.174457566 seconds)
    (60/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181728465 seconds)
    (61/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07803039 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077968262 seconds)
    (63/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.094010033 seconds)
    (64/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.078500575 seconds)
    (65/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154600489 seconds)
    (66/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.140843564 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068880038 seconds)
    (68/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.168960621 seconds)
    (69/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086030681 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089629962 seconds)
    (71/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145639502 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126420512 seconds)
    (73/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071914628 seconds)
    (74/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.070195192 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069798607 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15219928 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075948891 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153017173 seconds)
    (79/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074161046 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.227313412 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075439554 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078183364 seconds)
    (83/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.077257308 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067000238 seconds)
    (85/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.172950873 seconds)
    (86/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.235385362 seconds)
    (87/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077889971 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066657677 seconds)
    (89/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07477828 seconds)
    (90/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069587983 seconds)
    (91/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092710912 seconds)
    (92/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067569659 seconds)
    (93/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.16346036 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075849728 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092589102 seconds)
    (96/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079407765 seconds)
    (97/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067799063 seconds)
    (98/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.06789044 seconds)
    (99/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164016196 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088724228 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.086226202 seconds)
    (102/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071013482 seconds)
    (103/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140565173 seconds)
    (104/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067228344 seconds)
    (105/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068173811 seconds)
    (106/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.154988061 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173338672 seconds)
    (108/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.167728239 seconds)
    (109/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070712857 seconds)
    (110/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074222492 seconds)
    (111/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074870577 seconds)
    (112/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.235431368 seconds)
    (113/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068024292 seconds)
    (114/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190520256 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075554849 seconds)
    (116/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.214575859 seconds)
    (117/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.179327147 seconds)
    (118/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.161836543 seconds)
    (119/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.071435392 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077937991 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071645254 seconds)
    (122/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068710718 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.096525684 seconds)
    (124/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144566786 seconds)
    (125/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076192475 seconds)
    (126/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.176453018 seconds)
    (127/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067187465 seconds)
    (128/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067977928 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170483823 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076965152 seconds)
    (131/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.22598894 seconds)
    (132/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067851531 seconds)
    (133/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.13903409 seconds)
    (134/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075871439 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132508898 seconds)
    (136/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076755603 seconds)
    (137/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.07188902 seconds)
    (138/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066776198 seconds)
    (139/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.218013171 seconds)
    (140/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.162727659 seconds)
    (141/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.067407487 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089981476 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077780744 seconds)
    (144/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066394788 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 0.143097388 seconds)
    (146/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076519064 seconds)
    (147/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083435986 seconds)
    (148/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.186804975 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.144325728 seconds)
    (150/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262147867 seconds)
    (151/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06853326 seconds)
    (152/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067690627 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074384876 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076858972 seconds)
    (155/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06781424 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066921609 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 0.068371939 seconds)
    (158/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143678702 seconds)
    (159/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.214638837 seconds)
    (160/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162778991 seconds)
    (161/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.150673615 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070304491 seconds)
    (163/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093880525 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155300311 seconds)
    (165/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.143233557 seconds)
    (166/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.162759776 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074723228 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06665833 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084422512 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091640333 seconds)
    (171/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.068143916 seconds)
    (172/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067411851 seconds)
    (173/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079317762 seconds)
    (174/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089593497 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127562749 seconds)
    (176/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.0680358 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144226487 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075967998 seconds)
    (179/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095096723 seconds)
    (180/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071019093 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.355295219 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.148737511 seconds)
    (183/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.072137283 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.074968661 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.164287864 seconds)
    (186/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.090081347 seconds)
    (187/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.081858339 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.070706337 seconds)
    (189/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.085171138 seconds)
    (190/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.072489204 seconds)
    (191/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.159912488 seconds)
    (192/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.149270404 seconds)
    (193/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.073351771 seconds)
    (194/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.072793515 seconds)
    (195/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.091004576 seconds)
    (196/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.183051163 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.072608777 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155974616 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.125010919 seconds)
    (200/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.073589555 seconds)
    (201/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.072121119 seconds)
    (202/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.089014618 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.095624163 seconds)
    (204/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.077908282 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.072456361 seconds)
    (206/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.070713353 seconds)
    (207/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.070169145 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.192167152 seconds)
    (209/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.071444838 seconds)
    (210/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097850357 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.068318641 seconds)
    (212/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.070618167 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082395708 seconds)
    (214/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.073336181 seconds)
    (215/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.071118994 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077219253 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.096204459 seconds)
    (218/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.070119585 seconds)
    (219/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.069811688 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076128954 seconds)
    (221/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069489145 seconds)
    (222/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.163897394 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15635715 seconds)
    (224/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.070369476 seconds)
    (225/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.070575989 seconds)
    (226/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072799334 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.072109302 seconds)
    (228/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.081186192 seconds)
    (229/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.070595969 seconds)
    (230/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.073722963 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069157213 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.071189312 seconds)
    (233/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.203494262 seconds)
    (234/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.086331881 seconds)
    (235/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073868135 seconds)
    (236/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067683141 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081591382 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079743325 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069724702 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.157418103 seconds)
    (241/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.175352154 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119683109 seconds)
    (243/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.071072043 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.157406577 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070950474 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076127893 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073688533 seconds)
    (248/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069862965 seconds)
    (249/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.150800923 seconds)
    (250/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067888524 seconds)
    (251/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069099626 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076553293 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.07346681 seconds)
    (254/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.071935891 seconds)
    (255/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077386468 seconds)
    (256/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19888628 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.131255752 seconds)
    (258/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.071963311 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067998723 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.138693873 seconds)
    (261/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.069984158 seconds)
    (262/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071265725 seconds)
    (263/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.08111512 seconds)
    (264/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.074109706 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077784694 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121046453 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093974382 seconds)
    (268/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071617193 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068614638 seconds)
    (270/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071204201 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06706637 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.069172797 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070123001 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068910489 seconds)
    (275/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070558318 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069697002 seconds)
    (277/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.07055837 seconds)
    (278/341) benchmarking ("sort", Float64, false)...
    done (took 0.140915737 seconds)
    (279/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.068510426 seconds)
    (280/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.225344272 seconds)
    (281/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.070443315 seconds)
    (282/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.087279281 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.154043492 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069694409 seconds)
    (285/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076600561 seconds)
    (286/341) benchmarking ("sort", Float32, false)...
    done (took 0.141754072 seconds)
    (287/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.067403399 seconds)
    (288/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070315041 seconds)
    (289/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069100877 seconds)
    (290/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.076266588 seconds)
    (291/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073120428 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086750621 seconds)
    (293/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.069514042 seconds)
    (294/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069501408 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068903377 seconds)
    (296/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.069764648 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.08191426 seconds)
    (298/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.071071214 seconds)
    (299/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06986702 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087211389 seconds)
    (301/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093722458 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126686968 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088712939 seconds)
    (304/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073514446 seconds)
    (305/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.069189217 seconds)
    (306/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.068287415 seconds)
    (307/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.06761189 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.269738791 seconds)
    (309/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.071181884 seconds)
    (310/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.071175464 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.07019021 seconds)
    (312/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.082693444 seconds)
    (313/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.074518528 seconds)
    (314/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.070506258 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06983864 seconds)
    (316/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.069347843 seconds)
    (317/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.071664605 seconds)
    (318/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.071292172 seconds)
    (319/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.071251382 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098608492 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089953426 seconds)
    (322/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.070321696 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.06976269 seconds)
    (324/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076869662 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 0.154432146 seconds)
    (326/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069844713 seconds)
    (327/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069405575 seconds)
    (328/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071719265 seconds)
    (329/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06833014 seconds)
    (330/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.07014742 seconds)
    (331/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.069505855 seconds)
    (332/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136915879 seconds)
    (333/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.069531061 seconds)
    (334/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.06986751 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151186101 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.069655618 seconds)
    (337/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.070200119 seconds)
    (338/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08287429 seconds)
    (339/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.068993329 seconds)
    (340/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.070260159 seconds)
    (341/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.069536942 seconds)
  done (took 37.792405819 seconds)
done (took 39.348350623 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092490979 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082434079 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.0811132 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077601741 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081403922 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080382047 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081925705 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079634123 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080434415 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080425567 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080822681 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.069179212 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.077536299 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08425002 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077935857 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08519828 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.082048148 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.085233611 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.070363475 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.084439657 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.097099288 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081420399 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078839962 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083586595 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069534242 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.079238554 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.094390559 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091361934 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076933321 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.079383737 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.077391752 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.088468665 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077204877 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075851432 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079298509 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075640748 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078977592 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076234447 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093120684 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075202362 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069598659 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081526603 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076596735 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077242673 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078419811 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081615963 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075522719 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.083854847 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069387581 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080622662 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093692203 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074928581 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076746748 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077961291 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.075230257 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078969134 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.076680405 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080590872 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074664186 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.081034252 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.081025677 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077571792 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.069014463 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078016591 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076770966 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076890685 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067448478 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074635579 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.069063331 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.069231473 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.068498106 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07799988 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.076084542 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.074245509 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068132698 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068743669 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.068500668 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.08134254 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074964405 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078364373 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069283983 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074731707 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073864579 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069213173 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074588199 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.081033219 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.068307256 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069806714 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068417893 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083886226 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.076234946 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068690161 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080864845 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074679647 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074190691 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068832023 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068034744 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0743381 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077152055 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06889664 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.068264449 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074651851 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073698233 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.078586022 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069798511 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074475091 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074594271 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.068087519 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.078025432 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076221476 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.078174297 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.08245384 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078062336 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.081228915 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069444768 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.068088747 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078664714 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.0693197 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074511768 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.077318486 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074557693 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07709979 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069217843 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068303075 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074566574 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075585665 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.069118811 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.069381933 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069120459 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078944528 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.076122253 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.068134229 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06913034 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.078079467 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077746294 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.068607449 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.068216649 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.078350753 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06936866 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.0750772 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07483758 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077510547 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.068536025 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.069929204 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.218504263 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.069749417 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068394777 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074932126 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074298354 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069730619 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.078382682 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.076115798 seconds)
done (took 13.48088698 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.071140635 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.110172639 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077933667 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086664709 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082320111 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.071245342 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.074333688 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086487056 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073567895 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089579521 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098279941 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091894119 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097188799 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068973166 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069957965 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.071211744 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068355801 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078066384 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.085088324 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.094083372 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098774862 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069899044 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079127223 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086935812 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.08046071 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086942093 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.07114757 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070804531 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07284232 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.129833815 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.096127652 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069359404 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.071055108 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083570751 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084170697 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077212995 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.071097866 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074728539 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073442851 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069766771 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071850423 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084471407 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074181088 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073843841 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071336068 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.071457035 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.070618855 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074017939 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08416549 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073648295 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078131801 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082336483 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071987233 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.070052758 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068123608 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074302953 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069819151 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070719767 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070069916 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069859346 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069800762 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072414245 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070349088 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070481963 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073458522 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07231849 seconds)
  done (took 6.858673033 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08586326 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096704047 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08481431 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085188733 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06907322 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.070375667 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070155782 seconds)
  done (took 2.315323048 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.071357255 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07857527 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082915367 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.08304279 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092847224 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.080728735 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070942924 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102946347 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069093245 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079332197 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086509037 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.084319781 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073685904 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082391873 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.07096644 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082298837 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070221233 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07753976 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078332769 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.084077278 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074364655 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100576519 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.084057487 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.071203892 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.084364818 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077516547 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072585487 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.071031378 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070416254 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.070102514 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069786283 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092411 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076914578 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082397303 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070810435 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068859884 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.075672568 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070973101 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074379684 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079457819 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.075235428 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.07008216 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070720706 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070164057 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.071476508 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074544807 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.07118704 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.070263573 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069556536 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077772029 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068864055 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076423035 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072296253 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075213211 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074892677 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074711933 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077215839 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.07062705 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077740084 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076764163 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069647745 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082698231 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081624397 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.074170722 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.082421596 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078481851 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076407297 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073909774 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069481127 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069358397 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070302483 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081850694 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073449171 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.072043217 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070920897 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.075081404 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074044356 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085908136 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085656498 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082964849 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.07224067 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070212392 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074312435 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085103185 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07482396 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.07005467 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.071079069 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069215236 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074800672 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.07040732 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.075150027 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069811454 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.077123921 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072345245 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072389556 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078455124 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070334577 seconds)
  done (took 9.119860915 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.073940265 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072687419 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071133531 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071134694 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071514725 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071442903 seconds)
  done (took 2.224801883 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091651415 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.071140152 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08315772 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070788532 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093365662 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077550761 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077359258 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072566986 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087222936 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.08140866 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07737451 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079794293 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076914195 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.07237727 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.077444307 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071234357 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076850071 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073374617 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080648621 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072868276 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.087035958 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072526868 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07263511 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082560172 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.074018677 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071603504 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071514201 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.081115395 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079992163 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072269214 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072208072 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073394911 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07921513 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071981142 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077036298 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078819749 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070308565 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075936721 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072709867 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073623754 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079112895 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072466924 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072724559 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075936741 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072332 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079043518 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076311516 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07448149 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076711224 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.076059363 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.076060129 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.071203459 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073537007 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075766866 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07922851 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072560709 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075880027 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076563543 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.07234292 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078796859 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070549684 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073469624 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072150368 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073367325 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075536254 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07605949 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079005279 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07271221 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072425687 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070479502 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076178882 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070701617 seconds)
  done (took 7.219119682 seconds)
done (took 29.478244945 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.551194071 seconds)
  done (took 2.281813858 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.600259253 seconds)
  done (took 2.374624411 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.402342491 seconds)
  done (took 10.179012854 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.301416213 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.324674619 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.74624635 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136906081 seconds)
  done (took 3.320227901 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754781256 seconds)
  done (took 2.542636135 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23086492 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226369918 seconds)
  done (took 2.246223349 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.341692779 seconds)
  done (took 2.121580254 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.155516429 seconds)
  done (took 2.930986259 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231751166 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164241377 seconds)
  done (took 2.179384053 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.547168962 seconds)
  done (took 2.328228302 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.295223936 seconds)
  done (took 6.082201191 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.245181692 seconds)
  done (took 2.064006843 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231719739 seconds)
  done (took 2.024600355 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.068668102 seconds)
  done (took 3.855191003 seconds)
done (took 48.32121211 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087405205 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.091048766 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.090136444 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.085500214 seconds)
  done (took 2.1053294 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077450764 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073983151 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077207792 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077176829 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075361401 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076180646 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077134088 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073331542 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075230391 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073685224 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072331378 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073935918 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076254873 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073528629 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076482117 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077559097 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07356746 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073688845 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075922607 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073626618 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076355516 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.074209281 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071800767 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073405672 seconds)
  done (took 3.581870455 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081467489 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07535709 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.078920221 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074398746 seconds)
  done (took 2.105888087 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080448864 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079949969 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088723937 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094729706 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080455816 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.081231072 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088217501 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088948161 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069054422 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091157846 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071651187 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070142479 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070538298 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.0893151 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087300682 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066331621 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067433934 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080642409 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080272486 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083408072 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072291112 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068836263 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080487785 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.081222059 seconds)
  done (took 3.706721523 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083368719 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068881287 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082034487 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094937837 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096222246 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068812434 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.082836699 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096684732 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.131577772 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069361259 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075354994 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068980756 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108483608 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069474346 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084770201 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112874483 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115394023 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07325719 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102653965 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06909149 seconds)
  done (took 3.559457238 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079678721 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07318832 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073682359 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068732976 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080075485 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077084871 seconds)
  done (took 2.262459565 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070454022 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071231444 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.0731637 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.074922855 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071307698 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.07156132 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070238752 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069240997 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069567319 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069780952 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070428839 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070776481 seconds)
  done (took 2.651444437 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.159008169 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072101676 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.073051057 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068693324 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.075698918 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070172522 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.084714933 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072131494 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089044907 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070647015 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069912283 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072359771 seconds)
  done (took 2.781951916 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102515076 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104693128 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14977662 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121206751 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120832856 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100501038 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124095962 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.100106492 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164972065 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140460071 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121012732 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097189205 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090625463 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07360182 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103863546 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105775574 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140575067 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076194585 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117308426 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.16960736 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118275606 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114202603 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125613132 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120400979 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085172618 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125862604 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098424773 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10627355 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127728188 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113679229 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123303542 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102465143 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075326759 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074886093 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153063191 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103937651 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112267727 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097669976 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104567319 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092256741 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111400255 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.073313689 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090654721 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111796638 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088255114 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121263446 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.092032664 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10862582 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08549689 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.136053447 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110741901 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103615455 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089706309 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108358058 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133141531 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099870288 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115405353 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112017319 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0873636 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.123080611 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10560778 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.257980842 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099237442 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085424618 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165833642 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094045473 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117919781 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117380264 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086354495 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094214803 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107289477 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135263667 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111263111 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111166511 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119385237 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099276678 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114156314 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096364272 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133478332 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097668365 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077083919 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109747346 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13346435 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089252728 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105314944 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133064637 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096910233 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0816768 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096785726 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123272433 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084232038 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.100500125 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073316572 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101617304 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110899035 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101365248 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115386134 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111079246 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082174408 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129055991 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112759547 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076027264 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119639507 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103297635 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157298138 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099527773 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080091031 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104543599 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09769683 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.153705153 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088459171 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083589408 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102452555 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144355347 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09853343 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.173905218 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100224296 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132918876 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102079881 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091136285 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07911385 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093545704 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105930725 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112336659 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106669453 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093310303 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08131527 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090878853 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099656196 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095045949 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084638255 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116648973 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.105349601 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077996345 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090411875 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.08200739 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125540572 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080732175 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110928908 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126706921 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081614155 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107265974 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099876687 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110091724 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099277396 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108559754 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138832589 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11838374 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082210392 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085741911 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108643884 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140106815 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112698887 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086999034 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078541294 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101687522 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112231511 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098751311 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107730008 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101652349 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109368707 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097773087 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138057063 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117082121 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092071434 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096711504 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09685564 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123205209 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078762364 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15505303 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095331807 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118674479 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086601963 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140032037 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114657979 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090693387 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086494241 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096990064 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104918945 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107154761 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141564487 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09715931 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075523642 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092373874 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129889368 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077670031 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10068633 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091641622 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094463066 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117006062 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084843347 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082405918 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070696466 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102527866 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136025627 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071748873 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115252547 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.40131413 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111091171 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.113426357 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.077001748 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108319007 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147679053 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112946746 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14647928 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124344131 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107741728 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12469457 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.105650833 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112890221 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085957082 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.133269191 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.142586279 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102677292 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095810872 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139398097 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123059584 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.14187133 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.102249642 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12106208 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.110305584 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10618613 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107631169 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103751595 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146781634 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125835249 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.130069927 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090795282 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111408557 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112343082 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139565415 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086669957 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121447281 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079504307 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115815289 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081345904 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112266618 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.084509193 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.116590175 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084006184 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105030793 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073520081 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078581472 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147729996 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117638498 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093805092 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0908753 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141129761 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137317723 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085780513 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106900845 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108610801 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106535072 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107157137 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113796771 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090116184 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099557641 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.281864497 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084254293 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086488497 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104123057 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099250477 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112327803 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088684523 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079476391 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140916675 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109506719 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09983067 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082127552 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099534037 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.126156741 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094187992 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09160612 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110368275 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108740036 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143405871 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094961604 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101962055 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121757922 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08501772 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096862106 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073775589 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.090191076 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080785506 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114984031 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080230301 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114552232 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072662276 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135475711 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090304263 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097094367 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106866758 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105492633 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132598053 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096261289 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133432642 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09472113 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106343076 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112471812 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099292366 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084851368 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108222838 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100655256 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113492331 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.10085428 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110636465 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114454108 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097981709 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147001616 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094757476 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124534678 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109905073 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111929686 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108222938 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121581236 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141649272 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116307328 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116682448 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079086306 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087469745 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10982909 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104223762 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150913113 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106445772 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.076204398 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090254623 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094819322 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.266612921 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109236029 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086954316 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147132891 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091945132 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091517149 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118500904 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.09489978 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10167021 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08019195 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100569682 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105280171 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098884696 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099409067 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113214701 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122236954 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117391408 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137647173 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103840182 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.096846722 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.123090537 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11536637 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114878663 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090539841 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090947191 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128995914 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106921287 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.133178311 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104950887 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099449387 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106733739 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095181686 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103239563 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101656106 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.114525293 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085029378 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080235432 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072704864 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076565012 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120583632 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113001854 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103073356 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10287704 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076575291 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108309839 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104294211 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076069303 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091551915 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098219344 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103627628 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087860364 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096345775 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119351372 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09512988 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107731625 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10386622 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133111183 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.105155788 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093238865 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14819511 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132959222 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091963859 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09770213 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075726293 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08350058 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10649945 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150068702 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123110596 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.08155679 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088267962 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.241715238 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090143518 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.076131948 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090004814 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094500929 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108863692 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097184103 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116559851 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108321269 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079562175 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107422332 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101844723 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096265106 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100990762 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106065241 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109714654 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.128658095 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105492926 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102497184 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080307389 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084339643 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08016969 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083544378 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107059477 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081888857 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08003859 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134875593 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095591664 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109533311 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113698554 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08967515 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07998701 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138594707 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073586647 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139501686 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075564348 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086686832 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085113479 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083706038 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098545197 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109223009 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100984387 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116107086 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110307537 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108979346 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115684891 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161211429 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075465581 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14788784 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080301252 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079906046 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080430118 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118367206 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094705824 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10938193 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145421083 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094294577 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09778275 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081347974 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133323906 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.10343346 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107861826 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087269011 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082702191 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131433983 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083486982 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075113443 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090841321 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115545914 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076717556 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108609849 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.251101478 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081916122 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118073088 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635673681 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094930305 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080015084 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093761522 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147957135 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132965505 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087858264 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112673482 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123636809 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09473787 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087954374 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112591304 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186501892 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078848992 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098828081 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106808663 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103132814 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097343131 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096345106 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089283679 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097853285 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.09043456 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084250903 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112215811 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09194558 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096529531 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102394319 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087445706 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084709881 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13531519 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108572685 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086488468 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093324621 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105430036 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092583515 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09541158 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07332786 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118315636 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095633674 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105238897 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095532342 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112627511 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123837895 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093192433 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117055924 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093311376 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113709275 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089405893 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.083010799 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106980951 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082260057 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081622729 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121685742 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.088693352 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09717138 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108452382 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099926784 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116918678 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120520645 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115431779 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102269882 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083185859 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09105086 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.092279593 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079584379 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082750309 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078127 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.080324096 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.274910165 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091048408 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088625716 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119965097 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086883346 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107789916 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104656765 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113747212 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087661202 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105409286 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113890677 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094710533 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107897093 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103526081 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133112143 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151154515 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103708226 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12845653 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137580629 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081268596 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.08031476 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073065434 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120537622 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083971533 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08552282 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085961516 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138539338 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08646328 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09933957 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233792301 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084738196 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086079188 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101032466 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074413453 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08789679 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11088964 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089173518 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085017206 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102692502 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087750213 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122581947 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114639962 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093701485 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087126459 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084961963 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097527365 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108950664 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132612295 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094476444 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07907691 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109140412 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108292449 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126724595 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076759602 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084799013 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135002465 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096483661 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108475086 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084152112 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125414064 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138487115 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094630616 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138446593 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075121158 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087807868 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093865277 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130976249 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078687958 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091531816 seconds)
  done (took 67.284376667 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.16054929 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14471973 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083614409 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099672196 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188725258 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198070044 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120639133 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097458987 seconds)
  done (took 3.118308475 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071648399 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086750064 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084539461 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.214156338 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.114025934 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.070518065 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.076849283 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086296858 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072678481 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.07118558 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106740975 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.07021792 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.072181969 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.379713634 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070077389 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075737765 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071859422 seconds)
  done (took 3.77207967 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332599486 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.40792649 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.236374343 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.638125143 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.142594877 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486592535 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077771741 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.086947357 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.63608135 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373508943 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135751431 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092218835 seconds)
  done (took 18.633497332 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080100863 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.082429786 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.08229212 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.078744503 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.078374258 seconds)
  done (took 2.400455294 seconds)
done (took 119.773891602 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.088004028 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.177461911 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071997682 seconds)
  done (took 2.264655653 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.086573587 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08557521 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.08501252 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082545646 seconds)
  done (took 2.326476067 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078999278 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080346322 seconds)
  done (took 2.137896148 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228921097 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.18158231 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095197722 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086859019 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.087988027 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084473859 seconds)
  done (took 2.253253491 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076215059 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07590784 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075599348 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076588321 seconds)
  done (took 2.281956373 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071883727 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06995917 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072291157 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074987541 seconds)
  done (took 2.269074761 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090438533 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087724286 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116552468 seconds)
  done (took 2.274551149 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087601893 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087243002 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082455183 seconds)
  done (took 2.244807776 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.114821751 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101099616 seconds)
  done (took 2.198287083 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.084672888 seconds)
  done (took 2.073871751 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095350911 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102166206 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.146042245 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.11241501 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145349033 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.131342178 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080652016 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081935494 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.078082135 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07640234 seconds)
  done (took 3.033159908 seconds)
done (took 27.931640692 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083546056 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374131266 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36432609 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092420811 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676053233 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.360945922 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008594195 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096152103 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103409739 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072587169 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.09054722 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653085988 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00100965 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330756979 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.986833197 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329259552 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655184268 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072927745 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07201602 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07292164 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993784821 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072032166 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072136148 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073104851 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.67815326 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.379671058 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073524504 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329851219 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072874149 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075299864 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360834693 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073987437 seconds)
  done (took 16.700973304 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07470829 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128118251 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077147694 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.0893045 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075045059 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073989209 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075747222 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.073314946 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115756548 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073524107 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090398764 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072547567 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07627235 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073798323 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093327521 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072210345 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074733063 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.076747061 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073056601 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073899894 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.09144525 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072623178 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073618194 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073483794 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073239331 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086064186 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07400529 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072236559 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07315243 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074956881 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07636653 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074598917 seconds)
  done (took 4.554045138 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.126159169 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.13222761 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07780808 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114589846 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123930567 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.0745691 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156258615 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096960753 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11955262 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073121525 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.09102304 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072608575 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107516839 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074400001 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093580053 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073190259 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074567298 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073587187 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073009797 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07342384 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091340375 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072396098 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073434873 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.0740481 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073570828 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087994437 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074324924 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072647049 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073089606 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07454092 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07690628 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073675909 seconds)
  done (took 4.826631365 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074089494 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075278919 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.083976712 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085462089 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070748719 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07275105 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073604806 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071115451 seconds)
  done (took 2.62288214 seconds)
done (took 30.710365871 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083800166 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072628039 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075600898 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091776332 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078306075 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074497016 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068678536 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078424014 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075532558 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075692984 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077477019 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.071238831 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.074215701 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.069226201 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076398545 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.070206708 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076571864 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074314274 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074575256 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.075719281 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072695213 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075324532 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078605169 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.075111622 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.074842374 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.074800524 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079265476 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076264047 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070816447 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073202811 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.07320017 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085409292 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076992875 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.077083774 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070464156 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.070395279 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074730103 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.07260171 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076504872 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079964538 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072437345 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079330355 seconds)
  done (took 5.139765219 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.093652747 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.099303556 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091601646 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086800489 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.112721524 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086143956 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.095757769 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.08342433 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.083151925 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095367466 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078496011 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083900017 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085799515 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080138394 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.083843245 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079192936 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.08448974 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078024049 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083713452 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.082374216 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.095508104 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075587916 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083367525 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084577438 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078327209 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084776556 seconds)
  done (took 4.267115988 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.077252905 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09231316 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096692954 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147834872 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114886741 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087081758 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086643182 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.102514527 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10525498 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07218981 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076189235 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099691168 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101002303 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079490605 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111675918 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091104025 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084816311 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.074059797 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.078547776 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.107255156 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095063377 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.090848283 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104771293 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092583579 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071266608 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081685248 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.079066022 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087080644 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.079687745 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08422266 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076825597 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075656872 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.073540603 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.085506706 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.079604391 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069850821 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092374545 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084358106 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.0880235 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109995425 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082614517 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.073351535 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102778115 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137993923 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071641534 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074950331 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075991386 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084384456 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073291089 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102260954 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091058389 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.072149463 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090908835 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07393867 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073075405 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089576567 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073693187 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074067912 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084949312 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078143366 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093275945 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077386258 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.09354496 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.072030527 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083227845 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072993059 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073842604 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070992262 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108419758 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079876993 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126000584 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07303191 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070065118 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084705355 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08367412 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07878151 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.072202647 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.092280082 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084918907 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075640201 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083941331 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.075152927 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.074932255 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108239335 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070811631 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.070228467 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.070182897 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074355112 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075254935 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072177904 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085883467 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.072042171 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075386823 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087900516 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071905297 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072665292 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074444004 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.0733509 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071365531 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083096418 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075917037 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.074267398 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084735025 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073395873 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075020718 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.087026827 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081438176 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071770837 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073142757 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.0745447 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07345774 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076687056 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075399909 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073978193 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079199228 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079626734 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076960435 seconds)
  done (took 11.805997589 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.169181113 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.158367084 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073547824 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153063232 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080391255 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076076759 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.155322383 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092989251 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.072955009 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07405873 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07189653 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.100847727 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096689551 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110031993 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.076776722 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073221391 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098548397 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106785841 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.157189369 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149930275 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096018528 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080270706 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074515561 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07343414 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074173049 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081956508 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091851565 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.080766751 seconds)
  done (took 4.863031631 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080068206 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.088726003 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076517333 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096960412 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.09068407 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.073196948 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074487521 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073095536 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089564729 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079581563 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072920637 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076781313 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.076219992 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073933276 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07330753 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07954135 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079535426 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.072177079 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076443908 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.0769929 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083432285 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098471893 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076944949 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.072785582 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075323372 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072286541 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07970543 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082563054 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071950864 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103023715 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069999799 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076913763 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086782183 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.072445576 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072263046 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073332399 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072625859 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072282104 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.073198648 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.071306549 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070622264 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077541895 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071924964 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078695736 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08678005 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079756026 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074187769 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.078461793 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.074996204 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069562511 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.076224212 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075794308 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.075385889 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.081059241 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076378553 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.075165838 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.074099547 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103872759 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07974389 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.0720436 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071491651 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070633077 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074476685 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080166778 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089929736 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07445691 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.070962177 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072480563 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076896584 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086953964 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071688691 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.077441341 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068856969 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.073276745 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074999738 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075608046 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073705784 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070858449 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071994762 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072528815 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.07243003 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072552314 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071895968 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074879868 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070169447 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070686531 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.073150666 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073685506 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.079389063 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071276388 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075588343 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073795874 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071763066 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.075295396 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.078183127 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.076022435 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092641434 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079981719 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073342035 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070316798 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087201325 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074800157 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071935259 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.078619838 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077040787 seconds)
  done (took 10.13904833 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095764196 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073827242 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092518218 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099238204 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083176552 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.077911442 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086955114 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073605483 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089348539 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071146493 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081756418 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071112863 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.086235062 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.08219315 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07420516 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.083079595 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074605157 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093052743 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087224901 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071339877 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081943485 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084725674 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085448438 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090775744 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090334791 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090793619 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.08470589 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07502534 seconds)
  done (took 4.413144119 seconds)
done (took 42.633902518 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.105299809 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.27109707 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.094032033 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.302201654 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.151927569 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.315355565 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.30710823 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.090522596 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.165746776 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.116813678 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.401825047 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.51446589 seconds)
done (took 70.922641338 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.134461581 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.234249514 seconds)
    (2/2) benchmarking "String"...
    done (took 2.310186044 seconds)
  done (took 6.564325036 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.68812908 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.091011227 seconds)
    (3/3) benchmarking "different"...
    done (took 2.144112959 seconds)
  done (took 8.938045968 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.191297171 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.755338742 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.351414477 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.089911002 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.092716194 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.501600599 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.894999118 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.546631838 seconds)
  done (took 34.250102867 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.353705629 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.300771872 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.849994727 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.900223494 seconds)
  done (took 17.472763224 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.695059218 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.355677174 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.354646738 seconds)
    (4/4) benchmarking "different"...
    done (took 2.350484079 seconds)
  done (took 11.823210132 seconds)
done (took 91.496337017 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.094085586 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.69146536 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.108450145 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.243839973 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.139351931 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.117960439 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.099300699 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.135796635 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.09275468 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.092208719 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.528194855 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.090756356 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.090797024 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.126165623 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.095131497 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.111224646 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.535612511 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.099802295 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.110098146 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.681034502 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.565782492 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.100282309 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.100338976 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.139480353 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.192621735 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.091843581 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.168168698 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.093211096 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.711845097 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.09959116 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.088487727 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.090016359 seconds)
  done (took 214.742944318 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.093979446 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.071114158 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.120757332 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.118148925 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.618150601 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.280495612 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.23942998 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.675060076 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.093650053 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.092335491 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.264332209 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.095607594 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.288920097 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.040660382 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.07794017 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.089959807 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.211004394 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.288755964 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.079347844 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.267376784 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.080578489 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.050944345 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.012092472 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.215351173 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.118818242 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.095644508 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.090481692 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.083955607 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.267392304 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.199453665 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.117400463 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.124665468 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.213450031 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.949284682 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.093816837 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.101893536 seconds)
  done (took 180.939203933 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.255985052 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.10034178 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.146350167 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.330929285 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.850482454 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.817648549 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.084027524 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082149255 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.083846977 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.093000105 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.084027166 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.153394735 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.374339647 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.09898503 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.079264603 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.083280909 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.326890546 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.081698627 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.078533867 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.078356947 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.146851929 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.449783076 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.211136577 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.078885397 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.091596489 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.214795029 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.087678616 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082237945 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.215525783 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.07882497 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.081732215 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.160964137 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.210215181 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.09119711 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.163161119 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.086272531 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.585179482 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.077889243 seconds)
    (38/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.078854117 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.078992563 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.081711223 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.145453922 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.074248911 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.19151002 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.166212492 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.07871794 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.092450051 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.148300521 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.784555854 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.081182923 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.080031913 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.081026807 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.079597415 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.080200794 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.080902971 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.902300141 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.080641134 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.106311125 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.73303355 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.078903666 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.079189573 seconds)
    (61/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.080027286 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.081122574 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.081679858 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.081380704 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.087607189 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.121955053 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.901878709 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.392331235 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.470448449 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.881885939 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.053281689 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.396582021 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.12737013 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.084139164 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.162360256 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.07837833 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.082164315 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.080743442 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.082193834 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.244524931 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.224978029 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.081054844 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.215688476 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.083846379 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.082166019 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.113519296 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.460411011 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.080264345 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.095859405 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.136864723 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.082152312 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.080470046 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.09088442 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.216703569 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.080442076 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.082039809 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.084590747 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.185734638 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.080396079 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.245294756 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.308776141 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.153956336 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.330304296 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.328615521 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.081110407 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.081865382 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.09821398 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.083135444 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.083732549 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.095062329 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.084344891 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.082818956 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.084609864 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.086184516 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.083367165 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.086963644 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.069316432 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.081162544 seconds)
  done (took 445.455745456 seconds)
done (took 845.470079681 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.635236973 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.756331703 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.644786146 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.678506425 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.643083944 seconds)
  done (took 15.364994242 seconds)
done (took 17.345021334 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.112622155 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.103801042 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.09298047 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.155293675 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.107394061 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.096917477 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.132310947 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.131822548 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.117178049 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.097268876 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.145386173 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.099920341 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.117993884 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.117621621 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.173028373 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.123391438 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.09994172 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.094320334 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.157379061 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.098359337 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.104141667 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.097586876 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.096688483 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.147860401 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.179327612 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.10632061 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.100388491 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.147096561 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.105339088 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.13373011 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.139082007 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.122023038 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.134760723 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.176654724 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.152195614 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.178862784 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.108247458 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.170485697 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.106712433 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.186550739 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.148786369 seconds)
  done (took 89.204183402 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.098077615 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.235030273 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.29989591 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.125233857 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.097296346 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.309916399 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.151077291 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.221400434 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.227322248 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.306143867 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.311250878 seconds)
  done (took 26.400268031 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.097480194 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.236223602 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.306686556 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.128547398 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.097102032 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.311463081 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.155145195 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.230362178 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.231576665 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.311283623 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.318538776 seconds)
  done (took 26.444102854 seconds)
done (took 144.06546346 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.465155565 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.117903336 seconds)
  done (took 6.595104502 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.09265302 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.110173634 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.249556568 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.096148412 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.092742944 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.094061276 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.092525154 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.092963794 seconds)
  done (took 18.933249617 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.090188321 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.09213018 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.092920865 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.089999691 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.07434436 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.092452342 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.093155824 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.093612452 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.094076074 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.090172123 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.093661009 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.09279432 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.094564016 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.093110971 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.093678385 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.094688988 seconds)
  done (took 35.466420043 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.093574357 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.092293534 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.092850127 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.093754844 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.091373761 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.094368343 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.094449403 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.092387485 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.093432719 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.093254739 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.091427296 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.092486156 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.092851392 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.093203818 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.095072966 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.094509355 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.09333511 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.094742611 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.093869187 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.092738901 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.09306211 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.094479486 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.098771796 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.093406055 seconds)
  done (took 52.260025694 seconds)
done (took 115.281843667 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.27927973 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.628800824 seconds)
  done (took 8.922300219 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.097975412 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.095360338 seconds)
  done (took 6.273332373 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.092990209 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.095874954 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.094243934 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.094467967 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.095512773 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.095988014 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.095731943 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.083271137 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.075297392 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.094049748 seconds)
  done (took 22.932295366 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.094015264 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.095961721 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.095125741 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.095406575 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.095002991 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.09594841 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.095447736 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.094235832 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.095588424 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.096932514 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.096234675 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.096721147 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.096149055 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.096849661 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.095121902 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.086568045 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.096546452 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.095123197 seconds)
  done (took 39.729811814 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.096677531 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.095942744 seconds)
  done (took 6.209363497 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.098580862 seconds)
    (2/7) benchmarking "second"...
    done (took 2.097663443 seconds)
    (3/7) benchmarking "month"...
    done (took 2.098035768 seconds)
    (4/7) benchmarking "year"...
    done (took 2.095608139 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.097796012 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.096730189 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.095634297 seconds)
  done (took 16.696782782 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.09750884 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.244529446 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.302926436 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.692233399 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.097490053 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.100124874 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.947043338 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.099929621 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.101775788 seconds)
  done (took 22.700319252 seconds)
done (took 125.482846799 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.946278115 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.096033778 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.321607201 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.242383496 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.114845912 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.391023704 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.131677608 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.645077169 seconds)
done (took 44.909494512 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.153060422 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.094643227 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.124870691 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.124018595 seconds)
  done (took 23.362457965 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.100878949 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.423202497 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.11624148 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.021690989 seconds)
  done (took 23.698675077 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.475948845 seconds)
    (2/2) benchmarking "read"...
    done (took 2.446004111 seconds)
  done (took 6.945276466 seconds)
done (took 63.183888429 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.098729397 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.098414029 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.098570876 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.100069281 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.098928574 seconds)
    (6/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.100509026 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.099119983 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.100915352 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.099334086 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.100538461 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.098359318 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.099983545 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.099216143 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.100310704 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.099647562 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.100122107 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.101704902 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.100651946 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.098480372 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.10176902 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.099855647 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.100642872 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.099801938 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.09885104 seconds)
  done (took 52.413110878 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.099857161 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.099237691 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.10148544 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.100243566 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.097860818 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.100647799 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.101131642 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.10124249 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.101195024 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.100317133 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.099087157 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.100307984 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.100699146 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.100048611 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.100942338 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.100189194 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.101605836 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.101029558 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.100756802 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.101149629 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.101953372 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.100055514 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.101104992 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.102095424 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.102612414 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.100913853 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.100302076 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.100975923 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.100656223 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.101330162 seconds)
  done (took 65.042555167 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.101032695 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.10121147 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.103235152 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.100152122 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.101741804 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.102472821 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.102569967 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.103255478 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.101153069 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.103375998 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.102697437 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.102220397 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.102759812 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.100598963 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.100352971 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.10232993 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.103055045 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.101576113 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.101484464 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.101174763 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.10178502 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.074699047 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.100170349 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.102475263 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.10219078 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.103376273 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.102304874 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.102709077 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.103879097 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.104267695 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.103687559 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.102615513 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.105066364 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.103522699 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.103867624 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.104171509 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.103317826 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.105776724 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.104256391 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.103447612 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.105125351 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.103820168 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.10518915 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.104105862 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.103273307 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.103736663 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.102890041 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.103798806 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.104218841 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.104655663 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.104930636 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.104335292 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.103242791 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.104259622 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.10562822 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.105227708 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.104450108 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.105123374 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.103414385 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.104824481 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.104505707 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.105256746 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.104340492 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.104276658 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.106249974 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.105258068 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.106191435 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.108205606 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.104711948 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.106158691 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.107118476 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.105621542 seconds)
  done (took 153.454535064 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.108233319 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.106374967 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.104901345 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.105609986 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.106801741 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.106548151 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.10914781 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.107475421 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.107211092 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.107184223 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.108094013 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.106637864 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.109294001 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.10660158 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.108064673 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.106725037 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.107276824 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.10807519 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.108034144 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.108219145 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.107728037 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.108625012 seconds)
  done (took 48.388807181 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.10711021 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.106978704 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.10965706 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.108037381 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.106173642 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.108062787 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.106380027 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.106882361 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.107914846 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.107847438 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.108195349 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.108830294 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.107783984 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106957368 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.107031476 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.107882779 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.108442436 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.107738946 seconds)
  done (took 39.965109674 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.107779005 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.108022237 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.109994539 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.108346861 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.108399965 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.108758486 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.108886845 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.106886678 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.109120052 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.109208205 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.107737876 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.107829755 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.110224857 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.108618646 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.109175292 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.109350325 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.112802436 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.105905591 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.108774476 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.110262379 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.109804063 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.10989211 seconds)
  done (took 48.423649614 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.108585754 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.110686716 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.109237147 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.109385604 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.110355628 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.110559121 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.109467158 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.10894944 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.109670453 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.110119875 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.109643684 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.110205281 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.110799585 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.112293756 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.11063258 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.110094293 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.11178367 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.108626648 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.110786175 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.109867147 seconds)
  done (took 44.205133632 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.111123436 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.111915843 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.110714803 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112410367 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.11209424 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.112766828 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.111084169 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.112513215 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.112216256 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.112213402 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.111011072 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.1123675 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.112975363 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.113972295 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.112879405 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113066884 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.112271003 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.113421335 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.110934414 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.112218805 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.114411673 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.112000764 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.113007671 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.113363256 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.114122465 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.114228481 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.111466713 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.112127917 seconds)
  done (took 61.179668066 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.111878315 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.11199798 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.111881665 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.112064024 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.111849741 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.113648158 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.113194066 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.114414842 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.113910017 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.112657126 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.114936356 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.112983607 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.112262312 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.112073041 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.113194719 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.11359166 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113050802 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.113249273 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.113499483 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11290002 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.113270249 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.112425566 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.112497988 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.112859982 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.11372759 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.114390025 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.113459326 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.114010374 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.113967244 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.11300908 seconds)
  done (took 65.425858828 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.133878343 seconds)
    (2/2) benchmarking "in"...
    done (took 2.134600053 seconds)
  done (took 6.299810831 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.113442425 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.113248599 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.11371343 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.114923386 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.115592333 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.113715133 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.114281849 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.114835706 seconds)
  done (took 18.948342721 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.115895598 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.118024357 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.113569348 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.114725112 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.115740357 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.122181564 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.115366295 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.115999298 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.117791198 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.115753668 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.119527696 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.11835196 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.125234554 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.121192598 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.115947051 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.116492456 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.117879955 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.117684678 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.118913856 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.114911833 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.119267166 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.116694687 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.115042148 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.117289303 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.115909496 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.117994249 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.126656182 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.118151978 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.120085621 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.116514556 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.12328255 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.116709626 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.118267274 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.118090709 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.116246177 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.115800603 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.124283816 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.118278276 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.116885084 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.117076036 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.119289862 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.119419958 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.120460083 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.125358434 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.117308686 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.117277588 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.116654151 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.118194337 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.118926304 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.122045661 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.126691494 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.118179962 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.118046008 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.118839523 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.121919462 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.119093515 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.11987944 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.119914934 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.127342887 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.125314489 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.12205163 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.139633913 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.129871237 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.118243297 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.11805364 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.127513524 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.147393873 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.11925447 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.122658322 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.119407007 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.127061918 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.119303169 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.118051872 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.120191654 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.134626277 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.129338296 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.118631898 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.119282598 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.120953047 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.119937626 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.121055464 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.12057202 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.122598393 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.11964334 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.131332785 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.150259531 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.120773047 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.121645567 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.122819692 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.120223392 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.127004651 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.122642119 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.119631339 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.120760131 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.12248129 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.122699198 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.120831205 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.12058333 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.12058396 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.130085502 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.121700969 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.120711113 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.124549879 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.130080703 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.121551822 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.121582145 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.121189262 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.120940768 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.128330516 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.121068708 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.121783624 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.120220142 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.123657942 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.12640975 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.122421798 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.128913919 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.133052048 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.129785081 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.121688277 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.128620261 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.12507374 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.126143602 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.134771226 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.150583569 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.121820898 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.126880346 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.128140999 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.137820577 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.127028013 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.123310865 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.125876271 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.12197192 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.122407609 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.124796674 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.123062556 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.122189064 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.122433999 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.12292661 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.12253689 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.123390512 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.124949772 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.125106199 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.12720204 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.124896632 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.126757943 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.122162675 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.12584429 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.130661313 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.123519039 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.123526093 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.123763411 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.128690646 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.125126915 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.127276895 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.124218516 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.124105778 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.123950839 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.123258949 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.127200531 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.124668665 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.124420954 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.125219872 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.127595494 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.124551824 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.127932012 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.123951171 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.123841564 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.125182894 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.127585119 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.114432118 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.1276969 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.126594198 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.129436319 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.126422132 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.124313029 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.125205012 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.126679878 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.124352844 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.130918432 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.140595533 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.128472187 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.137983589 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.127034774 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.133701366 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.126743138 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.128440366 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.127841368 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.126580652 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.126738257 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.124851588 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.12634115 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.130879033 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.15102132 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.13901608 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.128397093 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.129281753 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.132476261 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.134590947 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.132396854 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.126676983 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.127184255 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.129410665 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.127050815 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.127898807 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.128608903 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.130939745 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.128928147 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.129067485 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.130554549 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.129547088 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.12798124 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.129810591 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.127683044 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.130110159 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.126819591 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.127627317 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.128092631 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.130838772 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.135519324 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.130363131 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.127893794 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.127899189 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.130880754 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.12768951 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.128229832 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.127830623 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.131920332 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.128890137 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.129308044 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.135140814 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.129137219 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.129140632 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.128838496 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.129241876 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.133659229 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.130876175 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.134216634 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.139192707 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.132238344 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.130876616 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.136362016 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.12907427 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.132121133 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.130802024 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.131586774 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.12998342 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.131968784 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.12953462 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.131086369 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.136398054 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.131497785 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.132796992 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.130166732 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.131766287 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.131584811 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.132531951 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.130397272 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.133155296 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.140658422 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.135211127 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.130437093 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.132599282 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.132629219 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.132922209 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.134581324 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.132409922 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.14430342 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.14266581 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.131335996 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.132024701 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.13139691 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.134167709 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.131385737 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.131590322 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.139340269 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.131973332 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.137293346 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.135838242 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.133234398 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.131152699 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.138350004 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.133878983 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.135491659 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.133866134 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.134348898 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.133687963 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.131465323 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.133461189 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.133748969 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.134544052 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.137187885 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.131490722 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.133931555 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.134588962 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.141969196 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.133299783 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.133657429 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.139702051 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.134032293 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.133926714 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.135090053 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.133332926 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.135208036 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.135625837 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.134158753 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.136541152 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.134801691 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.139400194 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.147305178 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.139222317 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.145331828 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.136286184 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.145139198 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.135612261 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.134381712 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.134012557 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.138850301 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.144286206 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.133396477 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.133521637 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.142261445 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.136689244 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.135592504 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.14077672 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.13564637 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.136679501 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.135533768 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.137477048 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.140852775 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.140440396 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.135803522 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.135945951 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.13569572 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.135611428 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.138348178 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.137169232 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.135278644 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.135850037 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.133880352 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.137372755 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.134150082 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.137998908 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.137919316 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.134925755 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.137660512 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.14257216 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.138570897 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.138802047 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.142769392 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.136819477 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.145555575 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.137256869 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.137436965 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.137931222 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.137987274 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.140109344 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.137666225 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.13813938 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.137234633 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.136610615 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.13989397 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.15083015 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.144910306 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.141340858 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.140231076 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.13698897 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.138604149 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.148284325 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.165808196 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.137779139 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.139422424 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.14255776 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.143837212 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.140888771 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.144497862 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.142589261 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.1480381 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.139639665 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.138553997 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.141240113 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.150997851 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.138099351 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.138176589 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.138016877 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.145637093 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.142206285 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.138591504 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.140334419 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.143379478 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.140518189 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.149840126 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.139850258 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.14107738 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.13911523 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.142534351 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.139673936 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.140620978 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.141392799 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.142575819 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.140036224 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.140402105 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.141785027 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.14771077 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.140065694 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.144103916 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.153236986 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.132129493 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.141115612 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.142725398 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.140192354 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.142807284 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.140406075 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.138713758 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.141523623 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.141111574 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.142114063 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.144846665 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.151833747 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.143319984 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.14016834 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.139839892 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.143123894 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.140316788 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.141142795 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.14130456 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.151003768 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.144251925 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.156313703 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.152781623 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.141284383 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.142563653 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.150015184 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.151531699 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.141584083 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.140972046 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.140600255 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.144102219 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.143765559 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.143890218 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.143995375 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.143259743 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.148138118 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.141829672 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.142633418 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.141248569 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.141469428 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.144477045 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.1442216 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.148972914 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.141581228 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.14268071 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.142039879 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.14321436 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.143903241 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.146139146 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.142199694 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.141002631 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.144646858 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.144504318 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.147584892 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.142159165 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.141297522 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.125961712 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.130456359 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.143628958 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.143499175 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.143354794 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.142950458 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.146422456 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.139562158 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.142505522 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.144253868 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.145430182 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.146974902 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.143693038 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.143594912 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.131368346 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.143999876 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.152609286 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.143861573 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.14496293 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.145202392 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.13348173 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.143920059 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.145896574 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.148347165 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.145384859 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.144652791 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.144361962 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.149835175 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.15623149 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.149223226 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.148699401 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.156493736 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.150250315 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.14712181 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.14525494 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.144125631 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.145017791 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.146574598 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.147729336 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.14736074 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.147705283 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.145293164 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.147658184 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.145488901 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.146870673 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.145673758 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.145290757 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.149271722 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.157306127 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.153702716 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.144819415 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.148078842 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.14643043 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.150365148 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.159338638 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.146152388 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.147018843 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.140974175 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.1491731 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.148371586 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.155137826 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.156743936 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.149268325 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.147282529 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.152975199 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.167263458 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.149033932 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.158115041 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.181846992 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.148517606 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.146800421 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.148630444 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.149729544 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.148607357 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.151845647 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.147361637 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.15388817 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.148958022 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.147914897 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.155811414 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.148399573 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.147556817 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.147272344 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.148850523 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.15506906 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.149941452 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.15562864 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.148643493 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.148414333 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.149071122 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.152375826 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.149218702 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.149537472 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.149331206 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.152334677 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.150892005 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.147886188 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.131316723 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.146551972 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.151092574 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.163055315 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.132274701 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.149713492 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.603310982 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.150804069 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.155434908 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.154091455 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.149619731 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.153816236 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.160317111 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.154274702 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.159813947 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.151384869 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.153215843 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.151502921 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.149731071 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.149531761 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.161928366 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.162065167 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.149408308 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.151120049 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.157789527 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.151080806 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.157011688 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.155911957 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.154119482 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.151845794 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.151303956 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.1491401 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.151449288 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.149750211 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.153348254 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.160151364 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.151153906 seconds)
  done (took 1275.375957567 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.151070904 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.151007427 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.151068888 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.149933407 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.150719599 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.150354386 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.152187653 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.150958763 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.153691214 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.152245355 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.153066761 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.152626472 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.151985807 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.148128929 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.151920413 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.15234691 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.152921698 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.153381384 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.153388636 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.145204867 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.134663447 seconds)
  done (took 47.234203638 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.152789705 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.152912888 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.15208488 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.152989448 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.153358403 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.153136085 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.154416044 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.152865766 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.152687601 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.153051977 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.153367247 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.153840151 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.153500075 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.15400043 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.152245834 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.15416166 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.154091703 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.153476638 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.152662244 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.15380018 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.154352364 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.153965094 seconds)
  done (took 49.445003518 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.154687568 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.15613898 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.154648634 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.154926018 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.154836722 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.155406993 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.154804227 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.156890793 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.154300627 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.155515139 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.161832044 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.157867715 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.154263204 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.158110977 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.156481928 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.154047238 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.288985095 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.156159847 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.155531241 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.15516911 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.146270968 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.162644198 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.142938172 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.155170415 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.154130452 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.155422368 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.156015567 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.156370459 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.155244771 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.149217806 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.162124758 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.156959148 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.157841831 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.145297557 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.156252819 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.157390548 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.162530817 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.15689771 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.124270902 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.155709667 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.168765981 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.183938743 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.156356906 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.156955263 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.165287456 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.156420737 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.156248911 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.160408606 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.16581699 seconds)
  done (took 107.863390052 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.156822678 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.156598619 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.15667485 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.156846223 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.156857738 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.156350741 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.156165858 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.158191829 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.157791751 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.158054723 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.15765337 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.157577219 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.156538952 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.157768629 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.157293539 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.157327843 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.157862438 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.158619786 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.157381422 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.157994667 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.158273107 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.157290429 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.157835414 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.159487824 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.158133101 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.15747885 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.160108001 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.159496883 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.159925555 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.157444938 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.157476533 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.157349753 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.158368978 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.159594144 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.158480072 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.158494242 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.158195245 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.158797146 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.158107544 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.158657746 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.159078585 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.159435927 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.147278198 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.159887828 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.159571911 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.160201754 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.15931673 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.161204524 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.160994008 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.159178749 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.159158798 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.158986616 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.158573288 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.159396084 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.158558689 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.160486563 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.1584168 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.160286599 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.159685856 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.159376817 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.160586435 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.159686824 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.160823431 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.160895588 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.160173258 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.158648842 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.160668304 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.160453917 seconds)
  done (took 148.854484454 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.161021675 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.160090544 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.161743742 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.162330406 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.163737006 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.162435749 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.163366469 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.161306454 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.161411576 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.160973191 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.161411845 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.161577162 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.161952866 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.161249631 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.162477495 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.161495884 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.149375041 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.162244291 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.162511091 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.161527562 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.162127426 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.134447294 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.163209399 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.162384106 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.16402123 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.160916026 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.162691558 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.162845222 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.162629424 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.165220078 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.162292112 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.164106359 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.163863754 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.165547339 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.163858655 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.163999791 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.16325065 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.163445087 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.163310875 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.16258658 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.164290205 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.164120621 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.163799957 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.164688046 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.1634765 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.164892686 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.164936278 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.163564054 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.163093375 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.163339731 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.163219691 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.165271219 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.163747926 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.163965861 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.164405318 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.1632135 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.165129832 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.165555457 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.165740964 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.165959263 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.165442528 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.164582426 seconds)
  done (took 136.159630186 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.163506176 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.163883378 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.164833313 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.164878099 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.132683935 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.164296514 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.164113872 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.164887311 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.165130073 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.164282783 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.163941652 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.165501836 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.16706964 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.165635042 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.165948225 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.16668968 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.166279461 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.165486289 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.166591903 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.166589909 seconds)
  done (took 45.354115491 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.165503303 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.165822395 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.165990017 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.165676179 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.166644609 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.164962888 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.165810597 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.165896711 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.167018007 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.167118703 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.166622997 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.167258423 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.166599597 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.167350788 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.168109041 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.166944699 seconds)
  done (took 36.748557797 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.166810947 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.167501686 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.167552868 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.168863449 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.167360998 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.168290539 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.166545999 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.169183871 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.166469005 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.168246688 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.167765312 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.16817793 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.168104629 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.168572931 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.166929915 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.169337983 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.168377474 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.168811068 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.168636691 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.16847331 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.167633187 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.168564708 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.168528116 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.168786137 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.167859135 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.168390067 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.169158182 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.16879999 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.168257622 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.167367292 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.168392971 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.168615717 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.167765836 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.169404927 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.16808065 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.168777711 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.168982075 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.167890842 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.169067768 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.169538376 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.170321411 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.168613158 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.168865311 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.168025713 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.169296071 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.169031331 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.168126965 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.168428963 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.169479399 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.167450262 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.170312655 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.169920354 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.169762981 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.171051879 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.168756613 seconds)
  done (took 121.353208965 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.163236211 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.169790318 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.170358011 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.170337872 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.170641913 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.172537842 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.16960588 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.169712572 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.170315145 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.170063807 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.170541303 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.171231825 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.16989506 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.170818476 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.17025213 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.170150945 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.170560233 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.170674402 seconds)
  done (took 41.149436309 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.170764485 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.171133233 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.171967415 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.159330032 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.171463711 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.172021506 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.1715572 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.172087522 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.171092864 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.171139077 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.171326028 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.169295759 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.171889578 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.171327065 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.172906291 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.170978965 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.171998344 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.171892287 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.171520277 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.172836897 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.172510734 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.171247261 seconds)
  done (took 49.851873982 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.171270033 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.172559218 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.18903242 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.198255674 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.194657876 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.213461805 seconds)
  done (took 15.228004973 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173032945 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173871652 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.175691809 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173116462 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171542218 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173346546 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.164218748 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173466758 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173398142 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.167125427 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.169171276 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173593367 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17434423 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174369596 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173011495 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.159923768 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172333853 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173678189 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173849266 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174351136 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174059346 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174760473 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174162873 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173836338 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174634432 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174286607 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173871075 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.166325797 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175555209 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.175103238 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.175289214 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174246018 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174626393 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175807761 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174296078 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174340288 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17521142 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176782571 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176143856 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176081868 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.172673865 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176516195 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174433798 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171909492 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172359206 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172064358 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.176812254 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172674796 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174011029 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173554806 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173065499 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.172613686 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.17216696 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17374064 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174473712 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174307304 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173852314 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173750194 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173238754 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175029474 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173759181 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174637173 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175634168 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173911605 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175613559 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173645364 seconds)
  done (took 145.539779471 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173438387 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.174593654 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174329084 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171979832 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174090552 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173255449 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.167386693 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174520282 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173994844 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.162962326 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17418585 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.163525527 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175776666 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175113938 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173862434 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175958556 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176127953 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.152877206 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174285063 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.175802924 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174876441 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174984401 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.1760364 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.177079141 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.177716828 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176703589 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.176540385 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176063339 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177885446 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176700174 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175937737 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17708201 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177849045 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.164075593 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.177679572 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176644662 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.176916943 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.176862862 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.177496696 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177467734 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.166869436 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.178212536 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177618667 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.178951593 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.180289453 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17954581 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.176895854 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17717042 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.178276211 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.166571299 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.178316064 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176871868 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.177297121 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.177667495 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177714167 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.178066815 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.179030027 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177905217 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.178412502 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177050335 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.177374436 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.178568447 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17935353 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.178382288 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.178904187 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.178520277 seconds)
  done (took 145.665760542 seconds)
done (took 2971.600961584 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.208389088 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.222826002 seconds)
  done (took 16.527975643 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.342224901 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.183094233 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.374818003 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.294277377 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.206399469 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.18705685 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.178783617 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.183121822 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.273867288 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.18304511 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.212868342 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.180840733 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.18356301 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.183104074 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.182778823 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.181912166 seconds)
  done (took 57.643214173 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.18889159 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.186515915 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.187287214 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.184138211 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.198542178 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.263895912 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.208139306 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.182932962 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.200881006 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.215665214 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.206879269 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.193102481 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.19689162 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.192493615 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.279398272 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.231981576 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.245913751 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.261821122 seconds)
  done (took 41.922670533 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.260661329 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.195962712 seconds)
  done (took 11.565742325 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.184621431 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.17637847 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.202309441 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.197758268 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.205091963 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.208501314 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.178278534 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.220232383 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.194108979 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.192634012 seconds)
  done (took 74.103055794 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.186383657 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.186592283 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.450321753 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.193254453 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.194700223 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.212836858 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.183021869 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.221782111 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.186203965 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.182611898 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.194083594 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.45335642 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.199245467 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.186735728 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.60949939 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.198442081 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.191922459 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.219254271 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.219019723 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.191487863 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.191184277 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.192732688 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.346898281 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.893564025 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.184752578 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.189935161 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.192606615 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.185528789 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.182946973 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.185090961 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.187441555 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.184706651 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.19198028 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.189191306 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.189064326 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.191213196 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.69207161 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.207770904 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.192503709 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.281862246 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.231041696 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.192370058 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.045161903 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.186487794 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.187114996 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.197281901 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.889743957 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.266630893 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.189045045 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.364353286 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.533527278 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.199325741 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.347143631 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.34329053 seconds)
  done (took 150.388780787 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.186468914 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.417039594 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.33795791 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.187310844 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.441454099 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.394968492 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.185827979 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.232368922 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.18517033 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.388337495 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.433441105 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.288620737 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.184754904 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.184437411 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.18212445 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.184935461 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.332236909 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.253032176 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.187195809 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.182335788 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.210134647 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.388980723 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.307367936 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.187590603 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.211985901 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.393187425 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.305870876 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.285798391 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.140056154 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.185562882 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.248715387 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.186731205 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.187431537 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.187211198 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.340049953 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.281667346 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.271014063 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.187650938 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.18563939 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.185893912 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.864280199 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.388892796 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.281775323 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.309058394 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.436677772 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.39993329 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.887428046 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.18587277 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.816308539 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.35328621 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.391709591 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.396506334 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.304745354 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.188362799 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.481243043 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.184969382 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.185850979 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.406292409 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.405280148 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.287637441 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.188423334 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.188622701 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.188252163 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.427332427 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.189358005 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.276811126 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.188449004 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.182415888 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.280122453 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.288280809 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.411881179 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.408641027 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.216016368 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.516904043 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.709536954 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.394416727 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.23976319 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.408957749 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.188211859 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.185424667 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.270280212 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.033165422 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.441266755 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.432157911 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.388749749 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.218019458 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.842674771 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.188934576 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.375384001 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.379906453 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.419055308 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.438089465 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.419650667 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.727916288 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.189298917 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.190904546 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.550331213 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.303582784 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.190142386 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.539869749 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.418127844 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.729415741 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.217195368 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.476065202 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.317255188 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.190959992 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.838263692 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.189912527 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.394167621 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.228332728 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.191582266 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.188418433 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.38244482 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.099093153 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.191481575 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.911310178 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.251476698 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.192204695 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.399629194 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.19143732 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.434517674 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.193803889 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.425034208 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.807905312 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.219972058 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.364697389 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.439349573 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.84813608 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.487591 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.435419104 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.304898571 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.415605764 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.03631361 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.180292314 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.452454612 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.192815388 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.193147828 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.363512712 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.194259072 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.335579061 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.192580332 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.458006169 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.212929106 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.421172777 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.194998173 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.434093536 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.222881015 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.24303971 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.195824563 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.315332335 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.192064247 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.147471027 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.351777342 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.193493913 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.191175399 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.798037221 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.191199008 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.347938098 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.419143148 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.211814519 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.262895436 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.770310805 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.195080405 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.277227971 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.213497127 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.482317699 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.193274319 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.442690633 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.196032658 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.674415369 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.192340437 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.430934457 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.380238105 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.197347864 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.191890882 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.03755981 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.196575279 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.194979417 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.350182596 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.630336362 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.124618981 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.393771148 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.196097474 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.322067953 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.195044604 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.529472266 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.535213813 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.195019853 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.19095826 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.196792184 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.197285688 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.198024352 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.409263871 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.219044095 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.627007639 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.331631419 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.451595553 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.500340069 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.39756384 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.233836466 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.19481621 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.41785422 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.198252453 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.255568388 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.197169896 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.212950994 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.431133996 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.198285614 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.404446466 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.434015238 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.08515288 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.242961953 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.196142656 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.196637809 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.112141268 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.342864867 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.281432958 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.196523093 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.19767257 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.3141418 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.317639587 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.379016275 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.052839562 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.33807403 seconds)
  done (took 973.546776484 seconds)
done (took 1327.801685846 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.197331957 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.197984912 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.20001979 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.198976337 seconds)
  done (took 30.910082615 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.202391909 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.200210534 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.201652609 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.20109041 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.200179297 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.200742804 seconds)
  done (took 15.32318112 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.198240519 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.200037306 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.20274869 seconds)
  done (took 23.715645678 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.642614495 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.614680471 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.27487174 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.348517825 seconds)
  done (took 11.998436162 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.203489377 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.200197653 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.195008611 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.195588626 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.189172143 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.201495688 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.203040305 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.201517785 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.201454862 seconds)
  done (took 21.9192922 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.409524328 seconds)
done (took 110.398233077 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.615637376 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.337866254 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.308332204 seconds)
    (4/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.303884363 seconds)
    (5/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.211380292 seconds)
    (6/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.402760416 seconds)
    (7/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.296796235 seconds)
    (8/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.037765983 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.655932122 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.198604949 seconds)
    (11/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.270354669 seconds)
    (12/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.320410131 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.214923959 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.51602822 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.46135247 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.218012784 seconds)
    (17/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.200964346 seconds)
    (18/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.384834062 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.997155288 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.221452333 seconds)
    (21/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.526672718 seconds)
    (22/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.219282432 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.35009166 seconds)
    (24/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.354482414 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.461677303 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.149640992 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.312262535 seconds)
    (28/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.202034481 seconds)
    (29/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.213094015 seconds)
    (30/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.280990204 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.200804597 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.226718362 seconds)
    (33/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.538078069 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.523364959 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.280079784 seconds)
    (36/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.796141254 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.30550577 seconds)
    (38/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.204337487 seconds)
    (39/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.210000865 seconds)
    (40/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.4341768 seconds)
    (41/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.417613861 seconds)
    (42/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.284300872 seconds)
    (43/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.215531246 seconds)
    (44/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.413950237 seconds)
    (45/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.978141293 seconds)
    (46/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.221129173 seconds)
    (47/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.197500288 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 3.936538045 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.42417097 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.903793332 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.624396813 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.847638418 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.607759745 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.200233669 seconds)
    (55/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.401297121 seconds)
    (56/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.29025313 seconds)
    (57/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.321071205 seconds)
    (58/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.277214293 seconds)
    (59/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.42766175 seconds)
    (60/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.200435416 seconds)
    (61/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.218664229 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.445902857 seconds)
    (63/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.250643979 seconds)
    (64/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.328914374 seconds)
    (65/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.0752007 seconds)
    (66/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.341473017 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.23305873 seconds)
    (68/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.275568863 seconds)
    (69/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.200233119 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.53269296 seconds)
    (71/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.289604369 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.20170543 seconds)
    (73/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.344976051 seconds)
    (74/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.606797833 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.898454298 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.208712994 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.20998838 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.19913175 seconds)
    (79/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.608849603 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.490907817 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.2108704 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.19872353 seconds)
    (83/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.006874825 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.579962739 seconds)
    (85/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.720717474 seconds)
    (86/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.196589705 seconds)
    (87/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.777904362 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.74975159 seconds)
    (89/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.278719155 seconds)
    (90/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.898412367 seconds)
    (91/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.360566031 seconds)
    (92/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.28092283 seconds)
    (93/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.398348214 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.212093233 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.580354801 seconds)
    (96/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.359126777 seconds)
    (97/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.563007167 seconds)
    (98/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.551978083 seconds)
    (99/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.285196328 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.546031835 seconds)
    (101/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.430686773 seconds)
    (102/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.554071233 seconds)
    (103/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.286138911 seconds)
    (104/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.509493529 seconds)
    (105/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.403886361 seconds)
    (106/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.162722267 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.187247103 seconds)
    (108/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.667083035 seconds)
    (109/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.243435643 seconds)
    (110/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.318490088 seconds)
    (111/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.199510224 seconds)
    (112/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.493584837 seconds)
    (113/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.465920859 seconds)
    (114/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.184268735 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.190181383 seconds)
    (116/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.982828581 seconds)
    (117/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.399974304 seconds)
    (118/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.465940445 seconds)
    (119/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.384829318 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.487633666 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.461441745 seconds)
    (122/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.133586652 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.976147353 seconds)
    (124/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.311110281 seconds)
    (125/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.976336438 seconds)
    (126/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.292253922 seconds)
    (127/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.181774941 seconds)
    (128/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.394018339 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.097043998 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.19831855 seconds)
    (131/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.495722498 seconds)
    (132/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.382615766 seconds)
    (133/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.343481104 seconds)
    (134/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.273328593 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.303011498 seconds)
    (136/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.43033207 seconds)
    (137/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.258091577 seconds)
    (138/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.486328141 seconds)
    (139/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.580160214 seconds)
    (140/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.287860703 seconds)
    (141/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.325784018 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.586770188 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.47444458 seconds)
    (144/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.256431864 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 2.394988445 seconds)
    (146/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.036325873 seconds)
    (147/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.559507929 seconds)
    (148/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.266564999 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.549345358 seconds)
    (150/341) benchmarking ("sort", BigInt, false)...
    done (took 7.176874524 seconds)
    (151/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.442461511 seconds)
    (152/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.333214126 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.199445774 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.188627053 seconds)
    (155/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.439594179 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.506853341 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 5.82200063 seconds)
    (158/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.283943479 seconds)
    (159/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.596086367 seconds)
    (160/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.294847786 seconds)
    (161/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.178291086 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.24011441 seconds)
    (163/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.177109434 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.11591491 seconds)
    (165/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.465816679 seconds)
    (166/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.314806653 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.427048136 seconds)
    (168/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.382531787 seconds)
    (169/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.327698788 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.935482104 seconds)
    (171/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.450813692 seconds)
    (172/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.971504579 seconds)
    (173/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.291564073 seconds)
    (174/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.223630127 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.142520024 seconds)
    (176/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.995688615 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.28506093 seconds)
    (178/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.180896215 seconds)
    (179/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.177051609 seconds)
    (180/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.337084741 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.485814229 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.298982968 seconds)
    (183/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.369778879 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.092752679 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.174295134 seconds)
    (186/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.385228577 seconds)
    (187/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.178973305 seconds)
    (188/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.316332818 seconds)
    (189/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.939155985 seconds)
    (190/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.482892324 seconds)
    (191/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.684520926 seconds)
    (192/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.247687865 seconds)
    (193/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.583309336 seconds)
    (194/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.488752656 seconds)
    (195/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.384277443 seconds)
    (196/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.703617192 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.17079225 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.223344552 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.29978645 seconds)
    (200/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.875274646 seconds)
    (201/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.964505251 seconds)
    (202/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.430694461 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.057551479 seconds)
    (204/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.186406226 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.932606654 seconds)
    (206/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.169648773 seconds)
    (207/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.356377481 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.333878528 seconds)
    (209/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.146404727 seconds)
    (210/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.308534879 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.186297149 seconds)
    (212/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.301754298 seconds)
    (213/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.846676612 seconds)
    (214/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.493891217 seconds)
    (215/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.172249133 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.327185347 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.042381007 seconds)
    (218/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.48130936 seconds)
    (219/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.163380362 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.287646872 seconds)
    (221/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.365018698 seconds)
    (222/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.347877357 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.184307059 seconds)
    (224/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.364185626 seconds)
    (225/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.609656959 seconds)
    (226/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.228949932 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.461195745 seconds)
    (228/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.185031637 seconds)
    (229/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.48446761 seconds)
    (230/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.382577645 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.568854028 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.271557288 seconds)
    (233/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.208204421 seconds)
    (234/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.471333255 seconds)
    (235/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.188609461 seconds)
    (236/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.175711696 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.896129859 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.442599285 seconds)
    (239/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.635739348 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.177731614 seconds)
    (241/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.151637649 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.304964186 seconds)
    (243/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.175773857 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.207041719 seconds)
    (245/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.173932192 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 3.785234511 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.25941573 seconds)
    (248/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.27870261 seconds)
    (249/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.176107915 seconds)
    (250/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 4.155053819 seconds)
    (251/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.537424666 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.199345587 seconds)
    (253/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.253968728 seconds)
    (254/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.170757058 seconds)
    (255/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.196559935 seconds)
    (256/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.172852504 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.177609948 seconds)
    (258/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.542327348 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.263278027 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.297212409 seconds)
    (261/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.390449867 seconds)
    (262/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.311562543 seconds)
    (263/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.777299382 seconds)
    (264/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.295622267 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.190455946 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.305420489 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.057006058 seconds)
    (268/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.179619759 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 3.811361988 seconds)
    (270/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.946127833 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.206923682 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.51061837 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.501457123 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.474424325 seconds)
    (275/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.273578087 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.221259689 seconds)
    (277/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.180675388 seconds)
    (278/341) benchmarking ("sort", Float64, false)...
    done (took 7.4325733 seconds)
    (279/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.889079283 seconds)
    (280/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.624889899 seconds)
    (281/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.547950217 seconds)
    (282/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.270211247 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.179247156 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.17932074 seconds)
    (285/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 3.88996345 seconds)
    (286/341) benchmarking ("sort", Float32, false)...
    done (took 5.843131477 seconds)
    (287/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.299095889 seconds)
    (288/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.576620819 seconds)
    (289/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.294123891 seconds)
    (290/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.416550845 seconds)
    (291/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.312405808 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.09169208 seconds)
    (293/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.646360208 seconds)
    (294/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.374841019 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.526284587 seconds)
    (296/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.292170805 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.180640727 seconds)
    (298/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.2970433 seconds)
    (299/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.475420213 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.06985564 seconds)
    (301/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.082987676 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.230853122 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.248767055 seconds)
    (304/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.320504329 seconds)
    (305/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.259157055 seconds)
    (306/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.586644729 seconds)
    (307/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.311018593 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.244818892 seconds)
    (309/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.309630873 seconds)
    (310/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.328748597 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.286658369 seconds)
    (312/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.061101934 seconds)
    (313/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.564963696 seconds)
    (314/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.307036054 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.576651594 seconds)
    (316/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.294287553 seconds)
    (317/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.178536316 seconds)
    (318/341) benchmarking ("map", abs, BigInt, true)...
    done (took 9.539661206 seconds)
    (319/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.777970104 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.275320489 seconds)
    (321/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.368068489 seconds)
    (322/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.565924582 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.178111158 seconds)
    (324/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.252693312 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 5.117983034 seconds)
    (326/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.183178456 seconds)
    (327/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.61654788 seconds)
    (328/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.255321164 seconds)
    (329/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.393428217 seconds)
    (330/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.591755161 seconds)
    (331/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.258332453 seconds)
    (332/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.182291284 seconds)
    (333/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.177841223 seconds)
    (334/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.45422588 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.200716183 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.388626557 seconds)
    (337/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.607274373 seconds)
    (338/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.003218522 seconds)
    (339/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.605628683 seconds)
    (340/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.5974482 seconds)
    (341/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.479442878 seconds)
  done (took 1202.702291379 seconds)
done (took 1205.186910365 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.204530453 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.184991216 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.693983928 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.19421628 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.182498018 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.186991759 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.704521627 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.212827086 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.202665164 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.704494263 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.193381093 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.184127618 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.198588681 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.220845666 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.197159523 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.200211053 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.188403457 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.209476727 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.219517279 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.191005342 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.237040551 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.192484451 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.18186099 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.237175202 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.187459285 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.202147543 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.203869135 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.237113725 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.237024432 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.189356332 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.19251383 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.549866412 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.239672595 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.190351146 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.199588308 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.200804192 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.189863841 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.200159105 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.190666094 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.197576051 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.186936123 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.198490346 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.188587798 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.189780543 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.188889515 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.184441109 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.190951797 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.309730785 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.201762408 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.535055404 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.248572002 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.202736175 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.236897109 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.189900586 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.187182429 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.191039811 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.239104579 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.193194491 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.192224998 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.532542048 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.282716644 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.203976786 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.535539482 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.252325211 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.199911193 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.197449066 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.186236326 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.203184556 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.554208222 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.752861617 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.216060328 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.208403566 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.190024396 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.189038498 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.202708818 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.70857682 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.2006655 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.78003376 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.212685054 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.201538854 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.193537886 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.189497744 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.187682042 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.203229195 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.208841675 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.188545398 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.195582364 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.191489323 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.200724471 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.552699663 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.234829621 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.701962219 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.193527181 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.208217447 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.206658794 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.77820606 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.21525489 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.205347149 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.191497821 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.552669556 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.234649873 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.210065226 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.189321358 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.200688656 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.306930002 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.208318615 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.210867582 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.186922003 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.210060088 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.193351693 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.188743552 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.201517382 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.211360068 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.224119749 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.203554082 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.190594741 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.200404971 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.193432446 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.208638653 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.19906316 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.199262979 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.20260264 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.192702974 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.240440994 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.210227829 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.204813489 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.305623865 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.199192991 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.309710155 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.19900156 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.197457238 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.187943851 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.535746961 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.237089561 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.211548039 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.196768383 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.213392508 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.213176573 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.207299354 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.192642855 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.207712582 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.194189219 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.243730392 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.190186539 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.216835258 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.242488353 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.205827566 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.197489469 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.208260393 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.224205103 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.210730208 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.194642454 seconds)
done (took 344.472621208 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.235704756 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.188265276 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.264720056 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.188134901 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.256850639 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.243399324 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.188993459 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.188991933 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.190666522 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.587891074 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.189727386 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.195649924 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.187082758 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.189780633 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.240413237 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.189777207 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.188238701 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.425102919 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.191027632 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.25210067 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.190311268 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.188701697 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.189573663 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.589075879 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.191257507 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.193990149 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.250533193 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.18977423 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.43538566 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.19039677 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.190994927 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.433962009 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.251422286 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.201985939 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.201267193 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.195145081 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.262272382 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.201503815 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.241491356 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.239169061 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.269067419 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.226106928 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.192956296 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.191157608 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.194498206 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.194973961 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.19115284 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.223531702 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.194573908 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.185628568 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.431805499 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.197708269 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.200179594 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.193587728 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.192817925 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.205035512 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.194362445 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.192506647 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.253816218 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.192988461 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.240125393 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.612513612 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.592067607 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.193150504 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.194339998 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.175470749 seconds)
  done (took 205.242242161 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.260685441 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.278203147 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.260089369 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.198993737 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.242252043 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.251166018 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.197131378 seconds)
  done (took 17.789893427 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.202613351 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.193857543 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.215948265 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.219603686 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.195674438 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.334021705 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.206150293 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.199266875 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.220860064 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.195806527 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.532376252 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.216093198 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.201627989 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.195375509 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.207765391 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.22293796 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.19648748 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.194723719 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.295789907 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.272191413 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.201106374 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.203550064 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.22275405 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.20711737 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.196914877 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.19612169 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.195888097 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.201772059 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.194800709 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.195936415 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.197472007 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.209487933 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.196011943 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.193874624 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.196611315 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.197145061 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.197623822 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.19648098 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.196031 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.197166441 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.197135715 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.19503709 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.195819652 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.197437787 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.195776748 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.217710673 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.196102913 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.19749881 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.198604698 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.198808042 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.224784125 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.198131439 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.195695022 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.204312859 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.239759031 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.201977569 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.197293523 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.196669187 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.198015315 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.200066456 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.186000422 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.280873814 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.208055997 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.198367321 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.222401043 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.20660299 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.197964699 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.197625857 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.197635336 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.222495908 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.199294102 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.222177576 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.198119278 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.300571598 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.199540567 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.34273178 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.221287112 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.20247007 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.20276757 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.199166315 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.20743714 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.199412799 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.201541284 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.207774871 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.206405086 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.185905147 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.198545421 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.202255343 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.207651213 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.199954975 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.245528899 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.198470636 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.202421814 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.299966358 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.200848862 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.29695536 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.225035355 seconds)
  done (took 236.957052254 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.206806878 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.202412957 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.212827686 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.203015947 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.19981914 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.207327762 seconds)
  done (took 15.34855379 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.19144116 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.206827726 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.202256163 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.199583716 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.200722422 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.202368233 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.20299972 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.204715461 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.207967847 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.20365562 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.204535214 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.20329874 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.176265078 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.2007803 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.202006711 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.194466862 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.178100214 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.202129203 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.202426835 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.201838647 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.406158611 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.203533515 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.182813333 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.192691847 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.20814374 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.203021148 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.209649118 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.203154978 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.203573809 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.208978297 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.207059764 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.205572251 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.207340216 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.21159909 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.208040916 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.208067359 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.208923624 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.205571098 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.202830599 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.202763402 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.203124834 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.203796936 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.202675156 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.203666898 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.204450609 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.211566727 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.209530895 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.214371161 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.205244174 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.203473836 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.206527127 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.200148176 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.207896506 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.204429585 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.210816534 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.208497288 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.209710268 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.204816468 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.206860745 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.206371067 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.209739807 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.20608591 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.207562161 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.208400915 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.211667975 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.204473929 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.208195128 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.210077766 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.205448073 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.204969392 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.205965768 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.203601041 seconds)
  done (took 162.011274679 seconds)
done (took 639.457516612 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.256003801 seconds)
  done (took 9.374230837 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.373270122 seconds)
  done (took 9.57388681 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.839751008 seconds)
  done (took 12.96436843 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.222316352 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.242383026 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.214245441 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.203093583 seconds)
  done (took 31.017438913 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.399220325 seconds)
  done (took 9.519551537 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.216510316 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.199090985 seconds)
  done (took 16.594049376 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.250796266 seconds)
  done (took 9.372516772 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.680556837 seconds)
  done (took 9.827063657 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.209558572 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.228820401 seconds)
  done (took 16.5778347 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.207113759 seconds)
  done (took 9.326014169 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.062616035 seconds)
  done (took 10.261740162 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.209076116 seconds)
  done (took 9.348439499 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.202373591 seconds)
  done (took 9.324364263 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.278622241 seconds)
  done (took 10.398357106 seconds)
done (took 175.602805376 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.214363509 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.206320043 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.20500758 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.206421407 seconds)
  done (took 30.952160224 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.242503406 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.235335343 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.225847241 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.240061058 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.23095208 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.231969522 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.242362472 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.242309967 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.232997788 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.2406202 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.243646172 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.240626154 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.238690494 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.250906597 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.249328338 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.239159049 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.240606293 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.243279344 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.233154863 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.249507117 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.240341371 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.244032826 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.208787371 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.208455287 seconds)
  done (took 55.817145315 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.399583219 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.273506909 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.360519893 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.256866029 seconds)
  done (took 11.410210562 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.206411909 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.273009874 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.258830412 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.255541067 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.293518354 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.310104612 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.258997789 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.417318024 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.325144747 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.33251388 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.215447199 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.229994494 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.234382801 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.256692744 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.310881869 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.208363026 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.208800051 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.324784531 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.265343602 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.419261841 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.208746973 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.263435664 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.295553455 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.263545016 seconds)
  done (took 56.758082184 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.210622271 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.21987431 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.218780249 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.212976435 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.210543843 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.211814561 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.217307038 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.212505628 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.23431672 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.212388562 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.21082392 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.214268753 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.217346877 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.2082554 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.211474142 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.224003496 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.227652073 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.210403083 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.215519298 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.219407599 seconds)
  done (took 46.442948682 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.209900993 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.056551797 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.561048083 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.461018726 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.211335863 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.210666477 seconds)
  done (took 33.837083417 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.224285752 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.228912544 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.219946966 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.23444625 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.261822852 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.214220016 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.27043744 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.370419814 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.218274169 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.271508305 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.229467094 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.21897149 seconds)
  done (took 29.089007871 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.211502926 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.209202103 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.210392218 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.219053006 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.219895886 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.218442172 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.220277589 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.210708295 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.221027379 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.23205576 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.220668132 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.220181521 seconds)
  done (took 48.740572329 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.426395003 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.436904779 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424583545 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.89224675 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.529867392 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192491991 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.497462443 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.427657478 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.933914569 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.958483154 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.505453894 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.187392424 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.158230453 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.13510884 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.130378098 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.454062169 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212887867 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.066307435 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462959506 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.252033948 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213006083 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.211855796 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.214707432 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.502188888 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.533440642 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210606526 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.423825794 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226906597 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.20738032 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.475010268 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.75705114 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.265646643 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.412911053 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.471445697 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.547375598 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.287733142 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.214173261 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.462376635 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.256780345 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247447379 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.224427957 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.226799532 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.756756437 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.227731348 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.485930991 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214256081 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.247714406 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.221927225 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136781069 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.474569463 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.313865982 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.216212796 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.251987338 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.677520455 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335688463 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.457791247 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.220198552 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.477536786 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273166769 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.394274162 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.350935065 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.213614181 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.428038894 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.140843292 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.545103781 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.324085491 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.217271077 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.21722518 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.916760225 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.464199006 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.298274074 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.472264338 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.959252548 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.216920034 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218499073 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.261465266 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313711745 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.213215691 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.510611447 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.216417391 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.139960408 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.314167855 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.631494086 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221307941 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.216885949 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.227551259 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.066848393 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.144609952 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.314317979 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.406324652 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.525883115 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.216383517 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215934388 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.239694327 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217166673 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.166208785 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.868474817 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.28582876 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.144256506 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.784169869 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.748947037 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.180869066 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.754649296 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258549975 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493061393 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.366052913 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.621915324 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.437881769 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.466084639 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.750682568 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222220195 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.838372923 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.298802988 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.293676544 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217673958 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.777766322 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.476714938 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.448645576 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.319477323 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.218579651 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14792966 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.231006656 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422329714 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.728355529 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.277556158 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201354348 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.231371514 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.221250461 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225885504 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.325031044 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.238284682 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.515696408 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.293820987 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.222095132 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.165631263 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.224850041 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.500849617 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.997173001 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281223932 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461040425 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.480685535 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.926748251 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.82334404 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.166546125 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.492623261 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.288223537 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.296164415 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.788240362 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.346330943 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.320405877 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.222005068 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.354004847 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.207718576 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.227877239 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.743490729 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.634508909 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.65220937 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.265508869 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.223820847 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.180174627 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.493193403 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.467736881 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.275315294 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233688857 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.228786892 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.310158197 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.4494082 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.223952261 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.152786591 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.484296802 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457496466 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.521236287 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.628961356 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.272874346 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.291540239 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.236028054 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.437755749 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.30754125 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.892579833 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.778284731 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.432243671 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.856665472 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.190945887 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.866891911 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.420063528 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.593193815 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.245364162 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.676777645 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.485418814 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.997894267 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.25612996 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.753474903 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.159085045 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.228608597 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.558740672 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.173132515 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.537275004 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.283766448 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289946934 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.226236714 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.228516689 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234952049 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11421954 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328854326 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277344158 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299094977 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154498614 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.95200318 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.265832833 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.230319687 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.228904577 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.518853981 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.990879002 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180595357 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.227701066 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307544429 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.00239874 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.783884848 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.23056478 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232512228 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.846595904 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.231610192 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.816992641 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.280068933 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.980258905 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251044631 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.44637519 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.920226636 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.514173571 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.296930416 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306558562 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.230051503 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228887571 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.92731282 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.236577692 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.929598033 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508095247 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.499859598 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.667947708 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.28865671 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.45026252 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.243456826 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.229125876 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.692405596 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.250900341 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230686523 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.433400684 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.750663514 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.482610452 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.181580065 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320480115 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.229611799 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.498339566 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.228854936 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.768898933 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.918750912 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.221779386 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.230054815 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.474217214 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.913027899 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.230811547 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177967066 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233295881 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.442646758 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.434611547 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.492872836 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.518344704 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675256818 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.156603627 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237975065 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.288599627 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.47587874 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.230795534 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.268871804 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.68002351 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.289113378 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.657003768 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.516250516 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.568889118 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.852802775 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.501323076 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.293578645 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.243224784 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.882739662 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.350932838 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.159450959 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351407083 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.16014061 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.890529714 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521432623 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.250769161 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.500605797 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.21236176 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.572387553 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.527482549 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.435387697 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.270825398 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.260922115 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.234192234 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.27281192 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.233853291 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.515783137 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.350841375 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.242824267 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.84893021 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270919189 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281411359 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237891083 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.743787737 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.251080958 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23778733 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.912518184 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.259369114 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.353358277 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306662411 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.972414336 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.77931616 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.261825375 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.193911828 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.881798848 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.501705015 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.286953731 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.670204332 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.265713437 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.640716565 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.23478902 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.450088153 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.241175296 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.88718216 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281680121 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.511066709 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183329102 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.445511404 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.426306838 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.258549031 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.239921655 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163298315 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.337751486 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.123975185 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.21840355 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.238411904 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.919218866 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.6260615 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.517732532 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.662143813 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.0540579 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.237797145 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.532249461 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.625718503 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.932381266 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272370398 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237299342 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.518752244 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.359785374 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.473283288 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.513069406 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.243287854 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.264951893 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.451892817 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.361769301 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157288764 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.717601315 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.82107294 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.939977589 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.247220428 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.44278294 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.499123658 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.594590361 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274458044 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.314197844 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.643884737 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.506017874 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.303121711 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.163023719 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238257473 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.632222389 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.636640939 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.334774378 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.48226064 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.546135771 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.974660393 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.789530871 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.737681269 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.611338771 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.641609049 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.635908362 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.457873163 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.584235122 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.554180768 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.828666755 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.652179072 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.451241522 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.34041757 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505181899 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.104970587 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.947664395 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483402633 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.244152724 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170165 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.446210326 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.376326264 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.69362399 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.818830241 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.488222946 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.435744403 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.729672186 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.778470702 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.515427062 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.263627726 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.21264077 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.264856476 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.259500399 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.241293757 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.722378402 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.524642052 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.254685401 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189547682 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.912292536 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.168617006 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.455791883 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.508125653 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.277019331 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.798667628 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.457492771 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.328564513 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.539304784 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.558439282 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.278182173 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.1664811 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.923930742 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.185110181 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.294983162 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.66470739 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256816977 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.24405589 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.444212898 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.170275397 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290867763 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.247660184 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.441975583 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.827568355 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.51552136 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364754655 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480869105 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.534568687 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.047700563 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.257873601 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.516670988 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.17118214 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.925602436 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.924917545 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.282339645 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314933623 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244372931 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244520813 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.515930021 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.498047131 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.453013677 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.76715946 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.275871007 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.265288024 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.488727187 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.316402356 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.246774532 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.247810407 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.78812664 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.478097302 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.244158292 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.208516249 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.454320589 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319915238 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.439113446 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.31626771 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.759258097 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.246488014 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.072476485 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.328052067 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.18212818 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.240812161 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.932551925 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.306003075 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.244848008 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.517769921 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.90752377 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.44701307 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.641040879 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.121445125 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.513246522 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285425013 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.249285411 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.37565228 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.52913495 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.544426146 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.243353618 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.517229426 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.28634649 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.250410112 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.910294807 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.213346394 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.244548994 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.987857764 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.141070084 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.97480735 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.64150185 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.256294498 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.288528691 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.25122287 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.173956566 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.244324419 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.405300279 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.229327581 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.380293254 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.514602657 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.499584225 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.324344998 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.251368621 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.247350448 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.253662968 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.459197505 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.748620383 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264530007 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.93479511 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.450999965 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.257878942 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.731376931 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.691300735 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.591095767 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.286563783 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.52839526 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.496827293 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.777468764 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.528108674 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.220920032 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.473482363 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.249286913 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521397612 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.522800633 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.250336244 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.461577066 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.793579902 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.534872325 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.601778889 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.567595503 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.307515062 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.529415217 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.173469283 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.253344397 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.253643449 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.519996926 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300933835 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.248006282 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260137479 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.805551346 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.992913879 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.701508194 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396046168 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.509482124 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.017382909 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.001832056 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.253852866 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.178507229 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.249521621 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.274672485 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.254589219 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.178314262 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986042582 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.972626203 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.45831905 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.561490654 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.177763549 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.453335703 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850148191 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.176453686 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.223208763 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.250784562 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.498437417 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183283666 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.253967412 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.205908192 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.474119324 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.03744113 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.52220028 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.251189283 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201022239 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25442972 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.25447112 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.251178618 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.337672445 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.25064621 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.370370349 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.520532964 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.566415903 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.347245909 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.894165644 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.988964682 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.189181731 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295032779 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.864743613 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.822871965 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.479109711 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.369045017 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.980371265 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.197399304 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.256719106 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268420203 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.510796194 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.254430797 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.254740825 seconds)
  done (took 2300.511422879 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.261923565 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.302002348 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.292303543 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.328247493 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.329535977 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.299673367 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.291582262 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.310212562 seconds)
  done (took 60.581859983 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.2555805 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.224652857 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.260155599 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.255697848 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.250756217 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.255711469 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.452271256 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.284058562 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.256560039 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.255564759 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.255226278 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.256750464 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.256718652 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.237635825 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.261982448 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.587000293 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.276048044 seconds)
  done (took 83.078375184 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.316219072 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.066586778 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.259027681 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.937457092 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.263604205 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.612502087 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.258861783 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.261398761 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.373345471 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.55440126 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.308505543 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.260605712 seconds)
  done (took 94.665220922 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.257990034 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.256481105 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.25839497 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.255166471 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.258089915 seconds)
  done (took 13.454859153 seconds)
done (took 2867.52313098 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.498707577 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.355861836 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.329120959 seconds)
  done (took 6.854316377 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.399702268 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.448812348 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.567116457 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.57117985 seconds)
  done (took 12.162748339 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.537812075 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.631942647 seconds)
  done (took 7.340697159 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.629751209 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.26828331 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.647004038 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.260942194 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.257713871 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.260468699 seconds)
  done (took 23.95604898 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.258404644 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.258964403 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.258883416 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.258013331 seconds)
  done (took 11.206022859 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.259337573 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.987126804 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.2607635 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.266665795 seconds)
  done (took 22.945261439 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.472162551 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.257268139 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.025061641 seconds)
  done (took 13.927028369 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.880283488 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.712636617 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.873558192 seconds)
  done (took 10.638234622 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.08777847 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.073555909 seconds)
  done (took 8.331675789 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.397623663 seconds)
  done (took 4.568544206 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.082805975 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.570528044 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.724902169 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.254422899 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.896524768 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.674844102 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.735676731 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.556362177 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.628805754 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.697437476 seconds)
  done (took 29.994610073 seconds)
done (took 169.142640374 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.877098323 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.301135246 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.481895022 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.682421 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.512858131 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.48228943 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.567056056 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.716444661 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.402770193 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.319710452 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.650369798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.515064083 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.509257158 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.296738596 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.515705052 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.295447097 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.508614658 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.725834523 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.331037649 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.572081856 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.568536566 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.298514461 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.497552096 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.314213185 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.511523823 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.431589084 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.892349291 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.298142383 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.483765599 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.90776878 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.433189671 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.720861104 seconds)
  done (took 182.806569628 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.275420147 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.270740198 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.271266078 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.272012407 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.647419827 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.270413989 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.270333388 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.27054846 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.516117963 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.488684509 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.271294283 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.663889713 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.275184993 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.272679925 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.271947738 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.272453001 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.598108359 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.271715662 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.271692789 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.272081936 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.274257369 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.548547439 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.272015806 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.529335883 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.586045463 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.270946558 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.272705924 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.272145925 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.273470516 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.272012968 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.274327637 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.274688481 seconds)
  done (took 221.303579467 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.275082126 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.273541729 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.274256308 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.274084433 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.274470046 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.275851746 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.274065473 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.271220591 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.952801228 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.952208374 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.275347216 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.274176945 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.277200458 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.274700815 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.272207852 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.274389323 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.273663414 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.274459438 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.244643802 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.271927237 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.274237224 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.150111981 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.276504158 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.168240387 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.275228542 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.277748674 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.275078508 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.277579622 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.277627523 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.277473656 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.273169106 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.260885679 seconds)
  done (took 234.06546566 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.520399707 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.277240319 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.280261096 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.284893724 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.279321833 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.277875877 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.267746007 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.522897113 seconds)
  done (took 22.903408074 seconds)
done (took 663.283714245 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.676709356 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.051794529 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.412201786 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.303502821 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.524537383 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.345841696 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.297205375 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.360345952 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.954324021 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.37557155 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.710574227 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.302416668 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.039347923 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.325946003 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.416046694 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.352672126 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.663353514 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.952820899 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.435058529 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.953207936 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.507637779 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.223146568 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.378413315 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.995255209 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.73714794 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.246149888 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.318688906 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.669148771 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.304593701 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.537300323 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.949449596 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.56316859 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.31353509 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.270258972 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.338615967 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.325818629 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.489800437 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.290351446 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.399761892 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.015882716 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.946571658 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.833339252 seconds)
  done (took 117.29799286 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.287825748 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.271971277 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.284836622 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.286043197 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.29486537 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.286193544 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.284740515 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.287644816 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.286095136 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.286345709 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.288371597 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.294237307 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.286124265 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.294725311 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.286101518 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.284763962 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.28717456 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.296500467 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.285485145 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.28623387 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.285323091 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.287126785 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.283128836 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.288382601 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.284689236 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.287421034 seconds)
  done (took 61.665014064 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.281700947 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.461811147 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.575626283 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.317260622 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.285796928 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.284834131 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.310121468 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.289039569 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.283836377 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.282792877 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.378655087 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.287974674 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.295343906 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.571942742 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.314026771 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.280330479 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.28350842 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.249182463 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.469177893 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.300690225 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.316254294 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.293282632 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.314737622 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.298169953 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.286612901 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.286074693 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.285966402 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.745242494 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.294784708 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.37789787 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.356793565 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.318120412 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.673556597 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.581031466 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.353194107 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.288794346 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.280864603 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.42454355 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.295171937 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.285861196 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.313252864 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.292746301 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.574806041 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.807322961 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.268039486 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.28450854 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.746350528 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.43542585 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.330293117 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.284879642 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.583640137 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.315861037 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.285377212 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.288643673 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.321796791 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.298604237 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.287066088 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.572107731 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.303402832 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.31478052 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.278843057 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.287523993 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.477666901 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.293278464 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.464020111 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.295003174 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.289963173 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.288818671 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.577450539 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.317703002 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.80382916 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.27652831 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.283311761 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.384082131 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.467493403 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.768579684 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.300855786 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.477903913 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.694333373 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.323979293 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.299228427 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.733489043 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.327039131 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.298339222 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.28799933 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.287494645 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.287049678 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.335646798 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.313357247 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.721862944 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.801859361 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.588949569 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.326999495 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.301354211 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.289168766 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.570250963 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.297336778 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.287010916 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.573010245 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.829033796 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.303743326 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.294661201 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.781640596 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.303147429 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.318575679 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.299549761 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.58804823 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.318722569 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.333680707 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.288006296 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.293822389 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.2909044 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.320592781 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.300820506 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.288508962 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.773556857 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.439922946 seconds)
  done (took 281.914112321 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.29326247 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.28764344 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.287260292 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.286750406 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.290537391 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.289361725 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.289291337 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.28806726 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.290084959 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.288467023 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.289249263 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.290673477 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.287871067 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.294450136 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.328298653 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.291037137 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.775880156 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.288853093 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.288494116 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.289516545 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.864551764 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.295564518 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.287452956 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.291050817 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.291187782 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.289864612 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.296991806 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.324581962 seconds)
  done (took 179.463846595 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.291972807 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.339411271 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.299573421 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.338995232 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.301531103 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.291633635 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.313770291 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.306404024 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.296906381 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.293368375 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.291514258 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.319353138 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.285108766 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.365608485 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.319640067 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.322610208 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.367202664 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.297169714 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.293357552 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.29304404 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.338305306 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.306827691 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.320266126 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.349394266 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.30544233 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.340376725 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.306063913 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.292487335 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.292775873 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.381932772 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.30880246 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.321256585 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.329094341 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.311640517 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.386887578 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.383969114 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.370265078 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.319389965 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.298632634 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.294377278 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.293890105 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.295777968 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.342527855 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.306790531 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.29345676 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.38627044 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.311352208 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.292473171 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.312184622 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.295120536 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.305566978 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.309735761 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.326406061 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.394294227 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.339265413 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.320539017 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.300847435 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.301001414 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.293734875 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.366866518 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.300142048 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.384478424 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.314318743 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.296504683 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.297084214 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.299796989 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.343702484 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.329749738 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.373257302 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.299648444 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.368634568 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.347103449 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.312255939 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.294288342 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.295935216 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.345347743 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.38325302 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.348753722 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.358755417 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.332621305 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.307894983 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.296063006 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.299716288 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.325153688 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.304693247 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.386983291 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.386222659 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.301538189 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.297051171 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.297689983 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.297639344 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.319254952 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.352555076 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.337687552 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.381212374 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.327344839 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.332207827 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.303649776 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.30771816 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.302188814 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.328445342 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.304121475 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.306271001 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.627048497 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.330338069 seconds)
  done (took 246.370594681 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.650685992 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.337937105 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.367769599 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.55549831 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.674398879 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.189862523 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.334029709 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.347026292 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.354377648 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.466506413 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.408086372 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.394381466 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.334381142 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.320374087 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.340969688 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.356625913 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.374340801 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.643981546 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.437986681 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.801073053 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.335805827 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.568896471 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.632236475 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.705608407 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.385005078 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.74120476 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.954383911 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.434429859 seconds)
  done (took 74.663190077 seconds)
done (took 963.569762828 seconds)
SAVING RESULT...
DONE!
