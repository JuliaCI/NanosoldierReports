cset: moving following pidspec: 22424
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.980461765 seconds)
loading group "shootout"... done (took 1.127619914 seconds)
loading group "string"... done (took 0.666445549 seconds)
loading group "linalg"... done (took 8.571825275 seconds)
loading group "parallel"... done (took 0.169823408 seconds)
loading group "find"... done (took 2.85162825 seconds)
loading group "tuple"... done (took 2.064149448 seconds)
loading group "union"... done (took 15.277545931 seconds)
loading group "dates"... done (took 1.476214839 seconds)
loading group "micro"... done (took 0.21954714 seconds)
loading group "simd"... done (took 4.799609245 seconds)
loading group "io"... done (took 1.076749803 seconds)
loading group "random"... done (took 9.556864061 seconds)
loading group "problem"... done (took 1.518646659 seconds)
loading group "array"... done (took 25.186870647 seconds)
loading group "misc"... done (took 1.888628545 seconds)
loading group "scalar"... done (took 43.600998989 seconds)
loading group "sort"... done (took 3.345864361 seconds)
loading group "sparse"... done (took 12.810403912 seconds)
loading group "collection"... done (took 18.478648999 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.533317174 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.12452987 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128992529 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121882529 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.180998698 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122000562 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131249195 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085685966 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.870269148 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13975985 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116502223 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435821909 seconds)
done (took 5.396879467 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166231663 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092543725 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083759884 seconds)
  done (took 1.363154672 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071836614 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060701716 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067703175 seconds)
  done (took 1.387583335 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065839076 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135251547 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067006415 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067373487 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070492398 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067604131 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067892168 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068040144 seconds)
  done (took 1.745225748 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072433601 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06836967 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065954509 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068150055 seconds)
  done (took 1.473529277 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065771289 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122394746 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065498139 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065128846 seconds)
  done (took 1.516180661 seconds)
done (took 8.929445867 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139458819 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.820802617 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.754003007 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123563048 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246747199 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450466291 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124055043 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.184366043 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089396798 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075366393 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121898325 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078424537 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.450163366 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399521713 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071277653 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174163903 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.64917616 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088421371 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132483667 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.452484607 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073818861 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087901973 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085293393 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071399811 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.322899775 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15217365 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.649914562 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097068758 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068905466 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09499931 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.07119503 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07856852 seconds)
  done (took 10.712406057 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093950609 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090740785 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069101364 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124429461 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09378761 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070369323 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075867728 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068504616 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088966573 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124300051 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090016007 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.09863955 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067159512 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069446882 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079988768 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197228942 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080903498 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081823484 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068295481 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082033894 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105935476 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078686002 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078791647 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078599976 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130099594 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169388981 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097058832 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098569668 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066449244 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079533758 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118568792 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12614138 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067780484 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066062354 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120438606 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095638583 seconds)
  done (took 4.631183275 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.896329763 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096646998 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083212131 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074865311 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106940667 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114176228 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124673128 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123160829 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100119658 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069461734 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152434777 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.643219468 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.170667127 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071631614 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120843347 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362543335 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.0610969 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070452759 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068265879 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071596495 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070038882 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112490603 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066091843 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176206196 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58302857 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071059026 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070217526 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096836012 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066066782 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140944105 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095308389 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06995197 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.558237356 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066021239 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064630124 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088582918 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093434265 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066261696 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06769343 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07785779 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.178543893 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109398988 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080696331 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.493179759 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070116379 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.564408236 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225008613 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072989224 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072408674 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102394364 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064605515 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068129085 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.847474884 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125432292 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067027023 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27220642 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068006431 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068989926 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069108604 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099362653 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067893503 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069335454 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073204717 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096836014 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.798761233 seconds)
    (65/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.113889175 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086579579 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099147172 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066906003 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405087054 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074030655 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.0694332 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069470786 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083660005 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110918355 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067163392 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067267931 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106869925 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.088939226 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089776018 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070169984 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067858218 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066194605 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.338963004 seconds)
    (84/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.067155996 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.161928007 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067465923 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067710974 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481256226 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064625464 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064142412 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06620818 seconds)
    (92/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063630403 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067801675 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.08871966 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.0664865 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063336712 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064446842 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098537466 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066781878 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.448406209 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068331181 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.456982159 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069190679 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106099708 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119711836 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068299915 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.096056267 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068663783 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065378712 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074503878 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065888208 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06528695 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069572869 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065915488 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066482387 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06916438 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068528836 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067562602 seconds)
  done (took 22.596475251 seconds)
done (took 40.037981156 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312831203 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078598578 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078750201 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07931309 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078965093 seconds)
  done (took 1.87652835 seconds)
done (took 3.213254526 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132759537 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076342929 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065615973 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100752484 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068950211 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102089493 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108278056 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10426421 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069156335 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.06936137 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068938198 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102217289 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105411586 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068908735 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098654519 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104131811 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069630261 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068150534 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069400934 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069695981 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069108499 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065237468 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069176913 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068619575 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099241678 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069130495 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065335891 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099074121 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069060434 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098470671 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069430724 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068972908 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069133585 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100261294 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069396822 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.09949679 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065457177 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069321075 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069419507 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069674353 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069833779 seconds)
  done (took 4.606148652 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071321497 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082107184 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083862543 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062929457 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071881301 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083313699 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062565282 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081979317 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087906382 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082381265 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082440794 seconds)
  done (took 2.138875614 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070514955 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083674148 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08737356 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062645954 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073926579 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083722228 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062586947 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083662174 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08561123 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083586612 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083636531 seconds)
  done (took 2.12829609 seconds)
done (took 10.136015317 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096814066 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066939426 seconds)
  done (took 1.414252901 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224397918 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.626570752 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.342449894 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093953226 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072840071 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086386779 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203078803 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067381222 seconds)
  done (took 8.155641207 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.103046836 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068192753 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069784325 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068172195 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068998959 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069031076 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06854994 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070146646 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069175573 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070045771 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069563135 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069157071 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068199921 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069734621 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06814259 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068000347 seconds)
  done (took 2.502796212 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104239508 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069188542 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09969055 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062246983 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072449489 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062998331 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070858949 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072985921 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070720926 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071298068 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072889239 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071443831 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07180321 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071693889 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073353977 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.07291134 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073084379 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.07069595 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073196919 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073703374 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072875102 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073474071 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073962319 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071678066 seconds)
  done (took 3.152208688 seconds)
done (took 16.493186011 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175488416 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074778658 seconds)
  done (took 1.510945611 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068556607 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069525042 seconds)
  done (took 1.416536314 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073579335 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061153687 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078745948 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070816541 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062013062 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061557509 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077804611 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061881813 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06226289 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061869643 seconds)
  done (took 1.952844243 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063769206 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069079522 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066517675 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065135968 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067691761 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063394515 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065609582 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063207233 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069649717 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063243143 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066437619 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083757723 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066194849 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083931981 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065572869 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066414353 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06743563 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065351688 seconds)
  done (took 2.50531086 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061426852 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062103538 seconds)
  done (took 1.4064772 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065388747 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06251705 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064699096 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065000858 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06217447 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062024409 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062409293 seconds)
  done (took 1.721991621 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42087534 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122281674 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340435605 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069063698 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076483579 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256048987 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063929788 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06832579 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068441117 seconds)
  done (took 2.807854965 seconds)
done (took 14.61018079 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082383173 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182484498 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087531075 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.403780263 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091841663 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067714183 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112718388 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.175695888 seconds)
done (took 2.502719705 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214221485 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.241095634 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.392743086 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12453876 seconds)
  done (took 3.046599986 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337346642 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078381923 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077510811 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066926509 seconds)
  done (took 1.861984749 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065556003 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071310755 seconds)
  done (took 1.434510168 seconds)
done (took 7.85967058 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072337748 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062276045 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.09183963 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.067662626 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065134419 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064514296 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063629008 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.07457954 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064202236 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.06180822 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063363617 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064537231 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064373661 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064728939 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06447794 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063747662 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064748519 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06409132 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064369155 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064390969 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064551466 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063722825 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064035748 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062008075 seconds)
  done (took 2.911436372 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079817864 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066485307 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067023996 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066690628 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067652718 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067257423 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067603121 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065914667 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067524992 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065311401 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067462895 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067117979 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065706944 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067651398 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065668586 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067496286 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06730959 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066128518 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066044977 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06767865 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067432443 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066271461 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067328708 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067020065 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067367205 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068162481 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065622183 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065893001 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067488188 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067729667 seconds)
  done (took 3.332185105 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066781756 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05985503 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060767514 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070133177 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06061268 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060796068 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060828979 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060564557 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060556168 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062189081 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061323053 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060483727 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061129126 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060016994 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060682394 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061089618 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065007111 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079070015 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060825692 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060397908 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065440863 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060954109 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060695606 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060709047 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061105259 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060724649 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060397704 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061502502 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060593882 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.0615155 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060474098 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064700542 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065605266 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060240239 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070261233 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064783556 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060503336 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064984206 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061518848 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060224083 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060609766 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060482885 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060799865 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060370674 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070925151 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06093062 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061616425 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061074449 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061025849 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060836249 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060581336 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062805009 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069595183 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062248675 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06027734 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061637015 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060603085 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061153054 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060414778 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059863105 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059929773 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064419842 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062117011 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061311581 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079951014 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062140449 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07080193 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060351903 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061450341 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064220473 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061173678 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078366958 seconds)
  done (took 5.831565663 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071922684 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0731007 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080057959 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071086209 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064959536 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061817484 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065895749 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062198326 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07080325 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065182399 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061416407 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06486842 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07114167 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065513706 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062658031 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07110611 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06592268 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065141065 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061721538 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065772856 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062984954 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065512781 seconds)
  done (took 2.79718221 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135740063 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066569806 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105780576 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074931409 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068813016 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075329728 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066789923 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066795789 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066286537 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066652721 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067095822 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06636243 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068790333 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06664959 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066968312 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06671239 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06637355 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066906827 seconds)
  done (took 2.64145574 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076834889 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066852854 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089957121 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066493973 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066296704 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066167652 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06956224 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07096506 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066414627 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066319885 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069893297 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066047432 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06587536 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066281281 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065796503 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066299211 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066109801 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066761716 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070176743 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069688787 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069810363 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070013683 seconds)
  done (took 2.832942434 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077149886 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065352252 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080293825 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066909623 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061067727 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060747944 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066080112 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065514551 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066027123 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064860135 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06519961 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060685082 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067265491 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065555851 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067249137 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065871884 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06495946 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065867301 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065287702 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061286326 seconds)
  done (took 2.639215945 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087009435 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063967831 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063312292 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082573358 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063342281 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063486231 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08289301 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063497328 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063485207 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084883563 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063434299 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063219792 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082325483 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08270574 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06341392 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082353724 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082540546 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082680693 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063449508 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063693915 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085696649 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06343187 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083074793 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06342695 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06351863 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063971876 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063788542 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082408339 seconds)
  done (took 3.333322561 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06455652 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063273205 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063652356 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064049254 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06420605 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064224714 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064522569 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064468816 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06397638 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064696304 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064311881 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06427548 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066546728 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063605696 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064314476 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063717327 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063890808 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064467024 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064083093 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064507252 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064139833 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064089883 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063979105 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064795662 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06439479 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064352521 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064350086 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064380036 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063940356 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064729694 seconds)
  done (took 3.250543495 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073248057 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071685256 seconds)
  done (took 1.46819061 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062276625 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07805244 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060163544 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073089136 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068540788 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064608571 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069424106 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068846377 seconds)
  done (took 1.862437025 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067021807 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090570309 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062280399 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062772858 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065366916 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131451473 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074895803 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07434404 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076584536 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064902147 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063182253 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074437683 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062188842 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076559345 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064002711 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071322074 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069442811 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07988598 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075070824 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061264389 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075203622 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063748016 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061453755 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063456 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062784791 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06913376 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077899957 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074376374 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071029621 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059856107 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080865337 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061228632 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062979553 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071179643 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065822348 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061362241 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097991639 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061903165 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066419906 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06069745 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.0732398 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081884737 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075722047 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079172659 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062891727 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063286255 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060604297 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063287986 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065299755 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07067262 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061904648 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068745567 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06052177 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06302182 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071817994 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061582158 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066747638 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07087127 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074611841 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072107039 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070331656 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076796565 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070164898 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068966163 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062144515 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080700499 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063095442 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074617731 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07625082 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062550543 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074360238 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060995439 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060312962 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06139906 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09433616 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063002486 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062162382 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061151284 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061037062 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062504161 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070565561 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066637753 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068578349 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064492304 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076857978 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070937714 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061317409 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068028502 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079157501 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06485064 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06171604 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077379475 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064537302 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060333478 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078537586 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070480493 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062341477 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06132093 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063774371 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073938418 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061812018 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059356386 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069242686 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062191871 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062994483 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06505521 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068696593 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060621054 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070336805 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065465538 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062255742 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059428499 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064531545 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061352639 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059108072 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069093351 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059942272 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074243658 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066749239 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074484169 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074678309 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07066744 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075825507 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059996685 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059037973 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077738686 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069625408 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.198789727 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080610431 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06207752 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072830387 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.06455804 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063541304 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.07147709 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061240188 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063763407 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061392598 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066474033 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062705206 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06315725 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067225313 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069857829 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073404242 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063006616 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069926384 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061743972 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.07714686 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071351364 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06629072 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06481811 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062124607 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074016639 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068117081 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071133372 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060935422 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062368263 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06182696 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072467122 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070881976 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063189125 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068801582 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066193363 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061914152 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061873053 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062824411 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065067119 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065620211 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062154475 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069593845 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070530263 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075854837 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068780665 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070575962 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060783721 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061083156 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063180971 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061551392 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06563676 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070965775 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07719785 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072723081 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082260896 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061884558 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071745312 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063354609 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078163935 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074885753 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062529742 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066521904 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060436615 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063100223 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070949116 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073476747 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075169559 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076464668 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066128959 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066181178 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06086453 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.0759883 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061805865 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069815079 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070616428 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066867678 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061671847 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06272188 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070426585 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066103029 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061426767 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077041902 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067569319 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060906788 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075674712 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062141911 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072073547 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060776747 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06516293 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066474142 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063328306 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070849525 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076568364 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060487748 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062335566 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076916171 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063118844 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062783561 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069289928 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076134598 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065861333 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070114531 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071710154 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070901329 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065219378 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070260987 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061747435 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069730065 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063853237 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072463505 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060474853 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078191838 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059778982 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075182544 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060688787 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071714508 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061041239 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070024253 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061929602 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077019572 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061946881 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061144954 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07225383 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059422556 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069824147 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059926747 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.0655731 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066828695 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069749231 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062472621 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070848695 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203266087 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072419186 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067596238 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071273572 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07137478 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066704123 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061495838 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070671389 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073372145 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069753211 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063195805 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063708523 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06207124 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071561619 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063523357 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062733769 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069831918 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06660682 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067539947 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063533641 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063726856 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062723467 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070439016 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071494615 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079462562 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070507317 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06923294 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071021912 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060726205 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076824061 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061753439 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071892716 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060908371 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067608059 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071023362 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062269593 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080224482 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063377524 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069712922 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073648452 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069918075 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065276855 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081345775 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064829601 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070218048 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069842307 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065630999 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067997813 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063330429 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069676634 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071246432 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072182022 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062921172 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069417665 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070745543 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063208159 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069588332 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063423385 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070408647 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063367343 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061072413 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065862941 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07293717 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066634317 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06640508 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062193549 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060679902 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062220891 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069071422 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065973405 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070669469 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076952895 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060348192 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063099182 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061353395 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065574419 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079359283 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071370597 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069903749 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066832531 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060836522 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063294552 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063319689 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06197455 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06482403 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06064664 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061066042 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071946358 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063090469 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065828186 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061813766 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062436398 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070975433 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066576203 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062031735 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068075687 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061214343 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066374281 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060475676 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062823926 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065437606 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060698049 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06533567 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071358613 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077164126 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068214754 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070142157 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062448257 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069323815 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076382212 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06827192 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062431838 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070227939 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060108753 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079488315 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070056728 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069953122 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070432285 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061931025 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076959025 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064490714 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070320851 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075221754 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061615182 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066094993 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059603239 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075644473 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064510032 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060125307 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068246418 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068687556 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066434391 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071817038 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206328507 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.07088246 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06773152 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066131947 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063717919 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063602431 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070787999 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077758933 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063182012 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066768753 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069941694 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070761153 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066007222 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073574233 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069997291 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063211751 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063752404 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065249991 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063036383 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073363684 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062176633 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065498239 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065890361 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060999273 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067894709 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078253247 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070885986 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071424893 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060917853 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060879926 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078750414 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065222858 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065855089 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06974929 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071203389 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074642606 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071101521 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078241367 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062785722 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.0675988 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074306724 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06290556 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061487435 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065312272 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063877679 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071397251 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071854775 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069096347 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063565915 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068502779 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074832376 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063206377 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066513484 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066383074 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062434139 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071864601 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069432246 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073145477 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062999107 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061080675 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065704608 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070789298 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069248172 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070686692 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062518382 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06824958 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075198997 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069219869 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064805317 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061212965 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065300283 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07070009 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066318656 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060973637 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066255164 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065935474 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06841954 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071276882 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066023233 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061285145 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078300046 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06984843 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071198859 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063451817 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063382466 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062267287 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061081788 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073091191 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061071078 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062708479 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066207866 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063631129 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078750456 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069737508 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077571758 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062526391 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065618884 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061005798 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071125101 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066686077 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061923294 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071507087 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060376149 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076609718 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072724973 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066818694 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06108482 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086953341 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069886387 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07662798 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070636393 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070455654 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064399831 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071049683 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063093764 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071884881 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060732997 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060052956 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070684058 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069151961 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072960701 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060180796 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070605819 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062460098 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068264164 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067897912 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062240037 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061771207 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062237274 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069386644 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064757919 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069582493 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.207973882 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07985875 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063709075 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073552074 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072292525 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072651771 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075928853 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073487024 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069454661 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062745913 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06912541 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069273928 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062516751 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066133939 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064825108 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08267907 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06342782 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063160466 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07547839 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.06834949 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061655777 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067996267 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066578097 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071873875 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06276742 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071736814 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065407247 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062717162 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06579657 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066081483 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060491037 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061241531 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061793457 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071155058 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065764377 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062262969 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080057491 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.0631326 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070408552 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073068841 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068454738 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063357927 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060297866 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062852391 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074652941 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076796236 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065434244 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070130281 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063316735 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07158778 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060476402 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070222103 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069992438 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070249079 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061261206 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06221253 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076242129 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076758277 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066143422 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070606443 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070556596 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062778372 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082749549 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070745118 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062887908 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072276713 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064223686 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060922318 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061068306 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063672196 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073062138 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061737397 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064535649 seconds)
  done (took 42.286655649 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100299514 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062459779 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06171548 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061203841 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072041351 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062689855 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061392061 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062382552 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063113469 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063726288 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061652758 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064106898 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072031016 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074579518 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071478147 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06509081 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06115471 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062326457 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060957254 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061915561 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071134168 seconds)
  done (took 2.839207845 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065182199 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065757567 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065909235 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065622727 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064499723 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061168046 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065470521 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061619318 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065833346 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061905307 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066143332 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061560048 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061870965 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061874785 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062248149 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06284127 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066342963 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065001146 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06160677 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065339502 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063198924 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065625644 seconds)
  done (took 2.824448313 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063147706 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062699282 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069501806 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060903135 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061100384 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064686906 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060446573 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065486394 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065390218 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065560624 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070688434 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062040588 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060874713 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067063205 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06052744 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061987992 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103661901 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062451263 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062038481 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060696358 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063744958 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070210262 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061021372 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060787234 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065145122 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064599147 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060891327 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064395855 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061998856 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065680793 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062123764 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060640463 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069918561 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069781541 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065146993 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065661349 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062836075 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061979026 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060589796 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061133984 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069414097 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062645652 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061070886 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06268508 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070535422 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061185852 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060846602 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070758049 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060868104 seconds)
  done (took 4.591267068 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072090211 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113001365 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067384054 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095104481 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073744798 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067225141 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066716015 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095979749 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062341285 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062789526 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074769531 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075277099 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06415104 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065239546 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067772442 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063656563 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064317518 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.0636757 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066275335 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063500668 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066568532 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067661124 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073914726 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073982547 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065243014 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063528014 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063189597 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065519657 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074023463 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067283497 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065891304 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065932103 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074589552 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068939043 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063432224 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063752125 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075593136 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065004123 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064091089 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06229102 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064399054 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065351406 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071140038 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075492145 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064497828 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068997924 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064196278 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062092136 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074413213 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063723408 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068038758 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075568179 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065013828 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064837964 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065433283 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074425512 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064274588 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062469083 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064091241 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073866932 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062407732 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065115839 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077694519 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063483736 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067645812 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075304835 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068587886 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065105253 seconds)
  done (took 6.257153806 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070289355 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096071092 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072371898 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072024369 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071421538 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071943197 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071502891 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071674016 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071435905 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072270733 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071442576 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11119499 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068156483 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07619829 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071726249 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071494922 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071202931 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072139633 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071851173 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071556217 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071313668 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072294846 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071959163 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071611779 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073997454 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068064484 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071246177 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071866423 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072010051 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072388989 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07452056 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071857455 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072818552 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072187979 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074530828 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071735118 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062698802 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071920562 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072097204 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071652464 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068047994 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072516459 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07216135 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068417708 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071514477 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072028485 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072037488 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074019981 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078616256 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072163523 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072194966 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072120628 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071603904 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071823265 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072516845 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078695296 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072183248 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072120788 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0715634 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072356723 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072352292 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078533381 seconds)
  done (took 5.988919086 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074904806 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067702642 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080193352 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061139663 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061031338 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07071798 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061461504 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061200088 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068121938 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06832163 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069765013 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070133379 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072120009 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069617133 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070587992 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072813809 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070320481 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0709344 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067793112 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070296158 seconds)
  done (took 2.832087408 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076098412 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080015723 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067689456 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070484364 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066717743 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070543336 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066017908 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066838734 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06723614 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066866556 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071579148 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071791923 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067091385 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070638186 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071340849 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070283087 seconds)
  done (took 2.561510873 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064827744 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069757652 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.06816419 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063395663 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064949364 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061672133 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062874682 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061209755 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064078555 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075314736 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062512403 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06473234 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062567579 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061826107 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061592667 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064705119 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06383959 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061930178 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062637606 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066621135 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070283107 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063340597 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064574577 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06181935 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064734009 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070676046 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063729863 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064243994 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062450586 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06509495 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06485056 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.06878407 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064601543 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062940248 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061455194 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062784382 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062852313 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065568759 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065540125 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.0629501 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061626073 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068186371 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063022439 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063370212 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06403897 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065471407 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064222926 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068327496 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062428593 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064942304 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063748844 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06426353 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063024425 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069607015 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065063405 seconds)
  done (took 4.99425863 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078596962 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066561201 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061578966 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061333804 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066504438 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066935138 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066561171 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066866234 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067150832 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061130208 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066990009 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066367894 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067334002 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066942374 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066985703 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066865049 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061015318 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067000326 seconds)
  done (took 2.651480745 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068440181 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06714163 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066050584 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063392871 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06298127 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068115738 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06175343 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062874469 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063039627 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06389732 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063248829 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062819129 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063039939 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062692369 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067399915 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063165818 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062559905 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062025767 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063393857 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061405698 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067750155 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061901107 seconds)
  done (took 2.859810082 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088796523 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085262071 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127941671 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080873474 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089767737 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072415354 seconds)
  done (took 1.99641702 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094484962 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104113231 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06624742 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066629961 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074617342 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069103671 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069190255 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069732669 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074837464 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073244526 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069688422 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075389352 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074787225 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071865987 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075102288 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077339803 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069682753 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069635759 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066449001 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077456091 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069572422 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075212069 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069818166 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069394399 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070106314 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071615047 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078044598 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073426542 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069557523 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075201752 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078022094 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069485781 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075116823 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073709572 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066417039 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075091221 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069774274 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07726599 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074874693 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07126251 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066342518 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075140209 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074764851 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071469714 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077664666 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069608884 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07116513 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070003916 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069641109 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080067789 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075788152 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071395991 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075365892 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077399044 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077437089 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079321373 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073643135 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071143875 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074885246 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073786243 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071390423 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075731448 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07143418 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074191257 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078356888 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071728803 seconds)
  done (took 6.317626639 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100837271 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066453363 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069806082 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073349801 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070926863 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069607609 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070137169 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069667362 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069819643 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067049141 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105709086 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069905812 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071681104 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074248756 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070337985 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069965847 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070008552 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071572753 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067041938 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079806035 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06991956 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071537984 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071357533 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071018158 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073908309 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077140918 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069696568 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069849288 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06961048 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070413148 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071839223 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070352208 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07182896 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066702246 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071962786 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069950586 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070259586 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071263183 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069364735 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075635109 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07152562 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077172689 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070022791 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069658704 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073615954 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069293982 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069508069 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067235845 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070201001 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066722719 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073640348 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074328116 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07403588 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071793392 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07010659 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070685815 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069709688 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069872321 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070261361 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077593117 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071263446 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069735011 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079647863 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069813398 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069921247 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072104117 seconds)
  done (took 6.239543036 seconds)
done (took 129.441601508 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217486807 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189950995 seconds)
  done (took 1.847517134 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075569408 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165808424 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075327815 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075580202 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108999853 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107911768 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076565214 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072930684 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075448061 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07299348 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139605179 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076581178 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073051837 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073437844 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072623915 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072987308 seconds)
  done (took 2.875951029 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108166821 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184246324 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082973946 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070835244 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115501702 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077369294 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073080613 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075580021 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077008634 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070946167 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.10798856 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081619251 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074201006 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077074137 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072359476 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07390802 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075506742 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076572619 seconds)
  done (took 3.040116808 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.097624378 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086524833 seconds)
  done (took 1.653364326 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155784428 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106100952 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144648356 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330049021 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130208009 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127293658 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.131460124 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126192713 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111427051 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122482007 seconds)
  done (took 2.949575747 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106720837 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105572087 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309406433 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103095047 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082289649 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077410675 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075563842 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07986179 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075543394 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076375808 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122107723 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075604902 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072904091 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123714658 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098905007 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106694066 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.07159206 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078391396 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080287572 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071898206 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076015771 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080143489 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179051527 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078488655 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100506071 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075987937 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078083428 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074956021 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074667359 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078479891 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079617989 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100306589 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078827863 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08310242 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077247944 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097824607 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072683548 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099860055 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074294012 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072755353 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075697114 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079386631 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072530391 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078552411 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075557321 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077996152 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080101544 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07160466 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075950441 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074856784 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073249315 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077255808 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076843403 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077828355 seconds)
  done (took 6.275503548 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108695237 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109307493 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071402281 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11301093 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10588685 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070418811 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104670129 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101056735 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109123799 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07012537 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069720432 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069798442 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077179011 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079941619 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116846762 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108324647 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071787372 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070316439 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108096735 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107452069 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06904936 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102103401 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10057005 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107009703 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069417384 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070777874 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069465189 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069827039 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074087838 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075879969 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069503231 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07647447 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081399956 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075641767 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068806861 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069245124 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069118865 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076468726 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076430969 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076409345 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075138648 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069011316 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069908888 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069980868 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070410719 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068263073 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075114284 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075974547 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075116901 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069094678 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.0695496 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069429509 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069603414 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075847877 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074878932 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077069349 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076137489 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069121118 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06939618 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070872082 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077457405 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077316386 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076649878 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070527066 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077988125 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069331895 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077941436 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081297115 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069425453 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069411323 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069439598 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069461761 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069961607 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075233569 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075397791 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069804676 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06952228 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069037942 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077207623 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075373714 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069285402 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075132363 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068898938 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069644983 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069753544 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070242045 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074832107 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075802123 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069642352 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068652825 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069021894 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068971034 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068292233 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074130111 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075309249 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075535393 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07539898 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069029078 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074531237 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074457046 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069238148 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073965834 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068692055 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068811328 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068587968 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074129935 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07352982 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075521729 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068284662 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068048297 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074107672 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214802238 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071408145 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076882058 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078800725 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076691733 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069893484 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078955188 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070266142 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077663019 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070239144 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078085261 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069640911 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076293896 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069786784 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06901045 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069541843 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075801227 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070368144 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069924699 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070330894 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069435981 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075761404 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078783111 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07025755 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075537216 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075506293 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069645234 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07586498 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069848534 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076629001 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069688458 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069343015 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068807111 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078739301 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069364876 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069354801 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069941586 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077728017 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069814531 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07785871 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07458701 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069097087 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07921413 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077606444 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074597335 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077513206 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070723505 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070141435 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069495678 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072577836 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074828255 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075987366 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069699743 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069732275 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075083229 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077413226 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069425736 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07548615 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075403686 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075756509 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069985355 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069777439 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078388624 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077576055 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.30686117 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074799444 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075953242 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068997897 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07499867 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075286287 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069741309 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081174008 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069285358 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07965621 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075636613 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074507213 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075545197 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077015187 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077602605 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078142067 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07991859 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068889646 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069351909 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075408439 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069281335 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069507467 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075147917 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069715219 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069972216 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080017569 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069574231 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07742574 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069138541 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076140072 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068512256 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069774799 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08006635 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069109204 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069654102 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074915729 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068998303 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074504849 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0773836 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073720729 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068566748 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069151534 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074627535 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075110434 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068149547 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067806564 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068570313 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073743891 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072901763 seconds)
  done (took 18.667550277 seconds)
done (took 38.78978916 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17279041 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116638745 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208187461 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199584466 seconds)
  done (took 2.272151148 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101379782 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065835993 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081418301 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091179954 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065803718 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076306865 seconds)
  done (took 1.997363277 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201147799 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173838884 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239912972 seconds)
  done (took 2.122244808 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36693247 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149701409 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216081773 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.502682016 seconds)
  done (took 2.845274654 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110725158 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101188289 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07794969 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111932527 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086319808 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063308348 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133900812 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070578755 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100506969 seconds)
  done (took 2.427785661 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129895417 seconds)
done (took 13.337378578 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.288399015 seconds)
    (2/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.21868188 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.187208755 seconds)
    (4/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.10380268 seconds)
    (5/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.206279585 seconds)
    (6/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.183738471 seconds)
    (7/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.106017394 seconds)
    (8/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077390056 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.184900291 seconds)
    (10/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.216146908 seconds)
    (11/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.183453209 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.217434066 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.248488721 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077227461 seconds)
    (15/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078469493 seconds)
    (16/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079354975 seconds)
    (17/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.239147488 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.181357764 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.125575492 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.090241004 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.248424259 seconds)
    (22/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.220596254 seconds)
    (23/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.22284823 seconds)
    (24/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.179002029 seconds)
    (25/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.152355392 seconds)
    (26/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077386781 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075258815 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.094045517 seconds)
    (29/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.108580842 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074922765 seconds)
    (31/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.255938816 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.141768571 seconds)
    (33/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067582572 seconds)
    (34/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.080753109 seconds)
    (35/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.080715352 seconds)
    (36/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079626448 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077175562 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076842952 seconds)
    (39/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084671564 seconds)
    (40/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085214457 seconds)
    (41/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077553512 seconds)
    (42/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086209634 seconds)
    (43/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.151448666 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077435392 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133216144 seconds)
    (46/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084857132 seconds)
    (47/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071398555 seconds)
    (48/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.163025525 seconds)
    (49/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.137626045 seconds)
    (50/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083057828 seconds)
    (51/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066752549 seconds)
    (52/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069819126 seconds)
    (53/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.083091341 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081067134 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06948763 seconds)
    (56/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.14674046 seconds)
    (57/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073638558 seconds)
    (58/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.228105163 seconds)
    (59/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.16290683 seconds)
    (60/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.143228434 seconds)
    (61/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.198991648 seconds)
    (62/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075206723 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069485446 seconds)
    (64/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.164071705 seconds)
    (65/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.221659175 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067794867 seconds)
    (67/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220352326 seconds)
    (68/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077533548 seconds)
    (69/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193695823 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123732628 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.086821561 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074008357 seconds)
    (73/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141187073 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073595007 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074568813 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156039984 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073725286 seconds)
    (78/341) benchmarking ("sort", BigInt, false)...
    done (took 0.437247552 seconds)
    (79/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069868367 seconds)
    (80/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.174823286 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094382928 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067349789 seconds)
    (83/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068740175 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.093565331 seconds)
    (85/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.221382107 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096486857 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093319299 seconds)
    (88/341) benchmarking ("sort", Float32, false)...
    done (took 0.140197158 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.093322338 seconds)
    (90/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.167961378 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067195501 seconds)
    (92/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091625343 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143825437 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.085521738 seconds)
    (95/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.19889898 seconds)
    (96/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.14648051 seconds)
    (97/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.164455788 seconds)
    (98/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094401485 seconds)
    (99/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070810195 seconds)
    (100/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070713823 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191992661 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091208742 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066590897 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074498335 seconds)
    (105/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174629993 seconds)
    (106/341) benchmarking ("sort", Int8, false)...
    done (took 0.150110221 seconds)
    (107/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071176746 seconds)
    (108/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071470705 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066921963 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074332226 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086555144 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066853522 seconds)
    (113/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.172023113 seconds)
    (114/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196780142 seconds)
    (115/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.084761143 seconds)
    (116/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070746823 seconds)
    (117/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067302577 seconds)
    (118/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.163932492 seconds)
    (119/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.237483085 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134244379 seconds)
    (121/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075955589 seconds)
    (122/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069444013 seconds)
    (123/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076335055 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067359941 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133575048 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.157721427 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088708941 seconds)
    (128/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164724287 seconds)
    (129/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067596312 seconds)
    (130/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074188076 seconds)
    (131/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.084559186 seconds)
    (132/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077339485 seconds)
    (133/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07496204 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066526969 seconds)
    (135/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.084354064 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066842644 seconds)
    (137/341) benchmarking ("sort", Bool, false)...
    done (took 0.143850601 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06657588 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074219027 seconds)
    (140/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066700887 seconds)
    (141/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.199967219 seconds)
    (142/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074156459 seconds)
    (143/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.083541811 seconds)
    (144/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067079597 seconds)
    (145/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073766819 seconds)
    (146/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073658876 seconds)
    (147/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075598544 seconds)
    (148/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092197983 seconds)
    (149/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146233577 seconds)
    (150/341) benchmarking ("sort", Int64, false)...
    done (took 0.067728881 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.153615185 seconds)
    (152/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079113479 seconds)
    (153/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066581507 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068047054 seconds)
    (155/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074421268 seconds)
    (156/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066519774 seconds)
    (157/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155735457 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.081583181 seconds)
    (159/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066332958 seconds)
    (160/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066701234 seconds)
    (161/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067674276 seconds)
    (162/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066163928 seconds)
    (163/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06525721 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.1289523 seconds)
    (165/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.137300745 seconds)
    (166/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093301276 seconds)
    (167/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064524136 seconds)
    (168/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095267401 seconds)
    (169/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075354267 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089213969 seconds)
    (171/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073097962 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066358263 seconds)
    (173/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064542353 seconds)
    (174/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.08889452 seconds)
    (175/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06656274 seconds)
    (176/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141662311 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.1508184 seconds)
    (178/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069851495 seconds)
    (179/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065925029 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150631104 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.145169229 seconds)
    (182/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.325476278 seconds)
    (183/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068845578 seconds)
    (184/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.084792277 seconds)
    (185/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071477724 seconds)
    (186/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.086297636 seconds)
    (187/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079152207 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175152174 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123050181 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.080684927 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.082933311 seconds)
    (192/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075245081 seconds)
    (193/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075717976 seconds)
    (194/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066726662 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144370258 seconds)
    (196/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065409969 seconds)
    (197/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067709595 seconds)
    (198/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073989601 seconds)
    (199/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068396533 seconds)
    (200/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.067063217 seconds)
    (201/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069044494 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066979867 seconds)
    (203/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075121371 seconds)
    (204/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074418463 seconds)
    (205/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067388977 seconds)
    (206/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067354595 seconds)
    (207/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068198503 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086563504 seconds)
    (209/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.067363655 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09037155 seconds)
    (211/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068813767 seconds)
    (212/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198921345 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066154992 seconds)
    (214/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069487552 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073768053 seconds)
    (216/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.06918418 seconds)
    (217/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069931768 seconds)
    (218/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164530454 seconds)
    (219/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084461327 seconds)
    (220/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073790781 seconds)
    (221/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06729664 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178658899 seconds)
    (223/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.190690657 seconds)
    (224/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067361556 seconds)
    (225/341) benchmarking ("sort", Float64, false)...
    done (took 0.13877601 seconds)
    (226/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07715428 seconds)
    (227/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079233096 seconds)
    (228/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069197821 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08866345 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06827147 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067412052 seconds)
    (232/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067629334 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126384615 seconds)
    (234/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074766205 seconds)
    (235/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069188738 seconds)
    (236/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068906368 seconds)
    (237/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068311489 seconds)
    (238/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07382165 seconds)
    (239/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069835111 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066818934 seconds)
    (241/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071536926 seconds)
    (242/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065570243 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066927668 seconds)
    (244/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067679542 seconds)
    (245/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068790689 seconds)
    (246/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068229909 seconds)
    (247/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066477546 seconds)
    (248/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.085520537 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125923779 seconds)
    (250/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081788175 seconds)
    (251/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.164776272 seconds)
    (252/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068890352 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.06692181 seconds)
    (254/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06627413 seconds)
    (255/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073179101 seconds)
    (256/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070535072 seconds)
    (257/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066924707 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066331567 seconds)
    (259/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067030105 seconds)
    (260/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066263008 seconds)
    (261/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228766375 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066709923 seconds)
    (263/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066203376 seconds)
    (264/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066805014 seconds)
    (265/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082290735 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147129634 seconds)
    (267/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087180706 seconds)
    (268/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065509954 seconds)
    (269/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180366113 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149321899 seconds)
    (271/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067285326 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122768567 seconds)
    (273/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067630457 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.06541043 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11067553 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149401136 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06582517 seconds)
    (278/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066336534 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066041378 seconds)
    (280/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069754544 seconds)
    (281/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067319161 seconds)
    (282/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075030691 seconds)
    (283/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154591325 seconds)
    (284/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067045368 seconds)
    (285/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.169967435 seconds)
    (286/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066268715 seconds)
    (287/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065555772 seconds)
    (288/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065321303 seconds)
    (289/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.142073533 seconds)
    (290/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066749952 seconds)
    (291/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080488574 seconds)
    (292/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07408047 seconds)
    (293/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066570447 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074189502 seconds)
    (295/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.081711493 seconds)
    (296/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077473888 seconds)
    (297/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066722835 seconds)
    (298/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.137509653 seconds)
    (299/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073328314 seconds)
    (300/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076830219 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065584222 seconds)
    (302/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065811604 seconds)
    (303/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065326791 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065501758 seconds)
    (305/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068092998 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.06489112 seconds)
    (307/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067789358 seconds)
    (308/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.236577846 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068796808 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.068389209 seconds)
    (311/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066906516 seconds)
    (312/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080315076 seconds)
    (313/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.0765563 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181577685 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.075683641 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067876505 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067432309 seconds)
    (318/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06610912 seconds)
    (319/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067013489 seconds)
    (320/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072027035 seconds)
    (321/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070786953 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091911892 seconds)
    (323/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070824722 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.118354044 seconds)
    (325/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07490465 seconds)
    (326/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066765829 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067426961 seconds)
    (328/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07572098 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154276561 seconds)
    (330/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.069771376 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085601193 seconds)
    (332/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068688301 seconds)
    (333/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066374802 seconds)
    (334/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08657774 seconds)
    (335/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067243319 seconds)
    (336/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067028117 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067267739 seconds)
    (338/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.06749068 seconds)
    (339/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073835461 seconds)
    (340/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.068621076 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067101328 seconds)
  done (took 37.022561568 seconds)
done (took 38.549972006 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092464858 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079724249 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078146447 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074595412 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079247944 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077334069 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078664719 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076548295 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077777486 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077751591 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077778125 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066016724 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074060429 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080887498 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075007259 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081843821 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078635361 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082374231 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067522032 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081785072 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093480764 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078528033 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075134813 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080030011 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067051754 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075637454 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089642348 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087008423 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073165824 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075940335 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074122814 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084643548 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074863445 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07278255 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076655648 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072654771 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075935609 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07341651 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089840214 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072841392 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067109901 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079009052 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073667604 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074457076 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074977523 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078677528 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07159362 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079697788 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06612121 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077923953 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089683514 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071360655 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073730993 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074965234 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071569075 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075975151 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073618602 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078112429 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07179865 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078131589 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078329969 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075230937 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06613045 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075277559 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073911987 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073916948 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065220401 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071375654 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066485993 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066475576 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065848374 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074959479 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073162812 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071842249 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065570182 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066467563 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065693194 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078743477 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072705239 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075356142 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067119198 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071955322 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071314431 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066653515 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071328432 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077813216 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065328391 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066478109 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065920427 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.081034875 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073183527 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065841513 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077496504 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070764159 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071436502 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066330605 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065487398 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071192695 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074500828 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066566335 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06566085 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071696992 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071289051 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07520435 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066811713 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071180066 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071119648 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065117814 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075434792 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073301778 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074830389 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079645721 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07514209 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07820802 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066463681 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064989898 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075898487 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066720842 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072009099 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074123739 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071398986 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074180551 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066594187 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065614139 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07107761 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072576613 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066788735 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066768895 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066632651 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075518612 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073752223 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06490905 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066015805 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074625688 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07454634 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064725728 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064522014 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074500224 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065939199 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070974605 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071397547 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073861376 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065564002 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065922495 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213468274 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066792428 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066477347 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072601997 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071668846 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067531053 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075259526 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07276956 seconds)
done (took 12.899305891 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068628582 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105797198 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074350747 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082566103 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078649019 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06828217 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070852971 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083216571 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070658229 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08646757 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094678418 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08956556 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093603954 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066061992 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067298377 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06826862 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066200159 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074992969 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082338817 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090125323 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.09565256 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066544877 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075800094 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083235334 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07733994 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083043053 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068145449 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068171357 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069982148 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123551444 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092530473 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06695561 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068326236 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081462865 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081371171 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074061933 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067881793 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071735472 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070605175 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067310562 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06874571 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081183218 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070738323 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070543938 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068227008 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06813752 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067298426 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070344216 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080301875 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07059189 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075041004 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078989307 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068941987 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067585418 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065612041 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071012791 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067256362 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067880391 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067624376 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067284894 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067499337 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070007391 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068299699 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068221099 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070707005 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069545902 seconds)
  done (took 6.563819011 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083220682 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093655338 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081960502 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082648018 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066949468 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06762496 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067385549 seconds)
  done (took 2.195658219 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068127444 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07520669 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079319308 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.0794137 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089114607 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077039813 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068102323 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099003742 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066450731 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076194327 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083129092 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080429859 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071018082 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079138813 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068558776 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079033701 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067847434 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074796512 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07505928 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080870894 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072275858 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097583366 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080973555 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068420829 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.08113887 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075040269 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069937088 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068140067 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068222191 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067120951 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066925822 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089396612 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073481101 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079454847 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06813805 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066957116 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072440705 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068251876 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071181181 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076049852 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071403331 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067429759 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06767341 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068280614 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068664295 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071696276 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068752986 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067708366 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067152886 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075219933 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067034623 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073823503 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069577253 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072304002 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072090753 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072362888 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074853308 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068120907 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075042481 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073603849 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06726323 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079971001 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07916269 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071396423 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.0794473 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075585225 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07397605 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070742269 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067093753 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066913748 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067691203 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078856791 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071035938 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069594426 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068228497 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072518266 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071678122 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082474023 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082442407 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080822265 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069575177 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067940676 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071374302 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082535501 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0723966 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067425255 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068566757 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066818926 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072025277 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067647006 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072066836 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067173859 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074406657 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.0700828 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069560025 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075875678 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067923573 seconds)
  done (took 8.747517152 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070670737 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069514227 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068788118 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068594365 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068681999 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068882128 seconds)
  done (took 2.106057812 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092506189 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068200087 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08035763 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068132937 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090364104 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074690883 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074358252 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069939573 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.08429837 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078645551 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074351586 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077148016 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074622515 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069963959 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073987208 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06859593 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073693903 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070612298 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077548037 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069810718 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083565799 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069830402 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069801402 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079558209 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071285199 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069140735 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068887694 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077986923 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077582388 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069164595 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069450641 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070727499 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076228477 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069531947 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074305347 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07632929 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067958699 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073573509 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070629277 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071825911 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07634644 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06982308 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070160816 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073324819 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069528097 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076422959 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073376921 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07139305 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073720487 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07320115 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073326647 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.06832762 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07105337 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073437439 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076567917 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069364549 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07350496 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074186947 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069201662 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076274553 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068361048 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070817025 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069660788 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070806787 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072627395 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073030714 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07657841 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069870841 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069774191 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068471892 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073291512 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068035594 seconds)
  done (took 6.924218589 seconds)
done (took 28.170725434 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.545295432 seconds)
  done (took 2.180695558 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.588541646 seconds)
  done (took 2.259411526 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.365692754 seconds)
  done (took 10.033618735 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.306912845 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.329645045 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.739952711 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133518903 seconds)
  done (took 3.226642831 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.797329835 seconds)
  done (took 2.48096601 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229475898 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221537085 seconds)
  done (took 2.143875908 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335818536 seconds)
  done (took 2.011636829 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.150943784 seconds)
  done (took 2.818660143 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230038475 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160706289 seconds)
  done (took 2.07373134 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540381281 seconds)
  done (took 2.218685235 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.258571646 seconds)
  done (took 5.940761028 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233975462 seconds)
  done (took 1.961268696 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231827898 seconds)
  done (took 1.916116844 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.06100329 seconds)
  done (took 3.738050323 seconds)
done (took 46.688961761 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085057587 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087927974 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087394979 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082361088 seconds)
  done (took 1.99315581 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075502293 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07109461 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075115996 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074863247 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073361759 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074050292 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074565999 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071279568 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072399965 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071605142 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070266662 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071258207 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07416301 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.0709994 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073513454 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075106113 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071778222 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071247232 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073414506 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070964321 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073821339 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071284223 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069263417 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070988072 seconds)
  done (took 3.418620421 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079472405 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073355378 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075977058 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071889649 seconds)
  done (took 1.984100108 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07762308 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07746474 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087209115 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091832521 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077886393 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078880548 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085714037 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085841377 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066422997 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08822487 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068982151 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067977629 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068143028 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086506349 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084594683 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063506942 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065054507 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07862215 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07714901 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08105579 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06987405 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066674794 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078131944 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078073262 seconds)
  done (took 3.536686957 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080455631 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066292854 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078885726 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092052882 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092885818 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066915725 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080118816 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094219464 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.1283003 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066961 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073109783 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066737313 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105201264 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066400648 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082412076 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109799294 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112201987 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070517259 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100305841 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066465525 seconds)
  done (took 3.391040613 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076977218 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07094057 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071370793 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066310518 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077717958 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073877592 seconds)
  done (took 2.132443954 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069222623 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069584976 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070897018 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07306787 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068656655 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068540165 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068457517 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066976673 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067359759 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068100623 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067756773 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067928135 seconds)
  done (took 2.510413523 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156433476 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070494066 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071467997 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067038817 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071707298 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067245225 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081993952 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069887324 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085495226 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068083557 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067671731 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070285488 seconds)
  done (took 2.631970167 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100670019 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102501982 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146731543 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117786103 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117313065 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09689174 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120033667 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095746871 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16150774 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137862037 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1176879 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094814627 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087763672 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070920852 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100596969 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102524714 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136540336 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073448914 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113717357 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164507709 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116319168 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113230721 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123251072 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117352093 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082072589 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122388425 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09518645 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103074845 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125104119 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110747974 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119966444 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098817249 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073011774 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072173652 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150820039 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102260269 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109318707 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093934547 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101566172 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089368814 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108073125 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070480049 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088264246 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107146691 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085487346 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117587605 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088217332 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10423104 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081647412 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132018103 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107294814 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099396091 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086197706 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104798279 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13072087 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095679154 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110989774 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106784873 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082687187 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117608443 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100109047 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253509635 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095994879 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082550803 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161052721 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090674936 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113334869 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114046536 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083573475 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09118855 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103679403 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132179038 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108415474 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108314689 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115863683 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096217908 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110643572 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093054561 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129750777 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094156245 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074234094 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105833959 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129721748 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0869769 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101262885 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131115313 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093449352 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078460914 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09323717 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119748488 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082013755 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097401361 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070704162 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098354774 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108102362 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098328996 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112829338 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108318895 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079367883 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125405114 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109875823 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073688741 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118260342 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09950833 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153688942 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096480135 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077398125 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100302078 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094555238 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149582951 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085657741 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080784264 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099668414 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142490996 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095275589 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170756864 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097120068 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130476507 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097904492 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088136121 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075820454 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089612843 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101880359 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10684498 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102031824 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088731529 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077462248 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087190473 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094851994 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.253172115 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083207112 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115761402 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10302268 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076672552 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089804261 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080609714 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125920061 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079254813 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109973015 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125559633 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079736047 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105665147 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098575286 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108703241 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097733884 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107843768 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140625016 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117109454 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080672408 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084767941 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109406619 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143163037 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114584708 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086780598 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077610454 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10081336 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111263982 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098637175 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108000693 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101035822 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10964083 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098544073 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142315169 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118470284 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092065544 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095876081 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097940837 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124885645 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077696953 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156533943 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095211989 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11953023 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085548731 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14179794 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114589375 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090952375 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08600741 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09689881 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105405506 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107037949 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144906071 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097456659 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07321449 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094511876 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132933481 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077752597 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101204409 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09138061 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094016496 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118302169 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083932804 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081834993 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068824704 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101263255 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135365986 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070035378 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.277684559 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117389287 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104617214 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106207747 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071110999 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100407456 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139257562 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106672609 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141684444 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118050026 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1021239 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120276049 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100036503 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106440793 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08091035 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125148992 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135359725 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097402099 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091218765 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135857387 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119239854 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135564275 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097662485 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116166416 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10641827 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102280945 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104893206 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102390971 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14546294 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121693352 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125547799 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087112313 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107082368 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109749114 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138042718 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083256852 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117251666 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076627336 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112875111 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078672544 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10834374 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.0802076 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112226813 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080743144 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103139726 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07084461 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075137922 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142868601 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113532743 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089876963 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087249839 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138017182 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131899139 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081523426 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102420038 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105069442 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101112301 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101034828 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107991566 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08575531 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094819831 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274460991 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080593181 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083105583 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100524156 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094992409 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108583543 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085253345 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076372945 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136743126 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105889093 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095938329 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079431244 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09577053 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122469264 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090933374 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088181299 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10591961 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104205963 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140923271 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090615555 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099248131 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118251027 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080699735 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092990979 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070596313 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085905341 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076993344 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110290165 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077310049 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109628734 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.06993875 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131936051 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088710076 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093450678 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103962749 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101054962 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128947822 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093343825 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129879833 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090961389 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103109529 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109087746 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095472394 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081045481 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104984682 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096613016 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110055548 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097104145 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10668802 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111926454 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094454306 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143028955 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09066745 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121216739 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1070727 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108436973 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104890657 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11731688 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139242851 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113669942 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112770483 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076185779 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084287623 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105586348 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100034039 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145663259 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102855656 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072878932 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086344876 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090566439 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.257023335 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10690589 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084449143 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143644867 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08871899 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088238188 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114126804 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090427079 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098595661 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077146677 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096424719 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101904133 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095445076 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095425757 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108782752 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117800298 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114457831 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133272056 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100250477 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093701228 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120381056 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111218136 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111510671 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08685324 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08785389 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124824839 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103136857 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128854989 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10174756 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095899074 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103166311 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091701667 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101376025 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097995961 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111007163 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081656135 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077274819 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06969558 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073374568 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119719347 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110063364 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09969817 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099692584 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073392074 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104697299 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100323072 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073233635 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088226712 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095670786 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100643056 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085026803 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093087998 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11537311 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092521884 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104773247 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100443387 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130163966 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101569506 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090027769 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144567771 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129493822 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089195326 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094480266 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073274043 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080211596 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102077472 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144613566 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117782989 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078198491 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.245848267 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079141489 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088563244 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073348585 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089993383 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091151594 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105038118 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093759114 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113549504 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104546159 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077335609 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104062364 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098104109 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093240426 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097272893 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102656088 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106436142 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124603148 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102685378 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098545055 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07774624 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081349865 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076766705 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080364059 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102834584 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078288893 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077450526 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13041164 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.0924208 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105970532 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110287723 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085424958 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076563065 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134668183 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070765893 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135714156 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072403731 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083828022 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.08221544 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080458177 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095224828 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10663259 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09772834 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114589637 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106794369 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106037721 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111838369 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156631857 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07204855 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144755659 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076969663 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081400273 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076928123 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115346942 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091440468 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106278915 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141891789 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090647448 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094274543 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078434079 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129391536 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099813747 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104884663 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083993347 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080425878 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130350118 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081001554 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072571371 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087569846 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11170748 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07281786 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103803314 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.247112897 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08178042 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11519667 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632299839 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091956198 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077830977 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090466048 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14277606 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129833332 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085468492 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109689991 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120267131 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091397755 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085301668 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108415435 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182315748 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07579288 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095923113 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105209677 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099401397 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09353652 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093495709 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088459794 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093476193 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086760361 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080802096 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109070727 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088934858 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092734204 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098203408 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083763296 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081351764 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132200343 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10560801 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083291199 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090728057 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102741225 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089082473 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092676366 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070658306 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114950142 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092795599 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102467839 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092155975 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108870574 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12165309 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090419797 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113086495 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090037337 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110190762 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085804053 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079642051 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103115174 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079464741 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078839534 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118080605 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085183435 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094012634 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10570083 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096611185 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115029418 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119275715 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112461443 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098842837 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079778419 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086479066 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088878116 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076787516 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079046819 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075057074 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076592586 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.272186131 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087912316 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085480693 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117136045 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083867523 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105390717 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102749099 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110325204 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084671671 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102582796 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109840098 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09152613 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104440191 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101808954 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129383649 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146699941 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100158393 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125299994 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134129799 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077761561 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076857082 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070380301 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115835678 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080392324 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081773057 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082065809 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13413624 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083169553 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09578406 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232347512 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082307085 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082811611 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09859457 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071382836 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085167891 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110160401 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086044396 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081957746 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100404018 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085382459 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119376004 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113568365 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090977595 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084042322 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082727107 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094605277 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105179454 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129664519 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091220849 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076306922 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107411518 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104600965 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125172653 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074168675 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0819596 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130748242 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093001851 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104335856 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080922755 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12141781 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134085372 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091251881 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135458451 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072015334 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084805859 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090540583 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126515547 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075825127 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088613824 seconds)
  done (took 65.34317228 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156905947 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142868523 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.08365556 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098980721 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188494585 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197665258 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120818797 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096906873 seconds)
  done (took 2.958532834 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.0697725 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084384304 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081805916 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208648217 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.110134864 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068356449 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074007693 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082973 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069347398 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068255724 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103624422 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068231672 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06990647 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.37001053 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067087974 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072953309 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068769102 seconds)
  done (took 3.566037336 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.32745627 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.433249713 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.220811663 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.692059161 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138624352 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485955013 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077670313 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083448024 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.625899153 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.375273312 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131841099 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089349345 seconds)
  done (took 18.516207868 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078149552 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.08010881 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07940147 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076002956 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075465112 seconds)
  done (took 2.235089314 seconds)
done (took 115.923626969 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085646015 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172601395 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068939274 seconds)
  done (took 2.104963221 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084685712 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08128273 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082035142 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079913487 seconds)
  done (took 2.161772007 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077281721 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077654128 seconds)
  done (took 1.984683002 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224842737 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.175911062 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090484227 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084001928 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081351172 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081257928 seconds)
  done (took 2.086716562 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073445129 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073404473 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073011775 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073812342 seconds)
  done (took 2.118856911 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.070315571 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06782593 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069370588 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072394549 seconds)
  done (took 2.109610715 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087399147 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083659226 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112894739 seconds)
  done (took 2.113612647 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084512501 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084069381 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078953129 seconds)
  done (took 2.081361568 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110651094 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098109929 seconds)
  done (took 2.03877101 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08233035 seconds)
  done (took 1.918472896 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09191989 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098642354 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14169742 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108203807 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140869546 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127096523 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077859969 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07870368 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074293578 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073460509 seconds)
  done (took 2.848164327 seconds)
done (took 25.974304204 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081067267 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374151299 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360867281 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087990962 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672819088 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357724814 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007126054 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092501744 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100966124 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069720672 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085712677 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650517371 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.999984033 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327639904 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985770029 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.324599413 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653160172 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06965697 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068639364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069146791 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991926022 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068697495 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069373735 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069872248 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650988905 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374649767 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069783414 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32572037 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069403232 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072206524 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357440448 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070215763 seconds)
  done (took 16.436320724 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072917757 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123883399 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073793507 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085132105 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071998008 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070523131 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072496283 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069671643 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11167525 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070250444 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086525413 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068769849 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07320236 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070575009 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089198526 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069436292 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071094887 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073130487 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069519042 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070088372 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087579383 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069233132 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069937972 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070240914 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070066806 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08251721 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07019523 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069762367 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069572734 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071767217 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072581104 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070797101 seconds)
  done (took 4.288777223 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123126366 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127349426 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074734296 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110331729 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119379105 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071332001 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151791822 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092551078 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115706318 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070083668 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087402787 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069366077 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105044745 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070918051 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089726705 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069390167 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071276864 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069897164 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069453647 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07008589 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088199689 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069130166 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070054602 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070112316 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069960791 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08469793 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070819759 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069558455 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069420923 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071538983 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073581891 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071035602 seconds)
  done (took 4.569612256 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071747424 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073245922 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081393371 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082616855 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067813059 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070438124 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071042359 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068702905 seconds)
  done (took 2.44411239 seconds)
done (took 29.589933743 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080467478 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069883409 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072485022 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088814717 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075140786 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071694979 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066082276 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075909808 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073000257 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073245978 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074289419 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06799224 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071283701 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06615652 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073666113 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067014661 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073437451 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071118978 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071530639 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072730118 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069458979 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072737144 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075653814 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071670946 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071963614 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.07166804 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07648863 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073360688 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067996017 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.07026616 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069299309 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081873182 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073439523 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074088428 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067225745 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067052418 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072015217 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069534999 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073794738 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076524712 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06958733 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076733069 seconds)
  done (took 4.876984808 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089251708 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095502412 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08737923 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083243765 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107950859 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083383872 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091253542 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080916341 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078924549 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090908782 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074900999 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079976138 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081836314 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076615623 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079974648 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07622487 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081440445 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07510129 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079581224 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079641202 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092089105 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073053961 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080441865 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081102432 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075323259 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080707619 seconds)
  done (took 4.026307068 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074231393 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089614856 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093951884 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.1427098 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111158787 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084067993 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083151805 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098760747 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102304674 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06939148 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073293168 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095581123 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097519261 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076380241 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107381088 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087487282 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081631318 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071786553 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075657366 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104130989 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091926215 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087854339 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101692741 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089192672 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068358228 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078463814 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076352747 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084740793 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076200444 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080932846 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07331285 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072809465 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069818613 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081785099 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075987114 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067157907 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091039628 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08161171 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085144547 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10673592 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078614571 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070759199 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099244668 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134002117 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068494544 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072212837 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072901046 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081577121 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070406553 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098433275 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087344651 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068720862 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087924202 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070441739 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070186733 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085669803 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070911774 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070947454 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081728528 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075196512 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090021108 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073996403 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089562714 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068388056 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080138742 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070691582 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.07080823 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067606602 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104931996 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076663383 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122041451 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070402997 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067156244 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080962018 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080236264 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076088463 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069010231 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088212363 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081125516 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072974064 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081146381 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071426217 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072397744 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104420764 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067913743 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067666359 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066913439 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071339756 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07262809 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069249486 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082494362 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068255279 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072210636 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084376522 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.0689533 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069395075 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071383566 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069917317 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068214545 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079721002 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073024849 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070875597 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081737622 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070265416 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072284326 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083898015 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078117805 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068430616 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070064834 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07136313 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070754928 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073231944 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072675859 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071196554 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076381738 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076313826 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074885934 seconds)
  done (took 11.285660772 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166695076 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154885692 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070159846 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150235455 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077009057 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07385534 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152355227 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088581881 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069585914 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070776923 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068818742 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097343073 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092792036 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104138777 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073329277 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.07038414 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095199238 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102918469 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153461416 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147857551 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09259418 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077710897 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072393004 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071013098 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071247347 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077885704 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086318228 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077294243 seconds)
  done (took 4.614039499 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078129598 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084649471 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073946449 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093748566 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088719967 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070525458 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071266014 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070664625 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086628026 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076511851 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069434242 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073635007 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073472893 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070320704 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070067549 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075782899 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076008035 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068565465 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073339536 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074337152 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079911143 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094856094 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074042575 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069990767 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07205717 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069386497 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076357738 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07899067 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069608425 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099647905 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066662388 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073552822 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083684695 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070749794 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069043222 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069876402 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069419278 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069922927 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069777587 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067864964 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067732281 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074344332 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068311827 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075314309 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083429118 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076681413 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070946129 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074897031 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072303253 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066921654 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073031325 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072974258 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071757353 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077561532 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073550758 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072268281 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071281262 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099445899 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075762703 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068974224 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068824535 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067805361 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07111569 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077691894 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08612423 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071480385 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06787051 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069823606 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073900601 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083316409 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068988784 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074686341 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066607187 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069505495 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071990664 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072819002 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071067926 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067984159 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069274252 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06939401 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069667293 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069524374 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.06924596 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072154725 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067387361 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068101124 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070032325 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071231005 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075572605 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068280593 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072039825 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.07104638 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068502471 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072083985 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074596981 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072841668 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088872717 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078357404 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070118268 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067642479 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083636622 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.0715209 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068606513 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075268121 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073582774 seconds)
  done (took 9.651013738 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092344675 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071676629 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089799315 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096424997 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079844355 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075438134 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084245111 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070818982 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085909382 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068858845 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078415079 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067935302 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083056269 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079051504 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07120896 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079513542 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07202775 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089453243 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084321733 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068422403 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078437685 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081734655 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082328875 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087403106 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086698076 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087717803 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081568509 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072143141 seconds)
  done (took 4.164258648 seconds)
done (took 40.475713221 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.929228486 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.102986515 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.931189198 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.144512009 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.217647916 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.060076835 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.070202515 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.928449671 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.975835401 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.984740722 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.245689748 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.353484605 seconds)
done (took 67.87200141 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.018793518 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.072890266 seconds)
    (2/2) benchmarking "String"...
    done (took 2.150780815 seconds)
  done (took 6.080807133 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.528277853 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.931474222 seconds)
    (3/3) benchmarking "different"...
    done (took 1.981868934 seconds)
  done (took 8.302654493 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.033826851 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.591795175 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.190819741 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.929670126 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.9330912 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.276335001 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.745500752 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.411075642 seconds)
  done (took 32.939977811 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.194944641 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.159410379 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.699944626 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.733480139 seconds)
  done (took 16.701002267 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.534184575 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.192943271 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.192072717 seconds)
    (4/4) benchmarking "different"...
    done (took 2.185342175 seconds)
  done (took 11.029224878 seconds)
done (took 87.073331067 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.930163742 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.989998862 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.94772058 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.083985044 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.01242889 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.96459747 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.934492671 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.977145246 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.935357268 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.933142236 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.365707057 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.93052131 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.930665223 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.972105857 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.08478087 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.947720388 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.482911504 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.938184447 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.946179473 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.553484631 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.410060884 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.946328618 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.946658769 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.990069202 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.102799983 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.983853001 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.510278177 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.942238492 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.543218564 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.938617024 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.937111059 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.940468817 seconds)
  done (took 209.913853568 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.932854278 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.896501198 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.966258607 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.955744691 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.432862643 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.126557221 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.084260803 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.490033157 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.935720505 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.939352801 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.115265722 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.937309519 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.139138718 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.879925367 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.926999223 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.932499329 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.137894499 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.146347823 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.934635735 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.118847518 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.94185013 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.974233718 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.933940417 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.093639508 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.952283923 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.02553012 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.965764257 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.963222014 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.127589073 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.107479609 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.953582656 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.940257315 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.116219697 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.802776883 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.956253451 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.953493951 seconds)
  done (took 175.698457114 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.113580249 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.945724841 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.995708471 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075723095 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.67894348 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.658095569 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935583396 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936346375 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.933737194 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.939698526 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.938328825 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.002713598 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.216128294 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.951086328 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.93356745 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.938141224 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.185499356 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.939328812 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936535141 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.939856111 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.001383743 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.30769852 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.074148713 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.942247187 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.948091131 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.077393866 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.952168835 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935158411 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.071259223 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938919296 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.013718292 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075659723 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.95126838 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.020603773 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.941872835 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.414963892 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.941580321 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.934834474 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.939203647 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003100815 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.937510372 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.043169346 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.027509449 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.941035558 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.951315618 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.014356682 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.581652916 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940267772 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.939134316 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.942317655 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.943841627 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.940411919 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.988687855 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.943854761 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.967269923 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.538710846 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.945165866 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.941628317 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.945861143 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940291786 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.942521842 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.949191546 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.979228217 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.743622891 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.156869704 seconds)
    (65/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.944241173 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.330507476 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.748637298 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.94325265 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.994175607 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.998496137 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.946511736 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.020729143 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.944132533 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.946052415 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.945760183 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.943565168 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.02465703 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.023006508 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.944172111 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.076319619 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.948518458 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.942829085 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.191456403 seconds)
    (84/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.941200375 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.640625239 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.147493633 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.954860945 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.001451627 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.942837795 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.942040705 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941376591 seconds)
    (92/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.940231038 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.960151937 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.106864488 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.940404906 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.943379921 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.943755131 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.110272266 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.94081961 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.093416515 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.171083977 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.013553531 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.193034823 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.16465941 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.941879341 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.945926459 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.960639087 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.940365417 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.943564023 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.953682769 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.942211879 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.943701352 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.944263958 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.945587058 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.942163917 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.943500277 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.95534722 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.940382269 seconds)
  done (took 427.772031638 seconds)
done (took 817.417904054 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.557488555 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.76381119 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.542401035 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.578905388 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.541445701 seconds)
  done (took 14.851091985 seconds)
done (took 16.720903138 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.973389976 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.959741018 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.947527329 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.010275398 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.969605051 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.955391199 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.988479364 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.991891627 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.974036058 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.953751047 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.003415631 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.962593681 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.976568396 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.98116704 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.032079988 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.974371873 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.959692648 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.952699683 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.012842095 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.961964889 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.960585687 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.959585806 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.958074104 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.008892082 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.040887694 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.968283831 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.958744134 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.007804599 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.966960356 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.004154406 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.016188075 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.983078919 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.993848789 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.032983286 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.013829925 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.039742105 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.966250438 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.026159929 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.965792806 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.043225327 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.013629878 seconds)
  done (took 83.341976364 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.954618962 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.086871621 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.168258791 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.985761904 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.953339083 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.182968182 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.011154776 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.077392126 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.084183785 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.166187361 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.169780124 seconds)
  done (took 24.717173469 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.952042552 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.085513624 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.164512194 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.989678169 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.954588997 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.17038938 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.01489818 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081581449 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090517969 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.174093584 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.18054088 seconds)
  done (took 24.740775749 seconds)
done (took 134.675032575 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.322308028 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.977449689 seconds)
  done (took 6.172032212 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.94863608 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.966918604 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.105424324 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.950058996 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.951709261 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.949894492 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.948695636 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.950304652 seconds)
  done (took 17.64475222 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.95053052 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.951174629 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.952919511 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.951694474 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.951034378 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.953022478 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.950076721 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.950235264 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.949357626 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.941677538 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.950307539 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.950811403 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.951239242 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.950401798 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.950409262 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.951099989 seconds)
  done (took 33.082086155 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.950574308 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.954133598 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.949849423 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.950264565 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.951481847 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.952232364 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.950635039 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.951352796 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.949253522 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.952221043 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.951025591 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.951389907 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.951046006 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.952851826 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.951004181 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.950182673 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.952071243 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.952444273 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.952300434 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.952341077 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.951697894 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.951147517 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.954049304 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.951159298 seconds)
  done (took 48.712547818 seconds)
done (took 107.496949665 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.15024398 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.517403122 seconds)
  done (took 8.543299794 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.956495396 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.952924383 seconds)
  done (took 5.85528615 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.952967967 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.953536406 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.949854968 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.952261816 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.951978751 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.953975339 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.952086785 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.955537231 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.952724299 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.953072879 seconds)
  done (took 21.404624849 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.952363709 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.951514472 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.95332248 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.953504751 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.95395457 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.952983727 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.953264551 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.952718898 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.954128288 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.952105007 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.95524904 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.954344038 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.953606433 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.953789796 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.954658333 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.95327513 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.955822036 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.957170157 seconds)
  done (took 37.046581799 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.95398593 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.954427127 seconds)
  done (took 5.787469586 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.954685916 seconds)
    (2/7) benchmarking "second"...
    done (took 1.957257783 seconds)
    (3/7) benchmarking "month"...
    done (took 1.955285712 seconds)
    (4/7) benchmarking "year"...
    done (took 1.95580563 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.956160873 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.956374962 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.955697749 seconds)
  done (took 15.56996479 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.95553061 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.108350824 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.164398337 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.548522577 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.958924054 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.95985483 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.812037859 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.95883961 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.959440919 seconds)
  done (took 21.306030586 seconds)
done (took 117.392863941 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.797390421 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.954921816 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.16938169 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.096906108 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.974124746 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.249077693 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.965490452 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.511701495 seconds)
done (took 43.600812948 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.041034304 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.953653554 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.982841168 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.982457196 seconds)
  done (took 22.799386492 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.954805918 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.253737023 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.976851082 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.950086767 seconds)
  done (took 23.02906058 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.335249894 seconds)
    (2/2) benchmarking "read"...
    done (took 2.309250689 seconds)
  done (took 6.530248489 seconds)
done (took 61.285080257 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.957767661 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.95867461 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.959045767 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.955823568 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.958084254 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.957160763 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.956737871 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.957623055 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.957084901 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.955823669 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.956569356 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.955451471 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.957633366 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.956888282 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.956629008 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95827759 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958009308 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.957299499 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95792493 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.957292879 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.957843074 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.958548323 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.958152574 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.9573481 seconds)
  done (took 48.859323154 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.959036952 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.959604385 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.957182095 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.958429172 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.959182892 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.959160053 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.957577534 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.958245524 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.948743083 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.95952123 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.958143541 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.958208473 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.958442483 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.958022263 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.959215776 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.957956315 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.957226085 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957926373 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958134534 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.957173385 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.956001245 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960410873 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.958661293 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95872349 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.959339737 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.959269629 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.959788204 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.958846797 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.958519961 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.958996252 seconds)
  done (took 60.629783863 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.959424983 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.959634358 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.959972755 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.959581072 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.960023316 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.961383762 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.959391079 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.960344434 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.960161291 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.959347639 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.959986515 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.961460595 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.960720529 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.960354704 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.960286983 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.960281116 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.960086176 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.96138166 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.959305813 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.9605719 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.961001058 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.959839 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.959604029 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.960284308 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.960622932 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.960758114 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.960546458 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.949369984 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.96098074 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.962762048 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.961397547 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.960748416 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.961186704 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.962299894 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.96150974 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.962403293 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.960472846 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.961755537 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.961813857 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.962438307 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.96206384 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.961026532 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.961697796 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.962595908 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.9622296 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.962092709 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.962182199 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.962179564 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.9593961 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.962319729 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.961622213 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.964752499 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.963017852 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.96288746 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.962928381 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.961169314 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.963892144 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.96149875 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.961817557 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.963708492 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.96269937 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.962580753 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.964625386 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.962971684 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.963654625 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.961857214 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.964944223 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.961677447 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.965773674 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.967350278 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.964293594 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.965329305 seconds)
  done (took 143.115767989 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.964928141 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.965093059 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.964936853 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.96488241 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.964164723 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.965630742 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.96444393 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.964058379 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.964826873 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.964329927 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965202877 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.965529133 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965706398 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.965573424 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.966102602 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.966233943 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.966198704 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.96506009 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.964401897 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.965438279 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.967113943 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.966796092 seconds)
  done (took 45.125317822 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.965943548 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.966462298 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.964321463 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.963599124 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.967222627 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.965097506 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.965640384 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.966821148 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966081882 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967373354 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.964147443 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.965604789 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.966002341 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.963884044 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.964647101 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.966688571 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.965756064 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.964741581 seconds)
  done (took 37.270629533 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.967048561 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.958702706 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.96603048 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.966760835 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.967652084 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.966179857 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.965494727 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.966976473 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.965730236 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.965620851 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.940288464 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965918784 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.966592814 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.967521542 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966939713 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.967476536 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.969250105 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965651304 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.9669335 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.96598164 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.968538586 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966526761 seconds)
  done (took 45.12634064 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.968242559 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.967102627 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.968120497 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.967452692 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.967688842 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.968266006 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.968250305 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.967700745 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.967884295 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.969914628 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.966722973 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.966588965 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.968446339 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.968450508 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.968766518 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967444544 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.967813434 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.968928616 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.968215269 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.966918275 seconds)
  done (took 41.251263176 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.968161314 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.968592471 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.968103828 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.970181883 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.969788958 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.96878527 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.968747871 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.967185821 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.968649757 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.970340535 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.969070608 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.967479013 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.969713269 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.969581704 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.970133163 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.969930621 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.969273987 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968161956 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.968820488 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.969991337 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.969454644 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.970064021 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.969787305 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.969997302 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.969608553 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968961419 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.968829832 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.97136485 seconds)
  done (took 57.031114817 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.96863357 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.969260732 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.968834712 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.970656393 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.971480115 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.969272539 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.96985992 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.969180415 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.96980159 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.968355057 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.970483219 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.970614428 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.971582891 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.971143999 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.970319304 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.970926542 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971229934 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.97067424 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.970096679 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96985439 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.970843274 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970071816 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.972275846 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.9711972 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.971079191 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.970310422 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.96944258 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.97006882 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.9699953 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.970904283 seconds)
  done (took 61.003150349 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.990620535 seconds)
    (2/2) benchmarking "in"...
    done (took 1.990350804 seconds)
  done (took 5.87685248 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.971017906 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970642078 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.971697045 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.97174647 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.970991082 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.972676947 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.97152205 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.971870268 seconds)
  done (took 17.666250531 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.973728521 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.974867135 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.972056145 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.973230939 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.972568637 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.9802203 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.974347111 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.972671401 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.975380457 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.973944457 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.97858593 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.976943547 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.980486478 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.978337721 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.973300026 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.973021092 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.973081457 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.975368601 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.975786239 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.974953133 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.9763254 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.975139686 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.972818831 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.973544562 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.974665253 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.976870493 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.985391088 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.975239629 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.976772233 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.976023538 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.98043384 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.972771452 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.974028268 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.975650544 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.974072027 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.975485546 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.979962385 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.974630914 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.97544303 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.971783933 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.976467563 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.977907718 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.977793501 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.980575724 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.974524906 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.975527233 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.974859055 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.973985368 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.976061695 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.97668725 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.984013357 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976655633 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.974219789 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.974649792 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.976403776 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.975857378 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.975057484 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.978666878 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.982319286 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.982874235 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.979808559 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.999102389 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.987028609 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.976246936 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.975320753 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.986107511 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.00121161 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.97650162 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.977274597 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.97628367 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.984223171 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.978670241 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.978412599 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.965880581 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.992521928 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.989293928 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.978421519 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.978204247 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.977783312 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.976106687 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.979935648 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.97841801 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.978694393 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.978100764 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.986930527 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.006889212 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.977923398 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.97773792 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.98083717 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.980189739 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.981525231 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.97995547 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.979846809 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.978825241 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.979335505 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.981796022 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.981232688 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.979821342 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.978096356 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.987175223 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.976720009 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.978532826 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.982894626 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.987118514 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.978429608 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.979343354 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.978898127 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.980901433 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.989159912 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.980056443 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.982542332 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.980763384 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.982082563 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.984141301 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.981514017 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.985748151 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.992696023 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.987556356 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.984528044 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.98534594 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.984331976 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.983208058 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99441556 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.00697205 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.981039187 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.982799098 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.987544375 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.995004764 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.98513319 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.982173394 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.983668694 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.981625586 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.980000988 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.955090152 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.978526868 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.979974441 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.981859279 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.979749085 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.984011176 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.981806847 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.984355751 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.983384394 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.984627934 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.983447693 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.986556158 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.984886704 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.984956539 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.990335698 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.982719292 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.981951981 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.980916116 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.98523619 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.983911793 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.978352281 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.985553925 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.984263616 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.984257721 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.985010199 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.987258288 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.984580723 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.982672153 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.986034999 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.988157623 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.983723159 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.984893475 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.986355716 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.984886744 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.983369434 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.986947507 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.983755657 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.98671219 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.985465423 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.989208113 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.983784477 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.983600167 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.983530854 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.985525447 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.986639189 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.989691837 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.998091673 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.977746603 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.99680474 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.985982009 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.994348148 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.988089079 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.98766813 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.988033812 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.985952936 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98724683 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.98783819 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.987067176 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.991218103 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.009388725 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.995037286 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.989456474 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.988148865 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.991138108 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.990345172 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.99145312 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.983555803 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.986639229 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.988617167 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.98658544 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.988869221 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.987174291 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.988748192 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.985292351 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.986689303 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.991205536 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.986333515 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.988465016 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.987285192 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.986631369 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.987319535 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.984182306 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.985442727 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.984587425 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.989196031 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.992459247 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988517027 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.98759596 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.986374559 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.98862721 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.985732624 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987453323 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.986722617 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.989189658 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.985446842 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.986600801 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99307764 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.984871556 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.984678403 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.986683711 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.989403354 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.988157722 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.988662597 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.99321289 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.9979115 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.990432316 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.987350532 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.993969949 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.984879277 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.987956377 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.988287014 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988938039 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.988182492 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.988859606 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.98599321 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.988163726 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.997282263 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.989342817 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.989002295 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.987215077 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.989359691 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.988736472 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.992825578 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.989061117 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99375644 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.999361921 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.995424986 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.991866997 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.993723658 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.993160593 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.991143883 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.996202459 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.990198181 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003451291 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.000725622 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.990533244 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.989002982 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.991117931 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.993434644 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.991297172 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.988148738 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.000646907 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.990661451 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.992314524 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.996547417 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.992324673 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.992312446 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.998890658 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.993004402 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.993753467 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.993463034 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.990640476 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.994508756 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.993043543 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.992874352 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.992361117 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.992841631 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.995175256 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.992302209 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.991347711 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.990935217 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.999601857 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.99035083 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.99047259 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.9993087 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.992259007 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.990737731 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.994060583 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.992664897 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.994367838 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.992491554 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.992897764 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.991859318 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.992615351 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.995333151 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.003932224 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.995117205 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.000305709 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.994437948 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.003786322 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.992013063 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.99434084 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.990759905 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.994242442 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.000571949 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.991881538 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.99263122 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.999002556 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.993643712 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.992533196 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.998374947 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.991015614 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.993383757 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.991476752 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.99574125 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.999570725 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998089297 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.992999375 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.992179029 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.995883758 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.991371619 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.997005739 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.996784742 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.993781683 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.994806182 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.992058889 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.993204397 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.992374359 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.996352707 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.993072558 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.991927776 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.993709612 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.000566887 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.992799171 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.994148665 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.998258233 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.995646938 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.003863627 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.994368391 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.995135282 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.994857982 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.994587939 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.995740847 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.993754636 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.99186325 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.99387635 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.994968362 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.995487263 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.006760332 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.002685826 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.998189778 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.997564683 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.997631252 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.995118057 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.004650681 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.020649855 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.99543348 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.99497299 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.000598005 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003484509 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.997715501 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00246288 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99891088 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.005783554 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.99640762 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.99429866 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.000711525 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.009863603 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.997243854 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.996390035 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.994719151 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.000111414 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.00213772 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.997755776 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.998711212 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.000340802 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.999445464 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.009951392 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.996488027 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.999303228 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.000121652 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.99675919 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.996019287 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.996555752 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.996053807 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.997574843 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.994983996 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.997213349 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.998758814 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.003684357 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.99708519 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.9701401 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.008757641 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997452889 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.996955735 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.998822482 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.998547336 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.000518624 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999264459 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.989829576 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.001357358 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.999611421 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.999276852 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.000957002 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.009506945 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.000470549 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.986866632 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.997531234 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.001137143 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.998578531 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.998943735 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.000755001 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.006482236 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.001849899 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.014723648 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.009914059 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.998809954 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.000450242 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.005705739 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.005413579 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.997884056 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.000043554 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.998644422 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.001931222 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.002764978 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.999179778 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.998856372 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.001484706 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.004214183 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.999579897 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.998408251 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.999343369 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.001648663 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.001972764 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.005075961 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.006478398 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.001341978 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.001065425 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.0005232 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.002226068 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.000894837 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.003015698 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.999322918 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.002312437 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.003804114 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.003479805 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.006131923 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.003939354 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.001921259 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.002512058 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.000955278 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.002327196 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.002405768 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.001457349 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.001182772 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.006111388 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.012372905 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.002166911 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.002926065 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.003400531 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.996145321 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.002547164 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.00188457 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.003908323 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.000764625 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.00650403 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.001915309 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.00173167 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.003338465 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.001885159 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.008679113 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.00314166 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.006921845 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.003368816 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.003580476 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.001057209 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.006449877 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.013126205 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.006060392 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.005132869 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.011089044 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.007866234 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.00561064 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.002160734 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.003363859 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.005274665 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.004349889 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.006638113 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.005151085 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.005022613 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.00219642 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004294449 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.005114597 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.006174143 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.003863594 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.004025449 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.010012733 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.01262664 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.014069094 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.003024996 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.005727184 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.002995399 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.005776849 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.016056461 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.0040544 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001767064 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.003363797 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.004716054 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.005609656 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.012223285 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.013071575 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.005882059 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.006498427 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.009355842 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.024986879 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.006647986 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.01715097 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.038167884 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.004973438 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.005376366 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.005952101 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.005675896 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.003839176 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.007609473 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.004934999 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.010786992 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.006143066 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.005404943 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.013298078 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.006733839 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.005757981 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.005029202 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.007659154 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.014846271 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.006429391 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.014413668 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.008230752 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.007859445 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.008337275 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.010313545 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.00569609 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.006563616 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.005763592 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010545403 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.007810554 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.004280015 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.017676128 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.005330777 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.010060544 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.021550443 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.506632224 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.006169021 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.007314147 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.006597952 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.013165236 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.0129225 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.006777266 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.013112194 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.017303732 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.011112425 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.01731577 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.007301866 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.008901392 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007377074 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.008618045 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00862097 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.02056426 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.020033131 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.010362869 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.010194589 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.015507113 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.00867613 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.015090403 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.014788766 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013835602 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.010079101 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.011371955 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.008393603 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.012435448 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.009852922 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.013876547 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.019204526 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.009662238 seconds)
  done (took 1190.644164334 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.005867621 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.008270246 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.009726637 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.010052744 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.008442967 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008049678 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.008124781 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.007717244 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.008232034 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.00752077 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.010129359 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.007789176 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.008381742 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.007555044 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007627112 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.007928152 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00996197 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.008109387 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.007990596 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008305893 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.009818674 seconds)
  done (took 44.105947179 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.007058177 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.007297365 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.009956206 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.007485435 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.005777173 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.006234413 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.004460831 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.004654171 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.004061588 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002651174 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.002904055 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001714255 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.002844632 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.002297539 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002808546 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003915551 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.002810583 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.003998643 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.003080418 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.003122689 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.002679084 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.002885539 seconds)
  done (took 46.026757682 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.003405921 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.998636548 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.999211603 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.998967045 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.998794392 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.000345983 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.997124173 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.000871591 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.999619457 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.99959223 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.007296733 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.007045833 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.997285198 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.000707684 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.998630479 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.997306788 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.141436593 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.997137767 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.997137677 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.997096361 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.9986959 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.005238706 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.995925298 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.997804809 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.998744366 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.998716593 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.998345939 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.999466693 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.999530404 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.997775889 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.003330599 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.996880242 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.986946851 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.000684611 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.998337948 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.001206756 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.002171263 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.998586083 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.997251488 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.99660594 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.009788561 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.024701651 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.998234988 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.998521949 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.006414946 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.999010635 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.000015508 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.002589192 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.007297939 seconds)
  done (took 100.082257566 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.998252089 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.99818752 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.995841398 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.997352664 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.996660043 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.998176185 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.995974298 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.996403123 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.995958035 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.997705854 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.998870237 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.994602306 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.994093523 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.973399306 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.991834422 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.99846234 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.997947024 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.99417532 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.996635064 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.994248333 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.996289852 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.994646551 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.996728756 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.995203501 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.99519493 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.99852827 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.995594758 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.994861827 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.994751206 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.993259804 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.994647691 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.995569667 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.994661325 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.995946443 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.994851299 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.995868586 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.995917812 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.994139625 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.995127299 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.997398186 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.995876831 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.996516359 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.997534776 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.997182761 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.997146288 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.997176646 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.993968436 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.994847697 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.993764394 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.996764285 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.994695825 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.993855924 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.994900301 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.995455923 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.996132908 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.99684211 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.99586606 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.995779498 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.99707435 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.99651318 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.996433699 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.996814503 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.996509529 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.996039396 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.997569277 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.997928422 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.996382605 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.996797413 seconds)
  done (took 137.626757032 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.997941014 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.999837636 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.999063967 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998278365 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.999492366 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.997949079 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.999849452 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.996308268 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.997133198 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.983303021 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.999483824 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.000211611 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.997015104 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.999989576 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.996748077 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.996282534 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.997532899 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.998418521 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.998137872 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.99675596 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.997309373 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.997667206 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.996981476 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.998594879 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.997045911 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.996987368 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.998647403 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.997563184 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995530761 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.996905512 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.998040518 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.997419449 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.997355376 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.999081971 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.996521007 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.998234942 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.999172283 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.991099979 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.99475776 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.992513193 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.995261286 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.995446586 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.989056493 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.989973216 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.989042202 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.98854688 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.990939557 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.989495775 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.989284045 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.987155733 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.988854425 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.993088201 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.990021458 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.986407551 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.988632427 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.988713158 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.991953443 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.98643396 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986588888 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.986386943 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986705651 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.990111557 seconds)
  done (took 125.573993062 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.98566571 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.985704324 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.986403684 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.987454063 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.984632326 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.987941558 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.98486497 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.985921643 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.986493504 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.983927834 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983929786 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.985667569 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986344121 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986061484 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.98460772 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987404395 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.984350643 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.982902201 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985558901 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.983983169 seconds)
  done (took 41.619108682 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.9848952 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.984161014 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.986407398 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.984975812 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.982262948 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.984821735 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.982554428 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983217122 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.984054567 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.984385645 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.983044114 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.983625702 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982204611 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.983049604 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.982514441 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.983039525 seconds)
  done (took 33.64606248 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.981700703 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.98267735 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.982375803 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.983480261 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.982385551 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.982907416 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.987803841 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.981664356 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.982383124 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.982252564 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.982121874 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.985265514 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.981497093 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.981208705 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.983421928 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.981273993 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.985554805 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.980978036 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.982365572 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.98132873 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.982062878 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.98309304 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.981730808 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.979474822 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.982124244 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.981431086 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.982115555 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.981604201 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.98032618 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.981377898 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.980046245 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.982828034 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.98181199 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.980491977 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.983702859 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.98065463 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.982531903 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.980946644 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.979986739 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.980042425 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.980762445 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.982903706 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.978719872 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.981399388 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.981315461 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.980234249 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.982813197 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.982720949 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.981340307 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.980803098 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.980901408 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.983170592 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.982148327 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.982038832 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.980843328 seconds)
  done (took 110.913710454 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981452004 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.981483016 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.980860584 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.981525057 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.980676133 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.984119008 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.979173718 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.981746528 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980913965 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.980798165 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.982762881 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.980230769 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981348741 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.97952686 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.980917013 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981642731 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.980548086 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.979048702 seconds)
  done (took 37.562122025 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.979220317 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.983982502 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.978194102 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.981256993 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.980509758 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.981463275 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.98127189 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.979154188 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981083598 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.979517399 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980299132 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.979470451 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982175588 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.979080963 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.979216496 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980397832 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.980012215 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980162074 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980650239 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.978297271 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.980217317 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.979702199 seconds)
  done (took 45.465774796 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.979717066 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.97914541 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.994087693 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.998740052 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.002047518 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.013607066 seconds)
  done (took 13.871806151 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980428113 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9796427 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.98426231 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978723223 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978262725 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979458243 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977641154 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979772202 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979067779 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979789934 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979989341 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.977337103 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979909506 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977839201 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979520159 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.977882034 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97711198 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980500729 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.975993152 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978042621 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97861414 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976709237 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983320916 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977559193 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978480447 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978333231 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979597718 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979701539 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979519999 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979966801 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.977713017 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977652498 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.979761289 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978519546 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97842848 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978286605 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978903259 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981632113 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978813757 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978199491 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.977550221 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978552 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981246649 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.9782835 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979794793 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977401434 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979178707 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980273614 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978017437 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978927402 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978234636 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979963879 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.980457758 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978551705 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98054852 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98015098 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.980088993 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982329261 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980701731 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979176252 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979895534 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979660696 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983982775 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97641016 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981306835 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.980693071 seconds)
  done (took 132.533389165 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982266863 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.979887521 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.980826226 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981604734 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979515615 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982918474 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981124053 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979423289 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980201414 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980188557 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.981055358 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981029324 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981578263 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981977475 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.98057905 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97921562 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.98249262 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981536849 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980515372 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980890843 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.981651139 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.9842356 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982333801 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981170246 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981665163 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.98140028 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98515485 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982120313 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980390702 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980584826 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979552892 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983941493 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982758761 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.982979851 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981114652 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.982431328 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982047947 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982896577 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981387344 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982463015 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981325942 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982095736 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981827814 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981005517 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982409328 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981983934 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983247288 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984141886 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.981778587 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.981461002 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982169364 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984886591 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983981479 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984534672 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983889465 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981910965 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985676641 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981630644 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983515601 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98289304 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984524856 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984570595 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984446307 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983195953 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.9818854 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983409942 seconds)
  done (took 132.72242406 seconds)
done (took 2757.242346529 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.990718912 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.005367375 seconds)
  done (took 15.899371673 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.144605907 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.019559645 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.164466343 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.096606661 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.98611058 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.98884988 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.97986069 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.982716852 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.076044389 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.982795415 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.992210175 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.981178036 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.983619235 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.982265166 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.982621965 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.982380086 seconds)
  done (took 54.23593692 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.98749868 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.985296811 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.986608893 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.974528365 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.000913494 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.061332103 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.007082106 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.989211227 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.000322578 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.020998428 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.007069015 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.992219808 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.99446101 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.993414483 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.074378941 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.03082477 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.044542672 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.059326469 seconds)
  done (took 38.115375298 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.065490433 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.994084482 seconds)
  done (took 10.972045628 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.002303573 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.983747382 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.979290658 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.981767184 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.010147975 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.991153117 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.00508011 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.989262268 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.007489728 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.004798829 seconds)
  done (took 71.863910657 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.98703342 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.987005003 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.297655212 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.994028951 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.995458752 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.013217934 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.984964767 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.019047451 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.982977496 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.982286559 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.99635487 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.299324865 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.99591295 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.984947571 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.406243788 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.999007957 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.989713149 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.017578109 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.020542658 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.988452087 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.994055516 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.990731898 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.146250794 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.689179571 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.992572384 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.989889769 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.990763285 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.986219146 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.984161576 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.984919665 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.986769822 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.983018979 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.990598195 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.990270811 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.988111644 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.987320272 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.487308264 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.004716618 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.989651088 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.078302152 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.027670322 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.98623964 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.820812977 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.986720516 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.988804066 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.994411224 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.668592204 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.064178943 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.984494207 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.162618789 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.318207572 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.997939536 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.125621531 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.199701043 seconds)
  done (took 139.410700667 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.981932913 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.225983296 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136014833 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.981975397 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237668272 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.190460065 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.982706711 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.02556236 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.984914639 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.182042963 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.231074337 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080870193 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.982759963 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.982305138 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.98086727 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.977892422 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.124261413 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.049919514 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.98352464 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.982473137 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00628585 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180376162 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.105063346 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.983148437 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.011244012 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.188835759 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.10006271 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.082268001 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.764303948 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.98202765 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.045129592 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.984661667 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.982685016 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.98055833 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.137156386 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.074229866 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.065568553 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.990364764 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.982385739 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.982141885 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.66359849 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.183677123 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.07749233 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.106267501 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.234634745 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.201618513 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.591733469 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.981880051 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.606181707 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.149124041 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187583068 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.198133813 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.103614933 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.987373896 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.271353627 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.983433951 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.986245782 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.208820175 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.202641598 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.086286956 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.986704613 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.98936297 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.98569758 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.226279439 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.987277792 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.075683157 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.992649208 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.986582985 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.078001247 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.08452848 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.211623458 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.212684636 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.014966368 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.304292117 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.485237221 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.189607283 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.050752014 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.20702543 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.990720911 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.9852311 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.06699119 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.825750917 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.24342676 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.231123256 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.18565533 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.015078151 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.636856173 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.988927507 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.175392715 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178770994 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.218014926 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.229829282 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.224504957 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.339508701 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.984457968 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.988692888 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.301847812 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.103037187 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.935425403 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.341731486 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.215933528 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.517820214 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.01576653 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.272602795 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.115609818 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.992258001 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.63922884 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.988393273 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.195995926 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.029002576 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.990568516 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989791657 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.181436376 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.893015733 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.990362558 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.697776704 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.050081565 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.992506697 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.195582874 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.992320462 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.233642892 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.992051938 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.225049007 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.613556119 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.021106402 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.163055426 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.238305048 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.620278569 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.283629901 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219617133 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.103514186 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.214670128 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.799976087 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.991286112 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.261736271 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.991034865 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.991985564 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.158861839 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.000235625 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.13106869 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.994209858 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.256280219 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.007977206 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.222275173 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.993475536 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.228695565 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.021574964 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.039941199 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.993229751 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.115959805 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.992070576 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.825873711 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.145546078 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.991403013 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.987915388 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.5799431 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.989015755 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.144261209 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.216884945 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.010088214 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.057292911 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.546140307 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.988565355 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.075803226 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.011088431 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.263864637 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.988325977 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.239353839 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.953567392 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.461056892 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.994027211 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.224940611 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.17527596 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.992307171 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.992016462 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.830477883 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.98945675 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.990798363 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.148906732 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.391407404 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.895672448 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191020088 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.992283007 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.119975593 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.996727897 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.070098476 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.335783367 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.992438786 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.991234799 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.992833606 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.99468145 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.993895457 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.202097252 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.01777904 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.423052721 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.13004482 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.247788059 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.298186443 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.193165856 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.031226333 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.998281783 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.214086494 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.992776666 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.054861332 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.994282575 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.011535088 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.222678601 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.995504174 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.197839824 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.228097256 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.878203474 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.041012627 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.996167306 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.995223328 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.9144082 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.139120876 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.079042897 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.993800552 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.994446628 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.107403389 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.112390552 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.178913477 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.805499645 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.137896695 seconds)
  done (took 926.79543186 seconds)
done (took 1259.202049708 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.995479713 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.99494811 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.99704197 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.995524486 seconds)
  done (took 29.902093992 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.997981025 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.994091367 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.997601215 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.99863906 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.997218273 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.99706456 seconds)
  done (took 13.903132455 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.996111893 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.995397422 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.997617799 seconds)
  done (took 22.907415738 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.417810849 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.397642139 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.071394261 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.143306756 seconds)
  done (took 10.949583642 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.001006295 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.998344406 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.998403933 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.997478599 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.998378588 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.997800098 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.998188029 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.999260321 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.99778025 seconds)
  done (took 19.913768279 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.23396151 seconds)
done (took 103.731547522 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.303082325 seconds)
    (2/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.267985839 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.063291273 seconds)
    (4/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.019382305 seconds)
    (5/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.350203647 seconds)
    (6/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.255020301 seconds)
    (7/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.008122681 seconds)
    (8/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.013834049 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.017341241 seconds)
    (10/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.400352224 seconds)
    (11/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.083485832 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.179051916 seconds)
    (13/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.402822355 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.009140827 seconds)
    (15/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.013778147 seconds)
    (16/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.015580824 seconds)
    (17/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.313224696 seconds)
    (18/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.158466311 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.700978161 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.870701618 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.002518065 seconds)
    (22/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.395938314 seconds)
    (23/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.998013392 seconds)
    (24/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.123997108 seconds)
    (25/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.456377071 seconds)
    (26/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.061760753 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.102301745 seconds)
    (28/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.388897789 seconds)
    (29/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.757755827 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.68782201 seconds)
    (31/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.103072299 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 3.610353974 seconds)
    (33/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.757224561 seconds)
    (34/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.000981346 seconds)
    (35/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.998403422 seconds)
    (36/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.049558891 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.297597071 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.083498999 seconds)
    (39/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.09135683 seconds)
    (40/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.357772199 seconds)
    (41/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.560244023 seconds)
    (42/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.797408718 seconds)
    (43/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.172988175 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.016767136 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.155745621 seconds)
    (46/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.120021061 seconds)
    (47/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.09638316 seconds)
    (48/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.317093883 seconds)
    (49/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.089778293 seconds)
    (50/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.265780709 seconds)
    (51/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.420460048 seconds)
    (52/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.072448738 seconds)
    (53/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.651282985 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.69679524 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.358530046 seconds)
    (56/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.248440386 seconds)
    (57/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.30468352 seconds)
    (58/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.413255428 seconds)
    (59/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.124791569 seconds)
    (60/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.015103754 seconds)
    (61/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.426541671 seconds)
    (62/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.090797699 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.071656629 seconds)
    (64/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.423708324 seconds)
    (65/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.427681244 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.715940596 seconds)
    (67/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.019363035 seconds)
    (68/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 3.992527493 seconds)
    (69/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.021410549 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.793109153 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.530953258 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.02707741 seconds)
    (73/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.101438617 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.029801984 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.956678543 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.109118985 seconds)
    (77/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.116348197 seconds)
    (78/341) benchmarking ("sort", BigInt, false)...
    done (took 7.014891917 seconds)
    (79/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.429777171 seconds)
    (80/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.013162889 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.775772774 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.023827471 seconds)
    (83/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.505139633 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.40937369 seconds)
    (85/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.338956093 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.096626176 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.750015725 seconds)
    (88/341) benchmarking ("sort", Float32, false)...
    done (took 5.672959478 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.044735696 seconds)
    (90/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.274492323 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.25871694 seconds)
    (92/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.014984649 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 3.701508194 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.331145246 seconds)
    (95/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.420704404 seconds)
    (96/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.015690448 seconds)
    (97/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 4.242902598 seconds)
    (98/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.054019136 seconds)
    (99/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.075436684 seconds)
    (100/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.219847578 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.021260263 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 4.389575387 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.155401642 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.025737756 seconds)
    (105/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.013728506 seconds)
    (106/341) benchmarking ("sort", Int8, false)...
    done (took 4.930638599 seconds)
    (107/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.033333829 seconds)
    (108/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.148516973 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.80088162 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.148912875 seconds)
    (111/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.968037262 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.35684482 seconds)
    (113/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.460114351 seconds)
    (114/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.34576834 seconds)
    (115/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.325597958 seconds)
    (116/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.27368098 seconds)
    (117/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.136289011 seconds)
    (118/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.13166657 seconds)
    (119/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.018701004 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.12657701 seconds)
    (121/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.026843325 seconds)
    (122/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.803043634 seconds)
    (123/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.187824108 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.32876351 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.143149826 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.017220285 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.114110014 seconds)
    (128/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.111548584 seconds)
    (129/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.188609356 seconds)
    (130/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.114709012 seconds)
    (131/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.656163331 seconds)
    (132/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.250065657 seconds)
    (133/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.02773701 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.408600923 seconds)
    (135/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.317674271 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.342827161 seconds)
    (137/341) benchmarking ("sort", Bool, false)...
    done (took 2.241972702 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.717042587 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.105322305 seconds)
    (140/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.748128317 seconds)
    (141/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.494146516 seconds)
    (142/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.139665854 seconds)
    (143/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.092071248 seconds)
    (144/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.372826783 seconds)
    (145/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.334806755 seconds)
    (146/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.03638718 seconds)
    (147/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.034955367 seconds)
    (148/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.03093933 seconds)
    (149/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.0168238 seconds)
    (150/341) benchmarking ("sort", Int64, false)...
    done (took 5.653388663 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.929045532 seconds)
    (152/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.659978545 seconds)
    (153/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.797886918 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.017263666 seconds)
    (155/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 3.560369152 seconds)
    (156/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.775031269 seconds)
    (157/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.028823861 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.259181049 seconds)
    (159/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.220486351 seconds)
    (160/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.725142783 seconds)
    (161/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.959034616 seconds)
    (162/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.470138353 seconds)
    (163/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.239153061 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.144890497 seconds)
    (165/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.170769753 seconds)
    (166/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.157651512 seconds)
    (167/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.209961024 seconds)
    (168/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.022168226 seconds)
    (169/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.107200993 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.898249265 seconds)
    (171/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.259570057 seconds)
    (172/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.438467518 seconds)
    (173/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.170293576 seconds)
    (174/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.033783078 seconds)
    (175/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.238365285 seconds)
    (176/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.302915053 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.019418731 seconds)
    (178/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.502211706 seconds)
    (179/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.1507728 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.051055595 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.023214628 seconds)
    (182/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.22042076 seconds)
    (183/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.247608129 seconds)
    (184/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.126062292 seconds)
    (185/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.084757037 seconds)
    (186/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.124543803 seconds)
    (187/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.023895777 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.008552259 seconds)
    (189/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.152374058 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.15122455 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.367489806 seconds)
    (192/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.043031803 seconds)
    (193/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.032648362 seconds)
    (194/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.234458473 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.156136877 seconds)
    (196/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.035112994 seconds)
    (197/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.268393552 seconds)
    (198/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.424203163 seconds)
    (199/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.349722798 seconds)
    (200/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.269428697 seconds)
    (201/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.802673056 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.434620094 seconds)
    (203/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.170372023 seconds)
    (204/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.038511911 seconds)
    (205/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.271233706 seconds)
    (206/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.218583677 seconds)
    (207/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.144777284 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.923925078 seconds)
    (209/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.02902959 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.957602839 seconds)
    (211/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.329322407 seconds)
    (212/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.331194834 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.239102969 seconds)
    (214/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.204652378 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.147325564 seconds)
    (216/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.124029606 seconds)
    (217/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.236169511 seconds)
    (218/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.284819283 seconds)
    (219/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.232194041 seconds)
    (220/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.02412049 seconds)
    (221/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.313950144 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.026260563 seconds)
    (223/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.024194952 seconds)
    (224/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.312146122 seconds)
    (225/341) benchmarking ("sort", Float64, false)...
    done (took 5.732418496 seconds)
    (226/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.330936661 seconds)
    (227/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.774175745 seconds)
    (228/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.113029671 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.241990309 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.023480563 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 4.107325748 seconds)
    (232/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.255822214 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.220846093 seconds)
    (234/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.151231587 seconds)
    (235/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.023465334 seconds)
    (236/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.033717856 seconds)
    (237/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.01163984 seconds)
    (238/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.148459487 seconds)
    (239/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.102327071 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.227325186 seconds)
    (241/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.189114889 seconds)
    (242/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.100980178 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.311143801 seconds)
    (244/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.025845091 seconds)
    (245/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.029105064 seconds)
    (246/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.158908192 seconds)
    (247/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.189527964 seconds)
    (248/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.287951962 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.0291307 seconds)
    (250/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.897841085 seconds)
    (251/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.233849432 seconds)
    (252/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.944583706 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.0326833 seconds)
    (254/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.570970875 seconds)
    (255/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.105404875 seconds)
    (256/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.261304169 seconds)
    (257/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.288810461 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.340030557 seconds)
    (259/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.3391908 seconds)
    (260/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.116767967 seconds)
    (261/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.324704175 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.516856158 seconds)
    (263/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.172257367 seconds)
    (264/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.232538562 seconds)
    (265/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.49199889 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.050688655 seconds)
    (267/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.033832036 seconds)
    (268/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.043491212 seconds)
    (269/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.23781274 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.026240723 seconds)
    (271/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.143979913 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.028380792 seconds)
    (273/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.172614373 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.22308432 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.147549528 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.026188331 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.433040037 seconds)
    (278/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.156243903 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.373784434 seconds)
    (280/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.107395567 seconds)
    (281/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.427071151 seconds)
    (282/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.159864818 seconds)
    (283/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.098849846 seconds)
    (284/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.037351375 seconds)
    (285/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.623100969 seconds)
    (286/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.18898722 seconds)
    (287/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.107617839 seconds)
    (288/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.151620605 seconds)
    (289/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.303756605 seconds)
    (290/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.028605771 seconds)
    (291/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.869590764 seconds)
    (292/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.050337589 seconds)
    (293/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.133049456 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.044845323 seconds)
    (295/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.1781246 seconds)
    (296/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.036409059 seconds)
    (297/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.109854979 seconds)
    (298/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.136013265 seconds)
    (299/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.169080286 seconds)
    (300/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.805940616 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.354350254 seconds)
    (302/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.180587398 seconds)
    (303/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.177565687 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.218566815 seconds)
    (305/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.110227285 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.299891183 seconds)
    (307/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.011535755 seconds)
    (308/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.275657394 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.349134592 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.3485284 seconds)
    (311/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.168109925 seconds)
    (312/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.911566589 seconds)
    (313/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.037992282 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.029930233 seconds)
    (315/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.16703199 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.032327896 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.447444125 seconds)
    (318/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.031733217 seconds)
    (319/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.146086569 seconds)
    (320/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.111553742 seconds)
    (321/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.432701955 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.888847538 seconds)
    (323/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.148387719 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.161389839 seconds)
    (325/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.04109484 seconds)
    (326/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.246731332 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.026838813 seconds)
    (328/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.142649417 seconds)
    (329/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.029190927 seconds)
    (330/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.030145992 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 4.750765654 seconds)
    (332/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.747881906 seconds)
    (333/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.333959307 seconds)
    (334/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.206757207 seconds)
    (335/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.433062705 seconds)
    (336/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.230383738 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.324934643 seconds)
    (338/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.226691066 seconds)
    (339/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.042852283 seconds)
    (340/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.773978148 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.266348605 seconds)
  done (took 1147.258330237 seconds)
done (took 1149.289044105 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.053871976 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.033168054 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.540777094 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.042760533 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.03125189 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.036339503 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.550699321 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.060228902 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.049261499 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.552776916 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.040905631 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.03257286 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.047478792 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.067748378 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.043228492 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.047092246 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.037520495 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.059038794 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.067247536 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.037452307 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.084226653 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.039848633 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.034921739 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.082637963 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.032424173 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.047830508 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.052325644 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.087282959 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.083750609 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.035599314 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.038568622 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.396799897 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.086981565 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.037341225 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.045016007 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.050105614 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.039307531 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.048125507 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.051035646 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.050454065 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.034744376 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.046240604 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.038024402 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.036758176 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.033372 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.034712302 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.037235024 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.160135412 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.048229936 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.38111041 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.094447891 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.054192583 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.087133329 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.037951758 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.035344461 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.037744586 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.087862615 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.041339553 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.039960693 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.382447604 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.130869987 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.049161004 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.38203649 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.098904013 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.046501401 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.045987946 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.036001277 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.054499229 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.398563897 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.597657369 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.066790971 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.054153857 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.03750177 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.03672662 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.050665718 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.55442509 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.049817424 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.62103254 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.061450608 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.054762152 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.042167061 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.038104017 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.038284968 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.052046063 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055411148 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.037595392 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.043441915 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.042023132 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.050752014 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.399952768 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.082428014 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.545249495 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.044110438 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.059849211 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.05533776 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.623025001 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.063218836 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055019365 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.040866093 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.398980688 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.078252734 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.056122815 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.042686363 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.048499808 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.152470869 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.056894258 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.057982503 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.038548766 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.057407828 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.043707912 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.038289411 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.050764334 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.05601586 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.072652018 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.053117443 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.038342517 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.04686366 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.044010045 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.056018831 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.046531222 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.044414169 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.049824081 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.040134427 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.091483864 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.059264707 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.053168414 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.1554708 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.045002369 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.163893134 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.053011057 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.047837456 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.039519426 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.384466913 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.084765345 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.060575692 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.047958172 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.063885723 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.061592068 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.058091253 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.042161081 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.05501095 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.042505556 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.092356431 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.042175961 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.06705169 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.093021557 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.054086542 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.047845064 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.059044022 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.075573572 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.061742218 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.045876748 seconds)
done (took 321.283417131 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.088077213 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.040145574 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.11480074 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.040796345 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.108359274 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.093842251 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.040049782 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.040722399 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.042542686 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.435324011 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.042124803 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.045577838 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.038233171 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.041087433 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.089390215 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.038866999 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.039927143 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.275259186 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.042058179 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.100019128 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.041618263 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.041838437 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.042832088 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.431028599 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.045084483 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.04200539 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.101102589 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.042416513 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.282169681 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.042178094 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.040434428 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.281517487 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.102339812 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.053925303 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.04957811 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.051352378 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.109587246 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.050889738 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.08862409 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.088329086 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.119352819 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.076251608 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.041337124 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.041385605 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.046339147 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.045693059 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.04364891 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.075170114 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.044072669 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.04912262 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.289456686 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.05181424 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.049007854 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.043308553 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.043485934 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.059185752 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.043242241 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.044437677 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.101764516 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.045487823 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.09122122 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.431051726 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.425452438 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.045611097 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.044332858 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.043625262 seconds)
  done (took 195.223955522 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.112059179 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.128960125 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.110563794 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.051137138 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.094577159 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.113272068 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.04918185 seconds)
  done (took 16.622861836 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.050816727 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.044732236 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.067543238 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.067872678 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.044763183 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.18426559 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.056424386 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.049910927 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.071175555 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.046496579 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.38143272 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.068519515 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.051082814 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.0455297 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.057899982 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.074331329 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.047036562 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.045575355 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.142100406 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.123422223 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.052698505 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.054111734 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.075325874 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.057796619 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.045596286 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.045804208 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.045524354 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.05429779 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.047255879 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.045329989 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.047001604 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.059670429 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.045934606 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.045148063 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.04723417 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.046697469 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.046599196 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.046796592 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.046906461 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.045008021 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.046698085 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.047995155 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.047990489 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.046483877 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.047766421 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.069416128 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.046026439 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.047338631 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.045028747 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.047191809 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.076716612 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.047755016 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.048726518 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.05315014 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.087649779 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.053009433 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.048404397 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.047760747 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.049186612 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.047653192 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.046191278 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.126379443 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.070427486 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.048751087 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.069437729 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.086798258 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.047701669 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.047124279 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.047166205 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.07220082 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.047517174 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.072307395 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.049403747 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.146328042 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.049071013 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.189139574 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.069646062 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.051800226 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.052227268 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.05011769 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.057363449 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.046627266 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.051540394 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.054891571 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.055359408 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.05054366 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.049223327 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.050999567 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.055492594 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.050393047 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.097279986 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.051028574 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.050987874 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.144998098 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.050818563 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.145397724 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.074634687 seconds)
  done (took 222.318844141 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.054252364 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.05143261 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.063034986 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.0526728 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.050635789 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.0539668 seconds)
  done (took 14.295771918 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.053355573 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.054261343 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.049931984 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.050210492 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.049445709 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.050548013 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.050501933 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.053274743 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.055154045 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.051218344 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.051506208 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.05201355 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.051909088 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.051566712 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.051927325 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.049939085 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.052357797 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.051205727 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.051667341 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.05201047 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.258260127 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.050234874 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.053832521 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.055293916 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.057463845 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.051026934 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.061351328 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.05213362 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.052111815 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.05704458 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.057887471 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.053589693 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.05632585 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.059121058 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.056980351 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.055605279 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.057060553 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.053115128 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.051811109 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.05308027 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.053117132 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.052211556 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.053623166 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.051633513 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.054053705 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.062062335 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.057873916 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.061161173 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.041412191 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.054674752 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.054647111 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.053603117 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.052545225 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.054368569 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.058962418 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.062964267 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.057900396 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.054210807 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.052934178 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.057199208 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.058756203 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.053680485 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.055002411 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.059200362 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.061888263 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.054827605 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.057213745 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.058063246 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.054564822 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.054901343 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.05387456 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.052838968 seconds)
  done (took 151.085027695 seconds)
done (took 601.511074094 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.184736851 seconds)
  done (took 9.157643926 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.122275079 seconds)
  done (took 9.204179011 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.608101427 seconds)
  done (took 12.586038957 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.086076654 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.081039309 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.069974722 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.058638491 seconds)
  done (took 30.28459467 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.439024974 seconds)
  done (took 9.412990306 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.068283247 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.050760088 seconds)
  done (took 16.129244674 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.08096421 seconds)
  done (took 9.055491893 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.491954168 seconds)
  done (took 9.493001497 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.076603126 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.062480514 seconds)
  done (took 16.135459956 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.057518625 seconds)
  done (took 9.03375287 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.817218052 seconds)
  done (took 9.886713887 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.060853387 seconds)
  done (took 9.054355171 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.13614024 seconds)
  done (took 9.111263808 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.0990145 seconds)
  done (took 10.074982845 seconds)
done (took 170.596527641 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.061046174 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.054179378 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.054259701 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.053558902 seconds)
  done (took 30.198257522 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.092375117 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.089413872 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.099259483 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.089137601 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.080941361 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.080228523 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.090421219 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.092278198 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.0818968 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.088326996 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.089711094 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.089769452 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.090461594 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.099977185 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.100671135 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.089821742 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.090255712 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.091048899 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.081354844 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.10069625 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.088017087 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.089360065 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.056085273 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.057004199 seconds)
  done (took 52.075847867 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.246364555 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.122859512 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.21073848 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.103581454 seconds)
  done (took 10.658376535 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.056324099 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.120991521 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.107247166 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.102783989 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.150933751 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.160108207 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.109803423 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.267433655 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.177602928 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.18517392 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.065104442 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.081461911 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.085084742 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.103926539 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.161076878 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.059976422 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.059107659 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.174777964 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.121053014 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.269156334 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.060956461 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.115915313 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.147073898 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.113716087 seconds)
  done (took 53.03320662 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.061256702 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.066144358 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.067308911 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.060840031 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.060911151 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.061097248 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.067617129 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.063686998 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.083524556 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.062911384 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.062430618 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.062494867 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.068510844 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.062112822 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.062174393 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.075458595 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.076274307 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.061694553 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.066224275 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.069244642 seconds)
  done (took 43.301820017 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.058269487 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.905722374 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.407422832 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.312152438 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.060627535 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.061075427 seconds)
  done (took 32.784557434 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.074057487 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.080388511 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.067349553 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.087587354 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.108315616 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.067124607 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.12195264 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.225012925 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.067715182 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.118869949 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.080265952 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.070897122 seconds)
  done (took 27.152157282 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.061179916 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.06181193 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.061797825 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.073382916 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.073390869 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.072487716 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.070979837 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.063474733 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.074350619 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.084775238 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.072441032 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.075504964 seconds)
  done (took 46.826856801 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.277732941 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.289692874 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285644145 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.628176066 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.391739566 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.049512065 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.348825755 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.275125229 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.761089265 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.785003136 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.354916015 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.047673835 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.014307463 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.987818123 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.960833 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.306845382 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063486432 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.921575005 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341379388 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113025661 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066987162 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.065205205 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067980637 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.345615733 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.393695476 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067176651 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.277256513 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080869995 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.064457439 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328188411 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.518389068 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.119118641 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.265866518 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.403276726 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41809986 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.248831259 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.066162007 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.199993258 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.110692999 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.10037828 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.074346735 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.076456252 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.607196253 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.075821383 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.337540994 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067259976 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.202096761 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.037970434 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990168758 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.442046221 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187930555 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065508588 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.10048368 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.498357939 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188036328 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308357581 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.070359236 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.206554285 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12123053 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.380715329 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.324010745 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066198171 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.278578881 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990751824 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.455117464 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196962668 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.068241673 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070105717 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.766630543 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.309760028 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.148335829 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.445055348 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.829133453 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.066910793 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068960645 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.10945593 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162219985 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.065751664 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.364855787 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.044736017 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.993098006 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.153471138 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.462388958 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070998945 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.06587069 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.076636637 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.913547154 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.992763176 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.16363355 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.380836563 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.396874547 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.068291685 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.069597921 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.089124284 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069196484 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.013483208 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.592706533 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.133886385 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.993965876 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.630153041 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.510748975 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.033227509 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.520528225 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.109416264 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.348742401 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.226635998 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.47363512 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.277207103 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316713121 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.599388544 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072641158 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.6832168 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151429451 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146396081 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068218627 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.628328142 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.204785581 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.416917472 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189908522 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.069413078 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.994912307 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.081077252 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.272229359 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.513029694 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124781251 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068330768 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.0747246 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069843479 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.073057347 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.175395003 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085407069 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.361780168 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.146845221 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.070623817 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.007161184 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.073719595 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351674723 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.683118204 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128358809 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.324769935 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.340115075 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768802115 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.666194715 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.016759094 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.357963387 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145771248 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145370715 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.643909379 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.205753933 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.166789722 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070641194 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.211873943 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.079057046 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.074241248 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.406712685 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.489480148 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.490513724 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.117378839 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.070687425 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.018954271 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.210753112 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314065342 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193668356 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.100778032 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074751028 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.155004481 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.29765369 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.07163557 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.999072382 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333042328 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.317123297 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.360120584 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.482517735 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.158375901 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.143876724 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.081719215 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.285085365 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.153755657 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.730502381 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.619403818 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308515517 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.603459111 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.036889327 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.715815331 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.395081017 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.461002387 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089365538 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.524796927 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.209158151 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.730032125 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.101704698 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.594922052 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.998131055 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078690876 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.420142608 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.035955914 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.384186286 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.141729948 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130215553 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.075010185 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.073951762 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081272064 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.022111783 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18078891 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142890217 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148280284 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.001113002 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.688552573 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.110798356 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.077026142 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.073489062 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.463132384 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.964526754 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025726274 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.072849342 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152579565 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.821882937 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.62816693 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.076504458 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079251845 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.679566134 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.076938978 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980676735 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.07954175 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.976289654 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101699982 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.388761636 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.771251202 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357268194 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.151823646 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150328315 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.075408214 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083710343 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.777413953 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085727542 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.776810987 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358529715 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.355062727 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.51419262 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.141462507 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.286823865 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.092067481 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.077211682 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.60340101 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.101923005 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079815072 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.280700237 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.595069372 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.461207252 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.726385272 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.162861247 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.078904675 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.360333765 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079818032 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.530674011 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.764510564 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.087551556 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.075150612 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.337234396 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.761922772 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.079388276 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.053019209 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0845763 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291510417 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.279920898 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.360718099 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37728219 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.533088686 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.004101949 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082240534 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.116784412 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.322973783 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.079047196 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.11381162 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.524116901 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163935834 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.506753049 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.368402016 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.575325886 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.713465606 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.340403447 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.145819849 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.070744142 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.736455357 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.205085723 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.010847033 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197375753 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.006207763 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.860925799 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.369651486 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.097226702 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.360865789 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060364569 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418027944 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.379299758 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.390578827 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.132607156 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.106653469 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.078622335 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133494867 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.080392111 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.237663829 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.194083087 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.085283067 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.580037808 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117427902 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127403132 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.086290497 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.590498313 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.100022974 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.080239038 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.774012373 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.104347541 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199757432 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153633734 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.862233851 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.550265061 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.200728004 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.953514122 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.727900291 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363902741 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.141303465 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.535360095 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123698457 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.483269064 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.080417265 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.29336818 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.084965137 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.621140597 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129175938 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356362312 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039460101 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.292584575 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289473746 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.112523983 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.085556722 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.008579094 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.242865228 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.954045151 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.061341663 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.084795383 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.763259818 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.5409484 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.245597753 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.564954407 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.902959092 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.085016919 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.436305921 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494347925 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.669732336 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117550614 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085631322 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.476493602 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.222115458 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.447277456 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.382133814 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.093593202 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.108927367 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.296647278 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208816592 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.001657019 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.57375462 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.670676284 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.785638087 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.096709848 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.289313323 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.473237044 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.341421631 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.119062134 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.158701714 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.487435354 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.366085896 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.156978653 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010294875 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082822158 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.480043195 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.48567735 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.179561187 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32544496 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.401136451 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.669920907 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.585803517 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.500254708 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.516464326 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.503396969 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.480767363 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.301513641 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455348486 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.41194653 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.967768907 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.499173782 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.296952047 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.186051948 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.3911232 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.965923341 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.794721101 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.328909207 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.089537936 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014783923 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.292226814 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.089888306 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.521942122 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.606970174 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.336102633 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.409501217 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.569964107 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.625206551 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.236628932 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.110089768 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.051987476 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.109934913 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.107362094 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.08707597 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.580370879 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.37357348 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100093204 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028174357 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.757479942 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.014780913 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.300744573 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.238600058 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.124341651 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.643647572 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.420672381 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.193989397 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.386326411 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.291795735 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.122803972 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014232628 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.810503124 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.034477281 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174235898 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.513413798 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102646373 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.09102728 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.291979228 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.017521743 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134805261 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.093502134 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.290508071 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.673207269 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374601892 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21843272 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.33568992 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395214316 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.976004978 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117975247 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.360155431 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.015576163 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.735614076 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768236208 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.129419346 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161185856 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088546119 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09248702 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361078535 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.477849385 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.192168556 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.653999416 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.122931401 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111906755 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.48009309 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.183772755 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.092504162 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.094745362 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.54640477 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.324082903 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.089736198 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.06835649 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.301491736 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164023568 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.287845925 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.155071228 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.604492056 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.096250582 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.981741972 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195856536 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.039490664 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088293668 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.834923874 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.152021749 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.090394704 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.379028951 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.75002319 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29293437 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.484411207 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.967665713 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.23928686 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133636457 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.094370616 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.102010116 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.484194487 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.400431205 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.090907695 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.360397756 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142213208 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.096819303 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.753948833 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.059145786 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.093290312 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.860482187 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.985714069 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.822012818 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.488665799 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.108763493 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123442357 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09476519 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.019029365 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.091536283 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.26701372 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.139866465 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.09890174 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.467803819 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.477227299 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184606823 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092880848 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.09424863 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099472697 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.307410562 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.60788855 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109564687 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.794297312 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297232688 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095266186 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.587644975 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.54160392 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.32775325 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.132342244 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.245138373 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338962345 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.637985766 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.2505411 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.067596045 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319972821 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.096670135 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.365490686 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.369635306 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.094479103 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.308223866 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.562923381 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378437953 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.445024585 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.405929307 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.163887967 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.256907493 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.006888676 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.095025528 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.097448754 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.359034185 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154104572 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094492513 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105451799 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.650615054 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.861237352 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.56440109 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25542475 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.488420689 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.95569233 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.849369783 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.098334758 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.02193043 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.093319887 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.120673658 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.098994401 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.022823117 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801999669 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.81918714 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.309751764 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.406281451 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.02347973 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.299188696 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680398267 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.02345044 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.065067008 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.097029808 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.36078077 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024170856 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09958268 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.051767134 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.445077085 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.807931833 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365736986 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.097168393 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042362375 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093326425 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.09802778 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.097698947 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181705485 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.09927081 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214244853 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.360821474 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.536817104 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.20541121 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.737854916 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.820553286 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.034484907 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14037758 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.655406863 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.66360121 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.433544865 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.23045659 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.821553646 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.042655693 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.099872123 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115646312 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.362394024 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.101929447 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101752064 seconds)
  done (took 2208.924989913 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.101620677 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.168838272 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.175498501 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.152341756 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.165699917 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.234999972 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.158951478 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.172766105 seconds)
  done (took 59.346249087 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.114477779 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.089574892 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.106531556 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.099193366 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.096862141 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.150315146 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.295354209 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.129943834 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.099358193 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.10265632 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.10000757 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.101920925 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.103767781 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.100078775 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.103999914 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.41474179 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.124391169 seconds)
  done (took 80.417247667 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.157979844 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.927682232 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.102897322 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.787920864 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.139823588 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.439078498 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.098535574 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.102494858 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.212783842 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.403014128 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.143345783 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.118865069 seconds)
  done (took 92.676002537 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.103768086 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.101860415 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.101447149 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.103586198 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.101826535 seconds)
  done (took 12.531412149 seconds)
done (took 2751.968190556 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.354877441 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.195654004 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.173070818 seconds)
  done (took 6.387597131 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.243953335 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.29478712 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.405802943 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.42892348 seconds)
  done (took 11.397048629 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.386301618 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.468549866 seconds)
  done (took 6.87443706 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.471871685 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.111645376 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.494611324 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.103219674 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.105628572 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.104015143 seconds)
  done (took 23.338169826 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.10454347 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.10332026 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.103836425 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.103205523 seconds)
  done (took 10.435585822 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.102912898 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.870472584 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.105191886 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.115887547 seconds)
  done (took 22.214643186 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.24235598 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.117527194 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.87391207 seconds)
  done (took 10.254697693 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.729255591 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.544748305 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.708928944 seconds)
  done (took 10.004702503 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.255236545 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.08748982 seconds)
  done (took 8.363411459 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.244286128 seconds)
  done (took 4.266239591 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.934361049 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.416189361 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.574119601 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.622207414 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.687566323 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.323463858 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.42312909 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.370690718 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.501508939 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.507982143 seconds)
  done (took 27.384764012 seconds)
done (took 157.375971155 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.538246821 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.123285861 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.312751925 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.482993795 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.351106523 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.312216097 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.386472781 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.470233846 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.152304171 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.137002073 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.479321427 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.347180828 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.332261286 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.131132469 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.338870683 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.130932672 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.349824705 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.561765459 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.160768872 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.40606973 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.394188908 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.125700025 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.326187732 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.141304306 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.35008244 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.26506894 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.729822604 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.13088969 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.307239906 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.74337456 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.264207887 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.555473972 seconds)
  done (took 176.860218415 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.993833143 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.106570246 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.094428029 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.104004513 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.384548932 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.103812933 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.105538213 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.104655447 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.409042792 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.395338127 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.105360686 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.373443094 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.104117948 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.078987628 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.106389703 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.105951549 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.511036739 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.038897505 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.106301033 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.106038915 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.105732116 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.270421844 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.105865732 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.307451463 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.509394423 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.104860485 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.106179631 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.105632502 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.099219324 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.107313202 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.106145319 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.106135373 seconds)
  done (took 215.497369144 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.107742523 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.106368824 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.106771867 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.106555388 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.108496044 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.107408412 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.109386855 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.106108079 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.979360204 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.967024301 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.107148289 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.107109812 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.116546675 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.10762394 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.114151521 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.108388478 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.113874337 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.111781008 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.114640925 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.116123377 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.111020275 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.757140815 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.108018484 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.783937246 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.109752507 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.112367133 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.108473651 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.115763705 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.114175902 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.115735229 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.109827536 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.108848762 seconds)
  done (took 228.605915242 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.348108626 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.111177021 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.111709029 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.133214442 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.113620519 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.113589555 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.115468791 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.366035017 seconds)
  done (took 21.442188528 seconds)
done (took 644.443252163 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.428005212 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.813555722 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.241669599 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.137233093 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.373200188 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.175515301 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.130701876 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.192540181 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.781121265 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.20521935 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.518851769 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.13765555 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.821118753 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.156195042 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.249110933 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.186768347 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.49803458 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.785675404 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.267324547 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.783256816 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.33251366 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.079380813 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.208617365 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.81920179 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.533393839 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.103360268 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.161432446 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.500905554 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.135688442 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.367542583 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.780886426 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.388188115 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.145485057 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.1087005 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.18484216 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.173889514 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.318308378 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.1425501 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.246226255 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.881151335 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.771716746 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.655274397 seconds)
  done (took 109.951221122 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.119371288 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.120301935 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.119251745 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.119470188 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.127535554 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.119118007 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.119727996 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.120053684 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.120031642 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.119572005 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.119599148 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.128660759 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.120028485 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.127875366 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.119488702 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.119256826 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.118153515 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.128887039 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.119143428 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.120216652 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.121827099 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.119213782 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.116693098 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.119957132 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.120328396 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.118994687 seconds)
  done (took 57.181253219 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.113979871 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.267016699 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.399013127 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.145795476 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.117250563 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.118512199 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.144586924 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.121827514 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.116027192 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.119915864 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.208113499 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.118008405 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.129266874 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.394803686 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.142515999 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.116711467 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.116595868 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.117192952 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.273351135 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.130955802 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.14600839 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.122662469 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.145977215 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.131552299 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.116853186 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.117721519 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.120197781 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.528341517 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.128449965 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.211804328 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.159804697 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.148106673 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.454965531 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.409971712 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.181374249 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.124119721 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.116933577 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.258248204 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.1289784 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.118410499 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.146299886 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.126782426 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.403715641 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.633532318 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.132332509 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.118590857 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.522937167 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.266741633 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.16347273 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.131246968 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.40991099 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.145774827 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.118106266 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.121363537 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.154198907 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.130350366 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.119279174 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.363646418 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.134591218 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.147450932 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.125120295 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.119288739 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.283502801 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.126926509 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.273717052 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.127398476 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.124891255 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.117917947 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.405668862 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.147347608 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.632999786 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.132301022 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.119409523 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.213763499 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.276592468 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.547106057 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.132879376 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.285361462 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.472662243 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.157468489 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.130732394 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.510895472 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.161614013 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.129249143 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.119591193 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.121108709 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.120335874 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.163609031 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.146417362 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.548245823 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.630117681 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.380557703 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.161261892 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.133900761 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.122872004 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.365910567 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.130326257 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.121273165 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.396872759 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.655450529 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.136842577 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.128890182 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.613691712 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.13615868 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.150047399 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.131191288 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.419048578 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.147531357 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.165336592 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.120286478 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.126573555 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.123384145 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.150323148 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.131512967 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.120898758 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.604754517 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.273772818 seconds)
  done (took 261.561949751 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.125793583 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.119260526 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.121362412 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.119543149 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.121660686 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.122250912 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.119687641 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.120092797 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.121704719 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.122516648 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.120130991 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.121210942 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.121123697 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.123162273 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.157450371 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.123465879 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.610723401 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.123658752 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.121214054 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.120124448 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.685184882 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.126322478 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.120506574 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.12236715 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.121476216 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.122777772 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.124178882 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.154187883 seconds)
  done (took 174.579936228 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.124095366 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.170000827 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.133518025 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.168422643 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.134373172 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.1232162 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.144238118 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.13812291 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.1289007 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.12310831 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.122507578 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.150045866 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.131570644 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.196656245 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.152258082 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.153577973 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.198538002 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.132313453 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.123540306 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.123996793 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.169840329 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.136564993 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.151916203 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.177992661 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.135462934 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.171056551 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.136474829 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.124560758 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.125010407 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.212255765 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.14282396 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.15145734 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.158131493 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.143584764 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.216978803 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.212983277 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.204488315 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.153140465 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.130468798 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.126259405 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.125427693 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.125672322 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.173342517 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.137466311 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.12589171 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.215280179 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.144465634 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.126042432 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.147250609 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.125144937 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.136267183 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.141159804 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.160025858 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.224013493 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.171437373 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.151245163 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.148174208 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.145336047 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.127282293 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.197696976 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.135193409 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.213806874 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.144744446 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.126718095 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.127566796 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.130969813 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.174549617 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.159582966 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.20293126 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.134798905 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.198355481 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.180920991 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.139344552 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.127653818 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.127813386 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.175267382 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.213768049 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.181648204 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.186015492 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.162808478 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.137761444 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.126834166 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.128773796 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.153375484 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.134960348 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.214437647 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.216599478 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.138161342 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.127429849 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.12940738 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.128843335 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.150954112 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.185426274 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.167346777 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.208728836 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.164341002 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.162999526 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.135243853 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.139953255 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.132961419 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.157924173 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.138342474 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.139428358 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.463765015 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.160789212 seconds)
  done (took 228.537073768 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.458604566 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.16984805 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.197831671 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.391721053 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.478850477 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.128512132 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.164034255 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.177963538 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.18711557 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.295310895 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.240152743 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.221646098 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.163364239 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.150153717 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.170796988 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.188298569 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.205157144 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.476010813 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.273501864 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.693200974 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.166910975 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.442070784 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.475145036 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.527163695 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.215202507 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.5571287 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.772092799 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.268924397 seconds)
  done (took 69.906454346 seconds)
done (took 903.74920611 seconds)
SAVING RESULT...
DONE!
