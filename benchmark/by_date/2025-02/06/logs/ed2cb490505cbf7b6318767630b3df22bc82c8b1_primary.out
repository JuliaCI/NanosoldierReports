cset: moving following pidspec: 2456384
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 2.298691077 seconds)
loading group "string"... done (took 0.2609446 seconds)
loading group "linalg"... done (took 3.052902714 seconds)
loading group "parallel"... done (took 0.018293317 seconds)
loading group "find"... done (took 1.088999219 seconds)
loading group "tuple"... done (took 0.610841603 seconds)
loading group "dates"... done (took 0.145417369 seconds)
loading group "micro"... done (took 0.064402181 seconds)
loading group "io"... done (took 1.389572088 seconds)
loading group "frontend"... done (took 0.019401095 seconds)
loading group "scalar"... done (took 0.991901063 seconds)
loading group "sparse"... done (took 0.397882358 seconds)
loading group "alloc"... done (took 0.016690148 seconds)
loading group "broadcast"... done (took 0.295656842 seconds)
loading group "union"... done (took 2.608624099 seconds)
loading group "simd"... done (took 0.959589034 seconds)
loading group "random"... done (took 2.001049477 seconds)
loading group "inference"... done (took 2.332684691 seconds)
loading group "problem"... done (took 1.128021833 seconds)
loading group "array"... done (took 2.333308595 seconds)
loading group "misc"... done (took 0.368444719 seconds)
loading group "sort"... done (took 0.232149363 seconds)
loading group "collection"... done (took 5.143495289 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.603977313 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.118878335 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.076748407 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.07334579 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.113237155 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.08944295 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.079740146 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.049013923 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.718671908 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.06355797 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.093486454 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.416957512 seconds)
done (took 5.227843926 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.330387013 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023955004 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023656247 seconds)
  done (took 0.683144854 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.02281314 seconds)
    (2/3) benchmarking "different length"...
    done (took 7.344e-6 seconds)
    (3/3) benchmarking "different"...
    done (took 4.236e-6 seconds)
  done (took 0.657446874 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.02047802 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.148535853 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.1916e-5 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.00101674 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000923245 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000224417 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.921e-6 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 3.796e-6 seconds)
  done (took 0.784121043 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.036565057 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023438053 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020938287 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02098341 seconds)
  done (took 0.736131919 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021598063 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.039816182 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.8943e-5 seconds)
    (4/4) benchmarking "different"...
    done (took 3.779e-6 seconds)
  done (took 0.695786003 seconds)
done (took 4.546396007 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.04088455 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.304830268 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.161447833 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.174072923 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.284458555 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.481501951 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.11945123 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.21042789 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.038595604 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011833124 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.065283557 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.038530585 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.155590418 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.326291559 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004104299 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.235058237 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.242772014 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.054736566 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.128404826 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.633886021 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000578468 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032102939 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.032246034 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.3009e-5 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.390484646 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.174124516 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.290045401 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.005739869 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.6726e-5 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.047986764 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003777808 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008269172 seconds)
  done (took 13.380864573 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.039096956 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.037429765 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024929428 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.120311907 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049197698 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024219702 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.028081038 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.024644365 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.040223651 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.105259615 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.042293092 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.046149282 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.026039966 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.02250829 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.02372643 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.2474186 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040921509 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.039900168 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022706393 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.034471961 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105224201 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036534121 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.026742948 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.026244412 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.14074464 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.228298491 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088340557 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.086387263 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022825365 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.025648795 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.123011339 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.121801121 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.030202222 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021921324 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.097738895 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.086576407 seconds)
  done (took 2.953708917 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.601036681 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.155891087 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.123081653 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082276393 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11772937 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.117628717 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.051290235 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07786102 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.106507876 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000111051 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.136000505 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.212242305 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.058336936 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 4.348179297 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.046249292 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.156080011 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.263913756 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.669781905 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 4.1177e-5 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.7172e-5 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033560212 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.011696277 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.063426046 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.141599721 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.130415564 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.201382767 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083639138 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.062208291 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.081705501 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043231303 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.002487582 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.108988036 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094692072 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001470359 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.329202129 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001662168 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000122621 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.049477237 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.031865866 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 4.4453e-5 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 5.328e-5 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.092404397 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020231151 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.138874081 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.075170837 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.168373515 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.045258341 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.089525059 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.813628881 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.000649861 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.2118e-5 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066151677 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020049599 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025068308 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.066297907 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.3716e-5 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.040525078 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.326501073 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.03320615 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1208e-5 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9366e-5 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103456429 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 6.6642e-5 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000110934 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025980124 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053658988 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.683115622 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007832287 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.054651109 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.8627e-5 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.6914e-5 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.3199e-5 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.521014271 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.000714243 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.10289616 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.01981901 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001594573 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020749179 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.6954e-5 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.061158602 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.05191677 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.052428541 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.066901578 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 8.0171e-5 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.8187e-5 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.419228434 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.812323956 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 4.6383e-5 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000661941 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.211099947 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.0859e-5 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020835251 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.000132872 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.05137143 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 3.9119e-5 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.3968e-5 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059709691 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025353953 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021081045 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.342032552 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.004392731 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.6541e-5 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.772315462 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004993479 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062490562 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.103297177 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.9587e-5 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001152749 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.6101e-5 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019883253 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 7.1493e-5 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.1162e-5 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.795e-5 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 6.4124e-5 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.6819e-5 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.7586e-5 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.3586e-5 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000605747 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5893e-5 seconds)
  done (took 26.797637682 seconds)
done (took 44.368694367 seconds)
(4/23) benchmarking "parallel"...
done (took 0.75199163 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085877103 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.04734329 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019342282 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.075838378 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.3991e-5 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.074812431 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.080667889 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.076536311 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.4124e-5 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 9.185e-6 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.3761e-5 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.079510595 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.074466812 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.8418e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.074475579 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.078108134 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.3296e-5 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.7245e-5 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.1595e-5 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.606e-6 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 8.941e-6 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.6472e-5 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 7.047e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 8.615e-6 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.074440405 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.4398e-5 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.2882e-5 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.074464831 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.4246e-5 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.074163886 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 3.0808e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1363e-5 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.1564e-5 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.074872147 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.6228e-5 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.071290867 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.6387e-5 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.5245e-5 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 9.641e-6 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4644e-5 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.0492e-5 seconds)
  done (took 1.866575437 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027708713 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039239113 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056754517 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.9866e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028995425 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039128733 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.5063e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039028244 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.058039972 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039533171 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03977303 seconds)
  done (took 1.068837627 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.036506539 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.034644866 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.060037445 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7214e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028379468 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039485631 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.9116e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03941351 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.061501002 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039528102 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039738347 seconds)
  done (took 1.077769346 seconds)
done (took 4.70213506 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.043778029 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.020762161 seconds)
  done (took 0.757639539 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.344083108 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.127143393 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.028132439 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.078772222 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.02240134 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037416325 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.051505254 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.037512059 seconds)
  done (took 5.469309639 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.071075561 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022531896 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022670041 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020607791 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020731698 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020615482 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021503333 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.020793929 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.019975876 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022009254 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021757648 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020130364 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022091146 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021696655 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020151907 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020202384 seconds)
  done (took 1.150444428 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022394995 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023296524 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021753769 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019948927 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023058887 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022086582 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023571635 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.023315058 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.022585353 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022380104 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021455572 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.024671766 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022631605 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021911092 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.024526994 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.02008647 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02301271 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021891465 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022870834 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.022690151 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.022087769 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021475169 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026030722 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.022842379 seconds)
  done (took 1.247977547 seconds)
done (took 9.324148464 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.160271248 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019448181 seconds)
  done (took 0.881476343 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.035059814 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029659325 seconds)
  done (took 0.768326827 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.033177119 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020040475 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.035247719 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.030151679 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.020327306 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.020365474 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032805073 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020243252 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020310113 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020574921 seconds)
  done (took 0.960083472 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021456172 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02176868 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021787075 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020526213 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022538504 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021062747 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021958464 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021194376 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026219337 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020164097 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023739469 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029103042 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019656195 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.029566565 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022057259 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020890372 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025016896 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019771514 seconds)
  done (took 1.115533473 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019610199 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020431803 seconds)
  done (took 0.745471907 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.01904936 seconds)
    (2/7) benchmarking "second"...
    done (took 0.02049724 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018813734 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018804698 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020799018 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.019946257 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.020780045 seconds)
  done (took 0.852846936 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.462123384 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.195159431 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.264602668 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.021293404 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.024787078 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.21678825 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020910275 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024609006 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024685857 seconds)
  done (took 1.963081687 seconds)
done (took 7.993662983 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038910897 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.13469511 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.037047632 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.544336269 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.05923942 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.02285688 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.127156778 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.083914391 seconds)
done (took 1.76897478 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.240613257 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.810596422 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.866049721 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.720919762 seconds)
  done (took 4.113478683 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.866449591 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.135129199 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.043465242 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021859483 seconds)
  done (took 1.804352085 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023332922 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029671894 seconds)
  done (took 0.774320023 seconds)
done (took 7.653241359 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.023202273 seconds)
done (took 0.742900891 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019011994 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.1277e-5 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.019024702 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.9045e-5 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 7.668e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 8.171e-6 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 7.137e-6 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 7.067e-6 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 7.163e-6 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 6.657e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.2602e-5 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.34e-6 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.774e-6 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.323e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.664e-6 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.305e-6 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 6.164e-6 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.815e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.716e-6 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.077e-6 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 6.03e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.702e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.986e-6 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.701e-6 seconds)
  done (took 0.752654384 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.019048062 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.019002937 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.7115e-5 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 7.333e-6 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 7.851e-6 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 6.832e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 6.571e-6 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.176e-5 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.649e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 6.64e-6 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.1567e-5 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 6.764e-6 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 7.058e-6 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 6.809e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.123e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 6.252e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 6.266e-6 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.039e-6 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.021e-6 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.312e-6 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 6.256e-6 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.975e-6 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.107e-6 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.833e-6 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 6.351e-6 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.329e-6 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.226e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 6.117e-6 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.033e-6 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 6.194e-6 seconds)
  done (took 0.755919472 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020203944 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015306644 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019054172 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024402086 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015431889 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019121022 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018761944 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015255088 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015855838 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019393655 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019782238 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01880374 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019791411 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.019386226 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015580683 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019165837 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019156972 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021460461 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015425123 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.01541123 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020492103 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.018803447 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015448758 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.019326463 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020053322 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.018935422 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015270477 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018929592 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.018958548 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.01889241 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.01886424 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020202396 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.018987173 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.020456271 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020368112 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020544258 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.020556424 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020078011 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019162788 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015255612 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015638968 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015250718 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.018689899 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015230649 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019627248 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.019021007 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019150485 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019070913 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015351957 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015204918 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015428556 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019596567 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019120768 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019771962 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015394175 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018963281 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015405414 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019209448 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.018968585 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015279176 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.01528272 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019575284 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019526608 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018749135 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028073517 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019478895 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019761024 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015199374 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019081399 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022396476 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020209025 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.022929064 seconds)
  done (took 2.05694315 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.018820798 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021024792 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.2357e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.0601e-5 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 7.922e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.2463e-5 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 7.915e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.285e-6 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.009e-6 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.919e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.124e-5 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.779e-6 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.439e-6 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.299e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.517e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.398e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.409e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.104e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 6.597e-6 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.107e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.321e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.6e-6 seconds)
  done (took 0.761934848 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018617178 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017837971 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.019085719 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01788896 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017674778 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.3319e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.3658e-5 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01782447 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.1064e-5 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.9968e-5 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2051e-5 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.537e-6 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.9864e-5 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.338e-6 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.877e-6 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 4.5598e-5 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.489e-6 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.6944e-5 seconds)
  done (took 0.83062376 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.019258158 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.0659e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.01846122 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.5367e-5 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 8.268e-6 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 7.209e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.587e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.816e-6 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 5.764e-6 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.594e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.0931e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.069e-6 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 5.622e-6 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.848e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.459e-6 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.673e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.671e-6 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.548e-6 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.657e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.792e-6 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.858e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.547e-6 seconds)
  done (took 0.758388436 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018915015 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.2067e-5 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.018837905 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.1468e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.529e-6 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.2232e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.463e-6 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.1126e-5 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017752992 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.5282e-5 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.5505e-5 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 7.259e-6 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.802e-5 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 7.701e-6 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.557e-6 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.376e-6 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 7.02e-6 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.381e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.477e-6 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.217e-6 seconds)
  done (took 0.777349041 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.048687249 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.0995e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 7.038e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.68e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.969e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.805e-6 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.925e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.306e-6 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.537e-6 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.755e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 8.162e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.218e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.766e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.543e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.6e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.036e-6 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.949e-6 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 9.818e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.268e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.938e-6 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.697e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.031e-6 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.548e-5 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.898e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 6.187e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.612e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.977e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.663e-6 seconds)
  done (took 0.771480959 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.019091303 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0895e-5 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018907181 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.1503e-5 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.1307e-5 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 5.812e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 6.951e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 8.185e-6 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 9.834e-6 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.557e-6 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.0341e-5 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.816e-6 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.56e-6 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 5.895e-6 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.913e-6 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 5.331e-6 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.622e-6 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.897e-6 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.107e-6 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.936e-6 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.761e-6 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.608e-6 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.855e-6 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.715e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.499e-6 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 6.149e-6 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.775e-6 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.034e-6 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.965e-6 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.647e-6 seconds)
  done (took 0.760646166 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020013602 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019766114 seconds)
  done (took 0.761728526 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019541437 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018947002 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.3047e-5 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.1834e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.963e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.587e-6 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.987e-6 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.872e-6 seconds)
  done (took 0.766567923 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021676904 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027453244 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020450778 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020542906 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020335688 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.049954165 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021044989 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021327341 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022100433 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019406925 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020630031 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021579548 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019895351 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021704454 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021395553 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020545088 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021319405 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025858869 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022066434 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019019278 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025383711 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021082662 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.026878885 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020838366 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008361551 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021451894 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026624274 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.021662732 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022233177 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.021918362 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028220997 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019021213 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.02135297 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022159647 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020295278 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020355827 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.032110937 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020287185 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021057405 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019815834 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.023759111 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026259424 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021471138 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.023274272 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021190156 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021107595 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019382068 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020271179 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019871559 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021415137 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019360965 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020919488 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.019785063 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.02039779 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.022925806 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020422766 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021219054 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022715644 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026096858 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022662229 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021614166 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.025998822 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.02227204 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020901162 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020838625 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026727685 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020165855 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021705612 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021950604 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020995729 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023089022 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019205265 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.021394375 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019729862 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.034564908 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020540182 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020068586 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019886024 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019134902 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.021167923 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021691256 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022093147 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020553384 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020784276 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.0266296 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021599408 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020216553 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021866316 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.022410689 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019579197 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019906898 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022081156 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020388388 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018734274 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021676385 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020634794 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020567385 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020181767 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020267294 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024198538 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020516863 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019216324 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020908218 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020032209 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018851085 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.02055914 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020912251 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020267663 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023228312 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021001424 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020819672 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.00314481 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003124133 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020126774 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018795456 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021725651 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019841593 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022971752 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021043875 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021041235 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026138728 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.022091744 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025908294 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019786929 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018712225 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025956669 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021619722 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.02024273 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026494033 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01966346 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.02235926 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019690988 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020063302 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021604032 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019596888 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020411407 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.01872076 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020985033 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020242044 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020697295 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.020983768 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021456911 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022168259 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020168556 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.021361435 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020246673 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022730488 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022280675 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020145881 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020848161 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019740944 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.022299174 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020623191 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021632549 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019400278 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019841935 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019873826 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020563762 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022005366 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020205601 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.022554111 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019926403 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020347334 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020199089 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019942151 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019869896 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.025621752 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020149982 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020617136 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022072101 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021527183 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.028724201 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021337737 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018804586 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019687504 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020064735 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019156033 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020012435 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021562027 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026203481 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022313732 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021735521 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019793763 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.021578381 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019943895 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.02122963 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02101522 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019887035 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020688879 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.00338966 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020317355 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020878937 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022952308 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.021666788 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021650098 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.01974565 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019826988 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019139104 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.025891927 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019767332 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020837924 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02106625 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020963004 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019740689 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020100335 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021645897 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020519137 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008075837 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025302763 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021210953 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019248784 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021344917 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020272805 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022137859 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019367141 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019735123 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020512741 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020759271 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022589546 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026248913 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019022303 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020027589 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025709069 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019843698 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020640585 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021279167 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.025480549 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020237045 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021286889 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021944198 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020416721 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020139409 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020435763 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020037259 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021040711 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020745301 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022389239 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019520723 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026412101 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019047064 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025125427 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023033521 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021177882 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019874198 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021762851 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020325274 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021185098 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019903419 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019755665 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.021906056 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018646962 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02115788 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019490114 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020267527 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021000939 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.020882693 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020091541 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021436041 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020380911 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.021883826 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020016188 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021261096 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.020957257 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019266821 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018879098 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02067587 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022184254 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.020962394 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020303144 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020287455 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020035905 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021295009 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020190875 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019862769 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020346752 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020019352 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02025999 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020382924 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019975071 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020047101 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020241312 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021531333 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026035177 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020821976 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020253944 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.020902043 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019104436 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025975365 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019544777 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020733786 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.018644465 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022596602 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.0210333 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019810818 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.022811955 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020738178 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.02101772 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022458071 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020886078 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019590624 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.021455647 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020245261 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.020757312 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.020882324 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020018726 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020646643 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020351594 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.020784179 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022006575 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021538942 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020779157 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020316275 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021687333 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020240187 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020105315 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020254831 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.020807947 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020852865 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019094501 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020266463 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022311641 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020002243 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004146012 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.01966187 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01856705 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019896715 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022285071 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019241042 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.02113194 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025821381 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018821646 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019735118 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018901925 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019562843 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025861367 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021311879 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020600799 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019964178 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018885149 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020105444 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020212818 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019602013 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020116892 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003845888 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018559264 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021778463 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.019840132 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.003470668 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019399976 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020623871 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022106322 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.02052747 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019544831 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.020396055 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019493055 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020192985 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018442601 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.019867098 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.01978357 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003386904 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.018977268 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.021776619 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.021547004 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020448256 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022160153 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.01980632 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.020756814 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025417483 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020971368 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020292317 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02173465 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019377726 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027090975 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.021733706 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020957519 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021313719 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019737874 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.020980043 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.019763962 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.020709603 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025840146 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020157397 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020294074 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019040492 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025985908 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019848757 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018614395 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020511293 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020464604 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020132381 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.021649611 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019727519 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021078157 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021631309 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022359525 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019896031 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019707243 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021240208 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.02126464 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019621448 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020370551 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02114118 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020641816 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.019905218 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022938312 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.020908897 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020197499 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020116829 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019622023 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020046459 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.021720009 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019588944 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.019867509 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019860282 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018913531 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020683636 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026822737 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021378519 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021095161 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018963223 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018594857 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025022 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019307085 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020183402 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.020715637 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.021947014 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023218911 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.02125617 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.020896095 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019722288 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020140293 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023347577 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019850858 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019222654 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019487531 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019859875 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021106352 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021189275 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020007738 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020218997 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.020498354 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.02060852 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019741703 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.019692869 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020337237 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.019882955 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022124814 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.020991332 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.020858265 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020087718 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018908593 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003093745 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.026113272 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.02121703 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021391662 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019755737 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022653253 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021263428 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020266864 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020577909 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019182705 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020912084 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.021681597 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019182872 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018950709 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.019797126 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019505955 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020713188 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021346194 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.01980294 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018835582 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.020876496 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020441818 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.02080973 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020007551 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019474338 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019569465 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018834994 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021908799 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.0188678 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019704785 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.019828202 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019801369 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.024855932 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.02066539 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025929443 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019636894 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.019657272 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018909215 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021367866 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019166164 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019432965 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.022375768 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018535056 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025361918 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.020841942 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022106461 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018857529 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.02015925 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.020388955 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.025418788 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0211413 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021013129 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020093977 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021203337 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019480044 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021030615 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018868733 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018351384 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.020552447 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020492349 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.022561798 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018715854 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.020855738 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.019807522 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.020366816 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.020356898 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019469565 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01981222 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020271452 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021434451 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019108493 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020459451 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020072692 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025387627 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019721574 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022171124 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021175548 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02107813 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02466217 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021814855 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.020315539 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019724327 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.019850617 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020443757 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019773842 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020500971 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019985272 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027053064 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020360831 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019583639 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022044676 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021896566 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019542342 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020736241 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019127699 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.020810147 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019665062 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.021360937 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020342006 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019491607 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.019847446 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020050454 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01839872 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019084632 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003540755 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021195487 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.00393842 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.01937829 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.022547522 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019563323 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.020646181 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022082706 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020366156 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019607787 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.018619552 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019638194 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.024609724 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025496552 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.004207286 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020486972 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020220498 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021010957 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018214836 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.020940498 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.020950011 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020783551 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.018734433 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01952027 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.024975408 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025783572 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.019765595 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.007934628 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.020973267 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020097964 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026751229 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.021695442 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019602111 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.020810605 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019081784 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003664829 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018362062 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019615852 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02184955 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018521976 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019358526 seconds)
  done (took 13.054535511 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.019254862 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.2935e-5 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.714e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.22e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.001e-6 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.828e-6 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.685e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.033e-6 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.945e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.734e-6 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 8.662e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.819e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.663e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.907e-6 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.638e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.884e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.64e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.575e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.499e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.132e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.773e-6 seconds)
  done (took 0.80906486 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020362574 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.018807974 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.5285e-5 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.247e-5 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 7.23e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 6.956e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 7.21e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.283e-6 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.739e-6 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.526e-6 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.0999e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.301e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.606e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 6.392e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.469e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.567e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.247e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.434e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 6.325e-6 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.952e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.465e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.387e-6 seconds)
  done (took 0.812791117 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020440771 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.019988129 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.0208046 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.018906107 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.019047777 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019663636 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.018701974 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019707462 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019948075 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019412479 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.020713464 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019648286 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.019010247 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020593867 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.018692006 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019448427 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.033622033 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.0197577 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.019801843 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.018913 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020341363 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.020400049 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.018793969 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.019241554 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019872827 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019572134 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.018613233 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020450756 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.019724209 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.01928821 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019655181 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.018443402 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.020628922 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.020412407 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019738053 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019547716 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.019948464 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.019664415 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.018864345 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.018801291 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.020570398 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019865201 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.019808994 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020186776 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.02050256 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.018833589 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018345654 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.020961553 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.019271209 seconds)
  done (took 1.753062506 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025570749 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.010279451 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.026192537 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.010902497 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 3.014e-5 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 7.305e-6 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.789e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.011433689 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 3.1955e-5 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.4623e-5 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.1007e-5 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.7246e-5 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.0132e-5 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 7.375e-6 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.1848e-5 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.118e-6 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.47e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.205e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 7.484e-6 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.713e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.172e-6 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 6.05e-6 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.18e-6 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.819e-6 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.312e-6 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.062e-6 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.964e-6 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.901e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.744e-6 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.963e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 5.975e-6 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.115e-6 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.101e-6 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 6.372e-6 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.593e-6 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.996e-6 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.33e-6 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.287e-6 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.303e-6 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 6.066e-6 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.883e-6 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.174e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.1359e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.019e-6 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.56e-6 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.304e-6 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.382e-6 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.957e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.723e-6 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.879e-6 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.031e-6 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.744e-6 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.168e-6 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.979e-6 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.415e-6 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 5.986e-6 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.106e-6 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 8.546e-6 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.681e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 7.319e-6 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.762e-6 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.406e-6 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.15e-6 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.081e-6 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.14e-6 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 5.571e-6 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.996e-6 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.162e-6 seconds)
  done (took 0.995070036 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019632378 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.0351e-5 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 7.082e-6 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.384e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.627e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.621e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.841e-6 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.614e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.639e-6 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.174e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 9.433e-6 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.019214126 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.441e-5 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 8.61e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 7.827e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 7.282e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.877e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.651e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 6.797e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.527e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 6.471e-6 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 6.538e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.878e-6 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 6.656e-6 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 7.205e-6 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 6.61e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.49e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 6.355e-6 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.608e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 6.317e-6 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.488e-6 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 6.683e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 7.15e-6 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 6.801e-6 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 6.895e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 6.597e-6 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 6.344e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.263e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 6.742e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.665e-6 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 6.495e-6 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.411e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.8316e-5 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 6.736e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.579e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 6.562e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 6.517e-6 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 6.677e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.633e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.289e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 6.624e-6 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.435e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.626e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.354e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.302e-6 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 6.865e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.546e-6 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.42e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.38e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.948e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.3e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 6.361e-6 seconds)
  done (took 0.816445599 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018547078 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0276e-5 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.01867149 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.0118e-5 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.4839e-5 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.355e-6 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.96e-6 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 5.813e-6 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.076e-6 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 5.654e-6 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0899e-5 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.859e-6 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.794e-6 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.676e-6 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.984e-6 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.683e-6 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.541e-6 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.878e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.463e-6 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.981e-6 seconds)
  done (took 0.813449627 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.02116177 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020515374 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.606e-5 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 8.526e-6 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 8.02e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 7.631e-6 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 7.649e-6 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.07e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.188e-6 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.643e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.1109e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.319e-6 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.957e-6 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 6.752e-6 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 6.812e-6 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.349e-6 seconds)
  done (took 0.817862667 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019043617 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018259096 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.021897097 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.1558e-5 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018707364 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.019898347 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.5888e-5 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.022943379 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.4667e-5 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.022370681 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.7415e-5 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 9.495e-6 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018418862 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.6296e-5 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020332493 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.3113e-5 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.0827e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 8.804e-6 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 7.154e-6 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.021773688 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.4068e-5 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.1626e-5 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.039e-5 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020042861 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.4859e-5 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.744e-6 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 8.325e-6 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.1107e-5 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.020417716 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.7232e-5 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 9.73e-6 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 8.778e-6 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.932e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.338e-6 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.1624e-5 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 6.785e-6 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.269e-6 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 6.606e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 8.816e-6 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 6.718e-6 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 8.158e-6 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.66e-6 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.5638e-5 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.457e-6 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 7.569e-6 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 6.947e-6 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 6.895e-6 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 6.755e-6 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 9.889e-6 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 6.22e-6 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.511e-6 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 7.021e-6 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 6.298e-6 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.433e-6 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 6.085e-6 seconds)
  done (took 1.021771095 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018606793 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0969e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018647403 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.3594e-5 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.431e-6 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.2729e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 6.61e-6 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017615285 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.993e-6 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0279e-5 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.2092e-5 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.5817e-5 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.578e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 7.067e-6 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.64e-6 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.451e-6 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.048e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.367e-6 seconds)
  done (took 0.831476329 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019056518 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.1401e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020287952 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.3809e-5 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.0364e-5 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 7.809e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.489e-6 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 6.091e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.601e-6 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.941e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0931e-5 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 6.256e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.845e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.794e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.484e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.918e-6 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.64e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.679e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.813e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.736e-6 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.543e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.523e-6 seconds)
  done (took 0.815837797 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.025657487 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.044664971 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.043543054 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.040440061 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.03548819 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.041181225 seconds)
  done (took 1.007927711 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018894285 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018519888 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.1051e-5 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 8.012e-6 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.158e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.146e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.477e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.518e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.623e-6 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.787e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 9.341e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.398e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.631e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.546e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.582e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.445e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.342e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.019e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.221e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.343e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.887e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.073e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.319e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.129e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.357e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.18e-6 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.374e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.525e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.116e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.485e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.395e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.578e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.246e-6 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.35e-6 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.402e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.589e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.026e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.398e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.223e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.196e-6 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 7.536e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 8.383e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.5766e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.818e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.449e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.458e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.446e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.617e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.537e-6 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.000106956 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.05e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.072e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.015e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.634e-6 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.049e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.503e-6 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.515e-6 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.641e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.834e-6 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.437e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.704e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.282e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.752e-6 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.398e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.107e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.132e-6 seconds)
  done (took 0.815509064 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019135664 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.6706e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 7.271e-6 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.279e-6 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.442e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.25e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.119e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.321e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.479e-6 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.344e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018273919 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.3025e-5 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.813e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.593e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.708e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.438e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.661e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.261e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.403e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 6.58e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.531e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.032e-6 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.183e-6 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.427e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.106e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.916e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.531e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.63e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.542e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.79e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.535e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.603e-6 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.331e-6 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1808e-5 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.529e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.599e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.623e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.919e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.415e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.561e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.215e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.744e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.6256e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.88e-6 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.956e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.64e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.919e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.039e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.6e-6 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.157e-6 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.786e-6 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.389e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.41e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.558e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.272e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.577e-6 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.338e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.304e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.169e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.609e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.316e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.186e-6 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.203e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.546e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.464e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.176e-6 seconds)
  done (took 0.813908427 seconds)
done (took 35.65762809 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.514873768 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.465076183 seconds)
  done (took 1.75136614 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.025124375 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.196348207 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.17357561 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.284031484 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.320473127 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.773317545 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.696327516 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 8.9352e-5 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.094893885 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000141965 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000203418 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000179481 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000194956 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.044814314 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.286216704 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.109770425 seconds)
  done (took 3.795200462 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.12218261 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.133396037 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.123390448 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.6062e-5 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.094647014 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 4.2145e-5 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.055229124 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.4528e-5 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.8902e-5 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 5.9846e-5 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106264822 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.136301072 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.3633e-5 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.0088e-5 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 4.6922e-5 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.76e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.2257e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.5502e-5 seconds)
  done (took 1.550522837 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.213397494 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.024832718 seconds)
  done (took 1.020146427 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.594330559 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.178649462 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.154526239 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.377349966 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.147338967 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.786437379 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.109666504 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.127985459 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.097094977 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.111295195 seconds)
  done (took 3.469175707 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.07422262 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.062045651 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.273805101 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.064395736 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.053304854 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.4276e-5 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.03820963 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.026047578 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.039147879 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.03647561 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.086366512 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.000113857 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.051777036 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.082678252 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.028633881 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.075522026 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.049135747 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.025989741 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.05044558 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.1826e-5 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.1562e-5 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.4707e-5 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.187424127 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000855585 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002729157 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.2597e-5 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.9787e-5 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.3969e-5 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 7.582e-6 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.1131e-5 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000765714 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001901951 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.0325e-5 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.013154325 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.6444e-5 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.0832e-5 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000130163 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.7898e-5 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.5717e-5 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.4729e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.00075979 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.6141e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001088585 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.5987e-5 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.6165e-5 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.3159e-5 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000868332 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000760326 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000716752 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000753854 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000977344 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.2314e-5 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000745295 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000756445 seconds)
  done (took 2.117892236 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.283088118 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.281324282 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.032141352 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081650775 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.080980319 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.031160425 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101633272 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.073611767 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.091462361 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.032188381 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.030305732 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.4889e-5 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.02944051 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012727005 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.09027953 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073712796 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.033338499 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.030925598 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077496035 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.070049518 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.3979e-5 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.082920877 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.082570901 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.072812883 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.978e-5 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.032452949 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.0263e-5 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.4767e-5 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001356531 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002819529 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.5185e-5 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.029247804 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013894429 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002252605 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.4688e-5 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.9145e-5 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.1302e-5 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002197456 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.029450856 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002750185 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000913211 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000125621 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 8.3901e-5 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000139427 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.031460164 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000105381 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000742271 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.00254744 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000747592 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000103579 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000186673 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000153374 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 5.417e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001921382 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.027364831 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.00340933 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002574036 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000109026 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.4281e-5 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.032944791 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005331698 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007964069 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002305905 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.031491682 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002529566 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.8929e-5 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005644741 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009789037 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.3977e-5 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.4515e-5 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.8707e-5 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 9.8777e-5 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 6.6434e-5 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001970121 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.002995196 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000107735 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.1171e-5 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000109985 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006743486 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002639358 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.347e-5 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002632657 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000122578 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.00018165 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000129685 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.0875e-5 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001447895 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.004507571 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 7.2736e-5 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 9.682e-5 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000191156 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000158915 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 4.2976e-5 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.003001982 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.002653649 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002684834 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.029383564 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000113362 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002055812 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000687497 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000111681 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000676345 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.2054e-5 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000217712 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.3097e-5 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001833828 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000818015 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008129489 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.00012473 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.0956e-5 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002042193 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008358412 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.8869e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.00042602 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005318679 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001475701 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 6.3716e-5 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013492745 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000131433 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003888586 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000143025 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002489874 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000167299 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001527026 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.1754e-5 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000193356 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000156313 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001129018 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000215979 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000116959 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.755e-5 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0002259 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001851699 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.008379236 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000133135 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002679469 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.00280331 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000178047 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001991269 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 9.0303e-5 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004455266 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000252994 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.4326e-5 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.5519e-5 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0059026 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000246247 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 8.7018e-5 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.2833e-5 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007669355 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.3397e-5 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008731063 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000396582 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.00010693 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005548981 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007731846 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001415706 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.011971927 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000108297 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000108365 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.8055e-5 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.7951e-5 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000786989 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001873511 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.7067e-5 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.6839e-5 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000632617 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001147443 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.00015471 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002236791 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001464382 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.00281724 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000202924 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000200606 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.022582573 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004675488 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.00037304 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.00167911 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003490513 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000198988 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001261526 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001859857 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000120761 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011333293 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.411e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.00949098 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001624383 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000743981 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002687889 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002146642 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004333425 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009825026 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009639384 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00023031 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 6.7509e-5 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000513564 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000167296 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000110032 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000184597 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000153257 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.491e-5 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.0142362 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00024021 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003766041 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.9642e-5 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002795958 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.2994e-5 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000135291 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.016035313 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000333235 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000201213 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000332953 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3149e-5 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.001970082 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008931967 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001629115 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000172033 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.5942e-5 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.001920269 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001739616 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.6295e-5 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000115598 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000110451 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001402179 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001640825 seconds)
  done (took 3.206922455 seconds)
done (took 17.690281167 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.095215759 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.054106261 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.05921747 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.034332454 seconds)
done (took 1.032227732 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.116677563 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.068990386 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.217915213 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090387287 seconds)
  done (took 1.279948918 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.059289787 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.1804e-5 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.041760717 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.047434444 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.4268e-5 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.032817872 seconds)
  done (took 0.982468454 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.273033402 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.161488795 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.231324478 seconds)
  done (took 1.466836166 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.112989397 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.156519519 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.258273578 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.150845882 seconds)
  done (took 1.483585672 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.036737829 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029551208 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.023581607 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.031941254 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.025518378 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.020282086 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.095613212 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.020433412 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.028203806 seconds)
  done (took 1.171118034 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.05595381 seconds)
done (took 7.232995144 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.165986946 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.028521873 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.029825224 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026158383 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.10264178 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.029589386 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 7.7754e-5 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.110206059 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.032201565 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.038407855 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028197544 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.107059445 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.181012672 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.144120132 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043909721 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.038072324 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.060574221 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.030266627 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.039433963 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.111217199 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.027917246 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.027639282 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024611194 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.221585746 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.105475759 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029690252 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.121500885 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028397896 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.840691126 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.026876159 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.166465865 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.074817322 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.165288683 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.179669802 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.141391592 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.027116452 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.097939818 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.037664872 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.19257224 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.099153529 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029276082 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 4.4846e-5 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.03676565 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.042775552 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.9818e-5 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.128066581 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031234185 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.044076664 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.087378643 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.163212755 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.144021981 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.024728474 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024107329 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.139627716 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026304968 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.1819e-5 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028145607 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.029756594 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026900431 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.05619736 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.024960148 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.03812076 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.2272e-5 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.103373588 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.6839e-5 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.086851412 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000837074 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.037076022 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.036803104 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.17177908 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.090370065 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026180813 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03598424 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.026909102 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.138504949 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039456378 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026397247 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.036642333 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029397858 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.029236236 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.4468e-5 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.9308e-5 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.031919379 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 9.9567e-5 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.032524971 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.02644722 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.8322e-5 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.08009441 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.047242763 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.056436035 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.029162313 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.217267106 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.089028371 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.02601809 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.040238288 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.039853877 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.025301013 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.02778035 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025362565 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.5041e-5 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.030731473 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.17238844 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 4.1704e-5 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033917571 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 3.9099e-5 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045841017 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032646012 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030593637 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036601276 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.1501e-5 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029066384 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034319421 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.143636294 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.146890852 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.071256519 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.001919628 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.169396036 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.00229942 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.039449597 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002444705 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 8.0411e-5 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.158753605 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.4842e-5 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 8.8889e-5 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.02558302 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.4757e-5 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 9.9639e-5 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.142074283 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.16274113 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.6973e-5 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.023935948 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.001377154 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.119737409 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 3.7459e-5 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002314016 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000862554 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 6.4195e-5 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.191484829 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.02826125 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027551624 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.031781219 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.0e-5 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029592561 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.029702643 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.23883205 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.029799925 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.10048605 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.036103723 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.030172375 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.032122512 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.046749213 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.073448352 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.9881e-5 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028707314 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.028743793 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.117992055 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028259873 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.103124576 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.002696234 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.038589571 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.249199157 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.090692507 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032777154 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.226729706 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 8.5969e-5 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.026646388 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 6.8062e-5 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.112286332 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.045040905 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027956035 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02687642 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027447464 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 3.9174e-5 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110018519 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034235988 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.8662e-5 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.250541788 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 6.6041e-5 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.218669576 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.090247558 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.102093557 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.02674213 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.033353746 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.087997423 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041543302 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.04412671 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.03920759 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.5298e-5 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.032337478 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000110631 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 6.3901e-5 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.02823279 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036945122 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.027719685 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000108999 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.8405e-5 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029826542 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.029732287 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029949379 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025256205 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.033203139 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.439801909 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.4837e-5 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.02814737 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023933815 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031509381 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.281779684 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.029801036 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.079177304 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038458771 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035324985 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.029033189 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000101329 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.031091388 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.167156105 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020098617 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.034134668 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070944006 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.000100614 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.092519172 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001712276 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 7.4137e-5 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037494019 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.031190722 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.032067904 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027913506 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 9.5472e-5 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027594844 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032199672 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.002226602 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.037390421 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030264657 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029893918 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.7168e-5 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.5306e-5 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038063747 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.15106028 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 9.3624e-5 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.144579351 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.18133797 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.078572074 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 6.6058e-5 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.035241195 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.035059613 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 8.2564e-5 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.102800107 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.0001082 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065911897 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.173845984 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031738599 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.034811479 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.034360429 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002483437 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.088939454 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036093134 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029625275 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 7.572e-5 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.086456295 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.030283884 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.101379665 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.07798859 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027194538 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.518317278 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.037981351 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030554516 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.000965506 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027903738 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.036939684 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.4993e-5 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001849259 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.031897931 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.096579527 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.7139e-5 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000101334 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.163e-5 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 8.89e-5 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.5448e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.040938569 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000207848 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.027694897 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 3.5556e-5 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 7.8868e-5 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033008262 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.036566677 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.5274e-5 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027698547 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000127405 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.7277e-5 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.5266e-5 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.035077849 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.089765022 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.099273279 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.2399e-5 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031975266 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031204312 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035485345 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.064073578 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.0562e-5 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.128206542 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.707e-5 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.026804323 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.039926744 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.1108e-5 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.028858118 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 6.5823e-5 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 6.0538e-5 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036825188 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 4.2585e-5 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001777159 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.556e-5 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 9.6236e-5 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.1653e-5 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000209763 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.000120909 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.2595e-5 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.001673095 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.7239e-5 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 7.4831e-5 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 3.1479e-5 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 3.6259e-5 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027224097 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.029053536 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.02729314 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000107416 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.032659928 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.911429725 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001520066 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000194031 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.037525375 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.6324e-5 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.0548e-5 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 8.5256e-5 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.00246856 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 6.3196e-5 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038137196 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 8.8294e-5 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029191271 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 9.7038e-5 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.02880004 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 8.7958e-5 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.043084744 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.4276e-5 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.025990824 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001177992 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.028541492 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.028963873 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.028926405 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 7.3868e-5 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.026860796 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037358257 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.095271525 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029201994 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.03671327 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.033439222 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028998369 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 3.9635e-5 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.6089e-5 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.254965467 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.079374241 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.039613909 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.037580307 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.6462e-5 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.026238383 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.2442e-5 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001014817 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.6757e-5 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.041009519 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.8625e-5 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024047474 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 6.9359e-5 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.2754e-5 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 6.1239e-5 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065115833 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.47e-5 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 7.6761e-5 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.562e-5 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.028953698 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.024440378 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.03333778 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 3.996e-5 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.04190424 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.001150714 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000723732 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.034244518 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.2799e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.030926657 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03596242 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.028724567 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.045230062 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.029354545 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.3431e-5 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.061401392 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 4.1445e-5 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 7.1705e-5 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.02968732 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.032913986 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.1134e-5 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033968186 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.033333648 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.030551774 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.201582657 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032755657 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.00169045 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 6.6064e-5 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.025870612 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03057144 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.4854e-5 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.064239201 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.032190607 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.024441243 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.517e-5 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002203178 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033720645 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.2887e-5 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 4.6939e-5 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.256e-5 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.040608424 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.040659793 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.000992219 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.5201e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.023081999 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.1873e-5 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 4.8382e-5 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.913486435 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.6219e-5 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.028885623 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.311232086 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000139031 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.7947e-5 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.9374e-5 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.2285e-5 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.90137815 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.0362e-5 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.025646571 seconds)
  done (took 23.174975887 seconds)
done (took 23.98737298 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.11221439 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.030943637 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.0848386 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.036157632 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.027106495 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032654593 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.037345606 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.060290879 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.109119 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.053953679 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.125066224 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.04592321 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.039715835 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.099671202 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.030354388 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.8731e-5 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.096646624 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.047799589 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.086381249 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.057706362 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039706619 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.047484008 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.085977168 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.047926753 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.065964768 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.091767599 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.055034669 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.088553493 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.8407e-5 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.055989116 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.033495942 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.026389862 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.035076497 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.052579263 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.038236997 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.3735e-5 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.075219192 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.027933279 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.047571187 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.068804458 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.043869881 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.050773135 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.030722996 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.070299673 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.060303258 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.057493072 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.038728127 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.070934494 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.065758238 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.031157857 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.045836813 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.050207608 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.03289921 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.062893881 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.062400058 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.069058784 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.05888246 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.062088651 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.031067738 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.059531227 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.2159e-5 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.062560762 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.7339e-5 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.045181241 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032535581 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.068173945 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.065989265 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.063702039 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 3.1586e-5 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.057079389 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.060454646 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.0508307 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.060344896 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.4697e-5 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.06770806 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.06309465 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.065869943 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.026702674 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.068928795 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.066328307 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.043767375 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028472013 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.052476716 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.070554963 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 3.1156e-5 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.316e-5 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.026675302 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.7275e-5 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.067657714 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.1481e-5 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7143e-5 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.063804751 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.06775642 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.1533e-5 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.7559e-5 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.050890784 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.7666e-5 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.066962946 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.075483786 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 3.1137e-5 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047235534 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.060444335 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.053438355 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.059413695 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.065261536 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.059798798 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 4.1639e-5 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.029943134 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.037448825 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 3.3145e-5 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.026312778 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.056871518 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.054543259 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.059449347 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.8312e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.903e-5 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6695e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.5723e-5 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.2387e-5 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.2818e-5 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4945e-5 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.3104e-5 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.5144e-5 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.1615e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.057368932 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.054073539 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031905192 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.02794983 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.056352098 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 3.5905e-5 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.4502e-5 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.063684711 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.051384068 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.717e-5 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 3.9713e-5 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.060002163 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.3609e-5 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.057360693 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.6607e-5 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.045684342 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.8299e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.1328e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.059180257 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.030455711 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.9624e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.051666509 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.054219332 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 3.0797e-5 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.6381e-5 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.4203e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.5006e-5 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.049247052 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4609e-5 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.055086025 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.047581458 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.067250277 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.6166e-5 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.6266e-5 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.4741e-5 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.7238e-5 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.052646468 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.064264283 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.060290484 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 3.2437e-5 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.068254169 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 3.888e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 9.4719e-5 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.5164e-5 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009654339 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.05365602 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.03421139 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 3.4595e-5 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.052478651 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.058347262 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.072747189 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.1666e-5 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028296678 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.1442e-5 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.053064217 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 3.4345e-5 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.050891289 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.055894715 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.030661226 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 3.8223e-5 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.055670238 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.057625484 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 4.9311e-5 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.9562e-5 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.060659402 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.0477e-5 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.0044e-5 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.9809e-5 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.030453425 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.037013631 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.1921e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 3.2878e-5 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3502e-5 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.4691e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.062126588 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.5166e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.2243e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.0456e-5 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.0457e-5 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.5952e-5 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.5464e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.9558e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.011e-5 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.3993e-5 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.06672254 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.027855754 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.3389e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.0438e-5 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.6851e-5 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.067399635 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.067280309 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.7138e-5 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.9037e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6924e-5 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.9267e-5 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.8989e-5 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.7541e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.285e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.169e-5 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.7908e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.058761583 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.2448e-5 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 3.144e-5 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.6012e-5 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.6457e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.9224e-5 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.0685e-5 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 3.9175e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.053175152 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 3.8435e-5 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.683e-5 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.5329e-5 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.1446e-5 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.8912e-5 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.4983e-5 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.4374e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.6273e-5 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.4788e-5 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.026402893 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.009581903 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 3.003e-5 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.8502e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.2821e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.054021495 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.052780621 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.0223e-5 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.9332e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.7696e-5 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.957e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.057878407 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.034953252 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.050576379 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.8506e-5 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.053047772 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.8662e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.4681e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.4237e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.6836e-5 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.0485e-5 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.057726479 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.044090648 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.6182e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.5967e-5 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.6787e-5 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.9966e-5 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.859e-5 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.067513191 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.1775e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.06001162 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.4364e-5 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.070748174 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.031387268 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.030390926 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.9897e-5 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.8816e-5 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.028041457 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.026591029 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 3.0205e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.3379e-5 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.9705e-5 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.2268e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.9464e-5 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.052474924 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.7494e-5 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.6868e-5 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.8562e-5 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.7336e-5 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.339e-5 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.053045892 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.9471e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.057012153 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.8047e-5 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.0899e-5 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.8458e-5 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.8224e-5 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6215e-5 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.8331e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.5192e-5 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.774e-5 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.8654e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.058898515 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.027224785 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 3.1722e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.2846e-5 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.7092e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.3557e-5 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.1118e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.9817e-5 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.0745e-5 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.1066e-5 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.052961349 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.4454e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.3269e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.7723e-5 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.7939e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.8364e-5 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.052476451 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.2941e-5 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.4445e-5 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.055610744 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 3.9895e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.059145782 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.4094e-5 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.4935e-5 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.7968e-5 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.0493972 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.5152e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.2746e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7498e-5 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.8333e-5 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.0381e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.9761e-5 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.7859e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.9528e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.076635847 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 3.5976e-5 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.044450587 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.2159e-5 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.0463e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.027523957 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.5198e-5 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.5595e-5 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032449709 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.9653e-5 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.2806e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.3389e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.1017e-5 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.9542e-5 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 3.0161e-5 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.1086e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.2914e-5 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056076576 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 3.1808e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.1004e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.2973e-5 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.3929e-5 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.5105e-5 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.404e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.3544e-5 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.4006e-5 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.7646e-5 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.801e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.7599e-5 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.05390211 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.7524e-5 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.3159e-5 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.8853e-5 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.5261e-5 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.1208e-5 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.4669e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.0615e-5 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.068837105 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.8758e-5 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.0958e-5 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.9082e-5 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.7572e-5 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.934e-5 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032224408 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 4.0124e-5 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.9759e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.2392e-5 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.4986e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0866e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.5843e-5 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.8815e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.4371e-5 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.8616e-5 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.4672e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.058523254 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.0508e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2942e-5 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.973e-5 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.053069309 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 4.127e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.8435e-5 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.048083443 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009954068 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 3.3589e-5 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.5459e-5 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009707965 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 3.4665e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.7436e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.981e-5 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.9665e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.9193e-5 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.866e-5 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.4198e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9725e-5 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9135e-5 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.1906e-5 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 3.8336e-5 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 4.1217e-5 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.413e-5 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.6823e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.8046e-5 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.3399e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.3358e-5 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.288e-5 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.2884e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.2795e-5 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.2257e-5 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.2792e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.9355e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.5968e-5 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.6948e-5 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.899e-5 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.0304607 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.8324e-5 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8536e-5 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 4.8492e-5 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.9925e-5 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.6635e-5 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.0588e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.5304e-5 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.4498e-5 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.9147e-5 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.0029e-5 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.9256e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.4243e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.3042e-5 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.8053e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.945e-5 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.239e-5 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.4586e-5 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6842e-5 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.4332e-5 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.6044e-5 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.0921e-5 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.3245e-5 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.2058e-5 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.9526e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.0925e-5 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.8436e-5 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.069938977 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.3301e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.4834e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.876e-5 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.5032e-5 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.048633078 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.6529e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.4037e-5 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.8598e-5 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.8921e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.0795e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.055668458 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.827e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.062377625 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.0354e-5 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.6522e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.3433e-5 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.594e-5 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.4119e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.4258e-5 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.8372e-5 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.4719e-5 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03183699 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.8666e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.6487e-5 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.6341e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.5828e-5 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.5836e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.8123e-5 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.2008e-5 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.7394e-5 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.8138e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6421e-5 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.3639e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.23e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7069e-5 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.9601e-5 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8958e-5 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.034254508 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.5166e-5 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.8989e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 5.7451e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.779e-5 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.8747e-5 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.3681e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.6262e-5 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.7956e-5 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.5131e-5 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.9798e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.9233e-5 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.3449e-5 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.213e-5 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.6266e-5 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.8583e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.7411e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.4301e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5314e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.8548e-5 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.3034e-5 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.3209e-5 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 5.514e-5 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.3263e-5 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.1357e-5 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.5434e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.2519e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5169e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.1231e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.178e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.8601e-5 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.6345e-5 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.2376e-5 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.0002e-5 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.3138e-5 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.4132e-5 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.8637e-5 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.8224e-5 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.504e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.1249e-5 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.5309e-5 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.3174e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.2794e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7989e-5 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.7321e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.046e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.6364e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.2422e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3437e-5 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.5227e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.8333e-5 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 9.879e-6 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.5133e-5 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.3535e-5 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.9941e-5 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.5998e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.3782e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8233e-5 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.9431e-5 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.4466e-5 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.5947e-5 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.503e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.5397e-5 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.5588e-5 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.3846e-5 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.8441e-5 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.6317e-5 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.593e-5 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.2063e-5 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.066e-5 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1932e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.2263e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.2179e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.693e-5 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7065e-5 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.2336e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4108e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.4218e-5 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.3393e-5 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.238e-5 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.1455e-5 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.0954e-5 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.4693e-5 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.8112e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.1739e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.6708e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.312e-5 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.7085e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.5489e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.5838e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.8793e-5 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.1164e-5 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.71e-5 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.3212e-5 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.9911e-5 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.1331e-5 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.2774e-5 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.8214e-5 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.0559e-5 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.5171e-5 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.2957e-5 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.7659e-5 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.571e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.5202e-5 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.8472e-5 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.0548e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.8295e-5 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.6771e-5 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.0603e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 9.953e-6 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.9786e-5 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.2197e-5 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 8.956e-6 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.3515e-5 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.7168e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.6561e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.2088e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 8.954e-6 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.6182e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.9547e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.5093e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.5566e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.073e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.5127e-5 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.0249e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.6642e-5 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.4729e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.5164e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 7.932e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.7076e-5 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.0536e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.6693e-5 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.812e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.1872e-5 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.0259e-5 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.126e-5 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 8.133e-6 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.7191e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.1103e-5 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.524e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 9.309e-6 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.3679e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.5252e-5 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5525e-5 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.487e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.3276e-5 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.244e-5 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.4459e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.5345e-5 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.511e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.3475e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.2532e-5 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.2655e-5 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.6417e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.3776e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.4213e-5 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 9.762e-6 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.0771e-5 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.2862e-5 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.5174e-5 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.4002e-5 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 9.744e-6 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.0931e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.0648e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.1257e-5 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.213e-5 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.2522e-5 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.4637e-5 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.3613e-5 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.0998e-5 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.4751e-5 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 3.9331e-5 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.6331e-5 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.1651e-5 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 8.989e-6 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.0865e-5 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.3488e-5 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.3366e-5 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.4257e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.3169e-5 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.3646e-5 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.3077e-5 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.7899e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.6548e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.8109e-5 seconds)
done (took 10.8796162 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.041469973 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.052265626 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.045544435 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.031765454 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.034065546 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034536163 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024140818 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.03278038 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.024549986 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.035901877 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04052058 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040448247 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.038884166 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040557981 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 3.0939e-5 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.029814775 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.876e-5 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.037142187 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.032882619 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.046436275 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.047372023 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.6609e-5 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.023491465 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.036155007 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.00570492 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.035358521 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.045787724 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.9157e-5 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.035712958 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.030044583 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047271541 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 6.0329e-5 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.9783e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.032219649 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.030750121 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.024733364 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.4302e-5 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.3685e-5 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.028637491 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.8144e-5 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.046593278 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.033007283 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001109056 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001069252 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.2105e-5 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.032475763 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.713e-5 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.0687e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005602138 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.1016e-5 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 6.3843e-5 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024323397 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.8359e-5 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.031955658 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.6117e-5 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.4816e-5 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 9.347e-6 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 9.64e-6 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.87e-5 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 9.324e-6 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.8798e-5 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 9.6453e-5 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.8596e-5 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.024383488 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001074587 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.2277e-5 seconds)
  done (took 2.215974238 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040050895 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.071900131 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034217209 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034421661 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020366865 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021594315 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021502262 seconds)
  done (took 1.178281019 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022360454 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024678446 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034225827 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033875502 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.02276411 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.025633109 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021862192 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051361681 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.056862389 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024958351 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.040155683 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034040933 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.032234479 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03057749 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021221788 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.036088065 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021999636 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025838016 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035108501 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.034557522 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022348783 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.048670959 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033227056 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022468141 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.032319149 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.028425099 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024919408 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063118674 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022880523 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021751872 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021222358 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04950448 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.02402784 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.032037335 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021001236 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020222086 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022315199 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020692849 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022291618 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024985899 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021960601 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024490788 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023981012 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022332032 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022392897 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021996585 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02229591 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02144562 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021625608 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024365292 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032304476 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023921625 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025575652 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.031850198 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.030545021 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024533805 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025688517 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022307733 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.02433198 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031912207 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023418013 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034180165 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033650672 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021845331 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033933387 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030448799 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023976244 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021827846 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021653398 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029829608 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022337775 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033521529 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.02419873 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023463898 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019284211 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029921217 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022085575 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022079061 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022097455 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.030721841 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021806486 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021534634 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021959879 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021768574 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022797903 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021174667 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020967514 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039590754 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049080876 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023749971 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024577736 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021693439 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031564159 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023335145 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025639016 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034878835 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.03208428 seconds)
  done (took 3.625839235 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.032279149 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022143544 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021714004 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.019803407 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020027335 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.019876356 seconds)
  done (took 1.079217865 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.055492475 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020151587 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.020024971 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0995e-5 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.037731072 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.021789176 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021967848 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.4648e-5 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.033767936 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030092342 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.021803857 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.023122121 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022662445 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.9746e-5 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.02189023 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.029692253 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.02200571 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.022623854 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029561824 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4097e-5 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.026320919 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.4563e-5 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.0736e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.025138331 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.5853e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.029586564 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026211405 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030027203 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.02962597 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.6876e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.1094e-5 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.6799e-5 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.3311e-5 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 8.662e-6 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021921129 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.6272e-5 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.691e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.0616e-5 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02174113 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.2219e-5 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.023188111 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.0791e-5 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.021392508 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.2605e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.9962e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.301e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.0471e-5 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026243399 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021887935 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.3527e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.0843e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.0328e-5 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.1021e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 6.572e-6 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.8203e-5 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4088e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 6.359e-6 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.022076597 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.0211e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.5488e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.1035e-5 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.0637e-5 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.3687e-5 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 9.164e-6 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.022333177 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.2319e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.5919e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.2118e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 8.249e-6 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.1212e-5 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 9.879e-6 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 8.399e-6 seconds)
  done (took 1.722909268 seconds)
done (took 10.772962272 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 12.115650726 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.128296686 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.342707643 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.062066232 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.130901483 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 2.215425255 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.042708491 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.296565772 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.146396037 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.089961698 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.044249023 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.402537306 seconds)
  done (took 17.955088706 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 15.664086598 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.232642462 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.633056326 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.357210427 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 3.737030468 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.154989563 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.198295437 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.622831075 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.355509767 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.232515673 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.077595371 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.278123909 seconds)
  done (took 24.753366962 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.634664671 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.228537052 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.518527185 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.488062419 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 3.66652153 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.095104594 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.092510288 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.743863672 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.347999643 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.229702422 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.074721324 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.320141633 seconds)
  done (took 18.002044602 seconds)
done (took 61.65750814 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.919611104 seconds)
  done (took 2.726461932 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.911939442 seconds)
  done (took 2.746123342 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.056263324 seconds)
  done (took 1.877215795 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.503982687 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.865884876 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.957858209 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.087305022 seconds)
  done (took 4.226732078 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.957074696 seconds)
  done (took 2.810970752 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.221089827 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.172246279 seconds)
  done (took 2.257662036 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.657684076 seconds)
  done (took 2.478888501 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.530099724 seconds)
  done (took 3.36207004 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.199154803 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159661744 seconds)
  done (took 2.199060576 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.656775499 seconds)
  done (took 2.490832021 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.403401618 seconds)
  done (took 7.24009291 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.195961413 seconds)
  done (took 2.038427028 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.325911365 seconds)
  done (took 2.169888316 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.886992898 seconds)
  done (took 2.719386597 seconds)
done (took 43.222335383 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.050765507 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.05090653 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.050677131 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.047598307 seconds)
  done (took 2.030211812 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.040791801 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.038742341 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.033787508 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.039560813 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023099002 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023743345 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.039177921 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02819571 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022968149 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038218023 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027125669 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037810008 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.038456121 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.032412697 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.032986774 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039184281 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.038488834 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.038953011 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023447984 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.032511967 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038008931 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.038229892 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.026367359 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028078543 seconds)
  done (took 2.63718367 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.209508345 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.091712613 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032358863 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.035253193 seconds)
  done (took 2.215184733 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.039533165 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.043499733 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.051604223 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.038118917 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032043457 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.044244961 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.04386374 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.045890545 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.050136666 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.042359866 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031852091 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.041367741 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.034620258 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034185468 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.034922053 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.043077476 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020846794 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025721905 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.04314262 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.043085389 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.027305069 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.037324631 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031094788 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.042646922 seconds)
  done (took 2.765202299 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.058138364 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.030803191 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.062606264 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.056935427 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.054986811 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.0257535 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.059963386 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050462076 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.094058062 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.034965354 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.040544718 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.086687917 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.066551446 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.035004759 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.048739584 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.040947587 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.061279226 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.0415512 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053914023 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.120683889 seconds)
  done (took 2.972520133 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028941743 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02926663 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024685226 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020553762 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.053423976 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.042058777 seconds)
  done (took 2.052203568 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.044162245 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.033116391 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.043548246 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.039747595 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.9067e-5 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 7.993e-6 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.5158e-5 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.6841e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 7.635e-6 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.3787e-5 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.6562e-5 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 7.245e-6 seconds)
  done (took 2.009849975 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.181355504 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.033362909 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.036471857 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.027593942 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.037971063 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.038017618 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.046403282 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.032912213 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.049880885 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028660704 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.027713867 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.031651618 seconds)
  done (took 2.417369947 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.196357635 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.153944667 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.306860467 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.230020726 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.296934958 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110386898 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048185332 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.084317208 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.371375431 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06186216 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050043745 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026385121 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122501763 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.094767551 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028719967 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133864126 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.289494844 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.009755887 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050305658 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101239554 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043333108 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131592359 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064507099 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053859871 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3077e-5 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065637107 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028689462 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017669954 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054562779 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037276444 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057156518 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.219211943 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.099611264 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.1254e-5 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08524932 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016254968 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039061094 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.038620964 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.162681333 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.022523683 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028389819 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.01146533 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000899303 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.572e-5 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.8055e-5 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048113747 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.012252515 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052973882 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026200036 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.315247694 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051139653 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031300726 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.018889502 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046372034 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065382435 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028326025 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037955337 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051018804 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021121173 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.061457923 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.023237179 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028912185 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026335461 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020641114 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087892129 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028847253 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.4245e-5 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033110311 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.00030725 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026956463 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043257648 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067545018 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039981051 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.1654e-5 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050675961 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.032942852 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052459285 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006747876 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.057477919 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043735131 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.101276962 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.036065411 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068817298 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020637355 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.042734074 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036601097 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.021086236 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014917429 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.9006e-5 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.06161062 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.01180507 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2975e-5 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.0601e-5 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.058334794 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0484732 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017176946 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053627435 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037879737 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014088266 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049377267 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049551344 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.010152475 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05354388 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040365673 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083897284 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025152132 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.013982737 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042226132 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061239465 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.205961414 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018916875 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.014985263 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036980226 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036353501 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024550659 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097481049 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040165869 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063713338 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034824606 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04744913 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011985608 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.033176856 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031511642 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045556033 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041719139 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019166452 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020478632 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02456348 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049180432 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.022951186 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017337243 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081778123 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.3962e-5 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.4688e-5 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022065396 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017679862 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043600649 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03935271 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056511074 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060517013 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000114118 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06774515 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031785665 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046100194 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.0361671 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03755197 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059450937 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000834804 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019101156 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.9951e-5 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054985566 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3328e-5 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057736554 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027378212 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.035604371 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050697302 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049866246 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.025806188 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043655146 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.023614778 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042158838 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029117903 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066457192 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056825287 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026726667 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033685336 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026417671 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.072065145 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040694228 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082958112 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02405405 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05504373 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021864125 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066285246 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 4.0377e-5 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017313939 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.019739573 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033756846 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000313632 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049635244 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066720525 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.062046296 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.010943169 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015863512 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070308916 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.7472e-5 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039812399 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.027251513 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.03858605 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044881253 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006885427 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017093837 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011290068 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030440694 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07186151 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.035190612 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049958899 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000354045 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017041697 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.7847e-5 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.4294e-5 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035695718 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065179194 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043254442 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.035132773 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.198246102 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04719481 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045774856 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.3646e-5 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.7791e-5 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016587326 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.062110695 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06072009 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014806972 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019767212 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.032211514 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.067385621 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.00013096 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.4314e-5 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046474945 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000316632 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036009797 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020879635 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015787951 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065334503 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055665358 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.067787154 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021350184 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042458231 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066207087 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.032138585 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020314797 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059007733 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000313229 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033489336 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000478684 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05085552 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000102783 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.3967e-5 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.01633477 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041984622 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.009215028 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.1507e-5 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0689415 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.4209e-5 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020829768 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016938549 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000128895 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087817696 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000455716 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041001223 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037278146 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035918223 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041389686 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050094082 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.014260762 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.014007295 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045088743 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014955404 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.4968e-5 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7238e-5 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023579078 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064891536 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011988877 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011659433 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068817991 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038054401 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013518656 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.013349609 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024583778 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.085047805 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025196687 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047350689 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043234261 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053376517 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087246299 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.026343344 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.040008644 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053430111 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.015438022 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.030988917 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010822068 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.028561642 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.011407472 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.119e-5 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.010704695 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037787052 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012022733 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055833481 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.86e-5 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.039663549 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035535515 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063459096 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065300151 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025619925 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063419835 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015147525 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035053726 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054484347 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022114171 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023432044 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056203389 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033711427 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053332545 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.040821117 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033758098 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059820455 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027787273 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069497815 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02208389 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054775477 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087650496 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04670298 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036544313 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176621256 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059141754 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049971157 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050663196 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014227784 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044175314 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038470272 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039869361 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078425991 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030618951 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014457897 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028198501 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026182928 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029902575 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046839159 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033404697 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07474743 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032289794 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.022557189 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049658911 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000232201 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039587123 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01663486 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.022127308 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000207032 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039746604 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035775365 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04118218 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059840609 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054649266 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.068278299 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.062015251 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.048477098 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.055693959 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067845242 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052604132 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016485425 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016344233 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061152273 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036043236 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.00022643 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.040923267 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030324693 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.032794785 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041656954 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.041863303 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044162636 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000144333 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016700764 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000485739 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010685493 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.010927155 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053317165 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041620653 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033458204 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027265971 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.012319067 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037051164 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040713294 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011956638 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038559395 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013888923 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.022039601 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.5431e-5 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023964415 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 8.2286e-5 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.044441748 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046495895 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041267661 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062242922 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049569282 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035334831 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088213049 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063063119 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015812538 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015485508 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.014621762 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011200655 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041547637 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076258958 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038836076 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000556611 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020508115 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017562618 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015743574 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.012116564 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.035553634 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.039081436 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053432971 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029726783 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.057501576 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044690371 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01039154 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042656064 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026698971 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043109515 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.02963726 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034371136 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034810115 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000133102 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032220137 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036041964 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013413789 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.2936e-5 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.011646698 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.012156318 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041117062 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.015104266 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012836443 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08760529 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.028587396 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041898229 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042552954 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019872066 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013529244 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057732792 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.01124984 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05985307 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.014126795 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033650389 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.024445843 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013064799 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013418439 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.187902534 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033839152 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049344998 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049586105 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038442147 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173472506 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103126234 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.484e-5 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068235015 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.010927 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 7.9487e-5 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.010739801 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053999379 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.014728653 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04368459 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033782349 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021912799 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052381784 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5773e-5 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064191663 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.017888015 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.045731292 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.024279639 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014683699 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063161 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016162363 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.584e-5 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021893531 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047752689 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.009213887 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039024428 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020922738 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.010925455 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.194630137 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.305546978 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019638631 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000120746 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025650565 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068343168 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04971126 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030392318 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054475111 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.052848442 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037328955 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04679238 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04155307 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.192343521 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011476623 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.013480917 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000151603 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038562645 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029686461 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.031253499 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.011459115 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.033528639 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.021520525 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016590981 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04164839 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042724125 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023646565 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033797869 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016421969 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006767593 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055573008 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000158324 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000488383 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.012091392 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000350341 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018307064 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040920728 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015465115 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061402629 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028847635 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048174041 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.016012097 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04114594 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057645842 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020392578 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053791125 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.4261e-5 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05295098 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019688463 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000404742 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050222408 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.00031197 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012925845 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056992795 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000119072 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.657e-5 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03733066 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.026047945 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054976352 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055773268 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065020013 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037003249 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026741578 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01731787 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.9708e-5 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.583e-5 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7196e-5 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.4103e-5 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.011136381 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045216083 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 8.1066e-5 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044002541 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049270081 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01809376 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03709119 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000179128 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053107215 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015785989 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035824369 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065159765 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020180624 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02844714 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050829628 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075915171 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078340322 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.041141587 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058267768 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056751186 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000500931 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.5738e-5 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015334541 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050678487 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014713967 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.026683708 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015457339 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056578131 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.04706058 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048546739 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234795387 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011623817 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015688818 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015709936 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015167479 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016318043 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054264957 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019961421 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014471294 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033238673 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041394754 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060712304 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054298626 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020425336 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024280336 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016826443 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019159991 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000403893 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.048167157 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028535241 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.4662e-5 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036207271 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034800287 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083680991 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.016099178 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024315905 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05505924 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040679049 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.182310197 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.015013047 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04305248 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067662494 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035129113 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077127381 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011503066 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015817922 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022943295 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.045172557 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.316e-5 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027912265 seconds)
  done (took 26.43481106 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.281888619 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.473034197 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.289598313 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.127007031 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.177950227 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.185714065 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.337570837 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.139949387 seconds)
  done (took 3.969725071 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.040294271 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.028346921 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.073345437 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.195950547 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.063912723 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.4593e-5 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.5222e-5 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.051557448 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.007073093 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.032862896 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.078154104 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.4233e-5 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.007148762 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.498213567 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.7462e-5 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 3.7329e-5 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.007204155 seconds)
  done (took 3.071104418 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.473886081 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.297671431 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.87474835 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.57044052 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.123322926 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.806616846 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.010680633 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.00827283 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.919138194 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 11.103065894 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.10231071 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.182670479 seconds)
  done (took 31.447669598 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.184735089 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.013834217 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.014390535 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.009491158 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.013461304 seconds)
  done (took 2.198254414 seconds)
done (took 88.056145002 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.06079907 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.137736955 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 7.2888e-5 seconds)
  done (took 2.130952773 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.056139302 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.031781945 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.024825459 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.052101331 seconds)
  done (took 2.134271048 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.094753945 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036728134 seconds)
  done (took 2.102166662 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.207917681 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.164596598 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.058139242 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.061627226 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.045199365 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.051623455 seconds)
  done (took 2.137972645 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.022519505 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02211234 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022113061 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022101426 seconds)
  done (took 2.07034694 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021652824 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020758959 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.030165591 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044351104 seconds)
  done (took 2.089341689 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.220281561 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085653511 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.14280103 seconds)
  done (took 2.425205821 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.042886817 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.034800822 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.036385716 seconds)
  done (took 2.096352418 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.05624954 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.052180542 seconds)
  done (took 2.084710778 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.038290456 seconds)
  done (took 2.025663812 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096180857 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.071149215 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.150356429 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.033969497 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.1133546 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.084255216 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 3.5111e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.736e-5 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 7.087e-6 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.5537e-5 seconds)
  done (took 2.529236023 seconds)
done (took 26.286170006 seconds)
(22/23) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.135700922 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.056767789 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.072523714 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.057749883 seconds)
  done (took 2.302179526 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.228300055 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.193499728 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.046767134 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.066003008 seconds)
  done (took 2.520575809 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024486021 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.863758132 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.029122778 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.098912978 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.971718896 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024690532 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.575201002 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.6684e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 0.028840272 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.3141e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.128865442 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.030672841 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.5121e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.035101421 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.09641427 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.2267e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026810112 seconds)
  done (took 9.921780054 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.3374e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.1221e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.0596e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.812e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.1335e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.537e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000914182 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 8.383e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.316e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.688e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.2995e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 6.214e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.0343e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 6.06e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.931e-6 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.406e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.394e-6 seconds)
  done (took 2.023134198 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001645377 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.7489e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.1997e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.777e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.7055e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.136e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.00742732 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.4524e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.5485e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.2225e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.000103739 seconds)
    (12/17) benchmarking "ascending"...
    done (took 4.9551e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.8994e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.1647e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.3402e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.0085e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.9661e-5 seconds)
  done (took 2.013044698 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.400908916 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 8.647623266 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.036036416 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 0.038637815 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.525130089 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 1.7662e-5 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 0.034039818 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.182093706 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.359752212 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.702122472 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040957754 seconds)
    (12/13) benchmarking "Float16"...
    done (took 0.961636609 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.165294635 seconds)
  done (took 23.102481744 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.8993e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0891e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.212e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.711e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5781e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.267e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007554849 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.5806e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.0835e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.84e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.6453e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 8.234e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.6309e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 8.262e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.3864e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.558e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 9.959e-6 seconds)
  done (took 2.065904077 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.035088985 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.038094199 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.04854121 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.05668174 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.025942428 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.03464077 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.029694776 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.025830459 seconds)
  done (took 2.312222362 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.14101363 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.11505189 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.04500835 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.065263382 seconds)
  done (took 2.393625568 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001430382 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.00044492 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.000699193 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.5864e-5 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000543315 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2204e-5 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.017233839 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.00041111 seconds)
    (9/17) benchmarking "all same"...
    done (took 9.8995e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000425357 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.001123457 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.000733263 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000538362 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.00077729 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.001110198 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000447922 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00068052 seconds)
  done (took 2.057773202 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.2499e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.2083e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.8984e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.912e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6645e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.694e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000215209 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.821e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.492e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.835e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 2.3567e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 1.4255e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.1354e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 1.2912e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.1051e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.61e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.3133e-5 seconds)
  done (took 2.024509868 seconds)
done (took 54.735186281 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.042146081 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024413315 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.030012343 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.068581044 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.03222514 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021631711 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.020863312 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.030579951 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.035310442 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028016283 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030442022 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.1714e-5 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026520507 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.2415e-5 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.028146274 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029134214 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.02568286 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.010259439 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023483581 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025749363 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008110534 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.017755 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012826995 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003617134 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023570243 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.003386493 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.020767267 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013211701 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.3637e-5 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008938117 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.025966983 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.005338586 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.011985463 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012068281 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.028961528 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.010786118 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.005124519 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.029083338 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005611797 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.008493258 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.009099271 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.008395347 seconds)
  done (took 2.82873859 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.025737777 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031362956 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024466789 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030204564 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028391138 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.033033223 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028992005 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028471882 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.0303013 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027685822 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026801012 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027151657 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030166945 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022935995 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030061617 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027953895 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028428509 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023504779 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030197884 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027310095 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.027009436 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.023183472 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028699038 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030950652 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024847869 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.031584829 seconds)
  done (took 2.761322033 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033389804 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.048298599 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.057728731 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.058709743 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.02556046 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039488149 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.047502733 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.041334071 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054884999 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025900536 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.045914341 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.019635848 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.084426363 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.03262945 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019965019 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040372732 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031695221 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029768672 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036545783 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.117908247 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.041515531 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.043095626 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053859572 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.068636869 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025959335 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.046992967 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033032996 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.03047895 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035807562 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.029778878 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027198716 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020699189 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026261592 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032937909 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027254535 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.5699e-5 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038981615 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032042932 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.03935783 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026599151 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.02474634 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027238369 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.051577659 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.095768732 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026457668 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020651112 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027270727 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031641578 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027190293 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.066895942 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035993694 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026946611 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020667244 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031027317 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027216385 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036394359 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025705611 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.025770035 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037061532 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024352626 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041957224 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031564088 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033594344 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026789555 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029665303 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031230832 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.02056731 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020008704 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.05516672 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.039844208 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.06501228 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022969939 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019744381 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.029882678 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031115888 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034828329 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022110391 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039141821 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029204649 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020781155 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.03891566 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026163222 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021042995 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.096564929 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.4881e-5 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 8.702e-6 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 8.14e-6 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020652987 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020567184 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030260447 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.03481919 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020678675 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021216118 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038018109 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034349762 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025847321 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.4868e-5 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 8.758e-6 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021111158 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036038787 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022835266 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020347493 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028580431 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026727578 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021256126 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.05588001 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031470708 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026011112 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.8366e-5 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.0489e-5 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022119159 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032701345 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021193199 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028723553 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027528543 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.038274685 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030225197 seconds)
  done (took 5.86388151 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.093615887 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090312443 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.089246256 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.162372826 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.022001673 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.032568222 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.090779517 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092639112 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026142065 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.042006717 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.024680641 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.04679488 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.040472911 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.057222757 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.050593402 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022363962 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 0.044255141 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.03878783 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.092410639 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.154347376 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022350576 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.042457702 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041289627 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027839749 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.02533343 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037560749 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.022638138 seconds)
  done (took 3.576689128 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028022088 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.034987789 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027055184 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.0381486 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.034701221 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02152249 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.032930783 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.029449945 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039115315 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026799962 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024928987 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.039090029 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024112206 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.034050252 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027925868 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.037488146 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03756613 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028104493 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.02598426 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025273082 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.034424663 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.041682525 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.038689295 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021323171 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.02154737 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.3447e-5 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.0658e-5 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.028815407 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020953726 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021015387 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019300595 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.032335912 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.03506559 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026758009 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.6713e-5 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.031914319 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.578e-5 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.03219052 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023888513 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020629761 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020606003 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027926562 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021376285 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.6836e-5 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.039319282 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.03329471 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02161203 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.3343e-5 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024076086 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019238273 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031938177 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030926025 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.6403e-5 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.034333245 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021990294 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.981e-5 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.9534e-5 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037762883 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02840579 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.032094847 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022404587 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021436799 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023766156 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023821545 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042797094 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.4884e-5 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021302424 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.9971e-5 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.031825433 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.7232e-5 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 6.5445e-5 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.035426459 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.01929019 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023075283 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.1333e-5 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038328888 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 6.9702e-5 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.2285e-5 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.1272e-5 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.026938609 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023895675 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021468681 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.3367e-5 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.020866208 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020163438 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 7.7201e-5 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 4.9622e-5 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.0982e-5 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 8.611e-6 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 9.166e-6 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.023982702 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027974406 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 4.656e-5 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.3123e-5 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037559737 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.9098e-5 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.035847922 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.5928e-5 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026413185 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019286353 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040270278 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.5624e-5 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025434809 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000138171 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03756879 seconds)
  done (took 4.239616884 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053396728 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.034685757 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.03736944 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.046245648 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.040191269 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026230427 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032825395 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033279677 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040966519 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021643291 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037939716 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021040617 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03064923 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035577056 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031700448 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.040518889 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02211043 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038313317 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.046812157 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021572995 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033183674 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.043082898 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.042447892 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.043791143 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036056137 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037607786 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.048307245 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.022074202 seconds)
  done (took 3.051567176 seconds)
done (took 24.346426344 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.095495662 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.158302736 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.034498852 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.25828964 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.140603806 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.061198755 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.079598885 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.036823612 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.852424664 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.040325443 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.471013079 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.77534218 seconds)
done (took 71.123831859 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.29475167 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.15816472 seconds)
    (2/2) benchmarking "String"...
    done (took 2.232463959 seconds)
  done (took 6.438765736 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.354536255 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.082188938 seconds)
    (3/3) benchmarking "different"...
    done (took 2.10750416 seconds)
  done (took 8.580360169 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.000774904 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 4.916838313 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.244486032 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.035316485 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.625808619 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.122202479 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.750418982 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.738110507 seconds)
  done (took 31.469673776 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.416824843 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.173730638 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.320209139 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.313946026 seconds)
  done (took 15.265372848 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.344570581 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.23256516 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.230353158 seconds)
    (4/4) benchmarking "different"...
    done (took 2.214470187 seconds)
  done (took 11.061528982 seconds)
done (took 85.180344883 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.041755878 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.002323762 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.119371713 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.199710978 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.119595202 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.153714007 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.057035436 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.084266025 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.035595671 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.042521197 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.152846709 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.074236004 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.336506946 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.045333148 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.036911904 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.127545512 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.010667524 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.071627332 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.157356777 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.674476212 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.088006765 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.080402116 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.059787289 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.092459752 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.254380223 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.147025856 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.251748977 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.051211845 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.057976438 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.068575553 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.042036706 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.046042945 seconds)
  done (took 208.821395358 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.040282727 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.543324968 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.403771267 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.122533955 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.135077986 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.257889397 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.964090354 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.158603578 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.04182991 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.097182245 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.63210846 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.04286271 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.669161679 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.013251138 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.058257104 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.17962252 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.512464993 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.575129994 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.061925326 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.26071491 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.085178789 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.460983477 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.412744531 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.515891744 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.100186972 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.226543647 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.113632161 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.078877733 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.796902816 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.523562507 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.119151937 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.125699166 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.187649219 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.908147445 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.09108031 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.083001428 seconds)
  done (took 184.636565098 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.141998431 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.151257649 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.244879017 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.43037773 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.863134808 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.012737707 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.122169631 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.102519855 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.083097272 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046529149 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.041669052 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.113032681 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.040202989 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.083636244 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.066588718 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.036534264 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.03717555 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 25.012897117 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.036573002 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.034399204 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.034530364 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.095133026 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.402091074 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.242567883 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.048464761 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.043431031 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.204498006 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.048371614 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.035493619 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.035733805 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.239480091 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.050879319 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.113547699 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.178590511 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.047826914 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.114842187 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.041532532 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.638697552 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.052343103 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.040637695 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.041807582 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.098133178 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.03999173 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.21573034 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.132141103 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.040055868 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.051269307 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.418531665 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.686944355 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.039490068 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.035997897 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.035899316 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.039752131 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.037616678 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.770729819 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.048574764 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.067701056 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.799387071 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.040654223 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.03969908 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.041339517 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.040787449 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.041193824 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044270551 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.176431755 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.859729314 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.529501164 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.421798431 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.886071377 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.045646639 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.036558894 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.035398065 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.957041467 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.167734464 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.050147798 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.039894181 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.115022106 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.039603639 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.039511928 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.650212139 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.649619821 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.03884503 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.204494105 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.044163372 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.035558529 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.179832013 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.994124924 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.053485698 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.056200185 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.175209248 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.04956066 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.035147558 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.040657916 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.644394567 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.03791797 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.044512339 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.167248304 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.050097655 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.038860103 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.149409943 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.264856059 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.036613711 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.240224917 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.27985758 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.260425999 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.051963897 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.041508963 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.099311165 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.042420751 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.050118694 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.045516186 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.041516964 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.041474561 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.048181067 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.040366902 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.039818132 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.040117776 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.055625168 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.039904442 seconds)
  done (took 448.676293087 seconds)
done (took 846.314547214 seconds)
(4/23) benchmarking "parallel"...
done (took 2.038916087 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.118043808 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.4831743 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 4.464989436 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.136563912 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.110675272 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.079951744 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.214376717 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.167311023 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.155536801 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.097493909 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.141899151 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.10427718 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.10698639 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.160572538 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.190296879 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.116426364 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.102379888 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.772737622 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.15321835 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.099905566 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.081182028 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.13628419 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.101201679 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.154424277 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.201694174 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.081776242 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.484808781 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.158469848 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.107730244 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.13948632 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.228894491 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.122538588 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.216357672 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.18308871 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.155274074 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.203680966 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.185432131 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.205586505 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.092172565 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.228618779 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.165753566 seconds)
  done (took 94.649291585 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.25394061 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.216334406 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.309420915 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.346302155 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.783002168 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.304209798 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.434466082 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.212966912 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.219937774 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.317513375 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.30967872 seconds)
  done (took 28.759179443 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.616517963 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.216384733 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.313399683 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.19186375 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.408948614 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.317274763 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.210872138 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.212661631 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.220125983 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.311839886 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.314408572 seconds)
  done (took 27.375949052 seconds)
done (took 152.823232674 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.467366292 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.100215932 seconds)
  done (took 6.605269904 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.053746336 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.051680443 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.052986572 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.055977481 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.052697296 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.054108496 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.068828271 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.055192317 seconds)
  done (took 18.484876359 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.051110217 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.051444364 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.05194588 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.052005603 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.052141542 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.052629513 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.051955056 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.052151609 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.050464882 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.052235072 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.051830512 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.052145729 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.052185401 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.052641957 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.052426438 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.052630732 seconds)
  done (took 34.871133631 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.051559128 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.053390407 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.052422985 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.051730997 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.054040657 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.051308781 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.05299673 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.056065343 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.052548096 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.052404093 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.051379827 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.051647175 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.052294304 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.051449566 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.060324463 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.051916717 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.052761697 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.052516254 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.051760482 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.053481363 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.051927376 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.051404069 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.053583802 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.05423713 seconds)
  done (took 51.308713334 seconds)
done (took 113.313081429 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.15964126 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.320652379 seconds)
  done (took 8.519135442 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.064581279 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.066905117 seconds)
  done (took 6.172320544 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.384709094 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.077903903 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.563322879 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.326091337 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.081629593 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.078220296 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.509504545 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.082640979 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.079366094 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.082287529 seconds)
  done (took 24.307813979 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.093655204 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.252995444 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.227872744 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.179454252 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.242808019 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.098999002 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.110319269 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.09243308 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.29298661 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.087179132 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.214528175 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.251118665 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.217427443 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.280503758 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.108820465 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.243677925 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.263553509 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.213392006 seconds)
  done (took 41.510991884 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.080873308 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.083571057 seconds)
  done (took 6.203664415 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.201651942 seconds)
    (2/7) benchmarking "second"...
    done (took 2.094958307 seconds)
    (3/7) benchmarking "month"...
    done (took 2.181951167 seconds)
    (4/7) benchmarking "year"...
    done (took 2.17281344 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.098119572 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.087644231 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.095164583 seconds)
  done (took 16.97119557 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.571035346 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.084781232 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.111394203 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.562621748 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.72704532 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.961476695 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.692284334 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.964925916 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.861562367 seconds)
  done (took 25.577967982 seconds)
done (took 131.303339042 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.215769876 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.100417693 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.043252051 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.080047341 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.072384064 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.441674204 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.118501666 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.385772865 seconds)
done (took 44.51005871 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.15900607 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.488413951 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.513865876 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.519980939 seconds)
  done (took 24.570915234 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.055820431 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.607323722 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.048029723 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.476051193 seconds)
  done (took 26.248994901 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.508522808 seconds)
    (2/2) benchmarking "read"...
    done (took 2.59495288 seconds)
  done (took 7.146454464 seconds)
done (took 67.16924559 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.039588474 seconds)
done (took 9.0848589 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.114586278 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.1023122 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.111272582 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.117478516 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.114465933 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.111736707 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.054027417 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.120538183 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.101780513 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.119566783 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.115229756 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.915104373 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.113636021 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.444998125 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.058937101 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.916394263 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.052747995 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.111904868 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.442261903 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.116119057 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.052178316 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.115137111 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.116282435 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.112888376 seconds)
  done (took 62.793126696 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.131283351 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.124988919 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.133923126 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.124088643 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.182433264 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.128325142 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.130802406 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.100726789 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.131381195 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.111878606 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.093983701 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.175426227 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.1043677 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.177821929 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.109178679 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.18191729 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.134868783 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10102476 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.104707066 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.180435429 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.122077862 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.100660827 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.175727172 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.100102456 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.169681204 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.09865821 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.108327818 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.120803641 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.09765445 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.169462872 seconds)
  done (took 65.969147392 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.096586167 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.066610652 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.081926766 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.149990809 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.06759852 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.084466684 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.08301122 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.067196463 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.068154716 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.085518994 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.082989621 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.089460618 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.086453252 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.086451331 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.070595561 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.081306106 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.083865286 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.136540137 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.067198584 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.070890503 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.114565386 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.077908957 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.066997832 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.084454889 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.087773293 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.082018432 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.069879016 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.091839794 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.082643659 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.086983288 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.082029628 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.112270661 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.084822072 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.087407388 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.090641264 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.129862322 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.082668901 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.095284296 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.087695625 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.069615893 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.073524045 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.071814204 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.083866578 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.069471189 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.084460405 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.083224942 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.080668658 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.085817597 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.069809592 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.067493683 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.070206923 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.092232565 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.085542844 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.081320473 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.069882096 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.080934232 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.071333771 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.088811256 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.085529511 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.070434701 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.069714818 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.086995546 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.085183573 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.080484813 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.248527633 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.085322869 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.088849794 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.070523478 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.084481992 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.168293869 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.089169469 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.17080822 seconds)
  done (took 152.414305107 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.107746185 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.152740774 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.138210461 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.136564888 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.14568445 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.106739769 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.153693567 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.497811588 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.655241466 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.173024659 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.498504667 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.152409953 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.656036426 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.166581081 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.124531126 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.137341096 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.169105341 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.148024353 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.105218297 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.166969957 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.120461998 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.156554574 seconds)
  done (took 50.918177362 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.108030455 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.962726182 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.105165157 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.9490259 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.961356322 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.927438454 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.104053118 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.991673969 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1035227 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.102928742 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.102518899 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.102323944 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.020768602 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.104641934 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.10231336 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.963077424 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.103207298 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.95354192 seconds)
  done (took 46.814288084 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.257594893 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.189409166 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.137413115 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.109285658 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.291581829 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.239037268 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.155031082 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.20884566 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.105002104 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.191576036 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.207103671 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.107068036 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.240906909 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10962624 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.106211164 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.292128158 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.126184323 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.108652374 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.151247003 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.156974811 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.254625191 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.155537097 seconds)
  done (took 49.947524394 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.103867059 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.104444117 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.158243732 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.15374316 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.107703657 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.10530127 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.125673101 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.103924788 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.950142551 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.11007076 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.141949139 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.179152365 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.941619502 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.126031176 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.169345654 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.115143344 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.104889633 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.130982388 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.105465757 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.110688183 seconds)
  done (took 46.199353663 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.132347468 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.108951583 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.101058535 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.137667384 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104855383 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.110935897 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.135578983 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.106180269 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.108676828 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.298072114 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.111964405 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.107937298 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.133838165 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.113738781 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.104626745 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.137816557 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.131895822 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.132005376 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.107062242 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.107000288 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.298244373 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.098273348 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.135433182 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.104477674 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.108602232 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.101611354 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.106883572 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.115806927 seconds)
  done (took 61.652672913 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.127362168 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.100410189 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.112129652 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.127321138 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.128140415 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.144310727 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.124740554 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.126886657 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.109696317 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.111249477 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.127345922 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.099430163 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.10204149 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.124982921 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.108148818 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.124836238 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.589548307 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.129909545 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.145004571 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.051855653 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.12371334 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.587334017 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.12706998 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.109327481 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.049494493 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.127347847 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.12535343 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.127058231 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.12758984 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.11464203 seconds)
  done (took 82.479986809 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.086664305 seconds)
    (2/2) benchmarking "in"...
    done (took 2.083340056 seconds)
  done (took 6.216190065 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.104436187 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.147526662 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.103329124 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.242700694 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.252993281 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.215058181 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.212097717 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.151688117 seconds)
  done (took 19.475053672 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.094843458 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.753042331 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.098363096 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.089318039 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.086889238 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.661267246 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.593335108 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.02165132 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.919705773 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.540244199 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.905046047 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.31688646 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.677365179 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.989862914 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.150419106 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.526514857 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.360489333 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.837543612 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.254488785 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.083107217 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.586223245 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.108968902 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.181008726 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.102336124 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.126939818 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.515060047 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.933128021 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.082487928 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.259616051 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.159923473 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.644412127 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.097017357 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.086078659 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.550014801 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.085435412 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.080828718 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.609482768 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.089408901 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.253246344 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.089043586 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.857965851 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.945456033 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.953136661 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.49582369 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.147613076 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.096152378 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.083094382 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.080680698 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.943299494 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.222313701 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.676480035 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.627803624 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.088389507 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.08779658 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.822855415 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.092629561 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.148249101 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.792747699 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.578842798 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.582930503 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 4.111685107 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.063580999 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.134793243 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.209651852 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.249240053 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.167906938 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.543777378 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.943339776 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.01865866 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.149521742 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.712589599 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.115029146 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.103737655 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.083107111 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.72741184 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.246925465 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.085059225 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.089900068 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.086562755 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.086288665 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.49899702 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.163241778 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.503301099 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.100537978 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.941165071 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.379659787 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.087670555 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.126467422 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.990407018 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.556143323 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.863151472 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.796525538 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.856817994 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.087164606 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.274692503 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.051714252 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.099577043 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.089786547 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.531454221 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.534280422 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.108830657 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.08317612 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.223377681 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.300558295 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.084633453 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.234715809 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.941602203 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.091311032 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.612928411 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.140087777 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.09037276 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.169186754 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.630738242 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.869178268 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.083694333 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.939722207 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.676169617 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.537157687 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.665579214 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.99731069 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.272001514 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.92819358 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.958389153 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.54612556 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.086111367 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.377957973 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 4.357241301 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.639446117 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.224139466 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.087016808 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 3.913049932 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.098087526 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.089214057 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.077711182 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.092857694 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.089969178 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.083590399 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.115280168 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.093790572 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.098101132 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.953003441 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.716427427 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.902267902 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.103892832 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.94455728 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.153013079 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.896511491 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.577486558 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.375714824 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.093696379 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.087577827 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.875299906 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.841990077 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.962221721 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.091424921 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.090736262 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.091024903 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.519390199 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.118732385 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.087393251 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.161985188 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.501866948 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.86895078 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.081066473 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.086787046 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.110365657 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.144709435 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.103012549 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.35876728 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.929141257 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.915393643 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.227276491 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.994759319 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.140244697 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.086293624 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.083952545 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.078225824 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.497041453 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.224856024 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.203864869 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.227895177 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.218555663 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.104919973 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.589155643 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.140303976 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.556555504 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.802876248 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.090683194 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.189616118 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.197712239 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.100302594 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.213430996 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.239700067 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.044486848 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.120662276 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.813700598 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.544205773 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.859736243 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.148088842 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.096015672 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.945864098 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.117814417 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.123050042 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.08386943 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.086318612 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.966505005 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.847412961 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.166972998 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.396573619 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.152065377 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.085190598 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.933038322 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.091045245 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.890795534 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.149071541 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.506170868 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.223819573 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.096733486 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.621576676 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.898542449 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.09922677 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.08797194 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.956023455 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.088375532 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.098875007 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.263720773 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.477030469 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.518019803 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.316558734 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.625230752 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.744560526 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.088684013 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.80319914 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.087618452 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.180222141 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.089870247 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.160810661 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.306696512 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.772778513 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.090981664 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.185479058 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.16009573 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.927356845 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.088751133 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.258067468 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.088228362 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.76214598 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.0884295 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.092056403 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.616823641 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.147254892 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.942525906 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.08609165 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.965065368 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.686756761 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.179206183 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.089495923 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 4.03457953 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.312431686 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.397451305 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.600413352 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.874792077 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.160623165 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.496396054 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.86095105 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.994387014 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.815791248 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.744159243 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.091827645 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.092772544 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.082149085 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.473514349 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.087724034 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.08701733 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.67029143 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.541319174 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.791982434 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.870676079 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.09966391 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.089868945 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.513026559 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.274875031 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.696687048 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.615750567 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.129400858 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.935108143 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.102035727 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.961274214 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.092479608 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.563182717 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.868402578 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.176610182 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.868663078 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.170148973 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.496551283 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.09313318 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.834930172 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.67897674 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.381551223 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.856738411 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.299028128 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.092905424 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.009763685 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.080304557 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.841415265 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.823684013 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.101022685 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.267138556 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 5.886781984 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.248992537 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.685502355 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.543693035 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.289720923 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.1372558 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.184019937 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.101500384 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.260698348 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.658791343 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.099200795 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.512694315 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.551202895 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.569286848 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.685084784 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.934480824 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.088864069 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.091451425 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.137129861 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.817733328 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.086184106 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.703531341 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.098586957 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.091602826 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.084775836 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.655353132 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.692927995 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.998418989 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.999143215 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.532111882 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.089225358 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.101220381 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.090862174 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.094393915 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.095794395 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.245719728 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.087023174 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.634910244 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.114371245 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.894160496 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.9351461 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.108524294 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.680065772 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.197276031 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.088715461 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.596828372 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.102817196 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.943846269 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.117354969 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.093449774 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.076020981 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.39230362 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.862874448 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.308398591 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.583208038 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.838669516 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.950715717 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.090305515 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.088742058 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.932504032 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.58095878 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.091849831 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.510872411 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.919344275 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.664337471 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.801801588 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.437012293 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.211422761 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.67502093 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.56824446 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.515199657 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 4.03634343 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.663361012 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.129832945 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.207912428 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.086444423 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.429814101 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.119699912 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.10494033 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.674054835 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.962757501 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.824286774 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.421723881 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.150728499 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.799825417 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.26416385 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.134850072 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.092403408 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.090537358 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.713025754 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.662483125 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.085449381 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.228408892 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.795122468 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.850635952 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.511433223 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.222198867 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.134999589 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.091182401 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.095890792 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.101244252 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.118674825 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.900592917 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.088892615 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.50603908 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.080545084 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.104221253 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.608282173 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 4.104570659 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.14897662 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.504212533 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.083630267 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.085625622 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.37622596 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.566827186 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.092342088 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.535990538 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.671194914 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.260362431 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.815470089 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.263885473 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.092345324 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.497139002 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.76635916 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.680072003 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.096572038 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.547985884 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.09781931 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.562670995 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.126533152 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.878734093 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.093169823 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.517410956 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.150425814 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.097401441 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.314528214 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.119679883 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.090465202 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.878665891 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.80421464 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.195297403 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.097131095 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.084134321 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.128678589 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.009523812 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.128849922 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.316372557 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.135000973 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.107306157 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.87432536 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.564816437 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.934987714 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.095496286 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.0972101 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.882445724 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.115269211 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.088267457 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.074208044 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.114670398 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.202737655 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.247589539 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.409542758 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.089350154 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.744981881 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.663575085 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.014095553 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.114172497 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.085639496 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.084807073 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.089306627 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.547481727 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.100519272 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.090231565 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.310102359 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.096767638 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.202063243 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.571850398 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.47135525 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.13551436 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.083440455 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.091360096 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.230202142 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.389375734 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.907412545 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 4.058338634 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.285300836 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.462214439 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.005320019 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.113521876 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.091990644 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.221038917 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.600994108 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.259342028 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.539871448 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.399231079 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.148071555 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.937267595 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.090543955 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.870625696 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.090860212 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.08518039 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.200981293 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.948452895 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.504479837 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.100141443 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.772281137 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.087651775 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.004967183 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.496236526 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.131365397 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.096098048 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.088341763 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.285837333 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.832743197 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.035146715 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.124239001 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.328797233 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.107987833 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 4.499829173 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.947651836 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.961616143 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.941376889 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.034445842 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.847218 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.09570406 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.657379868 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.594614233 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.109678411 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.944344262 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.14219731 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.695447869 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.094694906 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.087637592 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.557420573 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.121522741 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.090931281 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.22528841 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.777210696 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.719649604 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.164698369 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.463428817 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.179394921 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.096638551 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.327294285 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.071362013 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.108483198 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.095407399 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.205692332 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.126369736 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.177194659 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.089790297 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.540755248 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.126387519 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.66515556 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.548572521 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.993561541 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.136285451 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.092122563 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.091365756 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.262779976 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.817151504 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.315284555 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.02371462 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.714356507 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.22611357 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.660412181 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.741615068 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.088535009 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.105339547 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.0882876 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.087701037 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.826647894 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 3.958552084 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.564000315 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.049300037 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.367329947 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.15427913 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.671532724 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.399786532 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.130112305 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.06535514 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.151849446 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.427766568 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.090921451 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.093056503 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.206985645 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.662594667 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.145188686 seconds)
  done (took 1752.254266282 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.316854145 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.117130654 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.111044155 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.113819506 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.152404515 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.116356321 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.11003568 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.119290426 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.119777198 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.136548975 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.11361828 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.11249852 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.139399975 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.316563391 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.167375094 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.137759958 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113030448 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.123350648 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.113610156 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.11963822 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.137444133 seconds)
  done (took 47.061439034 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.105818437 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.110724227 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.159481978 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.163506861 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.145293165 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.103607496 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.159276571 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.105894293 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.162454713 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106736458 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.163087608 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.103172428 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.109077944 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.106312714 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.110747101 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.117079893 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.161193823 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.147952612 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.105814347 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.159898495 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.116499688 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.158408603 seconds)
  done (took 48.931316655 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.091124961 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.092001178 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.89918277 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.168136881 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.085447276 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.14190602 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.08496889 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.099559934 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.672876341 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.602410151 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.846435684 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.716150178 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.098257345 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.956803684 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.138185508 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.089557748 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.09042169 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.090406528 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.088728867 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.091089279 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.09690834 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.533282096 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.089865659 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.096932624 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.530804989 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.13826049 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.085207596 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.090978101 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.091128739 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.848231507 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.9023212 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.086507 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.007840625 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.64339572 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.980792076 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.53847193 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.916904235 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.102613611 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.086461567 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.08838779 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.966802107 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.491217071 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.091074958 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.090430303 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.671696127 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.09072394 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.088735609 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.019399519 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.702963752 seconds)
  done (took 126.363671067 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.102383956 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.169470557 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.12019521 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.111931886 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.227583988 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.275611268 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.312507925 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.258336533 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.10564565 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.106091235 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.305900919 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.314464134 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.186204876 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.181144758 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.177053609 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.150374216 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.118100975 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.118672717 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.123135065 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.116178046 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.122828644 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.112939165 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.173836591 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.241390823 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.1167899 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.11305224 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.113037775 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.107912405 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.238523213 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.128365611 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.10565127 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.10739863 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.17720904 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.196834446 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.113077308 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.093882075 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.168644088 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.115891603 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.106168117 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.09737945 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.100388175 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.108030043 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.109305492 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.178555809 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.114639345 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.170463608 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.113607405 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.098099573 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.235925229 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.097109324 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.117661616 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.253261538 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.10876656 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.115140212 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.109819965 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.165227356 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.11170202 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.107821251 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.10790161 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.239472641 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.10288531 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.106582098 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.246995099 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.09816409 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.112524932 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.248458631 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.173300235 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111932191 seconds)
  done (took 148.345328294 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.140592624 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.182187619 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.241928913 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.248123312 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.190632872 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.169484855 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.183807883 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.187258278 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.182830061 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.204230809 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.179767383 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.151689263 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.161148544 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.152185836 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.184331315 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.164502958 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.164769906 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.165780773 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.18602541 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.188214572 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.171028738 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.239526055 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.184584373 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.239738737 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.393665253 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.160605775 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.187779334 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.183242778 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.241123762 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.187189548 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.393802257 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.179451134 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.188511265 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.241667539 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.395617474 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.179825612 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.14174486 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.183667799 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.197923825 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.18652837 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.167042541 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.238435247 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.17854273 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.160733194 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.166787461 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.190130603 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.243889976 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.396672103 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.157663023 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.205531884 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.180150929 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.239440835 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.180657969 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.169168132 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.247952392 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.144931501 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.240013337 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.242714119 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.187928128 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.241608771 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.243568765 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.145405041 seconds)
  done (took 138.725315966 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.158058328 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.156798738 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.177422761 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.095226226 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.106388047 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.192747589 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.100091045 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.100920143 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.157581049 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.158428153 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.015010428 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.181994784 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.257133142 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.014194555 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.190780044 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.258041957 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.1809248 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.197454413 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.159067283 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.191026971 seconds)
  done (took 49.103783695 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.121376593 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.180209834 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.125324126 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.24202926 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.126820279 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.178307125 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.121039816 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.908638397 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.960448342 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.909703808 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.205994583 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.203641498 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.96078779 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.23947579 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.176481039 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.178903876 seconds)
  done (took 39.894327866 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.114193879 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.128204567 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.09818123 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.097718147 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.11530341 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.090670019 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.105440617 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.089682771 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.116729689 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.455868866 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.091154498 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.128173213 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.099321466 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.090426046 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.090707533 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.12649659 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.117271417 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.103145801 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.104484545 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.097355548 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.572654115 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.096107541 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.129317545 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.094989875 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.11589107 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.573433846 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.099187215 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.117598845 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.094826796 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.129827918 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.119260295 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.472643863 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.116244707 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.097656323 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.098106961 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.100153063 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.099026692 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.125312072 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.129102589 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.105556808 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.09013608 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.118046509 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.098351201 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.09364031 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.114773325 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.133297851 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.118731404 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.46188014 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.089944388 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.114153817 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.10106522 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.100704155 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.091458151 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.465374471 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.098021098 seconds)
  done (took 120.284617218 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.111149697 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.114806405 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.10136233 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.106947933 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.12640103 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.11149113 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.113104448 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.992203553 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.112531553 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.103799837 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.143784797 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.928548456 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.11485304 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.115426283 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.145161317 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.113727736 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.122517494 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.180231504 seconds)
  done (took 41.907433608 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.123210406 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.164116624 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.114767361 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.1262658 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.123968036 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.167055538 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.104210338 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.110684955 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.517075611 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.124743089 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.577731968 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.112092048 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.520610403 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.109655125 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.161518575 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.579699279 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.110237343 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.101495243 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.127754805 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.110044764 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.165848573 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.09592328 seconds)
  done (took 50.498729225 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.064326367 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.08052529 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.090661987 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.074927297 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.063186728 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.064681426 seconds)
  done (took 14.49055902 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119760831 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126734017 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.113865939 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.108757875 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128100545 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14254975 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.136591349 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.138933717 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126039684 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.343425103 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.141121454 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127438805 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126543598 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.193429072 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122510747 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125229905 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137631706 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.140390631 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.125444299 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124657914 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.141536811 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121235543 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134802208 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.136528379 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.136006691 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.189210179 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123926156 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.344088917 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14405927 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120248889 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.12307038 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.141562736 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131644054 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.340002688 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.111284454 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125347521 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135532753 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124607839 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122997675 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.194709316 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.109522106 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125951775 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128229137 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.156244565 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124535235 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.139428376 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.156995271 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.14344602 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13612578 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.332766663 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129749676 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.198714248 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124512158 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134009786 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125915787 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.325789981 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.340281731 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.185217692 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124651299 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.345605703 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.192582156 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123537597 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.189582922 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.347777094 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125023017 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.189314686 seconds)
  done (took 144.796067616 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.196432394 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.10503412 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132821586 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.347803895 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.199809963 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.136731589 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131346459 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.139769185 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136994092 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.112584216 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129846885 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.141101545 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.19191055 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.193235322 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.137291413 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133782913 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.138237032 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.187708905 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.115478524 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.33627388 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134337483 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.19713895 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.196139338 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.196176218 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.340286632 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126435128 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130045926 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135281727 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131651203 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133903 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.158241777 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135203357 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.194636275 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.104559616 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.190781163 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131702238 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135243647 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.159820225 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136499802 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.14389617 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.197101983 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13489908 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135804056 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.138537364 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.343693876 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.139721953 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.138970682 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.115528657 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135714786 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.118221545 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.343412674 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.3388521 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.354620987 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.198640471 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134388794 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.145155675 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131772908 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131843458 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13188995 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125270509 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.194695159 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133187887 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.336115226 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13695821 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13298262 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.192188067 seconds)
  done (took 145.365721533 seconds)
done (took 3514.943848612 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.295373729 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.263739969 seconds)
  done (took 16.605973998 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.57138771 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.724421286 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.542313121 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.497264466 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.240745224 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.422784068 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.316588794 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.384570752 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.123504472 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.697041509 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.956469676 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.945643383 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.024836343 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.099264283 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.630244935 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.118606042 seconds)
  done (took 83.360008922 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.02506007 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.461029765 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.828412657 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.656502861 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.157599143 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.68749098 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.68817672 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.661381726 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.201119636 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.337422151 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.222935225 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.451981633 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.31468533 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 3.974064958 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.36583807 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.538197489 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.628921786 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.723171922 seconds)
  done (took 55.974463328 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.128073855 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.599742689 seconds)
  done (took 11.783566778 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.099620369 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.125303318 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.133733764 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.122791217 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.136783675 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.122155979 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.133338801 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.133779995 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.094165032 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.123850312 seconds)
  done (took 73.282745223 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.212002197 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.832360932 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.251090585 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.835056274 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.311252504 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.499167294 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.255590765 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.460871333 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.191001947 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.058988524 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.054486937 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.415072843 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.915858784 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.975514144 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.598068533 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.837108658 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.128938851 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.472777614 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.324058689 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.234461996 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.07042685 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.768696911 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.20955147 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.782695954 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.055875167 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.136453554 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.010666022 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.18843017 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.151456651 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.961468378 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.08943118 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.057848697 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.737522946 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.060389998 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.35942519 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.24811305 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.601075579 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.166551094 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.296886301 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.41230591 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.222666278 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.23535171 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.054015577 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.23655322 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.307446319 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.052149241 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.776077614 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.103885172 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 5.906427291 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 5.970801698 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.057120171 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.216266489 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 5.946903952 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 5.910322738 seconds)
  done (took 218.280151529 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.055927418 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 4.740569238 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.455817578 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.062138783 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.603419502 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.577580369 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.069588586 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.580378371 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.063667575 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.665780417 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.706328458 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.2734248 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.053202806 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.063400447 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.073185572 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.055878977 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.878658026 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.675217824 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.064429581 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.058816704 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.55528312 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.547057653 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.565249001 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.058402944 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.366383366 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.546713479 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.446955128 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.31415721 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.062790485 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.054114109 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.629929239 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.056077876 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.068715982 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.057544657 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.507653894 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.543030635 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.58255591 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.081906999 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.061044335 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.053957308 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 6.967948824 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.566437333 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.489104242 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.646352215 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.508621896 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.526179417 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.422684948 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.059980449 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 6.577030807 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.524307744 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.891160826 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.818799705 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.322336551 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.060358939 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.062837312 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.057326164 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.057065549 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.543586186 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.393604708 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.314594894 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.061055706 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.059497454 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.056782819 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.189704649 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.068749235 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.306197529 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.062835711 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.068953067 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.260887015 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.259696092 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.283379508 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.53286129 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.528932802 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.076712716 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.054520141 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.506398329 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.696761465 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.585909179 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.067383177 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.058162088 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.547796929 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.068069674 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.472653869 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.821113712 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.628835508 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.543531041 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.664912583 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.055656581 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.353265632 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.512067599 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.963103333 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.747251888 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.426305513 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.063472813 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.058823383 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.056661091 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.060629787 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.488575684 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.060298299 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.239153771 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.548584217 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.508686602 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.468948208 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.236885885 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.394812152 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.063358586 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.704591181 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.068465651 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.553423042 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.634119474 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.070884444 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.063579157 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.38095169 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.516479101 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.059787495 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.06728516 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.70142695 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.060422023 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.545175221 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.064864078 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.599580529 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.06027892 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.721245396 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.061129091 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.632006068 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.934568336 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.637287871 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.062713925 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.067796646 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.622883625 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.411450086 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.067910376 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.052820395 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.065992812 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.562045035 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.060245585 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.057766268 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.871455774 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.059019582 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.361816315 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.058597986 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.069780815 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.294757402 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.596689344 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063080091 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.061354312 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.71760103 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.554935523 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.072579168 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.418323492 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.075193058 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.159151253 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.520101301 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.079317994 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.061881261 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.068667189 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.068619367 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.441316966 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.536709628 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.889253471 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.604974032 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.342215935 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.066592241 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.566623046 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.388217286 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.31484544 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.06436449 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.602215844 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.07204344 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.08039436 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.062881377 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.032319111 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.008811051 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.078446828 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.061815201 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.073765983 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.057360151 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.069678233 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.939181974 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.077151033 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.060958054 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.622779117 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.075699027 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.623272474 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.083185769 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.056728563 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.927973376 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.063059346 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.056405825 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.05991767 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.06233721 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.060580217 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.107024071 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.470454867 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.907289166 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.907362932 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.658468245 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.235338506 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.847243693 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.701110525 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.109318578 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.085444808 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.0598547 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.60538776 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.056596344 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.304106634 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.626240734 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.076499167 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.070107379 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.061025398 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.971286797 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.57548331 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.059334955 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063874874 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.071849218 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.75957958 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.578766334 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.072618154 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.06062774 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.501513547 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.427601463 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.461983815 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.064471516 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.064409607 seconds)
  done (took 1061.850090174 seconds)
done (took 1523.193018061 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.071672754 seconds)
  (2/4) benchmarking "arrays"...
  done (took 7.060682395 seconds)
  (3/4) benchmarking "structs"...
  done (took 7.052758866 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 7.06157591 seconds)
done (took 30.300723537 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.062501438 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.06143675 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.075190439 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.062848319 seconds)
  done (took 30.320761077 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.42798661 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.395930299 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.24433006 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.292539298 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.570982361 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.270642531 seconds)
  done (took 16.260728448 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.121719572 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.063073238 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.059957278 seconds)
  done (took 22.304330235 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.541331619 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.53259019 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.196235602 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.146861846 seconds)
  done (took 11.47967123 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.109454455 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.107677181 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.105033808 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.113265951 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.104246521 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.098533016 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.061221909 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.114312527 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.102347763 seconds)
  done (took 25.977381435 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.206028492 seconds)
done (took 112.609412408 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.277975638 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.247964212 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.062742271 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.178147349 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.176643381 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.388462991 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.339421489 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.133328484 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.148458078 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.058213398 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.076206235 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.301014321 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.311493313 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.397240715 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.497141034 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.517518893 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.497445702 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.391320928 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.315020269 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.335845202 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.088318904 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.076722018 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.117240686 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.64389019 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.233820324 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 2.416435952 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.345614269 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.166765631 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.775150701 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.090272613 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.397749046 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.140375935 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.195986909 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.593124006 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.791820179 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.080226382 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.145104043 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.306377385 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.584855762 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.325265145 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.398513452 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.142290713 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.514755741 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.339877553 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.272901102 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.088425928 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.395571421 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.061787106 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.15193209 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.343444785 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.294935141 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.159820352 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.117683809 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.06975557 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.086152752 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.299999883 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.074644727 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.420874706 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.097323698 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.66375187 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.184977839 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.260296392 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.074461535 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.433298929 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.131379287 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.14172801 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.748770652 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.192492834 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.75557162 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.500162489 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.920230994 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.094600811 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.116962537 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.073970546 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.054143971 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.544408066 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.091242995 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.025983172 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.394061157 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.363653719 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.454513583 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.285196521 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.136835372 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.524193937 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 2.215679153 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.094355 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.075457575 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.087535798 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.218639965 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.119639968 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.059451309 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.171434888 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.255874096 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.150943097 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.686681697 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.059011282 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.14284771 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.172488692 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.378931358 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.166109432 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.408206376 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.055930636 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.173915825 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.310501644 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.149283763 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.882697909 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.643097538 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 2.415967791 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.547726768 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.415788701 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.484091164 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.298182111 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.344788896 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.77356744 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.600764592 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.790711379 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 7.232418141 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.061228909 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.06999134 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.639364931 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.969661289 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.428466424 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.174161014 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.447557801 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.088773609 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.078841807 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.446977395 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.278484224 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.3025249 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.085312957 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.199270109 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.056732618 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.41869814 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.143743921 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.520693383 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.229991954 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.289042264 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.066050683 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.408180902 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.185698613 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.068087541 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.381075926 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.410912078 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.401829683 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.061360705 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 2.396868979 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.346665063 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.147914287 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.428695875 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.573538628 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.706708328 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.068175767 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.102305646 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.072134225 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.150050559 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.115565778 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.269215343 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.26448816 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.060892555 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.913756823 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.060339945 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.228219011 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.637307437 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.066475038 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.44235057 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.092772607 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.200919744 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.460473536 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.08873433 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.145769247 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.180838576 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.181514269 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.148987558 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.244920284 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.135754508 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.193087768 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.055850882 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.244969239 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.559381653 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.228320202 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.335097919 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.088725663 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.115099673 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.13333057 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.082352492 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.442941826 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.276543156 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.440966198 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.198229583 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.454432237 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.222318361 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.409718266 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.51614131 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.191481806 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.44520804 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.272789672 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.438739274 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 2.422161466 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.336501429 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.16165124 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.56317192 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.485440026 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.164506613 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.076740316 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.123597535 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.439603129 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.073374593 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.104053294 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.105893079 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.347181138 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.725737515 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.599007575 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.472789381 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.419935268 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.303833561 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.694782347 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.256258252 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.158021423 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.535108226 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.483257222 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.070896079 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.261876515 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.528260137 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.410120593 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.205315627 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.45929067 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.561558122 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.082518168 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.072442039 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.057975698 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.531477534 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.225747879 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 2.414954811 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.087666372 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.224204716 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.531752849 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.599672041 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.422459211 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.331599178 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.607524729 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.10163456 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.230903486 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.353129272 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.688961621 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.268344521 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.274097556 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.377271977 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.131190337 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.142918836 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.587970728 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.722749731 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.26587444 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.068481361 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.809299771 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.536602643 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.413910416 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.466441921 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.336074542 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.737266158 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.223059668 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.096586092 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.205121481 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.173464316 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.564272412 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.362918889 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.131754594 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.247291778 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.543253345 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.08278544 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.364286729 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.789638792 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.067997338 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.490757957 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.505310739 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.138374661 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.408245726 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.150710775 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.706492735 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.009175871 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.409020886 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.090052748 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.23228545 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.199292035 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.512175714 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.093558866 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.431138348 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.674663923 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.232553864 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.099398657 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.542517517 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.185566844 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.233524341 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.208486969 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.214534291 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.847690687 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.173284302 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.770076673 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.38866394 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.063522798 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.636367165 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.082633431 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.08355639 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.285530891 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.41991232 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.213451698 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.2528779 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.621683746 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.095012506 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.061564315 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.08383861 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.367256037 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.509943003 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.104854294 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.664982231 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.0814765 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.064019721 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.317116754 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.307802509 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.166004165 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.152908694 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.069558731 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.408570184 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.101249974 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.47251565 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.249340828 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.385450653 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.064528518 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.04645178 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.03504123 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.222291027 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.24285681 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.441821491 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.084826053 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 4.05082529 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.06915105 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.588899198 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.544913161 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.716106787 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.493045165 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.506692589 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.231688471 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.231843117 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.18575394 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.254552552 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 2.759585466 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.415491671 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.494470228 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.259087792 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.085259565 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.056311582 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.215274542 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.419343221 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.072432418 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.323237982 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.432787767 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.181299804 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.137273477 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.063234554 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.091174404 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.694997473 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.364516156 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.332052938 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.088522293 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.279655578 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.398167336 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.341406956 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.085425662 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.136315647 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.152447829 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.284372119 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.16323687 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.30853234 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.061395154 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.090138453 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.270468849 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.096204841 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.400688144 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.090335076 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.834685471 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.17500179 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.728682823 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.616841425 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.083545253 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.508719871 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.227514744 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.653645138 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.566017323 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.386417776 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.100539045 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 8.047455713 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.41776104 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.151405038 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.139840631 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.428355304 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.563734503 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.768808667 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.341688185 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.980019117 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.513556747 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.223360855 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.501082157 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.256921742 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.061843949 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.313096257 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.09560366 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.059849214 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.082458527 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.153771187 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.216393957 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.081746061 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.14645152 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.686215805 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.161444962 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.101259305 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.209414277 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.323402722 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.507231393 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.34585691 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.600670122 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.292512731 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.114836002 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.166636411 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.233215846 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.247959924 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.080422372 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.392300522 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.146226958 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.640299927 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.156156605 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.090696552 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.330749685 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 4.818977506 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.417155636 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.133862473 seconds)
  done (took 1365.166547792 seconds)
done (took 1367.232396145 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.086060668 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.072674861 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.088966353 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.074978338 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.071056573 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.091032471 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.137842553 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.118107104 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.09633376 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.08562612 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.171997146 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.089059741 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.0908701 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.175176202 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.077751854 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.091368832 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.079559351 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.085702886 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.107820419 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.09220733 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.093343077 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.083079944 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.105189334 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.094162352 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.087540065 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.084566557 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.098788726 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.090716455 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.145529959 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.099018204 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.08625725 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.076284262 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.091731631 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.102712027 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.110287066 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.132753002 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.103006141 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.070822974 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.099090956 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.098848455 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.175902566 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.086864993 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.072227173 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.112865636 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.095733363 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.076114469 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.12234177 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.078551607 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.090259896 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.077945033 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.081055704 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.133513121 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.076898152 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.157972544 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.086847406 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.075879293 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.107702529 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.086983415 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.084952616 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.088995573 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.082513764 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.099158025 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.106499488 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.08605818 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079845903 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.111851219 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.095955035 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.099996728 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.112184642 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.09503064 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.089408482 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.078454423 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.154911041 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.08870444 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.080278281 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.089320564 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.129931358 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.089306181 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.124524674 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.093237898 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.081209472 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.078958835 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.095439971 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.146567829 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.083116761 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.096791448 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.087237595 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.086083916 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.090632505 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.075718493 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.081689599 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.093070041 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.11408316 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.071704337 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.075770564 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.093518184 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.102059466 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.105208948 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.120465002 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.106908611 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.094945821 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.088066763 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.089532057 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.1159599 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.09513482 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.112491665 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.11501645 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.073635857 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.086063513 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.094308967 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.072328041 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.106416093 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.106180263 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.093736 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.092489791 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.144062502 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.116340101 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.07896405 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.092149246 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.104645249 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.084087456 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.124108558 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.081689022 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.110213025 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.086065077 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.085930048 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.076026858 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.069007189 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.236444682 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.121543005 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.115535297 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.112454343 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.087684426 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.09200943 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.10984252 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.086219519 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.086063802 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.165702159 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.115292751 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.079795957 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.09716418 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.096125846 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.092628727 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.084298229 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.073059229 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.090568569 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.074955737 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.076125559 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.082191487 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.105662177 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.108831133 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.072760901 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.093227389 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.084421871 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.085817418 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.102461231 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.096415848 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.076732654 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.082208949 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.082789959 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.119831221 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.103174081 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.101317581 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.089957714 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.100533492 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.096704637 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.112411976 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.086673375 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.078036377 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.188216669 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.131481043 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.114301859 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.083824401 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.075998091 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.098438651 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.075353191 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.07611351 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.096481443 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.209558185 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.092869998 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.082298597 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.092509307 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.075265224 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.086002044 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.093565825 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.09183153 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.152202102 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.092288424 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.090643492 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.117118447 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.088895597 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.085798378 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.088297503 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.083383988 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.197478186 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.088862112 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.081118087 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.083207199 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.105511734 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.08791657 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.088792851 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.094786427 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.147290983 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.089651878 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.081390005 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.117119145 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.097140958 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.084111972 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.110540962 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.082410472 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.108754255 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.092023169 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.086690468 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.087577932 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.114894019 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.076015564 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.078912783 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.096257988 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.126666671 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.092059501 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.085715837 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.100826237 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.104895108 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.083119466 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.086461754 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.087700184 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.078808268 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.082751861 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.145369077 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.087460355 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.11129748 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.199299219 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.120682972 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.106502176 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.088419802 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.099577588 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.123000659 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.121945413 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.079767634 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.087864735 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.119880035 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.137344104 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.07714412 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.076702982 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.095954059 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.123536565 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.104118956 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.086014216 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.099359982 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.074835642 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.087805077 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.119869275 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.084037998 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.091228461 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.194948598 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.082709195 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.092506945 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.118518861 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.177024589 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.084128481 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.092967638 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.075948531 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.103126464 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.091905477 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.094391449 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.080356182 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.100526567 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.081166884 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.102130291 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.087701814 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.144717899 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.079480587 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.081647122 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.092785819 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.089065826 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.084373758 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.084033645 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.076775954 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.090935456 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.069623147 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.078043149 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.092422754 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.099377056 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.091710191 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.117014476 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.087874319 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.182426962 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.096107834 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.075492564 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.108750906 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.091286508 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.104401829 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.084021123 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.082619723 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.100321715 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.08888286 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.093562356 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.107777103 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.089177367 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.120541605 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.123765449 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.087103698 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.076820821 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.084334002 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.173439102 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.085109189 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.077668682 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.089661356 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.114150002 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.110218947 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.098272195 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.136520224 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.093953325 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.081618937 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.205583164 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.087703355 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.092677529 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.095252725 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.083185852 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.093584865 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.086682611 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.087154566 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.08540621 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.247470796 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.143578527 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.10718055 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.098074361 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.104988101 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.085899805 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.07913733 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.125696808 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.105280193 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.086929262 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.077039306 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.08152077 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.096429071 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.079697049 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.09043706 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.109743191 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.090596462 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.086441336 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.091433059 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.074379306 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.072471735 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.080675513 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.135886727 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.086034208 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.087974546 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.091493461 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.087357285 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.094994794 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.097315369 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.111152448 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.091931343 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.08270853 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.295112469 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.100242028 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.082540186 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.110878845 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.068428887 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.083297768 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.077152517 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.126419421 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.113693188 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.092861727 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.090238973 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.090019852 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.098287825 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.088172189 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.071469552 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.086788008 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.175671319 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.072931471 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.083632783 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.107117466 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.092601647 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.109430549 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.092830256 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.070412299 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.089848811 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.084993897 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.082422626 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.128245158 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.086346939 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.110161447 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.245330021 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.100444892 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.085450052 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.09036294 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.092046881 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.082173929 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.095340891 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.11165401 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.078928429 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.088157539 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.081194787 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.094178945 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.118121735 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.099840765 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.101163979 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.086075963 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.077786957 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.08484887 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.081161324 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.117548752 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.082861003 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.091761361 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.11103582 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.077975125 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.086698762 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.139548142 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.194218091 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.090469238 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.106982211 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.195741641 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.187809926 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.110924715 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.08349173 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.089478007 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.128204447 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.089406381 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.077802367 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.083090015 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.076439876 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.088112276 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.140528633 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.094253223 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.086774456 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.085771725 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.091038754 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.07662406 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.097941613 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.086215674 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.216100315 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.150763715 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.079878406 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.092298946 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.13135153 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.122141679 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.108018373 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.112692627 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.085069689 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.117878861 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.09018376 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.155196323 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.09146071 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.077001901 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.088718827 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.09356691 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.118605517 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.103642677 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.080303736 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.087539267 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.075675067 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.090273398 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.111974582 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.095881112 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.117542671 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.090745152 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.101211371 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.086457837 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.130494162 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.095572915 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.095359954 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.111529006 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.080068837 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.07810494 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.096205076 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.283961504 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.09855462 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.085018363 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.089553054 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.097110557 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.090362106 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.122648391 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.102625458 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.078779975 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.089570983 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.085968885 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.111868456 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.093665073 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.109835999 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.079194656 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.140952919 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.080622439 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.093918811 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.184490825 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.102566924 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.08187484 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.095268825 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.079095327 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.123538659 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.098245497 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.088301195 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.096079958 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.081088612 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.123399352 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.085421187 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.283600581 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.090055784 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.082888365 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.073421946 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.090046174 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.091515659 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.091344899 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.090777383 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.104332019 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.09068651 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.102998237 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.080338895 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.096311214 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.09330095 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.091615559 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.082363304 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.117064468 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.079132885 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.076583457 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.303146 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.123561591 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.116453871 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.084992828 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.085534838 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.100240041 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.082056726 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.115169171 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.088467452 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.133762374 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.156011372 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.077620381 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.122001667 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.114303451 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.102567461 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.087165964 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.128211867 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.080619233 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.094091526 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.08676268 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.082371323 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.098848891 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.095244831 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.104104226 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.099013492 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.124245476 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.091532779 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.135305092 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.096704563 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.075802675 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.092061762 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.094175103 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.109422891 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.089789095 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.095306438 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.104978422 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.096075978 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.092208536 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.098473785 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.129192209 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.082480987 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.142716309 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.235509907 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.097624049 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.088011967 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.086504633 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.084817036 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.081192315 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.172864089 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.123728391 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.132159362 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.106874957 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.088826269 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.122536751 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.185673577 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.098938262 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.079404255 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.086327081 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.085202814 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.10254769 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.089388647 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.111994097 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.079685115 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.100635282 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.099149996 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.086770439 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.096872875 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.098561959 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.101403202 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.129524988 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.16799984 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.089781304 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.123883424 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.086130915 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.125837376 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.09373052 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.125293984 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.099985866 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.090212172 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.195292567 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.088636835 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.09247058 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.115742958 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.075789934 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.09841277 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.105946107 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.091873765 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.077969832 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.085273746 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.089147471 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.073565169 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.091830348 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.087215454 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.113778887 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.097804694 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.077147304 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.096586661 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.123408334 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.098579015 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.095934717 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.111082038 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.101755036 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.078376454 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.09730141 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.090204282 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.091277472 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.07432582 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.105335393 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.091833803 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.090683672 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.113287747 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.121179142 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.080994946 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.091251027 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.075806519 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.088906982 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.086590736 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.108145746 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.084775866 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.096435273 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.095280852 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.079162846 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.091973672 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.091605271 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.145205862 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.096272943 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.089061837 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.097913606 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.093534275 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.091695221 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.0952755 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.113974064 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.098505571 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.095470573 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.087780737 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.079463903 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.090005082 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.094881437 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.097437019 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.081441527 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.09451571 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.085430436 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.12490479 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.089370748 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.180692616 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.1091223 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.085235749 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.081275203 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.096246653 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.226573255 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.118005133 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.087821443 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.089807206 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.085777765 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.104422326 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.093130903 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.08475903 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.151362799 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.09745759 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.099507462 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.124861928 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.115584578 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.122444534 seconds)
done (took 1431.040615964 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.447979887 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.068026628 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.363244373 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.258334318 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.445341733 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.338544637 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.158582039 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.536946735 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.140152642 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.490419535 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.240450762 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.063091368 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.067225557 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.257421454 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.466475798 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.39957598 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.304392906 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.557364274 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.574323294 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.466135496 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.201912031 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.324837982 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.340434734 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.393203641 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.069015598 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.066737862 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.345973665 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.200657157 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.327077875 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.064087386 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.065410691 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.263392524 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.33914711 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.06230267 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.061630964 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.06448372 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.353640169 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.070353497 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.335084555 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.444877399 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.314472778 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.064787618 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.064377048 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.067173399 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.173635808 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.327367469 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.155095445 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.067723647 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.067526292 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.062637802 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.317975968 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.066602316 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.06609626 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.338318914 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.251060265 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.071672819 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.42868901 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.438583545 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.458708827 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.394507091 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.32980291 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.492035684 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.391452837 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.269516304 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.067352205 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.37180581 seconds)
  done (took 261.227716965 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.379935721 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.215508906 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.41521771 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.704752636 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.377848413 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.428753243 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.777305665 seconds)
  done (took 19.36231994 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.985819347 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.130246908 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.364199919 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.363520007 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.131417588 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.240564974 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.200453483 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.065375782 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.300731281 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.161827055 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.402166193 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.365483165 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.06962717 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.063266234 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.195864727 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.402803648 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.957985812 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.148669663 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.121009255 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.408596675 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.06649069 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.067555853 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.249329344 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.114545425 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.159358463 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.163893799 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.131062248 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.979837728 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.117749989 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.113089501 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.137669406 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.12218298 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.124618258 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.065489405 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.112010683 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.433724972 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.130631761 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.132160603 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.266266006 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.066662241 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.110535898 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.131624985 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.271364625 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.136651546 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.11159498 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.289565931 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.121575277 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.136426029 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.111041041 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.125937558 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.271868898 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.127213566 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.104816105 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.066542836 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.316055614 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.06965822 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.151599647 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.120865013 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.125163694 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.197160665 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.130351817 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.407674798 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.360785427 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.112630337 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.364915441 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.423978129 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.132155873 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.111481087 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.113378549 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.392546051 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.122948879 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.362943133 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.140473989 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.172014635 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.133931865 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.235584671 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.289287893 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.818249663 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.781883131 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.068731974 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.309819185 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.11762725 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.247103389 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.937304968 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.063531659 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.112268904 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.132368214 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.507259324 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.949759244 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.13174792 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.374916143 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.116895136 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.195208851 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.171449331 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.103583066 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.121490948 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.265838834 seconds)
  done (took 277.589072975 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.195215484 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.403266536 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.290176605 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.629079852 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.624270068 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.205907834 seconds)
  done (took 19.411706735 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.465958998 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.744556999 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.156191863 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.146184247 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.179771205 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.107965606 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.116435109 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.21902804 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.010367521 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.130314549 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.112937655 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.145010298 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.119612381 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.240682624 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.108995394 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.131494823 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.109918551 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.159850142 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.136672402 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.184959055 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.196764695 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.171382348 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188147646 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.610476534 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.925748389 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.131334397 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.910062629 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.133961451 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.137137678 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.323795717 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.278498639 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.114771827 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.592278835 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.945643714 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.693103717 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.617784625 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.025385053 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.137052663 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.142399536 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.111421487 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.135538461 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188601381 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.156020812 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.139935782 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.410162798 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.34019647 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.949958171 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.440036544 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.113566082 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.14071034 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.142556255 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.166225681 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.119238823 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.139367233 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.845592231 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.497441019 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.861302553 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.114452382 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.172666659 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.616326821 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.964092228 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.115086646 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.463467788 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.850872344 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.068591925 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.137849254 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.616831349 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.012475193 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.192332142 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.153388374 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.136388004 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.147409378 seconds)
  done (took 184.751465126 seconds)
done (took 764.406653903 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 35.963395242 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 33.635470122 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 35.015296206 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 32.856588932 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.147673397 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 35.895395194 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 32.910895902 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 33.714318695 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 34.02234143 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 34.032936475 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 33.779051169 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 33.914466827 seconds)
  done (took 413.955368748 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 42.030434137 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 37.130447245 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 34.78678941 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 34.127208497 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.123755426 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 35.402359537 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 35.485844286 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 38.179119494 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 37.266158328 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 36.880599729 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 36.16851657 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 37.982876312 seconds)
  done (took 449.453967224 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.264217078 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 37.680477505 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 38.854940153 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 38.251343446 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.677903912 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 39.728658602 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 39.200708635 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 36.471305103 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 35.479626554 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 35.121932196 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 39.393500669 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 39.793492576 seconds)
  done (took 465.036195706 seconds)
done (took 1330.517744635 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 10.601158809 seconds)
  done (took 15.572887123 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 10.284143655 seconds)
  done (took 15.305565339 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.98147927 seconds)
  done (took 14.955104457 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 10.029500393 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 10.020267724 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 9.999275259 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 9.983578592 seconds)
  done (took 45.035782302 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 10.520157376 seconds)
  done (took 15.490306948 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 9.980768671 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 9.979074418 seconds)
  done (took 24.987402074 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 10.321331559 seconds)
  done (took 15.291244916 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 10.658171584 seconds)
  done (took 15.633932742 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 10.004378381 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 10.038336934 seconds)
  done (took 25.019540812 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 9.977251755 seconds)
  done (took 14.952779148 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 13.258190828 seconds)
  done (took 18.298081643 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 9.990940291 seconds)
  done (took 14.971055784 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 10.065364408 seconds)
  done (took 15.035685928 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 10.348818691 seconds)
  done (took 15.318771029 seconds)
done (took 270.89043422 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 9.990088972 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 9.988283398 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 9.984020201 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 9.980491442 seconds)
  done (took 44.91459886 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 5.299527259 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 5.302908547 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 5.352548592 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 5.351183484 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 5.226485244 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 5.222708646 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 5.302036565 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 5.284428979 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 5.224595798 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 5.34717889 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 5.285338844 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 5.348695676 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 5.348777768 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 5.340932969 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 5.342421726 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 5.347296517 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 5.34414458 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 5.306976411 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 5.221598321 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 5.340249373 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 5.350247984 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 5.348772076 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 5.672136863 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 5.673718896 seconds)
  done (took 133.16186507 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 5.904031766 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 6.046141993 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 5.576399777 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 5.557831317 seconds)
  done (took 28.058220331 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 9.986270272 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 5.453455552 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 5.341827852 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 5.389989035 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 5.22989308 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 5.269555237 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 5.274367199 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 5.082706313 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 5.192538875 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 5.038817852 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 5.044258379 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 5.613352323 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 5.349246446 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 5.350134969 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 5.390939023 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 5.221002934 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 5.017304704 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 5.023737078 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 5.252198025 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 5.380333873 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 5.197375823 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 5.489812863 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 5.231441461 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 5.167559378 seconds)
  done (took 135.965250691 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 5.802178356 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 5.561261921 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 5.894566313 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 5.966434349 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 6.218937711 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 6.111625698 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 5.853406857 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 5.847418735 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 5.142743809 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 5.878645778 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 5.722733827 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 5.849249619 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 5.508884436 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 5.907744214 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 5.796498359 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 5.083918872 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 5.081911469 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 5.860665968 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 5.854456387 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 5.41418921 seconds)
  done (took 119.331755236 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 9.981296321 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.240890222 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 5.682376194 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 5.292654775 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 9.999348332 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 9.97898476 seconds)
  done (took 52.147856319 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 6.75968546 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 5.051507207 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 5.154646579 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 5.068215095 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 5.078295265 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 5.051631224 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 5.441718971 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 5.0770321 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.221177464 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 5.338239007 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 5.95501211 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 5.231228051 seconds)
  done (took 69.399886141 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 9.980754155 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 9.986583153 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 9.983715137 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 5.114322808 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 5.748956002 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 5.629786971 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 5.87600109 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 9.987573337 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 6.014088338 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 5.144089968 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 5.599903039 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 5.117572273 seconds)
  done (took 89.159119169 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.45447768 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.977636219 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.977609392 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.978832624 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.981262983 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.98255586 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.980300267 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.934940224 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 8.536126426 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.979920807 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.978490045 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.981377464 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.981439594 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 9.981340026 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.979504999 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.981643696 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.991823278 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.970004513 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.991165896 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.982124711 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.987041484 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 5.089948618 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001700258 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.997356844 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.266701118 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.004143074 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.646100453 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.982369413 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.978313835 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.976636276 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.995216038 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 9.979281535 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 7.622916599 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 5.266410272 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.98111674 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 9.976884864 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.992343134 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 9.982649001 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.979871732 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.083829977 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.101781349 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 5.115579948 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 9.31727446 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 5.893056279 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.245682114 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.979090796 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 9.977672172 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.979815787 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.996353056 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.986838015 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.979439605 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.982813861 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.081807217 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.980513344 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.979858352 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.980639936 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.980646613 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.979167326 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.991542726 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 9.024599218 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 9.983904462 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.983177866 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.99449084 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.982487924 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.980400111 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.998540556 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 6.443905064 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.137335882 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 6.552406292 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.000401121 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.983749795 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.985397997 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.99739155 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 5.051237144 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.982014548 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.980607066 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.981925566 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 9.987265474 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 9.986764481 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.982639171 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 9.998291335 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.020649993 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.981215634 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.984705836 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.99759543 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.983779567 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.999919465 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.987753222 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 5.015254151 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 9.985399517 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.985883961 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 5.053728352 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.100570055 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 5.200673789 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.990193287 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.984095955 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.991708301 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.99672969 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.982782406 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.98668101 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.983997136 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.980820734 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.983331213 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.983056067 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.982832778 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.981848592 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 9.986674781 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.996702167 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.980529971 seconds)
    (110/608) benchmarking "5d"...
    done (took 8.294934084 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.990976674 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.986252455 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.986184639 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.982039502 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.983538695 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.987689382 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.983671099 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.98642694 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.000732811 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.986919849 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.987886374 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 7.912100778 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.993472563 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.991680616 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.987346378 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.991268207 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 10.003460321 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.985438942 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.986704322 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.999136431 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.98709605 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.987100128 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 5.898616476 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 5.24239792 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.988435591 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 9.994302591 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.998984756 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 9.986567137 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.986866181 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.992851961 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.4051539 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.994252754 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.985390966 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.991205057 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 8.350018163 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.98688204 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.987250755 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 6.537960896 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.032104505 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 5.018632443 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.994479781 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.115746745 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.999227903 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.985176587 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 10.006048744 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.98356999 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.991395098 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.085698201 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.988069383 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.988292466 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.003026394 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.487494538 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.984386799 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.005488908 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.995422175 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.558157452 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.992855896 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.720565179 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.986877309 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.003877267 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.986748977 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.984450525 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.985988167 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.000604809 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 5.213490119 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.339229947 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.558050553 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.604537129 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 6.663409007 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.99935794 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.983925714 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 9.996199834 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 9.984181684 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.979295102 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.013961823 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 5.245575112 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.974681124 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 9.992456883 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 9.976012165 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.999136359 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 9.992203933 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.987475983 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 9.98879136 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.98926643 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.99242745 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 9.984689056 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.984287361 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.61773069 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.98987126 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 5.444934247 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 5.129844237 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.988271123 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.987104153 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.97545279 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.987786341 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.990376484 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.991238934 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.985351861 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 5.66143126 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 5.838842218 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.071417494 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 9.985101992 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.986048529 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.986147694 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.000076353 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.990721966 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.993174915 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 5.584711116 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 5.454957689 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.992309624 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 6.701417294 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.989087285 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.993516665 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 8.306438775 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.988655134 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.997970325 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 9.685812527 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.988530027 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.986369537 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.987914188 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.986744589 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.98712874 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.013556141 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 6.384473202 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.933694263 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 7.337692372 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.986757538 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.409644336 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 5.315370172 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.008287307 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.988668017 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 5.128402982 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 5.138783306 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.992669615 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 5.614625227 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.076069921 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.987339708 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 5.589032933 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.005989161 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.232945536 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.991131816 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.982823919 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.988944303 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.988610299 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.989430469 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 5.027501412 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.987699828 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.994195465 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.98564011 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 5.01911504 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.38974481 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.026256207 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.997285647 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.997892857 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.572847673 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041046469 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.10835491 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.146420365 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.997824965 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.994985831 seconds)
    (271/608) benchmarking "4d"...
    done (took 6.981411362 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.996279819 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.993456594 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.997269571 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.981979857 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.993695467 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 9.99306521 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 9.98994351 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.989558282 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.989973501 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 7.745811928 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 5.117331555 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 8.418263272 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 5.034686633 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.440951031 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.993530146 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.97818019 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 9.98791723 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.977903094 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 5.170673799 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 10.001276995 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.990334389 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.992899045 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.985354407 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.989660318 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.985968317 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.987999956 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.996199716 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.996826991 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.189023995 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.99014111 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.007555093 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.991519139 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.003818113 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 9.990881793 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.998645128 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.99571352 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.990294743 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.991756668 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.000273519 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.007117487 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.995660028 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.013814547 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.998292002 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.988529046 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.005443506 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.986349362 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.010188134 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.550691007 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.995466329 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.989480033 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.993770954 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.993340326 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.995165663 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 9.991427793 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.989181632 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.593571563 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.984005248 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.997542133 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.012628654 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.007284248 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.992208509 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 7.69955835 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.99512161 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 6.060132527 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.001282345 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.996396915 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.999822786 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 6.043041756 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.997793691 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.997125355 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.999203852 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.99670297 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.00699455 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.994862598 seconds)
    (346/608) benchmarking "3d"...
    done (took 6.703832783 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 6.132602719 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 10.010813941 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.009161192 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.9963049 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.002328256 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.009037195 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.990919474 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.992617026 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.557136052 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 9.308769221 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.98970273 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.995877419 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.989877538 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.996909532 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.991957433 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 5.582614065 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.996255121 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 7.336958406 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 5.12918758 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 7.649023432 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.989879541 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.991834188 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.992090913 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.33726758 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 9.996777031 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.016277139 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.002952864 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.99765117 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.997815602 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.008280791 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.996976014 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 5.028227748 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.996737813 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 5.234631042 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 10.001971332 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.989776789 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.996398246 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.996906069 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 8.149073587 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001557748 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.009564155 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.998496666 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.99610793 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001819038 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 10.000837909 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.006187076 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.006633456 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.019306986 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.833449972 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 7.737858724 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.004404244 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 9.226453701 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.002176725 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 7.70601484 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 10.00619198 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 9.997698712 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.996934101 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.994512884 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 10.004483179 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.999909702 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.002676533 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.016880665 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.007293004 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.002525087 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.119500876 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.00693347 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.99069366 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 5.57774214 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.005399717 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.99509006 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.02192236 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 5.024316174 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.004542041 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.002468311 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.994535934 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 9.194778521 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.004008578 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.001742377 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 10.009476953 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.008981465 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.990770124 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.004164683 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.990194039 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.010254406 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 9.99592513 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.999481376 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 10.004041033 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.996293038 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 9.947071506 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.985331116 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.995217267 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.013675618 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.997043852 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.000070789 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.013113789 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.994956939 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.99972281 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.996746992 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.16705536 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.997901666 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.997483254 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 5.258699153 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.001582328 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.009921874 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.004738302 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.999969309 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.002337098 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.00157732 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001586434 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 5.305989228 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.999277 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 10.001702459 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.374529226 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.157900434 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.104774196 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.00333572 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.99925833 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 5.403400223 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.04110478 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.004506306 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 8.287916842 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.003264579 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.003999489 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.001884049 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.008946092 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 10.174593759 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.309130853 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 5.544224052 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.995440982 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.000038102 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.998298738 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.012074276 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001425051 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 9.268622983 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.006986148 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.007229936 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.006258152 seconds)
    (484/608) benchmarking "6d"...
    done (took 10.010032265 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.584852771 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.009115847 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 6.067526681 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.997719683 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.004242443 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 10.019340239 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 8.314202666 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 10.017438662 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 8.72630865 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.002351222 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.013802947 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.007951057 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.99036146 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.992772015 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.009504215 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 10.007100644 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.010451331 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 6.073007661 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 7.339417264 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.99651612 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.638047762 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.004629337 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.002584457 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 9.995069324 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.010912833 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.004470906 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.00717363 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 10.003288548 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.563251576 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.004549851 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.997887489 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.015349069 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 5.104708091 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.007105259 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.617167581 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 6.921877745 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.004916888 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 6.391435585 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.991837498 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.004154768 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 5.582589119 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 5.339053891 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.025312352 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 5.135237451 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.002740341 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.010975601 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.003413955 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.006336298 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.99365383 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.018457599 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 5.508360904 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.206779778 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 5.267437129 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 5.144488114 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 9.994223596 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.992713162 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 5.17208571 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.996119698 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.004304228 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.001088951 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.992570098 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 6.072972434 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.017966311 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.020583384 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.582145758 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 9.998470915 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.995665367 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.936193742 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.011703619 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.012785644 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.003463847 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.992123496 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.016071708 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.999553236 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 7.423071492 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 5.80794837 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 10.095278629 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.999094104 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.089162167 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 9.752040199 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.992296089 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.998291272 seconds)
    (567/608) benchmarking "2d"...
    done (took 6.262479147 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.016076647 seconds)
    (569/608) benchmarking "7d"...
    done (took 7.833328852 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.989441325 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.614580068 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.002652162 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 10.009277844 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 9.993234796 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.000448883 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.993018576 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.989409762 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.998553881 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 9.991789678 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.000594638 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.987916829 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001181312 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.007103098 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.990848131 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 9.989396341 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.885932938 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.403540727 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.682865875 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 5.229386023 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.98402059 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.59214359 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.001614342 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 5.127630998 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 9.995916154 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.998542315 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.992987139 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.992954699 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.999294033 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 9.999846967 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.00213765 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 9.993775725 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 9.99428453 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.989403202 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 9.987658849 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.002757673 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 10.002612093 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.111696468 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.002500169 seconds)
  done (took 5579.359060892 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 10.123805385 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.208282413 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 10.14524457 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.028229278 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 10.072379009 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 10.053613054 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.125138785 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.070173366 seconds)
  done (took 85.821147647 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 10.001312261 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.199923919 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.740932088 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 10.051565006 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 9.989842238 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.629218091 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 5.031252032 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.68108265 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 10.07445539 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.423090163 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 10.118284101 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.293516767 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 9.990163571 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 10.005289431 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.788884153 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 5.052733299 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 9.988713619 seconds)
  done (took 141.052354622 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 10.17480295 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 16.417666927 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 9.992341497 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 14.643900741 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 10.073797339 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 10.425622005 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 10.002014779 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 10.014985853 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 10.759632778 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 16.08339073 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 10.063649146 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 10.108292377 seconds)
  done (took 143.745562349 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 5.22624457 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 5.209876444 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 5.248091837 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 5.268724901 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 5.246828169 seconds)
  done (took 31.187697407 seconds)
done (took 6658.285209334 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 5.226400191 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 5.343526007 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 5.531107198 seconds)
  done (took 15.857554302 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 6.716880925 seconds)
    (2/4) benchmarking "Float32"...
    done (took 5.584939636 seconds)
    (3/4) benchmarking "Float64"...
    done (took 5.946852448 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 6.317607331 seconds)
  done (took 29.617097635 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 5.638960372 seconds)
    (2/2) benchmarking "Float64"...
    done (took 5.788856901 seconds)
  done (took 16.43273165 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 5.421069855 seconds)
  (6/15) benchmarking "18129"...
  done (took 10.022631894 seconds)
  (7/15) benchmarking "20517"...
  done (took 5.565595329 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 9.99735443 seconds)
    (2/3) benchmarking "Float64"...
    done (took 10.016026357 seconds)
    (3/3) benchmarking "Float16"...
    done (took 10.013973674 seconds)
  done (took 35.011576977 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 5.039907922 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 5.038761913 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 5.040180819 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 5.039198307 seconds)
  done (took 25.150090103 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.136584311 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 5.410269108 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 10.002606101 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 10.047140586 seconds)
  done (took 37.588535582 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 5.577509199 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.252979662 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 5.538719823 seconds)
  done (took 21.367480988 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 5.642536501 seconds)
    (2/3) benchmarking "Int"...
    done (took 5.066387317 seconds)
    (3/3) benchmarking "Float64"...
    done (took 5.612467193 seconds)
  done (took 21.316389474 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 5.815679518 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 6.196049776 seconds)
  done (took 17.003645892 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 5.185998225 seconds)
  done (took 10.188960883 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 5.837226136 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 5.320654764 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 5.473581252 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 5.534335808 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 5.670868193 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 5.161604881 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.350594378 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 5.280360474 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.421536828 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 5.410478416 seconds)
  done (took 59.458427772 seconds)
done (took 320.218986657 seconds)
(22/23) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 5.041201787 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 5.019367976 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 5.026356248 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 5.029912796 seconds)
  done (took 25.099358741 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 9.997844766 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 9.994443402 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.009731275 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.004608272 seconds)
  done (took 44.990569893 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.008023276 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.008907293 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.008436258 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.010490201 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.014622768 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.008783292 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.023224807 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.013234293 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.0104977 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.010774001 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.010123778 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.007968627 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.017219149 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.012507611 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.01007838 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.009780605 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.011073611 seconds)
  done (took 90.187413602 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.016562893 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.015435917 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.012277776 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.011105391 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.024168935 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.010295463 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.054503796 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.017384586 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.011771817 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.017686478 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.014405798 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.015026388 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.033520749 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.017472121 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.028177605 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.017660311 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.0107793 seconds)
  done (took 90.32134333 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.417228993 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.191516092 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.246905913 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.02299711 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.208367791 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.015230988 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 9.997388338 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.244249212 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.035522875 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.244488386 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.380844528 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.217394067 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.269440597 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.226457458 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.414914594 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.235871343 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.178910739 seconds)
  done (took 98.539234025 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 5.43971055 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 17.868187511 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 10.116196008 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 5.017819541 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 16.287938244 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 5.014478059 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 5.210786304 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 9.980680602 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 5.451033672 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 10.682462449 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 10.038633008 seconds)
    (12/13) benchmarking "Float16"...
    done (took 10.00266173 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 5.599783505 seconds)
  done (took 121.706958195 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.019592379 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.013631422 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.013687071 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.008405963 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.0203765 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.005876814 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.269164829 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.012126227 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.009512647 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.011675459 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.029544281 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.019906873 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.02625678 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.016514639 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.01925198 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.011572684 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.014318546 seconds)
  done (took 90.517564167 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 5.74509961 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 5.767417042 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 5.745632598 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 6.166198542 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 5.97371372 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 5.572080282 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 6.169207188 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 5.757593519 seconds)
  done (took 51.889386387 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.001602916 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.00100126 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.006375751 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.001643568 seconds)
  done (took 45.015184606 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 9.998192663 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.868930876 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.59835419 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.041444532 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.994754885 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.040119781 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.016711461 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.815171224 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.217819942 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.801394812 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.336878403 seconds)
    (12/17) benchmarking "ascending"...
    done (took 7.758337643 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.025406144 seconds)
    (14/17) benchmarking "descending"...
    done (took 7.834573098 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.517833122 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.85910174 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.621481387 seconds)
  done (took 131.339001117 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.041612727 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.021561924 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.031714991 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.00735733 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.028068913 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.005541197 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.988359724 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.027375717 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.01471945 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.029138566 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.045186597 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.039032256 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.030890846 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.044521289 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.056897379 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.020714276 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.027711478 seconds)
  done (took 91.451415097 seconds)
done (took 886.058653972 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 6.196357823 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 5.62907935 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 5.140515825 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 5.198541454 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 6.124283538 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 5.235705126 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 5.201358735 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 5.155082252 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 5.544833623 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 5.139197494 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 5.373621527 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 5.19429473 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 5.596429074 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 5.197637305 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 5.149765103 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 5.124111604 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 5.413381466 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 5.550696667 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 5.159105002 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 5.589360213 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 5.149604442 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 5.658456398 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 5.166994938 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 5.545145 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 5.369645789 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 5.654373278 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 5.965459392 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 5.344016325 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 5.191069907 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 5.174679538 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 7.959920178 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 6.13624151 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 5.129551645 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 5.135149459 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 5.126834425 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 5.135082549 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 6.178613637 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 6.213154508 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 5.139582733 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 5.493240041 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 5.591777335 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 5.424602607 seconds)
  done (took 235.787830092 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 5.177671461 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 5.109383375 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 5.100746796 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 5.080593117 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 5.542595419 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 5.099883287 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 5.147311321 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 5.116490964 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 5.086889406 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 5.12740282 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 5.126468355 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 5.540433708 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 5.152241631 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 5.501572835 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 5.124462678 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 5.133007194 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 5.089602636 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 5.52216119 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 5.139889978 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 5.102750059 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 5.048879053 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 5.085768413 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 5.039612232 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 5.126406057 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 5.034853851 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 5.083459261 seconds)
  done (took 139.434373605 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 5.08198939 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 5.152094156 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 5.203886361 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 6.280227529 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 5.121251111 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 6.114347928 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 5.236557737 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 5.167393343 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 6.165874917 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 6.126096572 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 5.125823657 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 5.168455581 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 5.109090873 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 5.213401399 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 7.335007525 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 5.072502622 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 5.219009431 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 5.186294774 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 5.165634029 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.122352577 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 6.331759324 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 5.116020013 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 5.235101535 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 6.026789429 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 5.745339727 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.517048464 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 6.003731177 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 5.358245135 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 7.409797983 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 5.129059804 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 5.182366389 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 5.217088396 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 5.281401064 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 5.21024414 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 5.168650368 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 5.068101043 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 5.054582151 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 5.126438708 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 5.711092855 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 5.173006872 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 5.228091608 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 6.050289316 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 5.221585798 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 5.824631473 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 6.177718822 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 5.267946589 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 5.501524443 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 5.139385541 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 5.174255493 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 6.152412864 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 5.223156229 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 7.224035482 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 5.128798041 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 5.23873053 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 5.17431713 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.603791793 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 5.111254658 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 5.315202079 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 6.140831984 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 6.404899046 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 5.133830184 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 5.309820892 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.165917375 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 5.952466969 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 5.174463751 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 5.245921292 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 5.978275732 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 6.188816008 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 5.219003781 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 7.284449914 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 5.649521802 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 5.113188756 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 5.075528949 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 5.126033838 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 5.162195826 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 5.353437925 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 6.506965706 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.257687022 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.293127002 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 5.203215676 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 6.246702554 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 5.370638628 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 6.182373555 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 5.899570643 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 5.167199001 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 5.057321702 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 5.108269283 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 5.26446123 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 5.207196282 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 5.551021071 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.608095607 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 5.321761049 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 6.355106863 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 6.220024787 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 6.295115642 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 5.312482937 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 5.034439429 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 5.049875712 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 5.199928126 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.597820522 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 5.106652055 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 5.98173265 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 5.678207559 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 6.099107081 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 6.296972923 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 5.806770637 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 5.277301188 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 5.930602745 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 5.251433451 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 5.040530436 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 5.991675985 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 6.848851314 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 6.530338599 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 6.336885068 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 5.0421215 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 5.574898484 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 5.141332198 seconds)
  done (took 658.103899256 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 10.002456348 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 10.002997514 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 9.994728006 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 10.004794065 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 10.002297002 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 6.309533394 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 10.00252648 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 9.999695975 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 5.24385112 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 10.002480397 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 10.001597326 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 10.027757845 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 10.009853817 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 10.015390477 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 6.960478559 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 5.77790806 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 6.809259274 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 10.0018064 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 10.002523437 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 10.00218162 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 10.002099096 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 10.001964811 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 10.00201309 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 10.000962447 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 10.012943212 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 10.021073618 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 10.001656173 seconds)
  done (took 256.214009449 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 5.075870999 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 5.390567631 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 5.090866553 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 5.136041841 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 5.108137247 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 5.066701323 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 5.423892814 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 5.080061949 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 5.108781949 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 5.072822384 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 5.044950815 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 5.293432608 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 5.312207283 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 5.479454929 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 5.108073397 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 6.190122635 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 5.579689358 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 5.188977456 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 5.08264011 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 5.087422114 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 5.215551031 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 5.38341697 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 5.261027913 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 5.278750821 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 5.218517131 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 5.30254288 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 5.143137685 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 5.071283568 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 5.197694158 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 5.424277801 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 5.064959584 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 5.408625316 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 5.211786804 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 5.061089386 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.427431887 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.290047602 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 5.479354291 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 5.532988689 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 5.211125698 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 5.03624913 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 5.035239996 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 5.24996615 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 5.328470654 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 5.117782852 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 5.063830461 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 5.600329979 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 5.0611057 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 5.365912438 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 5.094974669 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 5.0380056 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 5.068583138 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 5.077689879 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 5.263107331 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 6.793158241 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 5.226792434 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 5.341382825 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 5.517232985 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 10.010417295 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 5.141780606 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 5.300572854 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 5.038286455 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.427940779 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 6.445212959 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 5.125083223 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 5.074330205 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 5.854981372 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 5.138150023 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 5.42797256 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.498745735 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 5.073079753 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.329970022 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 5.239377793 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 5.035586514 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 5.265051575 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 5.208139221 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 5.497152488 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.488292895 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 5.148387159 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 5.136333832 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 5.082464723 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 5.264802159 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 5.03271271 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 5.534851125 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 5.151228617 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 5.035173316 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.438763426 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.333893538 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 5.041293037 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 5.067233647 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 5.154622157 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 5.203199497 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 5.168379451 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 5.29635173 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 5.129316598 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 5.727273536 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 5.277790104 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 5.357637278 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 5.074527556 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 5.141682423 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 5.033915164 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 6.710808556 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 5.20395768 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 5.046461945 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 5.324800209 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 5.456751167 seconds)
  done (took 564.5761751 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 5.51839763 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 5.076577897 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 5.229083675 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 5.425849992 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 5.335977664 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 7.202963207 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 5.238509524 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 5.089444708 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 5.200697091 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 5.203917471 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 5.190558206 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 5.12623688 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 6.02226294 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 5.670707836 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 5.077153865 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 5.138604315 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 5.10916806 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 5.511981939 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 5.280133727 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 7.217948232 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 7.415999227 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 5.675617661 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 5.296647062 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 5.33479243 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 5.367658566 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 5.404901825 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 5.530898407 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 5.153343581 seconds)
  done (took 160.039983032 seconds)
done (took 2019.153455362 seconds)
SAVING RESULT...
DONE!
