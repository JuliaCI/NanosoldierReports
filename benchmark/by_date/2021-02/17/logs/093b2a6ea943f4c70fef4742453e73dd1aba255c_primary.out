cset: moving following pidspec: 16084
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.837730203 seconds)
loading group "shootout"... done (took 1.201816435 seconds)
loading group "string"... done (took 0.690673619 seconds)
loading group "linalg"... done (took 8.825291245 seconds)
loading group "parallel"... done (took 0.170122176 seconds)
loading group "find"... done (took 3.036953247 seconds)
loading group "tuple"... done (took 2.188091025 seconds)
loading group "union"... done (took 15.131042109 seconds)
loading group "dates"... done (took 1.488938249 seconds)
loading group "micro"... done (took 0.220902633 seconds)
loading group "simd"... done (took 4.846436103 seconds)
loading group "io"... done (took 1.091210014 seconds)
loading group "random"... done (took 9.67231301 seconds)
loading group "problem"... done (took 1.440806662 seconds)
loading group "array"... done (took 25.843848773 seconds)
loading group "misc"... done (took 1.867673938 seconds)
loading group "scalar"... done (took 44.413658604 seconds)
loading group "sort"... done (took 3.396912388 seconds)
loading group "sparse"... done (took 12.90189021 seconds)
loading group "collection"... done (took 19.330823177 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.454186665 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.121385242 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.171888982 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.119060514 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.226248941 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.128873765 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.135813218 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.089844795 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.891905732 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.159905092 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.120708427 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.437241409 seconds)
done (took 5.583391578 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.190491863 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.245769011 seconds)
    (2/2) benchmarking "String"...
    done (took 0.171614783 seconds)
  done (took 1.672860154 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.093972855 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062383951 seconds)
    (3/3) benchmarking "different"...
    done (took 0.071538803 seconds)
  done (took 1.485954163 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.069279342 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.139721037 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069551843 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.07037071 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070832097 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.070146053 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.070108875 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.069966388 seconds)
  done (took 1.821486962 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074600743 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070605066 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.069929166 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.071436762 seconds)
  done (took 1.544353363 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067364004 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123761174 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.068491611 seconds)
    (4/4) benchmarking "different"...
    done (took 0.068327625 seconds)
  done (took 1.582216412 seconds)
done (took 9.645088514 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.165137822 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.87571291 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.902842327 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.15136337 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.275515234 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.329804862 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126619097 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.212695901 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.114673815 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077925032 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149274536 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080577774 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.490084276 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.484479692 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073928729 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175304869 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.646780982 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088612339 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134542135 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45331797 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.08055636 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090071535 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087157164 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.073296589 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320271696 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.157522077 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.672376721 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099037076 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.072217817 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.1975544 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073193582 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.082062779 seconds)
  done (took 11.303495166 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.117055976 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.118738317 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.073198119 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.128663191 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.099413448 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07468219 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.079362385 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.071674286 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.093726192 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130335235 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.095997735 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.128572984 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.074115452 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.073183548 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.102127125 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202945534 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083169962 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.086589707 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.07184818 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.086007542 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.110687172 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.083410646 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.082695475 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08247397 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.134822479 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.175236972 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.101475952 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.103859935 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.070706998 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.083432833 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.119726207 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.130635657 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.071086952 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.068995045 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.124992651 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.100220172 seconds)
  done (took 4.927673535 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.027758496 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.100713513 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.113769391 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104105307 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112374194 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118712558 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.156420262 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.128661574 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105599472 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.100044979 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079082463 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.181058962 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.696386272 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.278735497 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.073591144 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.15100156 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.366931646 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.115764776 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071782553 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071145099 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.100849946 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074329761 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.143968997 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.069964619 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.183620469 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.615788168 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07154587 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.190390917 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.101755053 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.11529464 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069896208 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.150701222 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.099844589 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074576318 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.576064343 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.070777083 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.068849031 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.09297706 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.098568775 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070415396 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.072161868 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.083256315 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.070169692 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.113589251 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08450338 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.555420349 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.074066291 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.623923072 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.328800899 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.08114935 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075541478 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06872168 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10580668 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067856576 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071539748 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.926425628 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.15200749 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.070139638 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.28753141 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072291995 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.071899634 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072707594 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103842667 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071117699 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07198073 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076675281 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100876029 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.892094368 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.152861742 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100774691 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071285254 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.413270151 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07488846 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072076317 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073005204 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.097479118 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.135404102 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06993137 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069312097 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112949586 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.228606655 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092712335 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.074270783 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072728398 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070796596 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.689522567 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.191661229 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.071883672 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07193592 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.504486781 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.068624778 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070583345 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072871775 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.095888433 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.072257386 seconds)
    (95/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067955393 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.067661545 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.068642721 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103920303 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.073034233 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33802874 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.071331188 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.536872277 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.074286489 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.109410707 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.125810068 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072467333 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.108687707 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.072950349 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.069283887 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.077993393 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.069932582 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068799913 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073803459 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.070144867 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070632915 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073224686 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072484967 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071650452 seconds)
  done (took 24.636065042 seconds)
done (took 43.15757525 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.414684757 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.083960928 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.084346203 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.084247049 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.087326857 seconds)
  done (took 2.069192281 seconds)
done (took 3.49472303 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.27010678 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.079257739 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.067990696 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.215154556 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.094277303 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.183998992 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.229059416 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.16782397 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.095014423 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.094484168 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.211613274 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.229736168 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.24211027 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.094184827 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.166563592 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.242656213 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.094781824 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067755078 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.094234375 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.094465894 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.094441123 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068214765 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.094645139 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.094488464 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.164422728 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.093823704 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067699471 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.164783513 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.092960044 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.164565163 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092683523 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.091813832 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.092711499 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163483019 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092871817 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.162383365 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.070251939 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092521199 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092163089 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.091911014 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.091788448 seconds)
  done (took 6.62775875 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077071513 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086844936 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089048588 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065766302 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075596829 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086327664 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065991533 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085878284 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.110032373 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086719427 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086522891 seconds)
  done (took 2.319591424 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07182048 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086671186 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088896473 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065382441 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.076920348 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.087050802 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065767301 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086850834 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090559594 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.087337046 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.087476849 seconds)
  done (took 2.245706598 seconds)
done (took 12.534628186 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.191722474 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.093802245 seconds)
  done (took 1.618946859 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.272583999 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.533495703 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.030668576 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.120572353 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099459648 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.116298099 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.229848488 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.096275139 seconds)
  done (took 8.018413969 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.133895307 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.073359888 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.071211615 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.071379538 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.073868822 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.071868712 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.073496009 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.07241757 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072793325 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071694709 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.072287502 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072994578 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07368475 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.071412343 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.072799564 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.071910402 seconds)
  done (took 2.68439523 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106279782 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.07309125 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.104646486 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.065577429 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.076095935 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06595498 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.075233561 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.077267501 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.074293484 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.074502894 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.076388512 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.074339114 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.075406366 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.075464976 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076679321 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.077482116 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.07717764 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.074584757 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.077359636 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.078322919 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07763196 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.077696976 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07774435 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.075833868 seconds)
  done (took 3.340697788 seconds)
done (took 17.016656537 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.180139078 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.079540215 seconds)
  done (took 1.607928512 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.095702806 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.097090429 seconds)
  done (took 1.559200043 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.075299366 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.063383405 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.082850658 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.074359241 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.064622339 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.064554264 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.082268722 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.064975559 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.064816253 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.065279333 seconds)
  done (took 2.071706508 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064782824 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070889987 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.070048977 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.068362037 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.070521033 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.066006892 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.068688193 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.066242075 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.073090355 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064855218 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.069276255 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.088291212 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.069095882 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.089372711 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.069292453 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.069527354 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.071257837 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06881652 seconds)
  done (took 2.64771877 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063088164 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.064555387 seconds)
  done (took 1.503299265 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066107937 seconds)
    (2/7) benchmarking "second"...
    done (took 0.064433643 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06760854 seconds)
    (4/7) benchmarking "year"...
    done (took 0.067908132 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.065304905 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.064791794 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.065233566 seconds)
  done (took 1.830970633 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.444255211 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.198717847 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.442992178 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.073476643 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.087384469 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.273193217 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.068085594 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.073404386 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.072987996 seconds)
  done (took 3.146708443 seconds)
done (took 15.750669459 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084703715 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.187881859 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.118074936 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.430803314 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095917548 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070809055 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.117395778 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.213308741 seconds)
done (took 2.718655057 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.271176276 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.187562675 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.267861094 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.156247491 seconds)
  done (took 2.993040502 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.417437104 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.17292058 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.079630871 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.070767254 seconds)
  done (took 2.130018629 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066545343 seconds)
    (2/2) benchmarking "read"...
    done (took 0.074582381 seconds)
  done (took 1.530082302 seconds)
done (took 8.322620549 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075651212 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063272385 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.10206767 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065880698 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.067314349 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064493513 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.067405255 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.066977232 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066360259 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.067785623 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064748182 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.067326263 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.067858355 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067713 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067297439 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067112655 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06723813 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06729167 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067332615 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067193645 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067529021 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06686785 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.067607845 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065602983 seconds)
  done (took 3.057578816 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081104554 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067406167 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.070463559 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.070011429 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.070790453 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.070587239 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.070542636 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.069502395 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.070600674 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.069372342 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071160691 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.07115019 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06949233 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.071214801 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069094409 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.071590526 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.071096491 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069496039 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069412387 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.071370086 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.071336736 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069846974 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.071764393 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071177563 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.071673517 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071756659 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.069614386 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.069940697 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071248855 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.071492552 seconds)
  done (took 3.528718835 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068579314 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061866978 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.063463214 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.073908115 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.063021955 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.063474925 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06374454 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06326458 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063621853 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064623937 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063995913 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.063143006 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.064318851 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.063794495 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.063224616 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06425481 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.069088361 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.084775955 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.063567892 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.063370264 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.068339832 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.063591376 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.063459981 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.063574339 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063971023 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.063728594 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.063366421 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063842519 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.063823308 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.064491197 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063510732 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.068367157 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.070283315 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.063541949 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.074822124 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.069217583 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063577346 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.071195845 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.064708284 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.063588834 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.063317968 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.063508104 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.063422754 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.064061761 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.074254139 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.064009147 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.064956055 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.067485727 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.063850745 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.063550862 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063619998 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.065911636 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070139021 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064193082 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062496863 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.064789581 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.063985625 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.064380167 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.063774039 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.063463379 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.063317394 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.067663143 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064978816 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.064158585 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.085523674 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.065450952 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.074499479 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.064215727 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.064558735 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.068383283 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.064472915 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.083535065 seconds)
  done (took 6.158712397 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073858345 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074504132 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.083930295 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.074604428 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068115067 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065017142 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068797833 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064951078 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075386589 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068665097 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06462781 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068268325 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074571008 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068851488 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065817447 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.074619143 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068741296 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067894799 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.064633569 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069331346 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065743608 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068448826 seconds)
  done (took 2.956485883 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.148745441 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069427481 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.111423898 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074966551 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073250214 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074710739 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.070755286 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070681815 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070576156 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071363631 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071099598 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07079523 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072772547 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071126079 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070813724 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070852687 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070338112 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071142186 seconds)
  done (took 2.808976511 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079407516 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067976163 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.095315702 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068505213 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.069996076 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.069574531 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.074224168 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.074334366 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.069656571 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.070244147 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.074413865 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069525234 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.069325911 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070195807 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069640244 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070876506 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.070945954 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070749474 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074349601 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.074286452 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.074830295 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.074409126 seconds)
  done (took 3.010117852 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079858247 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066896528 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083614103 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069162274 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062445401 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063840033 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.071155387 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.069007049 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.071009701 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.068397792 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06902987 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063845445 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.071830032 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069705253 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0724369 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069932004 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069429615 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069106178 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068959759 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063828676 seconds)
  done (took 2.802302078 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.100212054 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064281747 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064066935 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069489681 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064832925 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.066224812 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071171069 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.075029033 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064490351 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.089037582 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064506901 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06468925 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069983656 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06807688 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064653968 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071677464 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072700504 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072746513 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067370605 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067164144 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.092418897 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067276189 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072867263 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.066880993 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.067010877 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067002932 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067435219 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071536422 seconds)
  done (took 3.394561573 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066018165 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066094424 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.067104168 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.067397687 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.067209656 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06675997 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.067201985 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.070649971 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066953911 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067317357 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066905569 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.067358916 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067098695 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066928961 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067164419 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06743199 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067239333 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.067423835 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067477908 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067438581 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066706438 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067609267 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.067671809 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068080511 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068437789 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.068593088 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068215557 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068120308 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067940212 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068379935 seconds)
  done (took 3.445563923 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074996599 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074040039 seconds)
  done (took 1.563932736 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063682992 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080078372 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.06258757 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.076012665 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.074628933 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067723071 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.073432705 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.073135329 seconds)
  done (took 1.981697298 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.094690922 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.119925548 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063550612 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064365053 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.093546207 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131474622 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.104162935 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076493098 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079034795 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.068450287 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065990815 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.106456309 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064934439 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.079569058 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066391831 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.074659336 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.073005083 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.083573709 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.078774817 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.063176691 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078419572 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065753556 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.064477823 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.066045583 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.065970633 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.073137521 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.081849221 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.078701607 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074259989 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062944855 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.084764262 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063553485 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064770937 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074571984 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.096513096 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063913321 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.102092769 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063511244 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067147041 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061965594 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075158031 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084214296 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078966008 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.082921221 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064848677 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063965127 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062081776 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064558592 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.068020801 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073935062 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.063665395 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072190198 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.0634122 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.065332443 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.075902544 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.064833607 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.069553578 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07438413 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.078749029 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.075628637 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.077140102 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.080878994 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.073670788 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.073695194 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06515006 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.084759744 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065630572 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.078499249 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079835969 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.065625365 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078602256 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.063501788 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062938088 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.063262591 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.098497909 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.066004837 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.065533434 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.064083021 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063255485 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065285504 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074047008 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06902917 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072225619 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067156266 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080568251 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.073645162 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063869621 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.071826975 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.083173535 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067924748 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.064161031 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.081459372 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.067773528 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.063237043 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.082173255 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073998148 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064839372 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.064010808 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.067474602 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076817662 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063981251 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061358373 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072552075 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064347391 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.234964589 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.069720611 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.074508259 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.065121678 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.076104786 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.071320305 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06629027 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.063116714 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.069093932 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.065130891 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062768776 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074437414 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063863877 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079547966 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.071291123 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.079460729 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.08009352 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.075915081 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080984559 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.06399962 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06583835 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.082859322 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073983943 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.065518067 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083032283 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063202683 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075626438 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063402883 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065439249 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.074428917 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.063289488 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066077737 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063688482 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.070792989 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.065829686 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065752727 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.070486886 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.073556821 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076907757 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.065656699 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07367899 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064005982 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.08061449 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.075237253 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.069511508 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067849993 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064561743 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.077232218 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.071406284 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.074788476 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.064107357 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064102596 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062515657 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073495919 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072743637 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064082489 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.072540475 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.069247819 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06423302 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063175827 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063626656 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067924813 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067479207 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064707588 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072836969 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.073645397 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.079427092 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0715241 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073865373 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062903357 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063343939 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065943412 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063389161 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06916691 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.074431551 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080273007 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.076744815 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.086522385 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.064195514 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07458334 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065596503 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081807636 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.078514977 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.065098519 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068825062 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062910846 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065566217 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.074228026 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075989184 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.078756752 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079672438 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.069229024 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.068935283 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062861696 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077545557 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06382595 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073126688 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.074091056 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.069623239 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063778419 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065494937 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.073945208 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.069279136 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.064736615 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.080229924 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070910639 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062928703 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.078033933 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063320634 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07493069 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062720435 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067531414 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.069375915 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064540789 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.073270315 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.224364 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.063788959 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.066182191 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081390075 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.066827744 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066259525 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.073345357 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.081040334 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069893923 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.073495099 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07676388 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.075589964 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.069808569 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.075340339 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.065359536 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.074800094 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.067545369 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07746203 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.064164992 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083677292 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.063279242 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.080949792 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.064731594 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.076267421 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.065018993 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074642332 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.065192085 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.082506994 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.065905549 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.065325454 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.077450933 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.062981143 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.074491533 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.064142322 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.070261333 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.071465447 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.074316805 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.066263887 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074798528 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.065969729 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074032477 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069654164 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073194989 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074244463 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069474195 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063654304 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.073451186 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.076159821 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.073279069 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06562487 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065702337 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063927879 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072193736 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063795358 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063848328 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071791319 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067954392 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070664831 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065592559 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065534882 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.066065361 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073561704 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074714679 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086448579 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07391845 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.073336037 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.074159539 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06425746 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080688742 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.064263618 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.07260872 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06314627 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.072471499 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.074292857 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06420651 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084255709 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065616734 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.073218916 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077378923 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07350111 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.068478159 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083367621 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06753668 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.073541551 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.073033943 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.069343666 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.071281124 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.066085568 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.073754441 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.074807317 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.076044021 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.065064674 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.072452538 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073619184 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065685139 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.07311604 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065479858 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.073213943 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065751154 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062840667 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.069339403 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076144227 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.069222401 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06936661 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063698512 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062202673 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.064150877 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071501721 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068667415 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072909474 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07942715 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062233138 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064192783 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062316982 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067074567 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081404725 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.220945642 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.073155025 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.070480211 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.064096548 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06658534 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066404587 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064615326 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067780217 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063430374 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063836801 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075795212 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.0660089 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.069176268 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064905526 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.065581099 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.075325448 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068958096 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.065364159 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.071722475 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063917064 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.069736139 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.063603042 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.065537635 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.069468432 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.06339689 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.068278115 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.075241528 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.081660782 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.071798942 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.074348108 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.065320785 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.072857281 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.080577428 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.073050548 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065917512 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.074522271 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.063026551 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08351584 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.074091182 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073295538 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075565932 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06535299 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.082029013 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.0691387 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.075025062 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.080767242 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065535077 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.073108929 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.064128219 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.081004988 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.069337271 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.063763597 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071801969 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071126915 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.069189455 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07609865 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.064658388 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072784586 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070011096 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067201886 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065766159 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.066264504 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.074092452 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.081102912 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.065104879 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.070206651 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072999476 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.073276475 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.069191034 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077206477 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072652206 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065047058 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065798257 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.068239574 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.065054861 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.076795519 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064846459 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.069396523 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.069491493 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.064060947 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.071793874 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081689778 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07496283 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075117152 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063707973 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.063478039 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.083267107 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.068494331 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067801365 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.073196667 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.074683377 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077716701 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.074534015 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081861257 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064404254 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.070335078 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077153569 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064868833 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063546904 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06861954 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065419914 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073857043 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074998679 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.072158992 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065805564 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.074070888 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07836235 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065305546 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.069442292 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069498686 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064221819 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074490793 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072214599 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072526699 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064414227 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062402955 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067034614 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.216377887 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.072419251 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.074872999 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065933757 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.073044128 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.079550981 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.073609554 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067598936 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.064073655 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067699996 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.074262643 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.070492199 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063864273 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.069764367 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.068234667 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.073051337 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.074351153 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.069169877 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063338016 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08251321 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072893406 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073899895 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065835528 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065686067 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06442965 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063683241 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075805174 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06321489 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.066127404 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.069673528 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065756993 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.08306383 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.073848875 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.081145068 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064911254 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.069235151 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063312731 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074495293 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.069290559 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064431139 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.075653171 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.063257119 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.080341512 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076762169 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.070898412 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06380801 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.069802592 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.073285233 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.080373767 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074774312 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.073599031 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.067028966 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073552539 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06416992 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074744181 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063771824 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062841884 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.074349539 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07301117 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077844558 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.063739132 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.075205383 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.066364708 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.073194515 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.073076476 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.065983922 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06610775 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.066269009 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074642367 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.069400013 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.074518526 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.069555043 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081840141 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065188045 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076523268 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.074061914 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075912864 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.079240235 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07782249 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.073392817 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064942391 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072606798 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.073534928 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065819079 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.069916715 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067686966 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086870405 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06610856 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065853797 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079676286 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.073048178 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.064251366 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.072277493 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.069369745 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.075012617 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065455039 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07567031 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.0698218 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064610059 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06913936 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06965129 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062999495 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06382417 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063628401 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074789562 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068999167 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063819713 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083361859 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065289856 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072923088 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075484937 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.071204673 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064782111 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061909829 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.208882636 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077638489 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081505577 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067893852 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073330259 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064441454 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072739363 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061446089 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072134988 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.07164882 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072255832 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062483473 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063162824 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078593648 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079042476 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067814105 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.0793874 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.074561517 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065603927 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.087096963 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.073910678 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065179728 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075909979 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066326514 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.063502883 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.063064839 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065667911 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.076474131 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063991115 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066380645 seconds)
  done (took 44.55596494 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.104366707 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063384049 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064758929 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062476329 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070754827 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064160848 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064122348 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065048548 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065163738 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065680672 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062406697 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06228099 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069232411 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.078522501 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07102276 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066251771 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062158837 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063964874 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062730852 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063722996 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069265756 seconds)
  done (took 2.94223879 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065939037 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066008708 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066039315 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066401125 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065903933 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062256024 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066178185 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062642738 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067577487 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064200155 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.069102081 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064543637 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064762709 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064665481 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064533062 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06586803 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068780066 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067771205 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063852604 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068028076 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065831533 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068029516 seconds)
  done (took 2.954648136 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064035011 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063147089 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071889285 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063092741 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062504549 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066297033 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.06273291 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.068763575 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.068749579 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.068638589 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.073553023 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064422199 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062983268 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.069939205 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063351785 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.064501978 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.108526815 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.06497671 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064439011 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06318619 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066537479 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.073462444 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.063098428 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063608583 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.068525552 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066830703 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06358178 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.066224863 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064361581 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06872291 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064708254 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063028804 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.073625684 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072720135 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06852408 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06843336 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065314266 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064665742 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063558417 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063214886 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072914337 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064949621 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063671135 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064980446 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073773101 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063394024 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063084876 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.073357571 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063099315 seconds)
  done (took 4.80411319 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074932657 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115173996 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.070169555 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09832493 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.077936898 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.0710652 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070141804 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099263382 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.06491044 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065816414 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078573336 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.078526774 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066705905 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068044026 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.071581461 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066631525 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06763524 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065959673 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069384772 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066369357 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069596685 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.071484599 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077225464 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.077921016 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06818732 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06581376 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066500677 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068219079 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.077746027 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069903619 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068044608 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068505554 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077913853 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.072079092 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066313056 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066534201 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.078026231 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.068148826 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.067018451 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065215359 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065900207 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066590881 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069708314 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076810419 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065424824 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071907713 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067554753 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063747588 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076022134 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066115226 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070460028 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07761302 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068579146 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065088351 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066780038 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076580216 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066553501 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065134914 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066838085 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07748421 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.065036426 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067555785 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078477582 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.066412002 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069969653 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.078898221 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.072173972 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068068575 seconds)
  done (took 6.519370705 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071754487 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097504951 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078169071 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078639584 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073129604 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073431839 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07316226 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073178772 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073159676 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.076651489 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073268099 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.135001757 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069383993 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.074660851 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073062724 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073078576 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074188453 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075294499 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.075229772 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075650815 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074842685 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.080537625 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.075288734 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.080678421 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.079843784 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.071763685 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.075269792 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075035508 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.080617645 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075257887 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.079833703 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074868712 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075066135 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.080716628 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.080044447 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.075192521 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064735909 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073536462 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073284235 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074024639 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069471748 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.081190714 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073870778 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06954585 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072863331 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073016978 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078857382 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.078348954 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07579736 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.078589612 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075230766 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.080391669 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074782099 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074945716 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.08092546 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.083399783 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.081331724 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.080535422 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075519066 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.080809551 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.080804662 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.084198748 seconds)
  done (took 6.340630782 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077872057 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068804721 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082335692 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06355098 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063493674 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.074521699 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063344611 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063510196 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070844284 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070947138 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072569887 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07407508 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.076194376 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072818576 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.074254118 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.076245399 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074109837 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074386058 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071177864 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074135186 seconds)
  done (took 2.98558071 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.064173635 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068134043 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064338517 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.081076192 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064410635 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073215087 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064486578 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064432056 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064825835 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064656553 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069970693 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070066711 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064481424 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073358891 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068832651 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073217719 seconds)
  done (took 2.620073646 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065373947 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070410712 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.097190894 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063422923 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066868171 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064359846 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065001108 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063774484 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066738296 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078760094 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064955861 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067559577 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065148405 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063726241 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064188794 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067252263 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066109975 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064714058 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065015812 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.099161949 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073896841 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065617089 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067200653 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.065447348 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067147828 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.074229404 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066890081 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.067062658 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06532859 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067370046 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067200886 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.076363761 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.067480504 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.068603532 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06393401 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064548355 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065077258 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067363254 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067194265 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065382025 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063936995 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067106183 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064957593 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065551318 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065541927 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065365824 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065816514 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.07337142 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063125003 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067248439 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.065030919 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065732862 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06415455 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.074590068 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065711334 seconds)
  done (took 5.266025452 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079486536 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068831614 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063620543 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063030773 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068806161 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.070042091 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069609405 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069411359 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070304998 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063429669 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070244921 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06895816 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069844237 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069405289 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069624089 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06943255 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063420094 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069843014 seconds)
  done (took 2.78385723 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.070023097 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067789567 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.068301545 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064044765 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063635907 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069058434 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063712496 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06519036 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068528448 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065490608 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065786693 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065300188 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06497463 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065470306 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069634609 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065700897 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064978604 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063896279 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06564091 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063502697 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069900912 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063461444 seconds)
  done (took 2.986339186 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119525121 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086738707 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.164495132 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083774621 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.094503556 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075729247 seconds)
  done (took 2.153268399 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094817529 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101639234 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06897562 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068936444 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074217172 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072300723 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072602449 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072412505 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076077768 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078623754 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072485167 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076224948 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075785062 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077829517 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07419617 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074738792 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072663022 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072548088 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069647581 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080832644 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072720842 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076107002 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072597303 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072206578 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072404174 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078498205 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076295024 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07911848 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072416769 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076559678 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074588997 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072833325 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076889041 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078694287 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06916654 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07600835 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072468587 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080451837 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073125438 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076059663 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067532991 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072672373 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074479962 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074029265 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074511366 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0710749 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074142797 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070779014 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071082921 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083085294 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072525781 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076148637 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072992725 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075887706 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076502851 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.085327711 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079749374 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078875368 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074774663 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079701527 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078440446 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075261861 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078302104 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079741747 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074521124 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078069856 seconds)
  done (took 6.533421131 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106279119 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068573925 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075517702 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078100417 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078470094 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072749278 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07308569 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072901339 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072931547 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069966212 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109364607 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074004077 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078904022 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078881811 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073119127 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072535017 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073453556 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078281818 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070538507 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.084949124 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072976658 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07879 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077448718 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078802927 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079421035 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074975641 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072643975 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073095867 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072759594 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072526323 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07622736 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07304129 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078039761 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069775931 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078272022 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07312782 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072741155 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076361633 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072753106 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073573266 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076490177 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079069444 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070337426 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072163963 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078077379 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071049059 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073007273 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070382953 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072900949 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070082729 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079341537 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079437681 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079279737 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078843659 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072812297 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073165839 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072590109 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073128169 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072880881 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074898674 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07838998 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072868582 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.084152363 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072352929 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073848189 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078261288 seconds)
  done (took 6.566090581 seconds)
done (took 136.105846949 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.23541189 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.200722308 seconds)
  done (took 1.946064624 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075389872 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.194595818 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075823105 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075609318 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109843735 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108765845 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.105547629 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073782745 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075879171 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.075211281 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142839651 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.105614564 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073183476 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074872366 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07499295 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.096818012 seconds)
  done (took 3.069360162 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109425282 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.215949179 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085458854 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.073892061 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.157858201 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080487469 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075255909 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.080328265 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080501004 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.073612004 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.111663735 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.087669578 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.079159897 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.08045612 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07494516 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.078847565 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079843774 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.08029517 seconds)
  done (took 3.245697341 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104646981 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.093165021 seconds)
  done (took 1.742626044 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160234059 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106771143 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.38078532 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353399663 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139626388 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141607262 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145126077 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140350499 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112861922 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13693367 seconds)
  done (took 3.350194924 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106965756 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106130899 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.312690301 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106557811 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.086050763 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080916387 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078590592 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.083389055 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078544174 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079494952 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12701861 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.078930727 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075181084 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.129484696 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.103205803 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110537412 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.074166625 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081792286 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082990982 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.074295259 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079093878 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.083399837 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182320313 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.082056346 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104859618 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078608534 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080705728 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077387608 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077751115 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.08216238 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082502084 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.10264861 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079680274 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083814251 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077663937 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099493406 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074036751 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.101048981 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075888645 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073842211 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07628837 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080129828 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07372724 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.083536781 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078485337 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.081187338 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083656849 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.074481888 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078433029 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.078013867 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075696993 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079349267 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079283552 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080538437 seconds)
  done (took 6.485041941 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123284175 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.114886423 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073356937 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.123464752 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.115705758 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073992487 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.129189401 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.10927913 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.129898233 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.073268759 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072368524 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072391367 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080581581 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.081645221 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.123762986 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.115826203 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073054329 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073173107 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.117452098 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.118587246 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072451434 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.113962821 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.119737143 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.117631644 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071953105 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.073295193 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071663285 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072224806 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.080782048 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.079712065 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072469044 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.083772605 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.086770135 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077313611 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069197317 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070087032 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070886286 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078688576 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.082067324 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.082389085 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.079218085 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071650411 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070804953 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071229007 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071580953 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071149834 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.081715898 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.080542666 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.082599407 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07220478 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072167408 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071782546 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072525357 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.080156345 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.079023392 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.081586903 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.08373738 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072062477 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072009454 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073601717 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.084282213 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081481961 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.081155354 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073390329 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.081196994 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.072527154 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083580305 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084955008 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.072447228 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072706207 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072114098 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07205273 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072439707 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.078923297 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.078637239 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072787151 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071974275 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071731068 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080994819 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078935316 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07116914 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080279703 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071017559 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071636507 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072170065 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072044969 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080694904 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079373171 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072195569 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071229248 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071122151 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071092584 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070153736 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078797892 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.218356052 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078685515 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.080439878 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071888099 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080430071 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076905864 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070629742 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076559227 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070292489 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070515296 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072117154 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.079374802 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.078985587 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08052462 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.072024461 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071970196 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.079574035 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081523879 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.072179915 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078958058 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081233281 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079284531 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071755006 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082975042 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072817337 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081434288 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072385059 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081448199 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072587388 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.079010652 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072144004 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071324496 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072230583 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.0821418 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072614005 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071752893 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072153051 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071242244 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077515034 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.083406612 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071011032 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077634392 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077481064 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07055354 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.0802631 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070702102 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081947056 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070787169 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070468061 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070324344 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08502489 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071998071 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.072116459 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.075283628 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081577124 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07045797 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080318111 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.078838625 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071804951 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083261318 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081605479 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.079266165 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.082256498 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073151769 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072148605 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072164215 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072245008 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.081439413 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.083473283 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072789896 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072363135 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.078129137 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081778064 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071681571 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.078642607 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.079247563 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.079422616 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072213988 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071978804 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082293737 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.084140296 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.079172538 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.081477231 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079661468 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071968525 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078137589 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.081621621 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071853007 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086425992 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072032634 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082740002 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080051577 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076471232 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.08046982 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.224184166 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07994139 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080502013 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.081363727 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070075716 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06998099 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077058294 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070940114 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070507077 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076358482 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070366234 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070771031 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084438407 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070457994 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079479189 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069635943 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078983942 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070284019 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07263958 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084706925 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072623124 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072345224 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.078791016 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072437082 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.078747681 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082928697 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.079060576 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071749072 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072196048 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.082597364 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.082112436 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.072027123 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071984996 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072379898 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.081931571 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.081516193 seconds)
  done (took 19.514494886 seconds)
done (took 40.909826493 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.175973922 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.118520292 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.22786991 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.213123228 seconds)
  done (took 2.373644941 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102311379 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067028466 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.111701848 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.120182864 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066587195 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.108114291 seconds)
  done (took 2.162108054 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203356836 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176713641 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.248032818 seconds)
  done (took 2.203242374 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373822142 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.157465348 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.269494234 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.509904933 seconds)
  done (took 2.989004014 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13918454 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.13563508 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078959934 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.15016524 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086390043 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06355648 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.149968909 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070603519 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100948535 seconds)
  done (took 2.617706067 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.144854249 seconds)
done (took 14.069096482 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.104936845 seconds)
    (2/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.310246673 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.347947213 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.276602917 seconds)
    (5/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.114842211 seconds)
    (6/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.285238045 seconds)
    (7/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.366544839 seconds)
    (8/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.29190488 seconds)
    (9/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.114556469 seconds)
    (10/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.316029225 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.153833875 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.128852048 seconds)
    (13/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077291933 seconds)
    (14/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.153899648 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.278503153 seconds)
    (16/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.14923385 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.256959286 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.080127022 seconds)
    (19/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.069361417 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.081182014 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.260781491 seconds)
    (22/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073413599 seconds)
    (23/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.089464358 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.08171026 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.095544767 seconds)
    (26/341) benchmarking ("sort", Float64, false)...
    done (took 0.141405788 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.082430294 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.23370795 seconds)
    (29/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.111452211 seconds)
    (30/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.245612132 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.078027806 seconds)
    (32/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.180218356 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.141364952 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.241070765 seconds)
    (35/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.076842076 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.151988256 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.129412745 seconds)
    (38/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.133870849 seconds)
    (39/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196027104 seconds)
    (40/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.216579902 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.085678815 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.078230021 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.082806115 seconds)
    (44/341) benchmarking ("sort", Float32, false)...
    done (took 0.142660862 seconds)
    (45/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.069547355 seconds)
    (46/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.131981879 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.096744046 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.231731923 seconds)
    (49/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.079063381 seconds)
    (50/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.148905782 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.082637202 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.076857573 seconds)
    (53/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.196580398 seconds)
    (54/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.21673908 seconds)
    (55/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09856825 seconds)
    (56/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.085565646 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.097451279 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.097579623 seconds)
    (59/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.068555476 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.085899317 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.188351386 seconds)
    (62/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.086940785 seconds)
    (63/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.075366579 seconds)
    (64/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.489185084 seconds)
    (65/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191991329 seconds)
    (66/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.214275542 seconds)
    (67/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.21622621 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.098528686 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.129050516 seconds)
    (70/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.269155131 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.090708698 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.071535173 seconds)
    (73/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.20970616 seconds)
    (74/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.150747078 seconds)
    (75/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.152145032 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157869115 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.069063958 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.152319495 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077576482 seconds)
    (80/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.114565528 seconds)
    (81/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.092077603 seconds)
    (82/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070358732 seconds)
    (83/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070903892 seconds)
    (84/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.217665051 seconds)
    (85/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072963537 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.095620694 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077084152 seconds)
    (88/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.068862983 seconds)
    (89/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.069432432 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.157689801 seconds)
    (91/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.079238798 seconds)
    (92/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077751081 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069194532 seconds)
    (94/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.068449659 seconds)
    (95/341) benchmarking ("sort", BigInt, false)...
    done (took 0.277033663 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.243871783 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.071987731 seconds)
    (98/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075613634 seconds)
    (99/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.069432538 seconds)
    (100/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.155069224 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08936292 seconds)
    (102/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.068665855 seconds)
    (103/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078571157 seconds)
    (104/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.077255797 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068856906 seconds)
    (106/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.231189321 seconds)
    (107/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.231910786 seconds)
    (108/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071411067 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.214674197 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077060917 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.092556173 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.094119325 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.204124337 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.181756734 seconds)
    (115/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076073322 seconds)
    (116/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.069324228 seconds)
    (117/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.080600496 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.069273022 seconds)
    (119/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.211691355 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.096823222 seconds)
    (121/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.217928136 seconds)
    (122/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152413162 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.087388577 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073876913 seconds)
    (125/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.213182449 seconds)
    (126/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070024719 seconds)
    (127/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069616643 seconds)
    (128/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.080981842 seconds)
    (129/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.205253358 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.177478004 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.149264835 seconds)
    (132/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.249997723 seconds)
    (133/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.146275593 seconds)
    (134/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.089407979 seconds)
    (135/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.151404884 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078496095 seconds)
    (137/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093889736 seconds)
    (138/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070839701 seconds)
    (139/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075183293 seconds)
    (140/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201186964 seconds)
    (141/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079916464 seconds)
    (142/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068362844 seconds)
    (143/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068605054 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156110319 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.105781194 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069731276 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.24509777 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.080832412 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.161010387 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.072435175 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.089032862 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.070584214 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.153026546 seconds)
    (154/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.148458291 seconds)
    (155/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.2864005 seconds)
    (156/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.078230714 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.100391589 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.086045662 seconds)
    (159/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.082045658 seconds)
    (160/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.09010053 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.076840125 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.079545973 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.255848883 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.071116226 seconds)
    (165/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.069437816 seconds)
    (166/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070206304 seconds)
    (167/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.069373924 seconds)
    (168/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.146078456 seconds)
    (169/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.070750369 seconds)
    (170/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.087134733 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157218978 seconds)
    (172/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.097941402 seconds)
    (173/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.069325913 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068667907 seconds)
    (175/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069733638 seconds)
    (176/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067687641 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.088661275 seconds)
    (178/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077252149 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090034735 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120016332 seconds)
    (181/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07945833 seconds)
    (182/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069323218 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078424344 seconds)
    (184/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.23353375 seconds)
    (185/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084315121 seconds)
    (186/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.205482265 seconds)
    (187/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.179095839 seconds)
    (188/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06844928 seconds)
    (189/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.165059102 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154277659 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067876489 seconds)
    (192/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.070103446 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.0691928 seconds)
    (194/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067368106 seconds)
    (195/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.083792161 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.068293316 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11976463 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068942913 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.158461617 seconds)
    (200/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.080350483 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069705538 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.151858731 seconds)
    (203/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.080035821 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.074029705 seconds)
    (205/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078235785 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.097610536 seconds)
    (207/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071131983 seconds)
    (208/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.08915376 seconds)
    (209/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068797107 seconds)
    (210/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.179869029 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081456637 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067431459 seconds)
    (213/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.194398297 seconds)
    (214/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.069835652 seconds)
    (215/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.076325537 seconds)
    (216/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075357522 seconds)
    (217/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.068945004 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.084557813 seconds)
    (219/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.206379686 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076576459 seconds)
    (221/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071040181 seconds)
    (222/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068476958 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076596692 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089293777 seconds)
    (225/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.0729455 seconds)
    (226/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067380293 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.070049767 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070585245 seconds)
    (229/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.185867708 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077649682 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069275921 seconds)
    (232/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.071998297 seconds)
    (233/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.076650891 seconds)
    (234/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.069179888 seconds)
    (235/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.068255085 seconds)
    (236/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.070245094 seconds)
    (237/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.069662718 seconds)
    (238/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.0690181 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.089443021 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07985388 seconds)
    (241/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.069754826 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068880545 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075880993 seconds)
    (244/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.06678491 seconds)
    (245/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.068940328 seconds)
    (246/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072846194 seconds)
    (247/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.068171078 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079072712 seconds)
    (249/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075261829 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088484288 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075443251 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071974095 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.256452186 seconds)
    (254/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.070279394 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065994773 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.186014169 seconds)
    (257/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067878858 seconds)
    (258/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145232774 seconds)
    (259/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.068036494 seconds)
    (260/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.07646594 seconds)
    (261/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.085378172 seconds)
    (262/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081960924 seconds)
    (263/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.152766752 seconds)
    (264/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073460143 seconds)
    (265/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.068950432 seconds)
    (266/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.07472855 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.069907906 seconds)
    (268/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.069743803 seconds)
    (269/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.069270014 seconds)
    (270/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069722288 seconds)
    (271/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070079644 seconds)
    (272/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.069626451 seconds)
    (273/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076375306 seconds)
    (274/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077198077 seconds)
    (275/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.067564139 seconds)
    (276/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070876077 seconds)
    (277/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071989092 seconds)
    (278/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.068063403 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066755573 seconds)
    (280/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067513376 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.190834748 seconds)
    (282/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094387382 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067631739 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155305373 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.068014602 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067087474 seconds)
    (287/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072143259 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069922432 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.070887788 seconds)
    (290/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076119952 seconds)
    (291/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.070365587 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089438734 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.155824543 seconds)
    (294/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071108879 seconds)
    (295/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07801459 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.069077211 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069452587 seconds)
    (298/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068793783 seconds)
    (299/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.069509648 seconds)
    (300/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.178959605 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.069444486 seconds)
    (302/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06977359 seconds)
    (303/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.06999313 seconds)
    (304/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070339717 seconds)
    (305/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.071150042 seconds)
    (306/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070837325 seconds)
    (307/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06967314 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089479027 seconds)
    (309/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068213151 seconds)
    (310/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.069036256 seconds)
    (311/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.069283275 seconds)
    (312/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.069799743 seconds)
    (313/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.073964422 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069189669 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069681517 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094847035 seconds)
    (317/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.068790986 seconds)
    (318/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076015309 seconds)
    (319/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084733576 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081204297 seconds)
    (321/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.068465011 seconds)
    (322/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.072349922 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072884775 seconds)
    (324/341) benchmarking ("sort", Int8, false)...
    done (took 0.154120011 seconds)
    (325/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.071430374 seconds)
    (326/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.071449834 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137575157 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068557165 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081498817 seconds)
    (330/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.068374124 seconds)
    (331/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069372414 seconds)
    (332/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072422768 seconds)
    (333/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.07398477 seconds)
    (334/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.179391627 seconds)
    (335/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.07042313 seconds)
    (336/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073360594 seconds)
    (337/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.068968237 seconds)
    (338/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.069308897 seconds)
    (339/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077579377 seconds)
    (340/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069872882 seconds)
    (341/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.069667058 seconds)
  done (took 40.211021524 seconds)
done (took 41.813936832 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.126651628 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082534443 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080255861 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076906466 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.082192214 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.081846871 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.082221181 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079971404 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.081762985 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.081408822 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.112845045 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068373202 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076928914 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084634109 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077615818 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084364467 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.083891461 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084551108 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069225895 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.08340529 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093435601 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080754696 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077298583 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083279951 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069391786 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078496881 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12472226 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088668742 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07347494 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078695695 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.0764485 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084524793 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076275953 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075260052 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078579252 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075017904 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078904634 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075739439 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.125374962 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074463082 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069353545 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.08176212 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075842908 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076323656 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077678811 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081048718 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073964568 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.081573549 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067551697 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079139213 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120381873 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072262424 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072992283 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076635782 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073209395 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078137651 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072782153 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080352995 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073849958 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080639566 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077862908 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076839851 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068518473 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077678216 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075877536 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.077091085 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067510846 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074034957 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068468793 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068412265 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067646893 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077725869 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075430495 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073803334 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067678226 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068770514 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067766876 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081316293 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0748161 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077984712 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069309857 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074002464 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073594102 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068857328 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073649805 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078615372 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065986941 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067270057 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067338936 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082156775 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07468032 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067581781 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080360523 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07445627 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074005235 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066935281 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065876138 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071724226 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074680681 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066920091 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065528928 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071978152 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072149766 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077465406 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069273014 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074279297 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07425752 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067367116 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077054128 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075150113 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076778983 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081076202 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076394404 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079716782 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067866778 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066533417 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076747523 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.219032871 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073960081 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.077268177 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074710646 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077584566 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069127268 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067755865 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074144019 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075126759 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068917925 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.069058736 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068930986 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078225778 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075510181 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06764555 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068528047 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077592722 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077924564 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06780665 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067444317 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07829918 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06868179 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074143676 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074599965 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077356244 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067932337 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068868184 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.067406412 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.068204242 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067920491 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073660317 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072259941 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067153628 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075582992 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072987423 seconds)
done (took 13.484854245 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067972232 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.110986519 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.120396703 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112526804 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080414908 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068525492 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071583581 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08754904 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070887865 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.094261051 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092465721 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.09033951 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.134847932 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065983268 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067439006 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06837006 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065795881 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079969086 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.1143334 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090626143 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.110544445 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069053114 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.086929405 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.089812188 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.084768711 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086407253 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069092483 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068197719 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070292037 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.086647009 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093627232 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067137558 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068248697 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085909286 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084790374 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.078509927 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070261624 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.076430948 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06910413 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068177929 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069648382 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085864299 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073929432 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074519079 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068240231 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068653359 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068602432 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.076437272 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.085481911 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073610037 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079783879 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084897969 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069006534 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067411618 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065741257 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07537599 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067432431 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.0683256 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068337561 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067230579 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068268839 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07228189 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.074978955 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.080437059 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073543591 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.077460096 seconds)
  done (took 6.910138333 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084571224 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.097340201 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084533143 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085124217 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.069165788 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069509612 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069895039 seconds)
  done (took 2.28209642 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.0690423 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.107675241 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.116002139 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.115201073 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.124308146 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112873696 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068413545 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.103559777 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069207545 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.112773065 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.12379044 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.116704202 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071041678 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082145139 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069808816 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.119799243 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070121864 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076949662 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.116107045 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.121830803 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074367776 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.099988405 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083452594 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.07022535 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.120316226 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.109302203 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071562006 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070689092 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071686618 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069207891 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069205175 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092704454 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.111176123 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082404474 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07045364 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068798566 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.10935144 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069770143 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.105560401 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076861748 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.105026414 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069210006 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.07006364 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.06789823 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068848388 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109156204 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068642098 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067411548 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067694468 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.109379355 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067303336 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108738092 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070395171 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074445293 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.075093842 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07425822 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075058376 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068964045 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.108846491 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.077372115 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069592665 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118891626 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117966446 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105260557 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117809864 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076333021 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.108754843 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106747958 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067634053 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066897965 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068008444 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118887777 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07106994 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070110274 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.072146828 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.075133787 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.111813282 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.120768805 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.119775264 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079984225 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069003795 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066826777 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.223604049 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.123479786 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075315762 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069572995 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070644001 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069308882 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074623173 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.0714375 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074242198 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06946123 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.079994532 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071994358 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072218613 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.118412668 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069459967 seconds)
  done (took 10.300753605 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.07013018 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071811906 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.07073297 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.07098047 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071411142 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071307239 seconds)
  done (took 2.173823461 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093744251 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070932497 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082522489 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.074113493 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093890469 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.113086914 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.112469363 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071535096 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087586999 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.08229931 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.113885925 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.116074973 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.114764526 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072122261 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.113132742 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071779471 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.11505366 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07420575 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.081406721 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072429529 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084607937 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072173156 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072293695 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.122325405 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073493955 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071743839 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071208185 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.081957032 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.081790902 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072405518 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072666184 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073617884 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.080054828 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072457211 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.116756798 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079902214 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071515349 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075785511 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.078404198 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073197228 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.11558901 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070034678 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.073294742 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074560296 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072060151 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079484698 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075016836 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074147469 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.111625242 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072866302 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073360083 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070835364 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072870979 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07519702 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079075064 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0721639 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075318224 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.115675755 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071772441 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079656226 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.071011746 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072976963 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071867522 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072923589 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.076713075 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075379709 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.080128873 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072573127 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072283332 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.071473639 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075462005 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.07098193 seconds)
  done (took 7.637860027 seconds)
done (took 31.010662285 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.522759727 seconds)
  done (took 2.230243516 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.955236397 seconds)
  done (took 2.702274965 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.099751381 seconds)
  done (took 9.852371401 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.347774424 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.420532146 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.767932626 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.135891093 seconds)
  done (took 3.462858431 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.76046668 seconds)
  done (took 2.520833931 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.242327589 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.23239188 seconds)
  done (took 2.246441352 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.377329892 seconds)
  done (took 2.128332774 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.202472242 seconds)
  done (took 2.954276385 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238488506 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166958806 seconds)
  done (took 2.168425755 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.647804118 seconds)
  done (took 2.39868917 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.430447312 seconds)
  done (took 6.191845666 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.264477285 seconds)
  done (took 2.06205946 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234971444 seconds)
  done (took 1.993755621 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.031723707 seconds)
  done (took 3.781623452 seconds)
done (took 48.46310562 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08627996 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088639895 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088582067 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083949886 seconds)
  done (took 2.076237045 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076684814 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07237247 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076002545 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076811603 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073811714 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076402963 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077124333 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073848193 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074074255 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072434067 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070894156 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07345063 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076828441 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073526994 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076552392 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.078021358 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073789822 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073778046 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075823333 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073575104 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076688796 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073990247 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071990535 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073339318 seconds)
  done (took 3.544185551 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080946318 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074278343 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077196656 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074003138 seconds)
  done (took 2.071837167 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078403682 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078774673 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088774463 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.093561336 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079620511 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080720993 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088276813 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087386313 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068410213 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091455548 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071799925 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.07060194 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070684007 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089736183 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087383703 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066038742 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066874933 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080939223 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.08006053 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083094294 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072477527 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069069695 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080016348 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080957255 seconds)
  done (took 3.667597971 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08442559 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067664654 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.131716927 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094116643 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096945272 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069285529 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.084953056 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.097347561 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.133797419 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069251475 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07864984 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069023083 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109580352 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069161483 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08582903 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.114453038 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.116775282 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073493384 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.103008104 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068930474 seconds)
  done (took 3.592153907 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07923916 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071505986 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.074114846 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069758238 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080201317 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07580829 seconds)
  done (took 2.228698945 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070042589 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069867524 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068875376 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075005176 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070471764 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069950731 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070743478 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069867442 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069599778 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070544289 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.071103996 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070963046 seconds)
  done (took 2.61268245 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.213760828 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070995101 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072127683 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068040411 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069700458 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068625369 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08185637 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069989117 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085723262 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068859842 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068907484 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070897648 seconds)
  done (took 2.779974387 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107956583 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115639227 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146456022 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118982381 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118866922 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098016551 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.165427194 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094339205 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164950539 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.143887149 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122053708 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098693592 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09156987 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073558885 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104973444 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125812461 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149253664 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076610688 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118640363 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.214071062 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138375459 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.138841362 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150073484 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118568772 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094214031 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150078483 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099934449 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10678559 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129418694 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131767343 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123317216 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102773036 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075621331 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074584936 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154862883 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.109216111 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12667237 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097400094 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110860879 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092609948 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111827548 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.073372016 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08745849 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.116625567 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090305428 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137291202 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091480807 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11730836 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081379958 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.295512065 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127580119 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137445282 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088278372 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107696355 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139257137 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114568934 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137011608 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108711609 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083934834 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120495743 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.107386146 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104968217 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113763549 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084333937 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.184870489 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092998224 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117351093 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118398211 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.101211855 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100916933 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110747641 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.138080995 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129016088 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12995812 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14263649 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097953791 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123410575 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.10316595 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131895541 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106878656 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074781115 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124890351 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134662978 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102794833 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104607187 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133262865 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094100955 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079139181 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102985111 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121749292 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082073955 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115899268 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083195576 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111874124 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135678906 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098157972 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111599544 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117896041 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.238254841 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157827522 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112709051 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077278929 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121014064 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115897566 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162992544 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098553284 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078628614 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105619056 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106696799 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.154187406 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113352378 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082897782 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115148396 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145784852 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099365045 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.218939989 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100263249 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.150572962 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116688892 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090067867 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077860936 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.094430625 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11709784 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109697115 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114640277 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092119237 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.086464458 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088594749 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113846234 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09424407 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082544765 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118727732 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10419907 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079096751 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092931597 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080582712 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147743933 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081972978 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144544377 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131313095 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080423522 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112829357 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102556905 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1133109 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100251997 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122210237 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143188979 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116183309 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093538222 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.098536502 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111304269 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144614169 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127521135 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093003632 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077930412 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102010607 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112301799 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097553189 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124337386 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094998874 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107310203 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102438724 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139580001 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143265301 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101659263 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102304555 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108633236 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.122465417 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076776731 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153896471 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103628854 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114695113 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082847347 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134897578 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.1087349 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086752868 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085374847 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09690636 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.100765887 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103658101 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135554681 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094719174 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07128721 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087866096 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13496012 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075237916 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104148869 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.089070309 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090358266 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113144675 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090387908 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07871391 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067447651 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119268565 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147367258 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068137724 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109680334 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.105356197 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097233284 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.114513614 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067774578 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1115739 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131556446 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112410974 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.414948726 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152692363 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123491502 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124330555 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.118709601 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110817316 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086860525 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130702341 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139703035 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099613776 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096276373 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139401074 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123845334 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140327542 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.121607946 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122852914 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.112776565 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115723469 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10954176 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.107451213 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153301014 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128603914 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.131698168 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09188419 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110759781 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123052811 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143315572 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085719575 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150598068 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.090819199 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125682519 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.083469522 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130120942 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081957954 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.114279289 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083873328 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107127757 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073984374 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078698284 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.148380094 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116726854 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110346545 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106169477 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.145051017 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.141910461 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.083544937 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113292375 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12056036 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103135105 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119952189 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.281251618 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092156219 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098229288 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112192339 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090681344 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086676834 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.119841662 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098103719 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129917429 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088252627 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078854675 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146982416 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109136753 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100150071 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082757841 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114162837 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.127216646 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097963717 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091596108 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123098138 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111301904 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147662507 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.096726953 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.103246999 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131836159 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085283367 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.097402698 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073852492 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.090065219 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080535372 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.136067188 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079304687 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119383945 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071052735 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134657919 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090289546 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094572279 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103722111 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112191528 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1295877 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09804147 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146445889 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094440238 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125531635 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112928966 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099415489 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093695375 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108179392 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105458802 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127867404 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.10058099 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130056673 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151175498 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109630301 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148017452 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096019808 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126829371 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109319328 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.290567559 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113435504 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149838674 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140160634 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114853248 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115602237 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079561036 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100668503 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11019321 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118221571 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.181404869 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132006621 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.076468884 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112369823 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099451387 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11377436 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109756351 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086679804 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153242318 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108432181 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.093396844 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118539378 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.096490767 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109678097 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079105829 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098183204 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105246128 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099232511 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101014053 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119701018 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132386233 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117826714 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146512903 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.104640311 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.098849986 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.123495504 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116286496 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115735544 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090818513 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090532086 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144046199 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126711988 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131309266 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.107016095 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114290628 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118326562 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10589955 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131604922 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11393546 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.131287877 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.24224919 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079360048 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070112765 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075791813 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126275982 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11127743 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114850085 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099529062 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074503972 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104729849 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10808841 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073765329 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090642762 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095653205 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096890631 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.093827725 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109130369 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.113288256 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093225537 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105183166 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101357847 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148767609 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.106601049 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09303137 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149925495 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157205547 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092745865 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0975992 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075532312 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083423748 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117007767 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152562695 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155464876 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080596009 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088715528 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.087728063 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088933647 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073465514 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089154698 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094407339 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11199675 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106019295 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.118561175 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112028977 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079900769 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108022688 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103641939 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096684203 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.110321485 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125597243 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132712088 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.148368767 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117733075 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113094461 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080601191 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085411851 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080300986 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084097441 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107247698 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.083711369 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.240863894 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145000866 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09465391 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107449081 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112439493 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09351483 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079914282 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143013831 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073421399 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140550166 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075688882 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08622816 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.086067174 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083071394 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097728707 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144069443 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115960701 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117410114 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113295346 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109331238 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146451436 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163119926 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086855898 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150391622 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080117995 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081414761 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080253714 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11544512 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093318564 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118441945 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145464741 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093299111 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10735598 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082872822 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149164326 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102785747 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109961994 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092055784 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083510852 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150132641 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083514991 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.086100189 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09444159 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116473483 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.0761455 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108544519 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08852582 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083998824 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14905641 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635705269 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094522758 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07967094 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101061436 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148575832 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135894454 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.262538073 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110546402 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121394275 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105343844 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100733016 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112262561 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188153431 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078270259 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099206666 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108807751 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102815518 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106717242 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.103687919 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090073298 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097664302 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.091103136 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083669003 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112476131 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092918644 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102308753 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113455647 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08757344 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.09296858 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136089648 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108742562 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.088211906 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093446273 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.108632725 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094274618 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106248412 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073431411 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119280652 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096752429 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122723945 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098719931 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113136974 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131212861 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092350845 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142118033 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.112278012 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128739963 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092248982 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082716776 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132301211 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.094761688 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081719005 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150896374 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.101606998 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095232869 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108846201 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.102451309 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118791189 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121716768 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117935629 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102417947 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083397736 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106773416 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.268729867 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08894311 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082064077 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.0764302 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078786921 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11056301 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088924502 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08604645 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117638943 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093561916 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108500806 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104008845 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124661622 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085259832 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103055939 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112373952 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093875219 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111919239 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103031633 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130305894 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.181906342 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132015535 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13525881 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141210976 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.08269677 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080744285 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073553703 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122508943 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082871353 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092688963 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083662286 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139908352 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085991304 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117700562 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.238031081 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083830094 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098769829 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099967249 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073652671 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087799497 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11305386 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09204515 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084438158 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126003201 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087703498 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.133708847 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116175515 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105257344 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100012703 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085290824 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120969528 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108054396 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.135356311 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102353921 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079750411 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121015835 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108586823 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144939922 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075830562 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084220607 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.293720828 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106746884 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137288853 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083661698 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154477981 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149332494 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104262282 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136729577 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073183605 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085802172 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090199346 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.128847993 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087614071 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117154211 seconds)
  done (took 70.610445879 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149574236 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14467525 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083670412 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106680124 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.190623001 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.202460779 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.122817525 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095703716 seconds)
  done (took 3.070000034 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069692224 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084811954 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082705346 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.251747087 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.102517497 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.07117628 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077385644 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085976498 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.071313534 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071668222 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106164061 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071758267 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.071663785 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.537490841 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070273842 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076606195 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071316494 seconds)
  done (took 3.929490506 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.338884224 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.963423979 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.324126147 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.212690629 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146671999 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.558088677 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078250856 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084892183 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.679768092 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371491921 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.14477555 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091147712 seconds)
  done (took 19.970543054 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077632658 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.122114033 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.122201407 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076749074 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07636931 seconds)
  done (took 2.43689415 seconds)
done (took 124.366114591 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084737126 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176360611 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071252311 seconds)
  done (took 2.244697167 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120665666 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.119987656 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119960193 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117350643 seconds)
  done (took 2.453275525 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075801874 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078135094 seconds)
  done (took 2.12574508 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.2271746 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.218336584 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092906122 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083757788 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082145383 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081276554 seconds)
  done (took 2.229909275 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072890499 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072847567 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073052423 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073774191 seconds)
  done (took 2.258911799 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.168379551 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068365585 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070180561 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073212941 seconds)
  done (took 2.34760328 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087152148 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08896287 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.119838102 seconds)
  done (took 2.271246944 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085274113 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08561092 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081045784 seconds)
  done (took 2.227601626 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111060831 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098657222 seconds)
  done (took 2.180345967 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08141999 seconds)
  done (took 2.056259917 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093033405 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100065823 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186155431 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151969181 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187018928 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.173260472 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078547107 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080116624 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075518856 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074504777 seconds)
  done (took 3.169389913 seconds)
done (took 28.159515191 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085951104 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375919664 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.383903679 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089702736 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.673800536 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.388042555 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.011751402 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092881558 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102947983 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07010336 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087625278 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650771443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.003717335 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328259285 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.988298584 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331201502 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652638218 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070335352 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069640753 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070250385 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.995570866 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069219734 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069876531 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07019132 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653327525 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376323695 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071209072 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.332010419 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069429253 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076920931 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360305274 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070653735 seconds)
  done (took 16.690723896 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.089806818 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130183343 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073657421 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085905884 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071721671 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070995451 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072832559 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070923323 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114349662 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071541823 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087881106 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069589281 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074208815 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071147552 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090390978 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069902857 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07288056 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070820366 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070535402 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070894889 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088702257 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069909823 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070708997 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070797713 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070393579 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083013772 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071466212 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069963328 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070535803 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074003452 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074670337 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07152336 seconds)
  done (took 4.476539107 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129277969 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133814385 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074420884 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11106504 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119904512 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.0722503 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154154167 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093461926 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117694652 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070425687 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087616332 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070115774 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106274882 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071617732 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090892632 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070446075 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073002265 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070791434 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070180567 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071285725 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089090776 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070456313 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070648941 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070885082 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070675065 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084969258 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070778181 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070196597 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069803055 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074228558 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075784437 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071449801 seconds)
  done (took 4.741021009 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071092254 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072886842 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079972867 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082482518 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06839935 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07069058 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.07193941 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069015628 seconds)
  done (took 2.581815053 seconds)
done (took 30.484650129 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080863225 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069688833 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072756804 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089324786 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075335804 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112550341 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066596326 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076533962 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073213591 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073349862 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075111061 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068992604 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072098594 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066304475 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073963948 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067658739 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.113474006 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.07181454 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112204097 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113592892 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070224078 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073577648 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076115108 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.112996373 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.11329321 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.11279708 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07670413 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074053888 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06782161 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070477577 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.170362282 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183477255 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076055512 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117910055 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067541861 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067628102 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071701398 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.06988048 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.115014726 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07646581 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.07014841 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077529341 seconds)
  done (took 5.595489652 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.187814902 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194916899 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.188600848 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081153703 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.093523016 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081499805 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.193710208 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078988623 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077345961 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.192433691 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07314903 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077839744 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080701749 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071385339 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078458212 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07601528 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081121735 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074012868 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079925681 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079899877 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.198724192 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071248859 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.082017112 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078974537 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073287714 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078754691 seconds)
  done (took 4.739526533 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074509043 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090485661 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094581497 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.150323988 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112329053 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086016544 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084503132 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.095939682 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103559778 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070196593 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07402289 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.100172473 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098636743 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076788114 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108479421 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087665103 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082431497 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07115328 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07698401 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10393183 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092283352 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087619058 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102215594 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089327275 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068594755 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078574048 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076419581 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085036292 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076689943 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081645782 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07325852 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072762647 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070179904 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081931515 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074104508 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067583359 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09266316 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08408821 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08641057 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.111395367 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081690182 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072958632 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.142826067 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.138184946 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071208091 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074191477 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075868406 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084288919 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073047818 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102007544 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088938042 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071149525 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090816991 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072933911 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072290611 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086434129 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071434009 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072027317 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080980765 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076046466 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.09072376 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07477028 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091136333 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069516924 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081906067 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073112836 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072132366 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068782812 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103885382 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076943935 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121276632 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071975146 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06886538 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084170768 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083012789 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.078100832 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071180007 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.092006639 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084140892 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075156337 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082932456 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07413936 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.074674049 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.107361948 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070234483 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06945173 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069692083 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.073821378 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07493772 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07204774 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085297804 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.07098197 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075084716 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087837603 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071519644 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072375127 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073936413 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.072790122 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070840921 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082873042 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075648763 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.07346118 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084235749 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.072447853 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074959721 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086801258 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080922724 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070822586 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072393373 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074298961 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07284852 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075415798 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.074846332 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.074037717 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076538033 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079352655 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077574915 seconds)
  done (took 11.676881139 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.205980362 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.196968041 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071068483 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.192229138 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078151141 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.126877161 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.193979382 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.132952818 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070092006 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071371314 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069457721 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.140401616 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.135770467 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.14693063 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.117033918 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070871332 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097197275 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146118684 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.195880759 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.191009246 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097140218 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.079704436 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074253466 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073305523 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073071961 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080545405 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090642326 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081207147 seconds)
  done (took 5.352864532 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076136255 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085775239 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075767678 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096499622 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089796766 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07234291 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074306608 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073080423 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089567167 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079188897 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072527253 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076726847 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.075647304 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072930985 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072859462 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077844939 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077392877 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069891743 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076186502 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.076767289 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083059908 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.160504924 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07688799 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.075583842 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074627263 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072425627 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079436092 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.081937983 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071412497 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.106214915 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069411417 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076587965 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087404082 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07293987 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071804035 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072794978 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071513381 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.071692001 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071956233 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.070094775 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069855917 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077724148 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070562804 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.077611323 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086444631 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080612692 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.073942649 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074116008 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.074743042 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068673962 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075043054 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075434288 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.074972437 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.080764662 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.075270928 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074457337 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073216451 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100510524 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.077234074 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070162282 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071382577 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070161353 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.073722741 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080748122 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087397382 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071690065 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068184253 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070099672 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077314162 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085428521 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071894656 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076527653 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067398182 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070376711 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072163737 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072876581 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071426594 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069399064 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069582753 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071443011 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072608096 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.071656055 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071602768 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073855978 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.07020847 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070147001 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072494717 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073963047 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.078111104 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.070700465 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.074505752 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073347219 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.070919084 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.075030077 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077875529 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075431041 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.09243646 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080819208 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.072945196 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070016029 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087531388 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074144813 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071239445 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075068818 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076745875 seconds)
  done (took 10.112845225 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.097886315 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071032646 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089970778 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.1019017 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079905911 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075160208 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085583911 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071198921 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.093049658 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069813316 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079323405 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06810151 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083539422 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079048941 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072611244 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082503175 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074308428 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092682234 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086886611 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.070349519 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081262956 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084787843 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084255041 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088825784 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08796529 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088746027 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082277769 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072181141 seconds)
  done (took 4.359666648 seconds)
done (took 43.823876412 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.077271528 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.325496058 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.086537043 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.35829537 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.140863732 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.154769435 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.183990833 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.070191838 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.320750183 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.107655116 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.394861569 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.466090209 seconds)
done (took 70.756991683 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.112400444 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.2084257 seconds)
    (2/2) benchmarking "String"...
    done (took 2.279422235 seconds)
  done (took 6.487259424 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.660505724 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.064259727 seconds)
    (3/3) benchmarking "different"...
    done (took 2.119276219 seconds)
  done (took 8.840416659 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.148387406 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.441634879 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.299871384 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.052222417 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.050403451 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.370849675 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.866053043 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.518923573 seconds)
  done (took 33.585587866 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.302275948 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.247975088 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.8239651 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.865737639 seconds)
  done (took 17.266644055 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.64643573 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.305637183 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.308080513 seconds)
    (4/4) benchmarking "different"...
    done (took 2.301360078 seconds)
  done (took 11.598993421 seconds)
done (took 90.13968044 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.046871788 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.122468757 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.071848643 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.211432158 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.070014608 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.113037213 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.054911425 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.050811777 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.040490836 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.047684602 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.489204732 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.040017688 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.055051633 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.08162009 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.041293738 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.062928353 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.508572093 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.052207245 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.089331092 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.626723068 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.440785839 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.053031112 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.038975214 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.268539528 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.170024195 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.087475457 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.605593163 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.045740224 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.740293301 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.03481931 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.028643427 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.032222363 seconds)
  done (took 213.40223849 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.026892875 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.847372505 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.93585081 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.060824907 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.327600171 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.232684955 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.178677075 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.425037453 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.021755516 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.043864899 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.168408425 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.022176204 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.199063713 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.025302745 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.01340755 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.029881759 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.175750666 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.223126101 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.017616239 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.210638914 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.034953144 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.996116153 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.9440692 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.16642656 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.048247922 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.120054698 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.022290582 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.040716262 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.222953908 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.127828207 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.052915685 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.997420485 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.221948167 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.887763202 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.029769169 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.019506464 seconds)
  done (took 178.076481688 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.191695585 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.02364983 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.081979521 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.13780141 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.761164854 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.733439272 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.015351672 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.016192882 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.014845761 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.016082503 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.023437742 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.017822887 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.082857815 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.822090952 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.032574262 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.010942614 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.01436448 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.329242198 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.01309999 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016856034 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.013354153 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.078956323 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.387506963 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.13291828 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.020172472 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.024695417 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.134013594 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017662316 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.178458252 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.027487838 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.184720162 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.017877109 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.109767185 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.142580803 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.028050793 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.100040153 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.023030518 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.520666703 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.017568949 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.017809873 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.019162963 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.082192091 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.017245145 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.178673836 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.110663315 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.022750732 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.030656927 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.21549856 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.711679244 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.026618174 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.016264834 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.019137937 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.017005633 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.017053149 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.024574227 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.50723548 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.018660544 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.04473189 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.734288636 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.015929253 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.025638782 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.015989803 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.014868493 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.016344407 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.023727149 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.061873193 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.826614277 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.117548009 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.40661297 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.821934766 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.017185327 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.702923771 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.079397789 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.018462931 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.10034341 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.017039965 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.018815883 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016978963 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.01718327 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.157479224 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.122162019 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.018533534 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.139422213 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.021355035 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.018602253 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.14399855 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.243019133 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.018043333 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.034408476 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.075831666 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.018446497 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.018084362 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024007468 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.132477527 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.019630259 seconds)
    (95/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.018140391 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.018383865 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.019274295 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.144564435 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.019850751 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.150583631 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.251133394 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.090739913 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.272704323 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.318756378 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.019067825 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.020681889 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.035217176 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.017906382 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.025174349 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.030589199 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.020995771 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.02069423 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.021316681 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.027690155 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.020343067 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.02305464 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.032947532 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.022664606 seconds)
  done (took 437.304463433 seconds)
done (took 833.003473297 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.665183813 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.702602912 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.597790579 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.615017641 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.588411228 seconds)
  done (took 15.120306867 seconds)
done (took 17.074202133 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.047040616 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.036218198 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.023588727 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.043497508 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.03967071 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.040553286 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.07255552 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.063717396 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.057640306 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.040834408 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.044488524 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.038087846 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.045449913 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.060998053 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.052619095 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.050311246 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.039682101 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.033673524 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.04759403 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.046774591 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.043540481 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.037803066 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.04182072 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.047655021 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.053536283 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.045722936 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.03356808 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.04408718 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.044385202 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.042328738 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.080007709 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.048970049 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.074623484 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.048759414 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.052095407 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.050392833 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.041158375 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.065627503 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.041189516 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.085167083 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.049049899 seconds)
  done (took 85.94968272 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.029659961 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.169565922 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.249448456 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.062341488 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.032160351 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.240714785 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.088857736 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.155929797 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.1713093 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.254996037 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.252596236 seconds)
  done (took 25.664563829 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.03109728 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.172535172 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.2500983 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.06667974 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.031855221 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.24165355 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.09350391 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.161499483 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.1873792 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.262747064 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.253634949 seconds)
  done (took 25.716031403 seconds)
done (took 139.282557616 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.427985353 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.061336064 seconds)
  done (took 6.442465711 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.022666898 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.042938656 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.183216737 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.027114651 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.026903626 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.028204773 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.027227163 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.026766323 seconds)
  done (took 18.340110161 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.025281297 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.026151825 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.02529176 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.027389838 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.025210042 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.025253381 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.02575868 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.027246448 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.025665389 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.025568354 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.02465862 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.02449141 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.123116064 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.87809491 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.88067218 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.878740518 seconds)
  done (took 34.022659438 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.878371717 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.880246407 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.878714721 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.87882742 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.880053147 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.879336399 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.884313737 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.879264323 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.880887494 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.880076896 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.887352372 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.888815011 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.879939101 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.88056643 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.880321992 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.879472875 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.88002464 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.884051618 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.880787524 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.880744441 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.880399028 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.880485764 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.885008945 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.88050619 seconds)
  done (took 46.962618935 seconds)
done (took 107.72978849 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.056267969 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.344935323 seconds)
  done (took 8.215688509 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.883080897 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.880539728 seconds)
  done (took 5.633196169 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.880340743 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.879280619 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.880028471 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.88050308 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.880297234 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.887531555 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.879763499 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.879871789 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.880090642 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.880415152 seconds)
  done (took 20.630363737 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.882207963 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.880254645 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.881400641 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.882381969 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.886332073 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.880374871 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.880764885 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.881236609 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.881273558 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.882141694 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.890305288 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.88190356 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.881839987 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.881725602 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.8834999 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.885876063 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.882564426 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.882006009 seconds)
  done (took 35.704992178 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.881996641 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.884723312 seconds)
  done (took 5.583271165 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.881774171 seconds)
    (2/7) benchmarking "second"...
    done (took 1.881901082 seconds)
    (3/7) benchmarking "month"...
    done (took 1.882238333 seconds)
    (4/7) benchmarking "year"...
    done (took 1.882030063 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.88980427 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.882595054 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.882414918 seconds)
  done (took 14.999148152 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.884342071 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.035364312 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.088427876 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.335809203 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.882580262 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.885794256 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.489316526 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.884853609 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.885002315 seconds)
  done (took 20.187207586 seconds)
done (took 112.767580891 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.705581695 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.883833927 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.197904023 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.9920552 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.912593491 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.230811016 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.91869738 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.428116414 seconds)
done (took 43.087218279 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.949797265 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.888423964 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.91869619 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.065662819 seconds)
  done (took 22.690775545 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.03609155 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.35434354 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.057553036 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.977508607 seconds)
  done (took 23.410194645 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.415185662 seconds)
    (2/2) benchmarking "read"...
    done (took 2.393120859 seconds)
  done (took 6.780294105 seconds)
done (took 61.65084442 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.039136498 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.036290464 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.039691752 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.035285142 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 2.037614645 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.038431962 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.037523242 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.041905063 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.03945874 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.037611495 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.037341007 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.038432753 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.043539427 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038253615 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.037663226 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.037419569 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038648289 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.039199363 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037502136 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.039177176 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.037182321 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.040974015 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.043233457 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.03899839 seconds)
  done (took 50.899011048 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.039329042 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.039511081 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.041740478 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.040032246 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.038460087 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.03905052 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.040450086 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.039283982 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.038581666 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.039941064 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.038084658 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.040479766 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.044240525 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.039484744 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041827041 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.042015565 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.040196621 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.043444578 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.040938852 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.040338636 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.040091071 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.039543982 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.042636182 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.040967897 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.041524957 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.043487827 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.044628171 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.040257423 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.041974861 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.043669081 seconds)
  done (took 63.197864316 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.043435686 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.039389243 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.042705047 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.041682709 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.04130295 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.043363346 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.043138011 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.039472125 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.043504463 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.042436255 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.044556823 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.043833311 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.041157749 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.041058645 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.041752812 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.041387187 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.041025724 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.043338274 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.04281232 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.043719421 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.044398093 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.041250614 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.043451487 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.041264012 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.040141743 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.04417566 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.04163288 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.042378965 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.042982717 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.042725946 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.045794387 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.042324933 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.043145491 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.044292423 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.030950716 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.026209859 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.042909572 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.045378653 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.048818041 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.041017595 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.043891092 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.043255593 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.043037845 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.041077916 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.045690039 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.040484964 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.041390978 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.04315723 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.042638002 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.045268844 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.04285491 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.041398256 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.043395962 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.042406154 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.045421653 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.044087955 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.044111206 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.043136052 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.043108481 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.047915082 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.045209793 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.045465201 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.04350542 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.04476167 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.042535481 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.043667518 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.044233659 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.043439471 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.04422472 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.048148738 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.043630865 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.045607791 seconds)
  done (took 149.055643845 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.043021699 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.045048682 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.044792791 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.043828353 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04322517 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.043588392 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.04830512 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043696111 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045693069 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.04569881 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044801253 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.047695139 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044245431 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.043570431 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046172253 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.044254504 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.044368593 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.042455991 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.045575475 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.043989618 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.050569882 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.043897906 seconds)
  done (took 46.962538124 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04558457 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.046525028 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.045596922 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.044924974 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.044486533 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.045062322 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.045663986 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.049931028 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044249623 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043986695 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045034293 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044817297 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.045745697 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045042655 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.045050002 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.044267026 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.045846801 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.050778387 seconds)
  done (took 38.794955008 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.046543173 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.045796058 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.046902527 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.048649122 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.046596118 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.046016798 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04339244 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.046463521 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.042795475 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.047237551 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.045277174 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044661921 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.044263303 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.047054313 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.048087421 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.043901394 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.045416513 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044962144 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.046859316 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.046295494 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.045604143 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.047139719 seconds)
  done (took 46.983569347 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.04556003 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044821044 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.045292961 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.047993812 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.048434919 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.046084628 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.046434161 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.047801825 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.045569828 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.047750486 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043616393 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.044851476 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.044596463 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.04700041 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.050014564 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.047501859 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.046805808 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.048767189 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.044461432 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.045832848 seconds)
  done (took 42.909717343 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.044319881 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047920051 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.049589442 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.050337766 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.046618992 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.046810825 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.045136648 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.046754758 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.047798833 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.048352641 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047646061 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.044413074 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.047682148 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.052354047 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.045407813 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.048569617 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.046876472 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.045304032 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.049899994 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046616791 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.0492464 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.048231841 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.050872428 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.044698298 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.048137893 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.047288081 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047625345 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.050281214 seconds)
  done (took 59.310823801 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.046442562 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.047945282 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.049154044 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.05013493 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.04779992 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.049444083 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.051311989 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.023789502 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.05043942 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.047763081 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.047753648 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.051349772 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.046806152 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.049880842 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.048766819 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.049687576 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.050677303 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.048590746 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.054443422 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.049134059 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.050980435 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.047281069 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.050239786 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.049310033 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.049033266 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.047400006 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.048843034 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.051930708 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.052146362 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.048383851 seconds)
  done (took 63.437412073 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.071394766 seconds)
    (2/2) benchmarking "in"...
    done (took 2.069368481 seconds)
  done (took 6.118301963 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.048721534 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.049274026 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.051943599 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.049287062 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.050685448 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.050468169 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.050307696 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.050498293 seconds)
  done (took 18.383497244 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.050052507 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.052856672 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.04809053 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.051123539 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.051918009 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.059547399 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.051225094 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.052459235 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.055985558 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.056341313 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.056018189 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.056595827 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.057772673 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.056308197 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.051215158 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.052699629 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.05232481 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.053981077 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.052274789 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.054735254 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.054355912 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.051559005 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.047844089 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.046998059 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.046782186 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.052697304 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.062732757 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.052822261 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.053231325 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.054361917 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.060886362 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.054069944 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.052143345 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.055479537 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.053204331 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.052099864 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.06100047 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.052176974 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.056899768 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.049241617 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.055103858 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.054397674 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.057897952 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.065168271 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.053368032 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.051994058 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.053365259 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.052266641 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.055217507 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.056975552 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.05881235 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.054452466 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.050718551 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.058734411 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.05433206 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.052694873 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.052458836 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.05535883 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.059785757 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.062099435 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.058217786 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.073302516 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.063676445 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.056732736 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.052206915 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.063510669 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.073206352 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.053643555 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.055389815 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.052791943 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.062337822 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.054292021 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.055893514 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.050549747 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.066540718 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.061011509 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.054783022 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.053766947 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.052835397 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.053790085 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.056114224 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.055091486 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.058773484 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.054055152 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.064305445 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.078162298 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.053254624 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.060839437 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.058359925 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.059066537 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.058739255 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.056331651 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.059660765 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.055416184 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.055799244 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.059117036 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.055714929 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.058324253 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.045654782 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.043309369 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.055892733 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.05844125 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.060282177 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.064841394 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.057824469 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.056450039 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.060190985 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.051966443 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.065340967 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.058675875 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.057084149 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.056253377 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.056769906 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.060575625 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.057512762 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.060760408 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.066328774 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.066214537 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.059306716 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.061573397 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.059920488 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.062361501 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.067048537 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.080521834 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.056380147 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.061263918 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.064575844 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.068345701 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.062726558 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.058140692 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.060648467 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.062968666 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.055412522 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.059935461 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.056355357 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.057203112 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.058800165 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.057037786 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.05759432 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.057257248 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.063371003 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.061533684 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.060804349 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.059411093 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.063416766 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.063381945 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.061059805 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.063881352 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.05812604 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.057840913 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.059851655 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.05998979 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.060668152 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.06114881 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.057352811 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.059565704 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.056841469 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.059938979 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.062492215 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.058690875 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.059506163 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.05947914 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.061906721 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.058804793 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.059264378 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.064515831 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.058333808 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.057860306 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.060828447 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.061865201 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.061323153 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.057775259 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.064967396 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.058572664 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.061175892 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.058177203 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.058427632 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.059255895 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.064042509 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.073824669 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.063026528 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.069731246 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.059370531 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.071182856 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.061181308 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.06128057 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.06105419 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.059233619 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.060691866 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.06050822 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.059851581 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.061748796 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.079196922 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.068362314 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.064952322 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.062423378 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.064444525 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.06283508 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.067641947 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.059179144 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.059606687 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.064574764 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.061973511 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.063829638 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.060232978 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.063361967 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.059502373 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.060489254 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.067485362 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.060716338 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.059848195 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.061481754 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.060125851 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.063456727 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.060239706 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.061111548 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.059222694 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.061580262 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.074751639 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.063085341 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.060660592 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.060127699 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.061937302 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.060545068 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.061158629 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.0622208 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.065393451 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.062249498 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.066226733 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.068538228 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.065636765 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.060860738 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.060573117 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.061671201 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.063383779 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.060158661 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.062136585 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.070521155 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.064784758 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.061235423 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.067175599 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.061698093 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.069502034 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.061553917 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.063418724 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.061160734 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.06194921 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.06297999 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.062010017 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.070479347 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.06149967 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.062286115 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.06507416 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.066011596 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.06610933 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.064489401 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.062961639 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.069582292 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.069697124 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.070335463 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.065867369 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.067249687 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.064472883 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.063601387 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.065780666 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.066334545 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.076789656 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.070740253 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.063645029 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.062467209 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.065866412 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.066051767 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.063472568 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.063697031 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.070191364 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.063924931 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.064718466 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.064950725 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.063165552 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.064406738 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.073012146 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.067975057 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.069103286 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.063698989 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.06487685 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.065909226 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.064272745 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.066588715 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.062174793 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.067106959 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.06862636 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.070997704 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.066320703 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.06359038 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.075357368 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.070460294 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.066330801 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.072742083 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.06805163 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.065729791 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.066718999 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.0632097 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.064608993 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.067208214 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.065183601 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.067214112 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.064099692 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.06584149 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.074345835 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.070704677 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.077660429 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.066007788 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.075819956 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.066451904 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.067446635 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.066467216 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.070147055 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.075740835 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.064243203 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.064593487 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.076979406 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.066309659 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.066284014 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.071567597 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.066255116 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.064819321 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.064336576 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.066590036 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.069991434 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.069403747 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.067096706 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.069755213 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.067432105 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.066654563 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.074204172 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.071980585 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.071556536 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.069318296 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.069101323 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.071765216 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.066152477 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.06779665 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.065745962 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.065999188 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.068513608 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074774843 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.067461498 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.068522022 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.073865606 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.070792452 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.077828787 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.069159033 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.06874316 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.069970105 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.06735851 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.074460265 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.068181584 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.070263699 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.069415798 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.067198549 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.069812697 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.07894416 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.079682011 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.073626211 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.07269405 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.069686201 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.06977692 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.07803165 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.093551863 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.070322704 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.073115171 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.0713401 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.077655373 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.07567158 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.073980093 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.075456378 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.077177123 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.071365679 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.070842415 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.073661246 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.084319626 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.071672435 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.073234521 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.067620057 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.076763107 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.071237512 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.069078334 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.073527579 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.074724183 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.072582295 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.080835705 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.071211051 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.072341396 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.073561918 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.070786034 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.07220469 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.074065825 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.075248827 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.076079361 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.069959531 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.070316989 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.076362289 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.078138531 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.069828184 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.075596822 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.08003199 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.06926232 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.071635118 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.072315582 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.071507049 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.073297213 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.071300626 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.072330675 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.072125428 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.074006674 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.072892416 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.077396215 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.079061452 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.0729972 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.070121201 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.073186567 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.081024885 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.072945648 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.074867856 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.075895931 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.084704614 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.076606739 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.08376793 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.083681232 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.073238101 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.075639801 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.081646934 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.081546048 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.075316879 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.077000757 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.074638945 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.076356059 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.078407964 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.075990757 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.073777271 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.075645638 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.076686574 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.072053711 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.073591865 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.075481571 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.074098354 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.079249115 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.075618098 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.077707272 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.07076582 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.07486464 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.074258073 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.07763279 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.073662631 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.079229927 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.075219312 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.074849542 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.077715658 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.075909516 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.079816846 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.072749534 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.072207179 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.07467375 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.074767194 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.073472725 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.074837443 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.073872136 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.073702403 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.079147347 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.084396565 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.077186979 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.074706698 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.074458873 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.08104576 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.079005424 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.076104394 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.074358499 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.072808201 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.08271405 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.077102412 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.075187491 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.077213249 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.072622624 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.080232827 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.078235315 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.079783043 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.076772336 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.076788153 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.076243255 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.080400835 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.084150754 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.079357032 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.079555824 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.08432407 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.081389385 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.077904946 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.075688122 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.073686061 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.077384101 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.078093308 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.080339754 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.078011269 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.077907245 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.076807534 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.075949119 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.078619368 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.07911746 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.075005898 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.077897947 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.078660879 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.087676191 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.085846773 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.078022899 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.079241412 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.077917918 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.080759062 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.086692029 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.07946958 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.077116996 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.078559249 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.07996902 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.077506401 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.086946701 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.087030981 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.082909377 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.076442297 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.083816825 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.100061229 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.081569209 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.087525983 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.109853459 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.081317618 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.081611379 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.081222078 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.07817107 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.078575638 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.086816236 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.077384689 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.08572874 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.080479792 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.078745062 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.085312712 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.080370008 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.079378916 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.079755798 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.081988617 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.084723339 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.082309113 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.089054853 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.081452802 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.079559047 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.077388378 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.081970203 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.077943411 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.079674331 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.076288836 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.082963238 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.080405645 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.081237484 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.088133369 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.080438195 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.08036596 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.092236977 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.092407529 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.08088481 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.079316207 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.079737811 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.086841776 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.083683606 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.077825175 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.085895827 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.088511194 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.083601315 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.090531309 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.082803566 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.083627648 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.081976346 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.081794129 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.083250706 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.090069092 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.094979345 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.079565638 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.08215095 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.085984013 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.08203618 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.088791503 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.089388115 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.081737816 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.085314391 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.079715031 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.080398769 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.078411306 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.080052661 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.087625723 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.087733065 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.082161687 seconds)
  done (took 1234.839609367 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.079656789 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.078108957 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.079652476 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.081426847 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.080511298 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.082103427 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.08220338 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.083845205 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.083202424 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.08138995 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.08243702 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.08358698 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.082345217 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.083734165 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082128837 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.083498509 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082848745 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.08215037 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.083683125 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.081583108 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.085069996 seconds)
  done (took 45.734990999 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.082135763 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.083076395 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.083424914 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.085281563 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.084284438 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.082989982 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.082625636 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082455094 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.082176164 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082389391 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.083444244 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083288536 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.085391875 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.083314928 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083620157 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.082889553 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.083484345 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.082900272 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.083507245 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.084220617 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.082194867 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.081876198 seconds)
  done (took 47.841277684 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.08462018 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.086274134 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.086368807 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.085004591 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.082719552 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.086738637 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.084209137 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.088224944 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.083541472 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.084086498 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.09196483 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.092440245 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.084025462 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.087728264 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.084679166 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.082729597 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.231567631 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.085898003 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.085532439 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.083349811 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.085629172 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.090756895 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.084089695 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.08267988 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.081847791 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.086895754 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.08673565 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.082362028 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.086900002 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.087172694 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.088881525 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.088204903 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.085877803 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.089519465 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.089921353 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.088399075 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.088248942 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.087579207 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.087501687 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.085065788 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.095606942 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.110358588 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.084713738 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.088964885 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.095963635 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.089109656 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.086507772 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.089654421 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.093916744 seconds)
  done (took 104.442563734 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.086371105 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.087169368 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.087013294 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.088422037 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.086791544 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.086276321 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.086180528 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.085533064 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.084285968 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.084192612 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.088614666 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.089300111 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.090084636 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.086545736 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.088332823 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.085014053 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.089511948 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.087191425 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.0864723 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.087108271 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.088630981 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.086833609 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.086727987 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.087877099 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.088344972 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.088695832 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.085596904 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.089711154 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.08864507 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.085757928 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.090164614 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.088282163 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.089958405 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.088699796 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.08747159 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.087632875 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.091440583 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.089398018 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.087857016 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.087908432 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.088284934 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.090601868 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.087746844 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.090418079 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.089383451 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.0890588 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.09200266 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.088632415 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.08978916 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.089338278 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.088084456 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.091334196 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.087065769 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.088824104 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.088913774 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.090570872 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.087749811 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.086769164 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.087327293 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.088619322 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.088288763 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.089493695 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.088350529 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.088872328 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.088185039 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.088681107 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.089615296 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.089119978 seconds)
  done (took 144.013640939 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.091780985 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.091059667 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.089036911 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.089228168 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.092259271 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.089160687 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.090411505 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.090345025 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.091980187 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.091578898 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.091457153 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.091693917 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.088266823 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.089322741 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.09146539 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.092019458 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.091019173 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.089853637 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.092248481 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.09093081 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.091326229 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.091705995 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.09097279 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.09025112 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.090170305 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.091177283 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.092203687 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.092338356 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.08972127 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.091151187 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.091903213 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.092750832 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.093201035 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.092918488 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.086970667 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.09220315 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.091483969 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.09120271 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.093325777 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.092305804 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.09216188 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.093054207 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.091577159 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.094074693 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.094923447 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.091753573 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.089729822 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.091538064 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.092600913 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.09498256 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.09358529 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.090495388 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.092405681 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.092780093 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.09240771 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.094566345 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.093391177 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.094285447 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.094829682 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.09406094 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094902915 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.093881212 seconds)
  done (took 131.711418326 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.092142469 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.090297569 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.091023719 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.094284924 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.09191223 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.092928703 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.091450333 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.093710832 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.093493977 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.090545745 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.093938329 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.09256718 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.093667005 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.093015139 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.093587518 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.09375304 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.091334908 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.093106814 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.09183752 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.096236984 seconds)
  done (took 43.8746144 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.092999371 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.095025002 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.090817442 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.092498559 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.091770617 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.095565395 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.091666442 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.09384217 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.094056948 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.094275137 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.092968463 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.093779404 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.093220316 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.094729676 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.092395706 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.092914508 seconds)
  done (took 35.513532139 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.095364878 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.088206747 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.095616181 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.093757018 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.095309889 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.094056485 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.09545424 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.092616069 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.094327634 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.093220321 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.095287364 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.094139785 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.091967166 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.095573915 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.094600285 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.098421123 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.093931132 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.090691523 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.094230596 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.093809638 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.095705706 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.093455643 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.093849497 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.095109365 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.094759179 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.096750876 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.096022421 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.095899217 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.094914851 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.092455021 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.095119287 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.095592428 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.097645699 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.095360168 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.095913384 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.096618579 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.095206639 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.095739964 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.093290448 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.09520593 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.097212443 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.096414393 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.097028302 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.09651652 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.096368788 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.093434634 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.096814816 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.095884413 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.09552684 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.096420722 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.096038867 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.097200768 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.09619778 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.098298556 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.095229401 seconds)
  done (took 117.253079165 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.09789478 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.098101867 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.098246521 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.096636681 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.097029641 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.095865508 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.098197782 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.095894747 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.096048622 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.094971728 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.098009593 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.099544835 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.097073364 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.098159008 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.097070771 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.098637292 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.101007419 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.098116217 seconds)
  done (took 39.780602314 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.097240822 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.097201614 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.096077727 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.0947271 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.098998725 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.095876343 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.095326516 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.098431459 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.097859084 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.096596762 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.099444734 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.097050455 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.098478408 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.098117741 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.097271862 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.098017504 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.096384257 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.098081994 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.098402403 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.096848379 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.099736099 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.097155969 seconds)
  done (took 48.167106816 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.100070541 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.099048106 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.114103952 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.118982845 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.119943315 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.135024081 seconds)
  done (took 14.713948999 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.097967788 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.100487681 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.100299695 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.098432441 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099393975 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.101155381 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099279971 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.098546467 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.100793305 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.101961984 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.102082872 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099848157 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.098957769 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098392093 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.099532093 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100890226 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.098756662 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.100730322 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.100062941 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.096415557 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09925027 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102211168 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.098729147 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.100526436 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.099487869 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.101767034 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.10095248 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.100158688 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.098553031 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.101705099 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099813584 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.099334071 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.099652423 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102152684 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.101840842 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097995974 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.102775889 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.100306972 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.102095819 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.101438407 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.100316163 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.101041901 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.102106689 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099847559 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.102826009 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.099165666 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.102484103 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102547314 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099943796 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.103028951 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.099766939 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.099713312 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.100439786 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.100885285 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102775387 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102177414 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.103526602 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.10356069 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.101669724 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.101974304 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.103578878 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099327854 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.104229192 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100875766 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102598065 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.103860958 seconds)
  done (took 140.674962346 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.103512493 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.102671898 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.103397073 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.10049794 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.102914337 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102753095 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.10322156 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.10212349 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.100986482 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.102511227 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.101817358 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102723121 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.103557408 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.101918304 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.102877285 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099982326 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.102154752 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.104214446 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.100543371 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.102130466 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.103768307 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.102861969 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.105488094 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.10223033 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102458104 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.103130346 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.104190461 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.103092567 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.104192131 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.10534739 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.103345628 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.106796194 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.105643188 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.101056858 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.103193615 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.10323362 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.104802291 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102354973 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.101981583 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.101227313 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.103736984 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.105617969 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.103538474 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.103516765 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.106978748 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.103828443 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.105256836 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.104432583 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.106451829 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.101044087 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.10387473 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.103719187 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.106362037 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102715858 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.10435325 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.105046106 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.105437489 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.105635256 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.105774023 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.104143306 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.103686056 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.103434746 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.104513785 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.104573803 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.106736136 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.106589721 seconds)
  done (took 140.867954797 seconds)
done (took 2877.452812717 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.210480866 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.157372509 seconds)
  done (took 16.400560804 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.269481673 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.151400469 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.29326569 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.226236012 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.108006331 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.120435739 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.10469238 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.108708422 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.199497632 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.10976024 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.150608121 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.107186936 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.109608279 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.108033641 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.110518376 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.107493114 seconds)
  done (took 56.419664515 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.111343797 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.112125986 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.109194214 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.107959674 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.119863302 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.183673294 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.130542605 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.114030594 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.124340372 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.14533367 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.12835416 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.116104424 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.117593562 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.113347559 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.199632232 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.154260948 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.166420979 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.180452419 seconds)
  done (took 40.467085408 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.185996421 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.11790949 seconds)
  done (took 11.344250152 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.125842386 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.125300632 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.129834707 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.131293921 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.112944562 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.13382786 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.12109857 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.122297508 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.119530187 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.129388858 seconds)
  done (took 73.290453463 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.113845525 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.108900969 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.413327036 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.118342002 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.117308084 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.136036031 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.112094849 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.1436288 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.111453374 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.111914258 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.122366378 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.420776116 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.120736857 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.111435053 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.523907886 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.123896518 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.118537028 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.143695607 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.143325325 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.115152601 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.120874099 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.115907301 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.272808335 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.788350575 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.109073219 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.115587828 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.117176516 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.108970159 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.109726972 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.112883648 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.113706344 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.109723002 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.115173068 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.119221138 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.120131438 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.116845594 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.602828424 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.13138405 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.12113827 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.206318286 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.154269998 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.120588859 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.887148276 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.116623551 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.1095695 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.118863601 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.789080005 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.192923293 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.113457606 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.26965714 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.445352217 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.128017301 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.261979856 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.272141634 seconds)
  done (took 146.178022708 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.111880181 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.445702288 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.265895849 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.115815232 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.418595244 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.326453922 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.805749393 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.155892235 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.115298487 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.33021102 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.246825714 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.219435192 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.111835309 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.111197113 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.111437718 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.111818533 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.263693957 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.17663895 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.109366695 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.108686078 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.131744139 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265211611 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.213858636 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.112494085 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.123948903 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.322548508 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.156637993 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.214113095 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.606952148 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.105759109 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.169551668 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.577142237 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.111942921 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.109148236 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.147365052 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.20920324 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.195420407 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.108741924 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.107921829 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.107001725 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.789464508 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308169138 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.213198748 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.239044717 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.254637255 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.31844751 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.58008962 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.106197277 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.616307521 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.279888738 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.312562412 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.322468621 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.206847414 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.112455071 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.415221067 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.105134761 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.75520232 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.33455682 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.248871603 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.208362654 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.106971994 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.104765544 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.105093537 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.346746767 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.108963303 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.202887391 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.106968028 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.104549023 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.204601904 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.211079784 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.243319993 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.325875304 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.136758029 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.834508603 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.317770243 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.275468591 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.168338371 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.327229318 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.107024687 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.103614751 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.190179277 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.706296994 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232870746 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.349905554 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.345581763 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.129284819 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.690564709 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.105283038 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.248471447 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.278258094 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.392214785 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.247674729 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.154999323 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.992685897 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.103416983 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.104600195 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.181776671 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.230162039 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.294664277 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.456770761 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.344622857 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.693507245 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.123051843 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.477579696 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210921705 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.106828538 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.759429159 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.103726771 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.313506324 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.14553976 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.105935199 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.104666635 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.268161704 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.119070801 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.103928824 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.840519961 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.161958561 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.11002251 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.281191313 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.105761128 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.351360953 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.020558661 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.335078654 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.044397352 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.133313169 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.274225582 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.243136867 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.401055621 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.431778282 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.347590075 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.188227901 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.322623499 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.867908315 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.097343682 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.3666441 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.097341148 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.097019492 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.261983337 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.008037376 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.232344614 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.089636506 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.400921426 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.105170763 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.138115852 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.087421105 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.328334391 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.1317773 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.128846869 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.083231195 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.213260482 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.080453372 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.013125458 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.237374376 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.085357245 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.080081716 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.674999625 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.076069845 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.216360822 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.302004626 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.086865177 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.14207507 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.563295209 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.664557253 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.162970581 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.090861994 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.443975187 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.781617467 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.202100401 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.045629492 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.559196877 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.064949145 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.295688731 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.254731287 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.060371586 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.054647135 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.900700841 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.678624852 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.046695004 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.200649122 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.033896374 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.422828051 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.247389908 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.045958953 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.089047363 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.042262934 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.772986746 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.379209946 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.040244029 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.036904093 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.035193102 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.035878852 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.035417858 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.238518202 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.063437708 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.563837629 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.168178135 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.287611438 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.334821838 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.251929633 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.06456668 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.033898604 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.316071923 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.032369873 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.090380309 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.031373039 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.037213434 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308158744 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.035505625 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.240208153 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.237392412 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.992917198 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.074966012 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.030072493 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.031060186 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.029148048 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.165613634 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.120942632 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.031969331 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.03141393 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.071019582 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.132561426 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.211629809 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.319732416 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.024330622 seconds)
  done (took 932.603645294 seconds)
done (took 1278.73521643 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.031395741 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.034032558 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.034431774 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.039186787 seconds)
  done (took 30.100194594 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.03281164 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.030371937 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.03290229 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.031647617 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.030596311 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.032975511 seconds)
  done (took 14.151848712 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.031357167 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.031614832 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.03498256 seconds)
  done (took 23.059288612 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.451559547 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.431033089 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.104475198 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.172749565 seconds)
  done (took 11.121105831 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.036227186 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.035614772 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.034370328 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.034825569 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.034852682 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.033059254 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.038511759 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.033159301 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.035434147 seconds)
  done (took 20.285685038 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.163732091 seconds)
done (took 104.842238879 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.147533086 seconds)
    (2/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.537223258 seconds)
    (3/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.407278948 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.268739827 seconds)
    (5/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.134698986 seconds)
    (6/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.360329758 seconds)
    (7/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.521026908 seconds)
    (8/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.333810507 seconds)
    (9/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.367252835 seconds)
    (10/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.38394156 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.25171984 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.291668577 seconds)
    (13/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.144555093 seconds)
    (14/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.033539412 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.37885733 seconds)
    (16/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.483866228 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.265903911 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.145347656 seconds)
    (19/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.241463349 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.144920012 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.216129995 seconds)
    (22/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.144843996 seconds)
    (23/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.331977833 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.143957944 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.026929776 seconds)
    (26/341) benchmarking ("sort", Float64, false)...
    done (took 5.844891921 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.431155945 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.525981012 seconds)
    (29/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.871227776 seconds)
    (30/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.217101609 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.143617402 seconds)
    (32/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.237074499 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.231731305 seconds)
    (34/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.042951343 seconds)
    (35/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.209013109 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.230676524 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.131195731 seconds)
    (38/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.864389696 seconds)
    (39/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.50135679 seconds)
    (40/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.320016747 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.361618294 seconds)
    (42/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.14224383 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.210156706 seconds)
    (44/341) benchmarking ("sort", Float32, false)...
    done (took 5.809840143 seconds)
    (45/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.22411472 seconds)
    (46/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.040718823 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.045206092 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.380984457 seconds)
    (49/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.808194699 seconds)
    (50/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.453878137 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.551575235 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.213256951 seconds)
    (53/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.13720179 seconds)
    (54/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.175458875 seconds)
    (55/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.138549691 seconds)
    (56/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.52950241 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.109445353 seconds)
    (58/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.557479605 seconds)
    (59/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.49244191 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.396098958 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.122409303 seconds)
    (62/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.867664953 seconds)
    (63/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.339022267 seconds)
    (64/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.436334964 seconds)
    (65/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.143012734 seconds)
    (66/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 4.115742663 seconds)
    (67/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.138670256 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.917601671 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.00439541 seconds)
    (70/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.839990929 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.372940371 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.846146326 seconds)
    (73/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.14182958 seconds)
    (74/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.592422797 seconds)
    (75/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.137297245 seconds)
    (76/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.209018045 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.451355758 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.135890609 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.14886721 seconds)
    (80/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.133798835 seconds)
    (81/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.142083537 seconds)
    (82/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.133294094 seconds)
    (83/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 10.145196525 seconds)
    (84/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.240969227 seconds)
    (85/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.291678061 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.06988241 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.166818773 seconds)
    (88/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.3456278 seconds)
    (89/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.614742297 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.160963364 seconds)
    (91/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.961077689 seconds)
    (92/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.251671868 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.140327952 seconds)
    (94/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.297765438 seconds)
    (95/341) benchmarking ("sort", BigInt, false)...
    done (took 7.144328477 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.226016135 seconds)
    (97/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.622463977 seconds)
    (98/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.151714402 seconds)
    (99/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.247033719 seconds)
    (100/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.957946123 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.053682432 seconds)
    (102/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.149306586 seconds)
    (103/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.235455556 seconds)
    (104/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.244370018 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.473859537 seconds)
    (106/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.476694706 seconds)
    (107/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.144333594 seconds)
    (108/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.220381113 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.913317712 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.147001274 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.52666756 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.608901386 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.260381941 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.412385594 seconds)
    (115/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.247604809 seconds)
    (116/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.48190756 seconds)
    (117/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.137360969 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.499119038 seconds)
    (119/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.911148859 seconds)
    (120/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.193694229 seconds)
    (121/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.263497232 seconds)
    (122/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.190122063 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.450345837 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.395246525 seconds)
    (125/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.141258537 seconds)
    (126/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.358902108 seconds)
    (127/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.998362609 seconds)
    (128/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.254677761 seconds)
    (129/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.501237291 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.588447723 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.279629009 seconds)
    (132/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.46076873 seconds)
    (133/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.251096681 seconds)
    (134/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.551014748 seconds)
    (135/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.249381795 seconds)
    (136/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.16137044 seconds)
    (137/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.150088441 seconds)
    (138/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.305904258 seconds)
    (139/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.156793786 seconds)
    (140/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.556200085 seconds)
    (141/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.940304514 seconds)
    (142/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.791803608 seconds)
    (143/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.554118523 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.133914068 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.244395029 seconds)
    (146/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.134648071 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 3.783763184 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.37127035 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.152409068 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.37579542 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.384122967 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.391155562 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.350671684 seconds)
    (154/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.327957499 seconds)
    (155/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.358794188 seconds)
    (156/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.361380805 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.84208727 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.375172229 seconds)
    (159/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.262972395 seconds)
    (160/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.382934053 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.143115991 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.137304348 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.247116975 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.774780538 seconds)
    (165/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.259487407 seconds)
    (166/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.528974208 seconds)
    (167/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.124560308 seconds)
    (168/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.274896931 seconds)
    (169/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.203495358 seconds)
    (170/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.857048057 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.048222376 seconds)
    (172/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.156711635 seconds)
    (173/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.040268827 seconds)
    (174/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.355612997 seconds)
    (175/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.35250236 seconds)
    (176/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.153156216 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.299487271 seconds)
    (178/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.166065259 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.09707049 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.289224737 seconds)
    (181/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.020438024 seconds)
    (182/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.481203715 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.167206209 seconds)
    (184/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.144526136 seconds)
    (185/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.151227398 seconds)
    (186/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.459244435 seconds)
    (187/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.352557843 seconds)
    (188/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.361563188 seconds)
    (189/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.296559967 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.175312306 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.286471723 seconds)
    (192/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.485459017 seconds)
    (193/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.15217012 seconds)
    (194/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.338232772 seconds)
    (195/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.298894252 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.460137052 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.275507025 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.469142897 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.140720638 seconds)
    (200/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.139301949 seconds)
    (201/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.458496568 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.14402724 seconds)
    (203/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.150697394 seconds)
    (204/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.598528362 seconds)
    (205/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.152940792 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.849898037 seconds)
    (207/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.183905657 seconds)
    (208/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.250206332 seconds)
    (209/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.304072474 seconds)
    (210/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.266012704 seconds)
    (211/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.27702873 seconds)
    (212/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.154786938 seconds)
    (213/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.139583808 seconds)
    (214/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.724624841 seconds)
    (215/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.229786779 seconds)
    (216/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.218783556 seconds)
    (217/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.300353687 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.429791226 seconds)
    (219/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.421736065 seconds)
    (220/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.308097226 seconds)
    (221/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.199679067 seconds)
    (222/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.269461567 seconds)
    (223/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.155173711 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.448433183 seconds)
    (225/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.205447268 seconds)
    (226/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.274293015 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.231923221 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.523230206 seconds)
    (229/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.319293861 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.225335784 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.44206872 seconds)
    (232/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.171884577 seconds)
    (233/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.281199757 seconds)
    (234/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.141425058 seconds)
    (235/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.274588272 seconds)
    (236/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.249589858 seconds)
    (237/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.02029754 seconds)
    (238/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.489347905 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.837448454 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.45093552 seconds)
    (241/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.258770328 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.501391392 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.173198583 seconds)
    (244/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.254124308 seconds)
    (245/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.302087104 seconds)
    (246/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.430046618 seconds)
    (247/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.377908549 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.997128513 seconds)
    (249/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.696914523 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.207920471 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.185492171 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.230605632 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.152079024 seconds)
    (254/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 5.320116328 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.241605761 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.151020015 seconds)
    (257/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.578445116 seconds)
    (258/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.58993695 seconds)
    (259/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.429637549 seconds)
    (260/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.17060441 seconds)
    (261/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.575192073 seconds)
    (262/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.024362174 seconds)
    (263/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.939020773 seconds)
    (264/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.254063754 seconds)
    (265/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.541881174 seconds)
    (266/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.306779413 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.158101655 seconds)
    (268/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.414632594 seconds)
    (269/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.366764265 seconds)
    (270/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.582095974 seconds)
    (271/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.154721724 seconds)
    (272/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 4.007990014 seconds)
    (273/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.167777051 seconds)
    (274/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.160741906 seconds)
    (275/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.287266181 seconds)
    (276/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.150522099 seconds)
    (277/341) benchmarking ("perf_sum", Float64, true)...
    done (took 4.140729964 seconds)
    (278/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.468039905 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.267599267 seconds)
    (280/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.567618076 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.277444709 seconds)
    (282/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.188225336 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.500943514 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.154747628 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.47949895 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.173252361 seconds)
    (287/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.209874029 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.898139313 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.151191655 seconds)
    (290/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 3.712332654 seconds)
    (291/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.46763135 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.19633477 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.16300287 seconds)
    (294/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.155693557 seconds)
    (295/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.17192812 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.153228315 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.620008843 seconds)
    (298/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.486550878 seconds)
    (299/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.237981172 seconds)
    (300/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.319889598 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.563189774 seconds)
    (302/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.419439588 seconds)
    (303/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.246980316 seconds)
    (304/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.155914918 seconds)
    (305/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.541263803 seconds)
    (306/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.154596245 seconds)
    (307/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.450639541 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.422442462 seconds)
    (309/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.2723908 seconds)
    (310/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.373650384 seconds)
    (311/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.554938908 seconds)
    (312/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.37613768 seconds)
    (313/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.345833026 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.569817618 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.364777315 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.179902403 seconds)
    (317/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.286022964 seconds)
    (318/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.181080186 seconds)
    (319/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.998277915 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.854145211 seconds)
    (321/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.263538723 seconds)
    (322/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.493482809 seconds)
    (323/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.314669158 seconds)
    (324/341) benchmarking ("sort", Int8, false)...
    done (took 5.104459384 seconds)
    (325/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.987076949 seconds)
    (326/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.569190931 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.276568604 seconds)
    (328/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.454598888 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.045901003 seconds)
    (330/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.2497322 seconds)
    (331/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.095814395 seconds)
    (332/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.349342014 seconds)
    (333/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.267628813 seconds)
    (334/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.457098619 seconds)
    (335/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.638749093 seconds)
    (336/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.232745517 seconds)
    (337/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.276116421 seconds)
    (338/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.85806922 seconds)
    (339/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.165451054 seconds)
    (340/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.267973729 seconds)
    (341/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.415858199 seconds)
  done (took 1190.530166898 seconds)
done (took 1192.683332499 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.180089836 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.16354953 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.671035087 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.176307632 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.164176197 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.167105278 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.683131342 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.194964364 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.18154305 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.683008128 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.176579125 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.163040888 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.178288921 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.19833551 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.177217368 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.174842714 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.167508801 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.18688605 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.196148357 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.167786112 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.207347016 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.166647919 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.159434091 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.214084647 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.161416021 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.173102791 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.174131784 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.20708288 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.207558521 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.160813358 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.163776711 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.515650304 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.217624708 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.161931419 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.167382268 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.169839754 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.162166206 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.17167778 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.165513112 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.167394342 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.152713756 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.16306008 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.157693875 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.152593279 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.149891855 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.150446419 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.151921658 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.273749741 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.16103631 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.486171299 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.209690355 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.1604343 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.191814891 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.147909329 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.1473647 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.146796463 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.189512693 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.148690596 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.146464429 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.480750698 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.239833802 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.154809624 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.479947798 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.210624494 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.153916332 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.146102316 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.137098486 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.150827441 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.493713106 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.70409653 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.169842863 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.156626929 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.138775665 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.139951916 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.150104633 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.654887885 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.154169817 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.720923184 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.162930783 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.153272164 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.144368103 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.139952675 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.139209588 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.154699478 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.151427116 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.136931948 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.143160928 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.143765763 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.151509136 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.49582448 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.189613508 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.643921125 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.147131004 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.152957567 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.152081985 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.722466661 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.169616577 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.15096551 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.141210437 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.498030856 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.188161174 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.152838927 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.140908492 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.150091517 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.253916143 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.151923875 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.152704049 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.138620645 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.160901216 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.145914825 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.13942373 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.153082194 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.158407547 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.174446855 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.15681182 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.139574507 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.147164712 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.146415717 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.152337599 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.147758893 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.146180229 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.150172465 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.140167542 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.192016198 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.153886109 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.154569869 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.254237456 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.146555089 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.265687376 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.154252357 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.146111414 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.139027257 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.478946799 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.186444631 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.158523061 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.143025822 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.159108839 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.155358494 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.148827492 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.133508594 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.14732427 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.136714498 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.180101034 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.128084844 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.153543605 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.179471707 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.141784191 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.132060579 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.137813728 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.160724064 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.145756972 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.1306309 seconds)
done (took 337.777793678 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.164562234 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.115661562 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.177540141 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.118239431 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.184994147 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.170577218 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.117303116 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.117997768 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.118056489 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.503483377 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.118369798 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.122669222 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.117547967 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.118602935 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.167574251 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.118511841 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.118952632 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.351582036 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.120166101 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.17859878 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.118477093 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.118637142 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.119417966 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.504697105 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.119208925 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.118342552 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.177971344 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.118981614 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.358636531 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.118068687 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.117160148 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.358209881 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.178696257 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.132367068 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.129296455 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.12504068 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.186764666 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.131891024 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.167548376 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.166991896 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.179468519 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.150653545 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.120942848 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.118238157 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.123292391 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.120928969 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.119564541 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.153286415 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.118091065 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.127443387 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.354585603 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.125490361 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.127355732 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.120948715 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.120040392 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.134236779 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.120573751 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.121752494 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.17937256 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.122740384 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.167967631 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.506296931 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.505968645 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.120535448 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.119123166 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.120933926 seconds)
  done (took 200.33370086 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.188415624 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.207825599 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.190398972 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.127296136 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.171722725 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.186892741 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.127243418 seconds)
  done (took 17.248113995 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.128205178 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.122274825 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.145402111 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.144621211 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.122219484 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.260000579 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.132721107 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.128569677 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.145190966 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.122196628 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.41327794 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.145673389 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.129242057 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.122544699 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.133491761 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.150569313 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.123928692 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.12347657 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.220750901 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.200113362 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.127010316 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.128724468 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.151477616 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.13403691 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.123209335 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.123781971 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.123304282 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.130097474 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.121735157 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.122717051 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.123098868 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.136180477 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.123696994 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.124164332 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.122465598 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.123428679 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.123943008 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.122928806 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.12358069 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.121894151 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.124141772 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.123548443 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.123192556 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.122628254 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.122958342 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.145467869 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.123535134 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.122173409 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.124179241 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.12310978 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.151924668 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.123121144 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.124494719 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.128819411 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.159249225 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.128700433 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.123861876 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.122827012 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.123482875 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.124363817 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.123952217 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.202640443 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.149066886 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.124477589 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.146839714 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.163196455 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.124429691 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.121077435 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.119693264 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.146621019 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.122673864 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.140066941 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.117859026 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.209284468 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.117289655 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.259325437 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.136772992 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.117672462 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.117125828 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.113875949 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.119683673 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.111479802 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.113537399 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.118512836 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.117077833 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.111127685 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.111791951 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.114958466 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.120094292 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.112177199 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.157729145 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.110956411 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.112865148 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.206769637 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.112149566 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.210694001 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.136498514 seconds)
  done (took 229.434990714 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.117288229 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.114738481 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.124747306 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.113175569 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.113094859 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.117739328 seconds)
  done (took 14.739996118 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.114792836 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.116194678 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.111645883 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.11298541 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.11336358 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.113325033 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.112299935 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115151662 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.118739647 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.113595712 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.112785286 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.11498118 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.113379371 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.113423131 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.113305654 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.113528746 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.112905273 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.113245433 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.113725073 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114141626 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.344638514 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.113239891 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.113487595 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.117857088 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.117952463 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.113799826 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.123379706 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.113844546 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.11375114 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.1227975 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.118362945 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.114588473 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.118926998 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.121591818 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.12359379 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.120532664 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.121100886 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.117558259 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.116661329 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.116692478 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.117628708 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.117030536 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.117362088 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.118417201 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.119253732 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.12506836 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.121727806 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.126762422 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.117860519 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.117389643 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.11818313 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.117686454 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.118390551 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.118720434 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.123424149 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.124950287 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.123167068 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.118034584 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.117132147 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.1224981 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.121721364 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.117693646 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.120742179 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.122021964 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.125219254 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.11831747 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.122776523 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.122596956 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.118419311 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.11853187 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.119324133 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.118235122 seconds)
  done (took 155.750487348 seconds)
done (took 619.551763952 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.30901525 seconds)
  done (took 9.352214956 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.154497551 seconds)
  done (took 9.202862336 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.548962071 seconds)
  done (took 12.594402551 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.146179404 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.141471496 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.133034985 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.127144923 seconds)
  done (took 30.604961071 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.3609599 seconds)
  done (took 9.40545478 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.131899272 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.117527554 seconds)
  done (took 16.360344123 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.117367341 seconds)
  done (took 9.163162214 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.609806972 seconds)
  done (took 9.674837779 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.134119601 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.13339289 seconds)
  done (took 16.334758461 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.117946401 seconds)
  done (took 9.162942567 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.990768603 seconds)
  done (took 10.129827462 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.125520789 seconds)
  done (took 9.187827206 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.172010528 seconds)
  done (took 9.217108477 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.130711493 seconds)
  done (took 10.17420243 seconds)
done (took 172.609170893 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.127449089 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.118308645 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.122540615 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.120708007 seconds)
  done (took 30.534720857 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.155124035 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.154210534 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.162558876 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.154245608 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.145129255 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.144605809 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.154810978 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.154161146 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.145226846 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.152352673 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.15443236 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.15241876 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.153630917 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.163839259 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.163047023 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.153036028 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.154282003 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.155913872 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.144794904 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.163825138 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.153870035 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.154557786 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.120611915 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.120265536 seconds)
  done (took 53.676839763 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.312903613 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.186442591 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.274171706 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.166375384 seconds)
  done (took 10.98619884 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.120300757 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.18425182 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.172155305 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.165560033 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.171216384 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.222666365 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.174296614 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.257763371 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.248619676 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.247898766 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.129162085 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.14210969 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.145812016 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.166999141 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.22430623 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.120541332 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.120193566 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.234384018 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.184107169 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.29438727 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.121783861 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.175557264 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.172786072 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.174386327 seconds)
  done (took 54.418765737 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.121463181 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.129385938 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.128885613 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.1228937 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.123082691 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.122743592 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.129992383 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.124722103 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.143513726 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.124706558 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.122204125 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.122853306 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.129174669 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.122693077 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.123306649 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.136103224 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.137300979 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.12362505 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.126621304 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.130109679 seconds)
  done (took 44.59371887 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.121106578 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.96841258 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.469544634 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.372759212 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.121168514 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.124549026 seconds)
  done (took 33.226170102 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.136175531 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.14228682 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.130962293 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.148584713 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.173878146 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.131827514 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.184882777 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.293442856 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.135085315 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.182878509 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.147067378 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.13144412 seconds)
  done (took 27.986869534 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.122128651 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.125285027 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.12626456 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.136920549 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.135568327 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.132687072 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.131324074 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.121941279 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.138822536 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.143755617 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.132704289 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.135963356 seconds)
  done (took 47.632139266 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337157272 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350309944 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337672165 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.810400727 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.443524024 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107104188 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.410285343 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.337243651 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.834645065 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.86421013 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.416707401 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.104322158 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.07263844 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.049212371 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.021411815 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365129886 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125380864 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.982403737 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374410639 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.174865467 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127432228 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.123807337 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.126461187 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.403728881 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.452877579 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13212773 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.336447435 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139719011 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123683684 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.38661149 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.805760766 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.183679905 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.328072428 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.381187989 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459082601 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.176198996 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.238818762 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.386253144 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.174331423 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159538336 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133936501 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.134741023 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.66305787 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.13798981 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396291219 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126262919 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.124657682 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.227469039 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050977145 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.513145686 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246181098 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.122761246 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159285066 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.555561148 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24582345 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.367011217 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12952998 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.38817519 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.187822628 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.448351516 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.243638947 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.234668411 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.336866945 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05284544 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.532380351 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257630214 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.126653888 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130130987 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.824856991 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.366534681 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.205551098 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.517877671 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.894097714 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.125387162 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.126863068 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.167539604 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214490007 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.125163022 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.418092334 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.123392018 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.050300976 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.223222018 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.5215168 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130566177 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.122824817 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132361171 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.970977846 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050899736 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.221547538 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.444130998 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.452486267 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.125565881 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12583807 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.149187415 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126306658 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070510789 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.775141534 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.192323527 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.051042264 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.691321465 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.80785987 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.097794445 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.677599305 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.171909543 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40121122 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.279405719 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.530800479 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.332166481 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369741381 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.672532817 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127589566 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.682745928 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2060209 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199214861 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123264012 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.690051166 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.383367292 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.482945953 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244958295 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.122938257 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.048746224 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.133203777 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327088675 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.798833001 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182620606 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121896507 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.130437682 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.12116592 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124730868 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.236901554 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13690701 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.414274771 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.201075176 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.120959703 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.056106444 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.126691581 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.402954602 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.895803985 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183225264 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.37285779 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.390278284 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.824114289 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.718628184 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.165605631 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.385016307 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.192621173 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194271208 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.695900062 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.254300848 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.215655108 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118983506 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.237373463 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.134627396 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.123104023 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.611888218 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.531292361 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.546786206 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162782601 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118608858 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.14359831 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.354868648 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.364192186 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.20456264 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.144449638 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123817466 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.201764355 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346732682 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.125086234 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.046648966 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382245207 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365558162 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.410586067 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.535075186 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.203786769 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.192850512 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133810585 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.333857101 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.203474328 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.780050615 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.672828464 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342107195 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.740156535 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.087709528 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.761576506 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.450470122 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503017756 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138645321 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.572902689 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.343069865 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.849214641 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.153288741 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.648678514 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.047865587 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125675114 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.472483864 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.080256742 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.443674135 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.327202657 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139341806 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.121285145 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.121687631 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128827985 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068826471 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218180679 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189273497 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193519774 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048012214 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.799450507 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.161299985 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.123834263 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.121940111 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.495099485 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.951277887 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076103648 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.121059553 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199344277 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.864477522 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.668110594 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.126437969 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124691284 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.716768565 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.128005733 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.033830997 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.123788977 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.01632479 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148287179 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.450121764 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.825130475 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.41249734 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.197132078 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19686434 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.122822088 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130141811 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.824190992 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130767501 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.82389754 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408935436 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.400182292 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.579289572 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.189081531 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.335764699 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.136955048 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.123746561 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.647292708 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.15276909 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124539463 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327626395 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.637707635 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.528553939 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.774235735 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.207886364 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.123566671 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.396884434 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131772257 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.743548332 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.822988991 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.139892883 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.124686991 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.379133497 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.810273928 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.125600456 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.0355948 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133919462 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.33670896 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.327254769 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402995197 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.426044763 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.577944767 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051640348 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12951164 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.152704914 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.368778041 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.123583716 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.159102201 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.5703148 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.23071325 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.55248375 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.414977322 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.595931639 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.762955955 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.395364888 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.191761369 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.13645419 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.788970511 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267670668 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.05717126 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243255334 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.051081466 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.847804823 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415468858 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.142238202 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.398613638 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.106131374 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469273677 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.424568851 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.471837229 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.175986433 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.153743722 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.125863213 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16441941 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127636812 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.315257142 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.24220461 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.133766494 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.667330665 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166318785 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17539339 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131518379 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.68186542 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1472304 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129296503 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.819842654 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.154557172 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.244985027 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19808143 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.918435216 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.75607913 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.155387706 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.082590199 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.954077223 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.400782461 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.184019742 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.587879957 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165943352 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.530570949 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126805074 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.339201636 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.131291919 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.685531901 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173488937 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.403065459 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086133858 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.339151429 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.335781673 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.143370986 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.132958644 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053192589 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.233029945 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.007947731 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.108411052 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.130675982 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.809475305 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.606740514 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.317434487 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.636967941 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.950123938 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.129464616 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.528173089 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.537193844 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.735243135 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161207652 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130385037 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.544739377 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.261321812 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.534838423 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.424400284 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136469344 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.155038936 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341123556 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254215984 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.047310061 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.616744048 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716157363 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.82950466 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.139714639 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.331778504 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.551394165 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.404409937 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165106535 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207506798 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.533517251 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.402311137 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.198246239 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056061812 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1296456 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.526588183 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.645896422 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.226618039 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37066725 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.455481196 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.666357169 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.782553484 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.562496812 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.601409109 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.575286916 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.531720899 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34975994 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.509390503 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.457583645 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.722826437 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.542244794 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.343208539 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219292025 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.415878151 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.004924631 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.839758391 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.376245806 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.135792114 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.059049361 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.338100332 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.141401344 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.512870586 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.70303932 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.378068191 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.494211876 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.599445316 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.669309623 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.291201267 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.154750948 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.096163801 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.15531387 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151969081 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.13123508 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.619564329 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.418874954 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144074779 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07491469 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.804272364 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.058590421 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.34485831 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.29422684 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.167237554 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689971132 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49194914 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.236920425 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.443129616 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.350362257 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.16726014 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058039068 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.928831597 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.080374992 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.253182475 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.560704856 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14912953 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.140147059 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.335074425 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.060543488 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178766113 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140292219 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338322503 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.716579208 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.410480453 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262813555 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.383658309 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437492213 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.085278094 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163719352 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405748833 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.061910852 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.739586863 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.838561019 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.174061538 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204554675 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133130486 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13603931 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405226428 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.563435402 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.233064297 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.813899865 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.165040596 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157069594 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.570676269 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.231092136 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.136160016 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.139235055 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.59066398 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.366529206 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134606565 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.117031421 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.348386299 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20789415 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.331545391 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209388142 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.648352216 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.138811753 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.096876681 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.23977417 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088665637 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135654919 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.894245653 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.196202493 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134828318 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.414338062 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.794712065 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.338431509 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.531044658 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.005012931 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.276229536 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175811292 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.138438392 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.142268401 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.526617331 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.442446539 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.13522019 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.413380376 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187721611 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.14104021 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.797553463 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.105209751 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.136374001 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.875575853 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.020549836 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.868186123 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.530737716 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.142322151 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.218806223 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140688186 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.063807245 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.13683273 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.312661507 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.142298454 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.144621098 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.507445921 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.572231777 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232212213 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144528072 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.137447824 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.144349798 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.348758899 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.65396646 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153027516 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.838170892 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342995636 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.144937247 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.625153254 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.601040368 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.343212325 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.177204794 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.267471085 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386150233 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.677603032 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.270027444 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.114257032 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.364864638 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.139680013 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40972232 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.411959962 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.140338544 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.350431249 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.699135837 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420570407 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.492982263 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.465187378 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.208225139 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.273298394 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.041892908 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.144066965 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.141886208 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412825581 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197393315 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.138396562 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144207928 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.692816681 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.890974358 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.616672102 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.296968717 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.589239104 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.984871036 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.892110859 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.141475259 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.065902639 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141925516 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.163739729 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.143155234 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065266936 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.889419991 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.863230811 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351955263 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.449699399 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065877201 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.343029691 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.723258157 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.066620432 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.108899119 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.140301891 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.394497557 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068398873 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14306432 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.095113437 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.542575554 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.821561556 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.40733246 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.140264604 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08343897 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146977462 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.140452874 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.140697423 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.222913061 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.141559059 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257041748 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.414636745 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.703365757 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.256407673 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.779714976 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.965547104 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.079260598 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184118572 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.698676438 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.710657222 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.548156627 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.276873139 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.899739996 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.084338826 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.143502428 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157505889 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.402853751 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.144385139 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.145453161 seconds)
  done (took 2242.415939528 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.151450889 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.15337797 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.150853839 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.151562526 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.145176707 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.172183597 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.157389079 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.141142339 seconds)
  done (took 59.291127991 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.140445846 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.193630801 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.150856538 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.14279221 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.158202282 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.148368922 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.324421686 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.164865452 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.142328053 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.156203024 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.14204755 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.160992927 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.142434833 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.143363717 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.149951025 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.368564172 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.158257811 seconds)
  done (took 81.062955973 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.196153701 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.85900195 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.150979078 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.89960698 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.156887684 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.437423908 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.145842782 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.146454326 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.389050023 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.443418766 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.204849651 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.149936496 seconds)
  done (took 95.26987833 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.145349316 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.143313933 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.143493168 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.143345676 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.143963319 seconds)
  done (took 12.788795383 seconds)
done (took 2795.986356153 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.386224318 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.242800477 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.223309159 seconds)
  done (took 6.535276936 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.284812434 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.335617312 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.449819421 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.470466329 seconds)
  done (took 11.615428969 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.399705568 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.525872205 seconds)
  done (took 6.995354211 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.511074855 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.155351503 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.542129879 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.143531075 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.148262837 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.148238126 seconds)
  done (took 23.515233696 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.143560892 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.14418906 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.144920845 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.144310651 seconds)
  done (took 10.646345947 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.139556342 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.903064863 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.147614012 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.159334427 seconds)
  done (took 22.419560054 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.359470598 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.19971606 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.915092888 seconds)
  done (took 9.544415071 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.771212838 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.5981025 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.759139781 seconds)
  done (took 10.20020234 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.375352162 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.973327258 seconds)
  done (took 8.41898274 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.288136049 seconds)
  done (took 4.352276121 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.978569926 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.457664852 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.630897043 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.690694287 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.748360013 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.374219264 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.453040962 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.403122263 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.555716157 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.582474129 seconds)
  done (took 27.947133363 seconds)
done (took 158.855686545 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.561430036 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.161650057 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.203142724 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.508378745 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.379271347 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.204603585 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.446409604 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.497806485 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.179620869 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.167251207 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.509788142 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.379366004 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.391260467 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.157836436 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.396734773 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.158937181 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.375974959 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.565280151 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.19112799 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.401903322 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.455897402 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.151627295 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.35131601 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.166085908 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.378246306 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.324643047 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.752660343 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.159828576 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.339904882 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.755797509 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.305103233 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.551756998 seconds)
  done (took 177.603057465 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.131057358 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.148881425 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.147207527 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.147743985 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.481346559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.149609533 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.147286423 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.14873644 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.365403983 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.355787019 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.148428459 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.472881303 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.150323037 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.147094541 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.148082902 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.150229975 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.508067082 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.155538082 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.148365863 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.149016125 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.149263912 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.36407781 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.147291287 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.381191843 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.495051494 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.147147662 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.148226042 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.148857874 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.148750173 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.148508808 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.149712446 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.148657253 seconds)
  done (took 217.052684673 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.148383893 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.150161633 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.148931355 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.14899587 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.149596183 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.150326848 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.150678901 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.14832202 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.810341325 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.811966978 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.149910521 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.159012578 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.156553056 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.149739429 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.164260194 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.149799368 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.163009051 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.163189753 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.149881623 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.149613251 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.150306212 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.97958634 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.150430445 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.026996094 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.151226241 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.150858825 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.15089951 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.150481882 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.148709563 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.150254751 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.151759045 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.150410998 seconds)
  done (took 229.959671083 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.390836286 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.152337032 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.151183153 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.162939036 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.152758308 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.152057184 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.161142072 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.397365592 seconds)
  done (took 21.802794819 seconds)
done (took 648.501236383 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.496184454 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.87018887 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.280576379 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.178635078 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.408277147 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.218004044 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.169649449 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.237165649 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.821335976 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.245584332 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.584780231 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.179383151 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.907762 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.195207175 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.28320582 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.233167343 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.537979676 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.813324879 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.297876237 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.821261202 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.368275201 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.116811692 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.251419103 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.86312614 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.594283196 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.134342244 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.176223791 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.541977693 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.174289569 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.400078431 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.809192901 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.420841118 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.183636543 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.170585413 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.230588899 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.211875591 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.351490442 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.179968606 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.282153262 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.912305655 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.811980992 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.711523838 seconds)
  done (took 111.756290156 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.161322665 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.158053597 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.158713626 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.158731716 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.159541266 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.159723853 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.159664752 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.158894686 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.158788419 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.159500593 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.16022694 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.160465757 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.159130376 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.160155872 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.159927696 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.158584625 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.160570319 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.160318233 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.159033453 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.159791198 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.16021377 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.15970444 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.155768411 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.160468105 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.160419059 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.160552459 seconds)
  done (took 58.237600685 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.155839408 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.307703077 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.436656325 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.17968456 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.156778771 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.157692387 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.182363583 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.160105081 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.160115654 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.157768759 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.267816038 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.159524681 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.168409694 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.435283975 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.177026086 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.155793308 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.155031975 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.156907372 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.313291839 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.170067935 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.188154401 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.160651197 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.185385905 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.169114974 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.159275816 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.157017132 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.160563072 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.581589813 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.166269571 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.268806187 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.200373639 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.192556593 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.498839056 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.444450511 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.215882352 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.166504151 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.149400618 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.311255491 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.167498436 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.158648788 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.185765667 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.164225108 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.438591158 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.657338529 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.171083442 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.15610635 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.577884574 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.320893514 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.2052011 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.169545638 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.44401263 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.180555454 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.157645976 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.160056452 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.194102691 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.167469605 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.157959683 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.401970361 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.172914631 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.185040829 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.162897617 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.159603974 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.323056108 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.167458457 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.309416495 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.166587242 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.16617076 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.159570047 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.441341879 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.181792933 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.655519254 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.17095762 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.158937291 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.271219415 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.317484259 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.612400537 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.170067836 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.321356774 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.510768602 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.193070284 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.1672686 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.565848486 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.196607935 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.167757824 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.159966119 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.159630217 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.159464249 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.200013986 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.186049285 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.585303156 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.663479985 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.418626125 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.19999526 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.171064111 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.160713017 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.411569851 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.17031779 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.1603211 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.435587216 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.67797841 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.172234759 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.167617195 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.642426958 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.1735643 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.188312829 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.17019105 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.449436675 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.184223831 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.201251732 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.15937294 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.169081697 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.163526859 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.187935379 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.169019373 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.1604813 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.639938628 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.330046649 seconds)
  done (took 266.234837962 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.163056883 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.159901619 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.160324774 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.16014087 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.159333484 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.162264707 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.160183804 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.160235329 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.161630616 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.160258478 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.159462818 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.159009307 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.161733275 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.162866797 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.209082255 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.162205054 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.647624864 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.162010991 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.161246739 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.162498787 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.735071031 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.167450305 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.159812876 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.161829144 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.160695999 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.162384435 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.166383789 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.206962155 seconds)
  done (took 175.765990445 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.162248011 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.206698334 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.169662532 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.207057708 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.169273101 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.162536296 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.181073827 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.17543558 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.17092849 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.161571681 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.162260415 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.188595758 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.168297063 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.233753075 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.190101316 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.190709043 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.235451938 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.169331956 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.162103339 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.162933046 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.207469485 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.176594331 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.188974401 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.213645808 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.171095235 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.208481721 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.176410637 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.162741881 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.163547116 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.245921412 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.184663711 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.189049616 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.192769332 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.178734645 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.2534771 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.254538416 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.240969966 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.189905983 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.16600789 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.164055887 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.164111765 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.169137135 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.208011601 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.171017059 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.165496902 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.255040769 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.183039381 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.164594341 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.183800506 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.163697783 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.174774538 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.181797546 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.196407819 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.256923807 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.20884934 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.187237812 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.184723861 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.182845128 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.165666872 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.235298707 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.174834231 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.248034148 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.185549994 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.169899644 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.165482536 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.167974674 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.210343046 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.192411725 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.238589582 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.17132411 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.235358858 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.216339529 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.172299949 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.16513359 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.166500668 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.210214647 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.243599856 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.216485219 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.217391133 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.19437749 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.1800291 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.166045649 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.170455021 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.191695707 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.170648086 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.249266574 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.252945231 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.171999549 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.166228795 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.165407989 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.166786511 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.18791573 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.219613261 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.198736147 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.248647871 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.197956218 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.196981482 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.17143304 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.177813816 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.174239449 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.195057443 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.170951126 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.177357459 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.515495765 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.201173969 seconds)
  done (took 232.499563678 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.501197991 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.213830287 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.235441671 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.417980928 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.527752464 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.27158858 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.202334984 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.222451774 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.218199944 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.330767838 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.270921787 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.25503078 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.196189666 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.189511912 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.214374298 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.218970127 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.242264535 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.500160072 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.315498059 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.939899213 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.207903334 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.444275147 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.513272597 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.536079813 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.247299604 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.592106477 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.812108026 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.300691903 seconds)
  done (took 70.235261137 seconds)
done (took 916.806169471 seconds)
SAVING RESULT...
DONE!
