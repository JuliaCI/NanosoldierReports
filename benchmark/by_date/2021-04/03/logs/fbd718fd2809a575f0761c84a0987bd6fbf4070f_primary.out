cset: moving following pidspec: 3626482
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.75139502 seconds)
loading group "shootout"... done (took 0.796662786 seconds)
loading group "string"... done (took 0.228250405 seconds)
loading group "linalg"... done (took 3.089688865 seconds)
loading group "parallel"... done (took 0.021050654 seconds)
loading group "find"... done (took 1.158780276 seconds)
loading group "tuple"... done (took 0.684322713 seconds)
loading group "union"... done (took 3.052708039 seconds)
loading group "dates"... done (took 0.152235439 seconds)
loading group "micro"... done (took 0.056076176 seconds)
loading group "simd"... done (took 0.357713901 seconds)
loading group "io"... done (took 1.391532285 seconds)
loading group "random"... done (took 2.351309116 seconds)
loading group "problem"... done (took 1.183463514 seconds)
loading group "array"... done (took 4.58332991 seconds)
loading group "misc"... done (took 0.961324063 seconds)
loading group "scalar"... done (took 3.416531581 seconds)
loading group "sort"... done (took 0.303621384 seconds)
loading group "sparse"... done (took 3.499899525 seconds)
loading group "collection"... done (took 5.93497658 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.545458676 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.072477252 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.254895838 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076511279 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.279237049 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.08142635 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.088582744 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.070131207 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.031200567 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.161650309 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.212097899 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.391270825 seconds)
done (took 5.152836882 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.263767868 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033085324 seconds)
    (2/2) benchmarking "String"...
    done (took 0.123296819 seconds)
  done (took 0.764511802 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136573793 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015245574 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022064409 seconds)
  done (took 0.775538 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020097163 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097848314 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021173629 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021653805 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021647927 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.0210256 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.02087918 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020829265 seconds)
  done (took 0.828403618 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.02828087 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022671413 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020700184 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022112231 seconds)
  done (took 0.69674755 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02206845 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.081790967 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019733209 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019619039 seconds)
  done (took 0.741505453 seconds)
done (took 4.708162879 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.194612548 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.775974145 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.815965121 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.178618223 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.349206501 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.298196714 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076480855 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.242298022 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.146586936 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031118822 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.180766992 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.036306158 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.634861285 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.447751509 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.027182843 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.145406678 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.576196712 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039364185 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070597142 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.225493807 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.038058936 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038958793 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043751863 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026303929 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.111969809 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.13444559 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.587208079 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066475542 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.024484491 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.135202821 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026890127 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031020225 seconds)
  done (took 9.398270827 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.147927888 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.142551456 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023401755 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059822102 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049797634 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024468824 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029886582 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.02276675 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042400634 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087730711 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045277298 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.155938332 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020974416 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023877257 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.137671485 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116998898 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.039940886 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036890944 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.02215634 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036128855 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049393039 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034247109 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032930272 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032480066 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067919182 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.092735656 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.041599042 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.063970211 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022262674 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034730566 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052071628 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064582743 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02271003 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020938988 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.065086533 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041848966 seconds)
  done (took 2.63858968 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.990893358 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049868811 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.136875703 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.127297861 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064815422 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050768481 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.178328132 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.077344048 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.055013364 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023636664 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.205257325 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.641895046 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.16725607 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.98313613 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028199425 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.178872247 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.318650015 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.936912243 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023231474 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023494408 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.133046614 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025883705 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.176993713 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022207546 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.136428073 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.708149581 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026325346 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024846347 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052848733 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.256152111 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020947951 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.096552322 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049707768 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024867377 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.553430208 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021581832 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019623488 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.041823574 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.049911786 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021941353 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022974554 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03362497 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021039747 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07380576 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035399258 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.503521157 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024935708 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.663977629 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.711635766 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.028507883 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027045523 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057446769 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019522001 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023159999 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.588661353 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.10727608 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022654001 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.248663721 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025328234 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024025289 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024154135 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.056611457 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022911018 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024056709 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026181166 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041235363 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.970037457 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.031987314 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042590984 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021409583 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022355142 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020690234 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.384234608 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029424823 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025049546 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020550505 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026744431 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022670401 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022119256 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.06735446 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049511101 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.047178088 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026090855 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02307508 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022279748 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.540978493 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.940580516 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025094684 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024282596 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.596373773 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020248309 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022068162 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023699244 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043824075 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022768621 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019387801 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058171322 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024671073 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.125110333 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.486914738 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024465846 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019832558 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.438139113 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023996427 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054019399 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074502495 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021783552 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.057323714 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022197219 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019479937 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025825479 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019447197 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023695194 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020579574 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021392116 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020408677 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022314978 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023562561 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022425384 seconds)
  done (took 18.793200055 seconds)
done (took 32.424431246 seconds)
(4/20) benchmarking "parallel"...
done (took 0.743120741 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.210670343 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048503904 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019154284 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.162092421 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043629074 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.133690171 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.1754578 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.126477283 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.100662977 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.045834891 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045425179 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.180583298 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.19314984 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.046468533 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.119360651 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.192157035 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.047042024 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019598156 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045705053 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046539489 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046429849 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019674786 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.045753275 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046496591 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.118396801 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.047051646 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019541961 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.121576862 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047882969 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.123210944 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.047571401 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046438563 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.048202598 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121275866 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.04949039 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.120942002 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019893263 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.048969666 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.049048095 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.049545744 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.048791336 seconds)
  done (took 3.995531419 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045182221 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037021834 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039359809 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017634174 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027189705 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037040791 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017618481 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036557105 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040829365 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037059266 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03698847 seconds)
  done (took 1.119427191 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039985825 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038184287 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039502719 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01753154 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028925464 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037906513 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017495152 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037414743 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040193982 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037869588 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038829269 seconds)
  done (took 1.059698984 seconds)
done (took 6.839876206 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.152107687 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.119588397 seconds)
  done (took 0.947767818 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.530725315 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.218035941 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.128837894 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.254780275 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.12183593 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.154208029 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.257824412 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.158458096 seconds)
  done (took 6.553751874 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073610792 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.139891711 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023828319 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.02225209 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022475249 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022358003 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024205352 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022774928 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.02208117 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024763099 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024325838 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022512374 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023053732 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024373715 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02238936 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022604059 seconds)
  done (took 1.359694036 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028356539 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025215826 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026371391 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016749541 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027248829 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026192783 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027209108 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027315807 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026342493 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026269854 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024137293 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027048363 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025873615 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024610807 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026986397 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016828141 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02722639 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026517886 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028199323 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027540615 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026460281 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024094824 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028126657 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025389337 seconds)
  done (took 1.315785464 seconds)
done (took 10.863880049 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.13987939 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029801258 seconds)
  done (took 0.857364439 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.125379178 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.123629554 seconds)
  done (took 0.946855097 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028295587 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015727896 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031840165 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023750857 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015624256 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.01537891 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030806137 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.01572678 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015630782 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015711942 seconds)
  done (took 0.909580286 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018947241 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022727037 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020680362 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018845975 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020541929 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016586237 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018756043 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.01682812 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022415027 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015930938 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019675886 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037260485 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019136825 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037618398 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019043362 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019628039 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021173498 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018871973 seconds)
  done (took 1.083337525 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017357537 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016536029 seconds)
  done (took 0.734591952 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020273331 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016769452 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018429436 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018167839 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016187044 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015593663 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016162999 seconds)
  done (took 0.815590205 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.385920272 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.085038688 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.311581551 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023931573 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037699832 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.225271849 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.01923707 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023649064 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023566413 seconds)
  done (took 1.833381658 seconds)
done (took 7.878254075 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040047988 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141388109 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145329267 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.448545952 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033540917 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022121645 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.05273612 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.244038072 seconds)
done (took 1.836932007 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.485753514 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.255009175 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.255565153 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023592375 seconds)
  done (took 2.239989509 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.310494599 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138812171 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029819555 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022205793 seconds)
  done (took 1.222444703 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021788976 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026677625 seconds)
  done (took 0.762074327 seconds)
done (took 5.426268098 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029292125 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016440525 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022428379 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017896182 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017582008 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017048144 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016996638 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.01782549 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.015850935 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01801836 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018016574 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018012025 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017746731 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017744278 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017213816 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018016435 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016079149 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017731421 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017746645 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017731541 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016064917 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018029867 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017338302 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017749902 seconds)
  done (took 1.137781669 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035370491 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020400039 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021116509 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020893495 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021433346 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020959829 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020915916 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020071586 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020957061 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019748884 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02126826 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021629642 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019959029 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.0217118 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020039238 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021691722 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021283152 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020372359 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020006988 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021678499 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021161875 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020360922 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021644399 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02115862 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021539964 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021490306 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020025996 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.02034092 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021147377 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021552829 seconds)
  done (took 1.359610883 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022607423 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014839337 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015079866 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025366066 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014903918 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015022404 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015361621 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014438374 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014833753 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015705867 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015226436 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014588148 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015390679 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014542232 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014684402 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015151878 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019651472 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.034980199 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014919648 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.01472983 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.01927739 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014896198 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014677883 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.01468928 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015139919 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014715995 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014541222 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015106218 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015017091 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015286863 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014753659 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019196544 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020726932 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014676281 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024815072 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.01967777 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014632515 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021244483 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015573161 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014503407 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014478999 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014501042 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014611909 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014764261 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025119076 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014947462 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.01579059 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015161358 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014818215 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014544957 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014630828 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016303554 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020377892 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016079651 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014642949 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.01596104 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014613709 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.0154257 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014829132 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014704632 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014713064 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018697188 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016136527 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015468374 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.035833636 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016143182 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025278663 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014842042 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015247767 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018832287 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.01534567 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033972883 seconds)
  done (took 1.946069115 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.02691969 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026180026 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033600032 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02449661 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018214971 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015551036 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018464297 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01553229 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024725835 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.01914463 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015642402 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018734143 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0248569 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019165422 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01665888 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02470125 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019105023 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01833206 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.01569471 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019041386 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016702371 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018688911 seconds)
  done (took 1.170090178 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.099853444 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020921941 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062705535 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02412861 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022781969 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024159988 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02086325 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020823428 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02106484 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022140344 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022107375 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021274437 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023148907 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021609075 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021542711 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021293688 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021085431 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021324473 seconds)
  done (took 1.229286843 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033276423 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020750382 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047411131 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020395265 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02057992 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020219119 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023876871 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.0240018 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020074259 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020609957 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024289718 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020392944 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020381956 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020716552 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020355498 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.02068561 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020360592 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020735719 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024327166 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024167934 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024180451 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02420745 seconds)
  done (took 1.231600825 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034598605 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019860454 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035896181 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021234883 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015093849 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015089099 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021315655 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019868557 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021171685 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019504179 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020133779 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01560535 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022378664 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020290616 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022448431 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02028808 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.01981633 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020223762 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019765209 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015258938 seconds)
  done (took 1.135389297 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.128928199 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017305458 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017058945 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021394287 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016938366 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016933919 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021259536 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017082148 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017107171 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.040744423 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017139967 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017120086 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021789873 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019927966 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017094885 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021679995 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021610512 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021652301 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017187606 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017119608 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040764293 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017395652 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022041409 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017256531 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017317931 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017285002 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017318251 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020239816 seconds)
  done (took 1.39244568 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020997387 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018602785 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018701345 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.01860696 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018602283 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018490377 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018588618 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018581783 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018237168 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018515525 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018257301 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.018185718 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018247311 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.018078726 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01821283 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018151504 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01817646 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018553508 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018512915 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018633273 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.01824325 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018352525 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018346444 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.01866533 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018636654 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.01829498 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018669407 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018667848 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018299055 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018635196 seconds)
  done (took 1.275487597 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029436521 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026129314 seconds)
  done (took 0.7721289 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018278944 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032950185 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014640726 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027714677 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023349405 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018805326 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023390985 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023272159 seconds)
  done (took 0.894878361 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.124045817 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.147426585 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016698056 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016725964 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.120987457 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.083124818 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.132463911 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028413195 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030337974 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.01955216 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016613895 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.133083947 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016345188 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030021777 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017830272 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026169128 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023819388 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034502553 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029608124 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01531655 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029251767 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017032197 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016210007 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017191866 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017376305 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023355043 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032306766 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029279046 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024813843 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014600515 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035324194 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015508248 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016172561 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0248006 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124436416 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015838383 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.05344343 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015663497 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020075701 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015587977 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02775 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036687582 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029933772 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.03372554 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017005498 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017494562 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015420406 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.01714109 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.0197067 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025031663 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015674419 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0231142 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015232007 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016961711 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026314698 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015740625 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020389178 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.02501279 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029363017 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026224401 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027907048 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031169867 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024519139 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024294795 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016295468 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035734335 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017229508 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029035415 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030592934 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016749844 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028917016 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015468012 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014706843 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015611016 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049970781 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017149727 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016491981 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015716012 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015808796 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016981022 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025331096 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020475512 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023082128 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018713468 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031853805 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.0249565 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015458566 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023027041 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.03414708 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019739777 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015702262 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032905457 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019747173 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015530324 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033895499 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02614971 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017347595 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016329185 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019635968 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029262916 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.01705569 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014789966 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024207922 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017193667 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.126494927 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021061448 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024430284 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015908753 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026613771 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.02273504 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017592306 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015089386 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020886932 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016839998 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015089522 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025764754 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016140918 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031437102 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023092063 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030836828 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031359009 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026841855 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032452229 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015869922 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015047992 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034981948 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025564667 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017281653 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034701118 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015933347 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026646476 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.015984632 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017537989 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025708937 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015398811 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017814649 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016214798 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022772706 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017572315 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017727854 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022315594 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024720672 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028852649 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.01720324 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024966488 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.01635095 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032271612 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026172675 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021344864 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019872596 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.01703754 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028704271 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023358257 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025583155 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016110713 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017058353 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016237318 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027422664 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025950099 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018032531 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026266528 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021348434 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017233893 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016341962 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017316061 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020233324 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019862268 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016817036 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024077416 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025155041 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030880545 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024177068 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025462526 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015650453 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016101654 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018122462 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016063124 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021196042 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025683292 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032344664 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028523845 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038021899 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.01647518 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026166502 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018138577 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034082954 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02992078 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017324986 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021483729 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015453726 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018256411 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025985677 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028235484 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031117729 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031693834 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021519866 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021334309 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016301194 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031974793 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016759209 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02493032 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025818756 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023188799 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016291591 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018292715 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025765713 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021455343 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017540502 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032675703 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024798677 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016347609 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031234072 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.0167883 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027545607 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016349614 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.02037398 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022051281 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018489149 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026325794 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032340508 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015530965 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016793027 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032902634 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018540999 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018383055 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.02470351 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032158574 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.02147199 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024612548 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027550575 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027161361 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021440847 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.172073008 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016416707 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.024855417 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018235364 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027116897 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015355827 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033611296 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014583613 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030895281 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.01595734 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026475379 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015810982 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024801193 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016024211 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032370346 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.016648954 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01594295 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026969633 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014553073 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024516529 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015084575 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020898027 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022304553 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024516044 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.016740076 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024618815 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016615425 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024357018 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020470794 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024117185 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024534594 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020300861 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.01503776 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023550891 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026004882 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023326356 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016590774 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016484941 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015578196 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024615731 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016540964 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.01604377 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023459999 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020387342 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021420321 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016485566 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016572557 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016531053 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023702396 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024585625 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033160358 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023745401 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022584221 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024282904 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014980435 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030705019 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015027339 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022647377 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.01440086 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021331345 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024303957 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015223198 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034057036 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.01644199 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022975262 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026891208 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023711135 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019302652 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032885606 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017896664 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023450141 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022963443 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020149131 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022174557 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016540337 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023610278 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024562961 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025626128 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015704466 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022530913 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024042971 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016549183 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.02291645 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016398724 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023578489 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016702593 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01469413 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020415264 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02659579 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020688288 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020902912 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015706293 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014669824 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015639085 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.02262716 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020522417 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024155944 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030972628 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014660372 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016100735 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015235142 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.01948368 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033579487 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02523027 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023497915 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02070734 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014879319 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016822823 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017074628 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015580187 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018504642 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014905683 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015383909 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026295018 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017160806 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020464371 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015755899 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01661937 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025578603 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019772791 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015867314 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022744271 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.01538003 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021144218 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014958389 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017129596 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020628689 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015287792 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019754821 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026119996 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032335867 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022723295 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024593881 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016487661 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023574366 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031215069 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024174111 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016588335 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025024682 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015181985 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034645822 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025070839 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024278642 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025427797 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016400404 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032730078 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.0208981 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.02622247 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031861799 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017036529 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025062414 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015994137 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032423441 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021044314 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015878858 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024793458 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023933706 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022426426 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028147338 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016896335 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02475408 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021610328 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020073421 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.01791258 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.0177951 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024993937 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032563717 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016894348 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022065106 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02419098 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024485004 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021042378 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028764931 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024236253 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017044679 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.01778385 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020114231 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016726773 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028481074 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0163774 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020997939 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021000538 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015912721 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023175597 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032849649 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025453363 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025663736 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016139856 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015536437 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.035026775 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020297892 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019865034 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02446502 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026262878 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029019251 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025841636 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033755132 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.01673897 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022572985 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028743212 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017129512 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016026109 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020276735 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017964227 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025431698 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026254076 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023697687 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018225464 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023541646 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029954375 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.01775894 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021332007 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022993518 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017185694 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026965425 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024375669 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024972009 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017852459 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016056932 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020005668 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025204364 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023748765 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025370599 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017183467 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025636814 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030908888 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023850631 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019932742 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016127477 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01980174 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025445392 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023126758 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016183383 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021403949 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020172765 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025770365 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025880475 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021144978 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016168629 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033956021 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025005933 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025499953 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018282575 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018344126 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016680215 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016213872 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028008651 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016277317 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018126784 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021422191 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018346256 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035125238 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024703004 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032677189 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017373291 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021297433 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016412569 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02630217 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021479465 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016379574 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027141912 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015697424 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032381223 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02871703 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024668662 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016336005 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021882751 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025352435 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.032003867 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026428391 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.02550493 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020223103 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026309384 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.166026522 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026795206 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015601151 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014656459 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025503818 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024225283 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027518513 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015502706 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025304731 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.016732752 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.02352475 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023746799 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016578468 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01655886 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016507384 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024619068 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020358515 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024588598 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.02042733 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.03205342 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015858028 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026069385 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024173025 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026004337 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029144507 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027148082 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023541818 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015508998 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022557695 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023482578 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016065566 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020668522 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017891255 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03680126 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.016523336 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016509059 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028970156 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021786578 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015080082 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.02161319 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020257482 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.02510512 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015845157 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.02543191 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019733039 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015823951 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020231624 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020368531 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014375347 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014988087 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015326463 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024753058 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.020167232 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015146905 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033931415 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016235516 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023722955 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02579051 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022098777 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016309631 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014343349 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015758359 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028384748 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030555296 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019308 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023686609 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016573724 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024345941 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014402795 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023802947 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023070454 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023602225 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014963186 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015245156 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030001393 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030476309 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.02019079 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031527756 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02400312 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016407645 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036670591 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024186865 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015886706 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025779881 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01691073 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014639012 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014479436 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016448193 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026392644 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015139208 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017348109 seconds)
  done (took 15.015967638 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058284367 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01626339 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014979948 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014887114 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021817317 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015982471 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014959576 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015963639 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.015970462 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016966146 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01495155 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014983802 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020502265 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029883088 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02268716 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018531849 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015073494 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016229536 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015047771 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016158182 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021004892 seconds)
  done (took 1.183895171 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.02034803 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019380844 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018705369 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018959184 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018163225 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015238531 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018432709 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01514977 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018808357 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015458148 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018957761 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015298191 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015632808 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015687389 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015636282 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016632221 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019105252 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018396009 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015295958 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018663969 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016696205 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018724055 seconds)
  done (took 1.140513905 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017864831 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015853674 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023860531 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014682433 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014543468 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017428168 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.01453729 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019458904 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019378383 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019448726 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023621039 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015324598 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014481515 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020730717 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014438455 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.01520806 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058442639 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015474071 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015603049 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014772423 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.0170186 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023922153 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014876733 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015003731 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019620396 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017525334 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014823414 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017056793 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015327227 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019529878 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015528504 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014573885 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023719844 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022999576 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019547282 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019531092 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01604577 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015466786 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014764947 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014786492 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023150667 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016036662 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015170407 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015927111 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023855957 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.014930899 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014783853 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023932038 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014857126 seconds)
  done (took 1.657486569 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028081056 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067252617 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021054451 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050662776 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026527012 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020163897 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020885029 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053410204 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016095508 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016563436 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027695856 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027734859 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017576131 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018631707 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022102145 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017447114 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018126026 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.01679657 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019746316 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017117788 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020107298 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022218939 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.0272041 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.02764369 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018625981 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017038547 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017346439 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019025056 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027421407 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020501146 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019048698 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019554303 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027715474 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022822008 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017338175 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017428962 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028254871 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017962026 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017700252 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016234479 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017425199 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018840133 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022320171 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028457983 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017851912 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022639972 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017756104 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015836547 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028017753 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017802799 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021330653 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028977597 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018934927 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018158218 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019248551 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028086683 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018070145 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016893546 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018185337 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.02775324 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016299804 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018733902 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028549369 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017458094 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020891305 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028593009 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022902007 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018821077 seconds)
  done (took 2.418871194 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024777774 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.050009712 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02867742 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02862774 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024289026 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024349213 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024314705 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024514913 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024517385 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027190499 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024685868 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.163573353 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021860807 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026320154 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024839212 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024793557 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024784321 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02493037 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.02497858 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024953841 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025048598 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029558342 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024952313 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.02958406 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029327081 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021707259 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024727993 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024883016 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029744851 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.025346581 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030057901 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025243749 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025239508 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029873305 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029407174 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024839009 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015685811 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02483602 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024949816 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024894625 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021691449 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029715591 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024879626 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02180116 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025360237 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025115288 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030045963 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029895652 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026984016 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028121219 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025286473 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030204486 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025242906 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025355995 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030378031 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.03341828 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030315794 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030443307 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025562274 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030352479 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030409234 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033617241 seconds)
  done (took 2.573207127 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030129146 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020835532 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.03345583 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014760578 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014687756 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023643158 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014712114 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014686078 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02037819 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020559005 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022038097 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023957025 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025682069 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022038137 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023844139 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02565379 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023851855 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023923131 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020722146 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.024142995 seconds)
  done (took 1.219548497 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018711384 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020372759 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015664834 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.030906032 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015579369 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022754092 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015566658 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015522194 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015550574 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01550323 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019778901 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020128529 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015696339 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023475357 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019197976 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023005857 seconds)
  done (took 1.075431683 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019882358 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023230397 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124196718 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016242662 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017887332 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015386188 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016128622 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015131579 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017438781 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.029013491 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016312226 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018254709 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016249136 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015061995 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015656568 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018229981 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017444669 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.01636976 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016278653 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.125496411 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024500558 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016987697 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018385086 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.01700526 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018219279 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024506027 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017860718 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018141501 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016412999 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018577163 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018140356 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027034614 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018138647 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016939982 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015198628 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016049419 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016495646 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018504367 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018502507 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016404772 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015472157 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018143165 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016467961 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016886899 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017629555 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018532557 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017645488 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026342302 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016428905 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018229197 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016434078 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017699093 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.0168895 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027397897 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018517004 seconds)
  done (took 1.985528164 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034050114 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020496071 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014783722 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014741545 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020049154 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020696933 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020162105 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020239356 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020699405 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014656746 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020636507 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019663213 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020521757 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020162863 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020696857 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020353778 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014793291 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020504479 seconds)
  done (took 1.129509668 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023968556 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020444177 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020614798 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016615955 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016579985 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020447819 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015021154 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016177701 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016113794 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016530487 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016622472 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016301801 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016295418 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016313829 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020203328 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016679446 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016271024 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015320736 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.01673387 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01514353 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020663796 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015281958 seconds)
  done (took 1.147123438 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.187302883 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.146546947 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038969581 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034587081 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026359267 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050857047 seconds)
  done (took 1.248443238 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050951034 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052323446 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020190274 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020038097 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024126844 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022452754 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022417534 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022527235 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02531071 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028201037 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022852067 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026063683 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025779875 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027498148 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024329884 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024392098 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022872137 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022795397 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020229993 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030037284 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023050163 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026520659 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023321127 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023005271 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023266768 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027981137 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02634853 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028822676 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023005388 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026449415 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024733205 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023166254 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026528761 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028931872 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020418061 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026285929 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023239989 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030775558 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02499967 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028119346 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020365039 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024963673 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026350086 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026021914 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026622245 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023564133 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026402427 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023442623 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02357506 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034800902 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025194942 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028188185 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025094689 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026973471 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02666032 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034840161 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029297525 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028286419 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025176399 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02937068 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028621267 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025399555 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028556 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029789327 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025425393 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028633772 seconds)
  done (took 2.51628506 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059124991 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020696308 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022822215 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028077665 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026949302 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022458201 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022621944 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022731147 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022802835 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02049827 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058197493 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023048157 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027382831 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027417406 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02291049 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02280794 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022878027 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027350782 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02059236 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033826328 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023044292 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027772778 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027808019 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027772587 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028884837 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02483726 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023202939 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023181921 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023092073 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023098841 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025999528 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023197104 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027878685 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020685859 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027778556 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023242986 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02309752 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026015003 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023173338 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024941552 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028038973 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030914638 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023310378 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023275565 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029291389 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023413977 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023444766 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020982866 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023510534 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020925205 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029317402 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029284098 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029296831 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028460159 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023545093 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023538895 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0235761 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02341625 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023569018 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025115852 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028217442 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023349421 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035264633 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02367998 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023693529 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028725934 seconds)
  done (took 2.503495141 seconds)
done (took 51.070932176 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.183201091 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.17679109 seconds)
  done (took 1.113858882 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.135841176 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.133674331 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.155292295 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023639564 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081598864 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.175014436 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125138478 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026055288 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023890622 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.026080594 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023564747 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025724101 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.02586858 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023433732 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086508008 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026064213 seconds)
  done (took 1.888106778 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.074814405 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.2390227 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058909029 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.02253594 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.10549125 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.02864983 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024173921 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028279591 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028713726 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022840471 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071683278 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.036008365 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027450101 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028358761 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024185351 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027420143 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.02823463 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029067691 seconds)
  done (took 1.678436024 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.068871173 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033228031 seconds)
  done (took 0.875388676 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.117029511 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063593526 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102763915 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.309479525 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.095526008 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.098101874 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.101654939 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.096831071 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067872802 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.094091816 seconds)
  done (took 1.913897018 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.061079147 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.058147834 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.28345201 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055534469 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034555107 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029523984 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029287328 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.032086269 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.02966164 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029177339 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.075725639 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027845778 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024372093 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.077593796 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.051372233 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.060282716 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023589547 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030316899 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032465485 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023349814 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028424066 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.032009321 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.132886682 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.03076627 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052859281 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.02786797 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029636511 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028614372 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028509198 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030618433 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031175212 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054162513 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030483454 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03715433 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028709119 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050180779 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024325423 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051641858 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027148046 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.02432034 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027712503 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031276129 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024813978 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030737336 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030003028 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030194219 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.032497217 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023604867 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029880037 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027362825 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024550298 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029784386 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.029016593 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03001089 seconds)
  done (took 3.036983264 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.079327708 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066311953 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023894625 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073738613 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065163138 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024048164 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079865395 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060332468 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078554851 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023588339 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023100434 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023146307 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030875514 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034663635 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076465622 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.06952277 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026014907 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02415517 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.06902433 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.186555515 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023321906 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.080456377 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071450888 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.068153339 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022556242 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024007548 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022714183 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023328375 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031611258 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031319199 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023116619 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033853393 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.034864649 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030586415 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022508167 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022872975 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022771785 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031525906 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032965005 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032805496 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030063501 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022489212 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022814978 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023350567 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023806345 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022378389 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032832542 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030841922 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032691462 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023256316 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023279539 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022677493 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023909826 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030876565 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029469937 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030840699 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033970441 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023179001 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023145838 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024529375 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034707554 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031808304 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031571775 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024133003 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032832826 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02309133 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033895015 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036835621 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023011737 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023562444 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023208065 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023199511 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023542745 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029981038 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030015529 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023570021 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023454831 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022968109 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031974513 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030303225 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022970807 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032351262 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022563854 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023214021 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0235656 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02384187 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033395995 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031739461 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023754834 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02326591 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023223865 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023175643 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022550604 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.033315346 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032297289 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032717391 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034734323 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0241401 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035331057 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03282587 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024203994 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031689771 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023724173 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024056161 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024027188 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031721938 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031340447 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033145191 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023686088 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023445141 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.03281137 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034836963 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023614279 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031354402 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034178763 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031889685 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.0230662 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034581979 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023642149 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034716257 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023808931 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034650707 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024100998 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032377132 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023950426 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023173533 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024082673 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036755281 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02488912 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023958509 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024359633 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023901682 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032528193 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036788348 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024593066 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032772285 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032541325 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024312862 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034867748 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024000237 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034889434 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024011389 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02434985 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02313355 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037107011 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023741115 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024160244 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023838999 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034539412 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023917994 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03444495 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031782305 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023385086 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035832965 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034199607 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031782875 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034802491 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024719585 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02404647 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023711099 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023922795 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035161339 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036686197 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024929639 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023997427 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031548224 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035408304 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023487132 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031841584 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031832192 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032192314 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024124197 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024046813 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.175266726 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034258782 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029485442 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031867829 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030325047 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022982577 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.028997565 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031773313 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022991421 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035962366 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022882407 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032589692 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032009058 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028370069 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031678992 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032863925 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031487142 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031282766 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033177707 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022498282 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022708547 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029157871 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02267974 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022764305 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028760393 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023208506 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023388512 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035536827 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022994626 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032090461 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022358747 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030596828 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02259711 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023313425 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034036106 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022941987 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023193866 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029345388 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022723729 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.02890275 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031892787 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028845802 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022593851 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023054149 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032295666 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031628091 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022547212 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022528563 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023003035 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031402896 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030781089 seconds)
  done (took 7.914078737 seconds)
done (took 19.199330144 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.152346237 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071265357 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.156923855 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.089950382 seconds)
  done (took 1.237193012 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055993612 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019186933 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.138980171 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.150133053 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019561599 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133946846 seconds)
  done (took 1.306039415 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.21042983 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136638788 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140072889 seconds)
  done (took 1.276727021 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.128443838 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.265793328 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.536613838 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.127012223 seconds)
  done (took 1.854842607 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.171170621 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.16298585 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030964015 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.179065121 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038053501 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015697424 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.101447626 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022261672 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052136196 seconds)
  done (took 1.622407299 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.09596643 seconds)
done (took 8.183034424 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.180317745 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137754808 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032986194 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026757509 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.13190425 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.134384231 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.139768206 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029255182 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.13065749 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.298127198 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.161196732 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047954758 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.154905894 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042799212 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.256922768 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030976808 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.02866966 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.02417722 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144395174 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.12694511 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.238145073 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027919191 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.092853687 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029949099 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104493886 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077576164 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.167765312 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.288507709 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.272031258 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030295429 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126664997 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042118864 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.119983712 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131175637 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.132761972 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048551654 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019835194 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.240503569 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.103559488 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.304042716 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151973839 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026393084 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142273583 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024485091 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019107013 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141371754 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033057809 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025802789 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043792782 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025951126 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041496657 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026365915 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141330693 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023330734 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092687342 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138862617 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.16379224 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.098684163 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025427857 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038773053 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029148195 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.15319879 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038784792 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025237619 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031852114 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019785287 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.136799302 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039441415 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020321762 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030251777 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.02817577 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.107266007 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.154584087 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064098601 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031694695 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.118912495 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095983324 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048282896 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048676543 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.02942214 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019285211 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.168167695 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025168606 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038367661 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026106802 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052791316 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019723435 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035356996 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.156897031 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.15174574 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.079415823 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020813097 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.2346395 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022015047 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046179793 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020989193 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020270646 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.319390571 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019887817 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019819216 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029454649 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028166666 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021403932 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.151600294 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.103593362 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027351286 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025947928 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.01988145 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024921235 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020941772 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019823871 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019617978 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093793666 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034866425 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.018826422 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106617632 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.125293062 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030378114 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037351276 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.077012659 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022312202 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027825051 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026107768 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.122234382 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027214535 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132112329 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020767683 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042175557 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.11779218 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.093134612 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.105744448 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019335837 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.153369366 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029390405 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.018843653 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026145361 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046724793 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028649247 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034632184 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027252643 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.153698979 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029966267 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024686463 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.11767147 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018695664 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.110458284 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.094114839 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.127290251 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024372027 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.02948319 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092241248 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042677935 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048081691 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041871277 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023491691 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019353968 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019063108 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.03420184 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019056807 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.01962498 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033785727 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025516562 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019161855 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.237001521 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029280979 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023532592 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.259026425 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031596351 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.087014405 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041221196 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019817134 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.104896915 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021582749 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.03993171 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081139843 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020026596 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095648729 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020242183 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.01980543 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027169532 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021339788 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028592456 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033035077 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020215035 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033821963 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027332326 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019822729 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.104660137 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021598509 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.169123612 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.104795639 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.107681809 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020185287 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037951038 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019541054 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.133769825 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019925904 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067520498 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.11543485 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036391551 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040000737 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020962673 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.093963262 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035124828 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019546507 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.101242545 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.128442481 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.087218571 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027055405 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.242554891 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.02872042 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020249727 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026933029 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027849 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020130786 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095567595 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024137522 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019107119 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019346966 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021240387 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018726275 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045619805 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018943702 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027092266 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019386818 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022071855 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021314178 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018775661 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027211046 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.095687913 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.129450899 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025488277 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039474795 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032493919 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030816449 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066867054 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026400731 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.141128804 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019260759 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029114996 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042019446 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019412056 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024584681 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019791541 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039033564 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022986712 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021301235 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028235355 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020139694 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020223899 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019844117 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020068674 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028020493 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021452093 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019336051 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019319049 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019736104 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024269095 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025011851 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030483959 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039759662 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.458816643 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022210437 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022220666 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020184727 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020080349 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020348648 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.02186498 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019927289 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022071505 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020296407 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.01960928 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049109415 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025092563 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02084814 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042749935 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.02010718 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02942261 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.1286264 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036854422 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024975937 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019346567 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.267920818 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.104396603 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043103524 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041247559 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020496197 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030644846 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.02035026 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020725029 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019368391 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047800173 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.189410509 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.021596751 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.01907197 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019274577 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066302233 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027566802 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019076807 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027428397 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019212678 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.01951721 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046622704 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020447144 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.01928876 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038476251 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032068498 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.096713027 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030715613 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022067416 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068694913 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018516195 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019321984 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019699319 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.111873599 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032308651 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020523762 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019334395 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.02654099 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028216764 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070770124 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.024973885 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022024552 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.02703111 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018534248 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019635105 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044092107 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047244655 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020340531 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02271735 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019030002 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019638926 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092181808 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026862506 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023664992 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.102345641 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021242267 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.026952614 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018577528 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.45202381 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023967861 seconds)
  done (took 21.842401002 seconds)
done (took 22.648348075 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.161165875 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033331936 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032664042 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.02798545 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031814728 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03184447 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032970838 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028965683 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.036978673 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031129197 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.139876169 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.01913826 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026839315 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034193096 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.02799712 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035196956 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031756248 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034564928 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020009291 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034872072 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029983438 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.03250161 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028233384 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034325475 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019898252 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028063644 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154314471 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038257329 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023013114 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029227365 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027147193 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033153796 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027180824 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026806471 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029112607 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024768355 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029523096 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.0259498 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.154981576 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025105888 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020057472 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032427987 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026694035 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027384513 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028202268 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031466996 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024709433 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033221968 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019264113 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032355962 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154733249 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024306125 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023031706 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028062777 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024835435 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028924651 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022771881 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.03115 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.02458356 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031712108 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027565378 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027465125 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019440896 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028093599 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027275642 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027076832 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018463755 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.0242071 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019424926 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019323427 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.01873215 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028229977 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026315596 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024451615 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.0188388 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019404411 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018859429 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031764866 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.02664531 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028451082 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019848926 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024895927 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024465932 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019970085 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024295855 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031356642 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018916332 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019938604 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018879062 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031091128 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026004529 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019430726 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.03138177 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024133084 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023803133 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019434175 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018873541 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023964157 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027545384 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019403122 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018458586 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024041446 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024543246 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028236506 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019846721 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02409137 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.0239155 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018644417 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028241912 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026690017 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028530533 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032405352 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028367416 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030952167 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020001014 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018539721 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.02932948 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019785552 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024308562 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027489683 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024907875 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027449507 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.01994873 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018863432 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024083642 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025413216 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019763799 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019973287 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019819007 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028409861 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026776681 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018557356 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019438325 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028383601 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028309724 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019055021 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018947791 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.02838715 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020065572 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025514647 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024802359 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028420042 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.01943607 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019856292 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.01894792 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019596608 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.01908382 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025012041 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024368333 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020063113 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028440986 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.02688816 seconds)
done (took 5.442666001 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034718491 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063140266 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.17502708 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.13813522 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033014323 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020720644 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024543261 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040254819 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023263988 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045310063 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045215049 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041512744 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.161169033 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018747715 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019772887 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020554129 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018155538 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031929874 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143441957 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043851613 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062649041 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019591244 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.03655068 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040028912 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032957045 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.03887996 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021182359 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020706588 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022694895 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.03770368 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046247193 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019706268 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02098773 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039622492 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036136785 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029019428 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020714078 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026942553 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020721048 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019762183 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.02182131 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038468758 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026996807 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027213738 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020984368 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020374205 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.02023605 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027989554 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034354901 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026235001 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032714509 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037106228 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021801938 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020301904 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018618439 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027769851 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020220451 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020409597 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020706044 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019565262 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020647883 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022762207 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025815518 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030642141 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023966242 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027648965 seconds)
  done (took 3.276052756 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039588352 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.048763385 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03407863 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034312041 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019420721 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020026506 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020003138 seconds)
  done (took 1.113611596 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067260992 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135425995 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143036243 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.143517422 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.155070899 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.141586306 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032981342 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.04963355 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019532867 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155482652 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.152391554 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.147603186 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024053253 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032764802 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052699606 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.150079177 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033138409 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027117531 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142126303 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148746331 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025334131 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05082692 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032255589 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021230562 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.145802883 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138555894 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.0238841 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021290277 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023029404 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020370263 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020344118 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043443425 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138078741 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035651801 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021414219 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019448258 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.135873788 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.0217235 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.13863807 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028068685 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139523764 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023049201 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022914839 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020660676 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021783496 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.142237474 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021749023 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020595554 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020155339 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141078201 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.02002048 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.139070989 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023411509 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025865811 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027528144 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027022116 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027334129 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020870112 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143029232 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030657229 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022303388 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.150875328 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150286237 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.139289779 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150056465 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029592014 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.140102108 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.138552251 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020531179 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028487985 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021168575 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.151553457 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024428576 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.02322805 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025917629 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027866661 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.157588064 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.158415028 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.158993349 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035472643 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023634733 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021063389 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.156054839 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.159508936 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026751073 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020996258 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021963368 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037139625 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046340142 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023033191 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025784814 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020927406 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.03108384 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023490821 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023497719 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.151784324 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021470799 seconds)
  done (took 7.591011641 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028664897 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022949585 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021653937 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021649537 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021837264 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021545139 seconds)
  done (took 1.135157722 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048279368 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021694775 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.03329764 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.02135072 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.0431207 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.13962311 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.140392282 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022787985 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037319388 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033029974 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.140460835 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.144989495 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.145044354 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022493234 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141270914 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032921003 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.14192092 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026241994 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032314763 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022665023 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034921502 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022186099 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022502966 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.15107203 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023573132 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032445222 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030582523 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032408556 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031914392 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.02253436 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022245997 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023135878 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028121091 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022452864 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.14340834 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028556146 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021677869 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025263288 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023382109 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023109895 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.146688669 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.0230011 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026433429 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025447548 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022631175 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028234746 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025383876 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025384102 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145120541 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025809724 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025464204 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022102519 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023251938 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.02529852 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028384213 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022667687 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025227898 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.144798008 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022678901 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028523756 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021866724 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023271699 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022601593 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.02315647 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026595596 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025319918 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028475998 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022756293 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022747829 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021803118 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025471564 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021798405 seconds)
  done (took 4.219240046 seconds)
done (took 18.236438175 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.508963977 seconds)
  done (took 1.415536887 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.984042471 seconds)
  done (took 1.922841344 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052417442 seconds)
  done (took 0.987263014 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.283946887 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395993723 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.721387938 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092845635 seconds)
  done (took 2.413890114 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.853291317 seconds)
  done (took 1.794292035 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.219084751 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.181222723 seconds)
  done (took 1.369562463 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.495187986 seconds)
  done (took 1.426150151 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.312170928 seconds)
  done (took 2.250776285 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.190028286 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.116750598 seconds)
  done (took 1.245933439 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.595086816 seconds)
  done (took 1.53172624 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.548585592 seconds)
  done (took 5.486052181 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.191909223 seconds)
  done (took 1.194324605 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.194470851 seconds)
  done (took 1.135733673 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.707877614 seconds)
  done (took 1.644830198 seconds)
done (took 26.764610174 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043267726 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.039072477 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038735403 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034135798 seconds)
  done (took 1.081209166 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030069637 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024138632 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026579285 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027058682 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024468964 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026196846 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026582622 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022935808 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024331843 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023605544 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021864839 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023442411 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025932708 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022995362 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025564541 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027025948 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023502771 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.023971729 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025636223 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023097661 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026152746 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023542726 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023493693 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024907462 seconds)
  done (took 1.540563101 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033678358 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.02555224 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028530372 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024287348 seconds)
  done (took 1.054031977 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032232392 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030197395 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.03849537 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043291896 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029446565 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030641805 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.037681459 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.037208826 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043346054 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039729303 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021213681 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020824742 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020027243 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.0389757 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036297441 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015709295 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.0171486 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030503488 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029570713 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032333771 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023146086 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018883182 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029649034 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030470232 seconds)
  done (took 1.666517599 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037545378 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019088476 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035411224 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044168744 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045311879 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018813392 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032680615 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045066245 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081395062 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018805267 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024821404 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018751824 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057086469 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018882114 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034188187 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.063847089 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066834224 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022869855 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051912497 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018983793 seconds)
  done (took 1.703955198 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028013269 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023494494 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023757771 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019121882 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030022948 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026330703 seconds)
  done (took 1.105664978 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023979361 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02189358 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020839808 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025841741 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.02152117 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021495932 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020721267 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019598367 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019538062 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020270394 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020279527 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020702845 seconds)
  done (took 1.202181272 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.169882471 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026910387 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023852904 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019556725 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021213854 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.02018348 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034280976 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022172906 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037223567 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020356942 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020323931 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.02238393 seconds)
  done (took 1.384230986 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060902023 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064971803 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099343282 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069452148 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06889528 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04957212 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.196664802 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.0325652 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.118930011 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092408623 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070776233 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04539613 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040017539 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023070677 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054511178 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073975339 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092132596 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026455347 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068369267 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.24003831 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089286816 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.092432453 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104323431 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072007077 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047427083 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104195252 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051140797 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05886799 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078396222 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084053209 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075112855 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.052946016 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024939221 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024566281 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107253411 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062835545 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075926841 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047216796 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060290874 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042997006 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063523595 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023330394 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036054302 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066281679 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041049184 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090287486 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047822881 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072158004 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036225389 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098463036 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088210496 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175532818 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042023635 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062791706 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101641452 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07413054 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100839362 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065145582 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039621154 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.228546762 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.059054066 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053774312 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061493298 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033595802 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131920799 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042809956 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.06557066 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06441953 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049185594 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04906833 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060194889 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08961614 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079304517 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.07942138 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090660333 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045010823 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073090677 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053640942 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.08148869 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056946254 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026208265 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076792565 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083443535 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054083496 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054622461 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085623133 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046775874 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029835421 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.055795783 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074755718 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034205861 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.069304065 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035203933 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.065443356 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095470294 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053544489 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06641292 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07379365 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03210069 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114047883 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064105524 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027024952 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072738226 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069302185 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114848476 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051708361 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030208492 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055973143 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060160881 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.111855649 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068316235 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035590427 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068764561 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103450409 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05154616 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.258772504 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053480795 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106033694 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073107168 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042656157 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030637827 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046621838 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.221240083 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061689368 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065159792 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047702238 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037248775 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040042828 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067993144 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046464298 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03421849 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.067303674 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055859495 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.02816725 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041359835 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029958178 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094227899 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03165584 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088481324 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078566079 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028801281 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059728535 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048508005 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058997866 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.05075325 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07050999 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092449793 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.13556033 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043779053 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.047718556 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061051844 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098645138 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082592766 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04664576 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.03123095 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055658151 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066754315 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053066619 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08059139 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048708873 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063038349 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058495438 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099695454 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103520588 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054875407 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056280225 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064728171 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.079036199 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028998658 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115800792 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060319463 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074536635 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041462397 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100730686 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066321458 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045571129 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041881564 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055437954 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.062144858 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064456193 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106199741 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.052232836 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027324413 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052038983 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10905444 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033604345 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07060862 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047657211 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.049332359 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079097719 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.054417582 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03808689 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022939433 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.244942423 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112461151 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023520546 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065619729 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060412529 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055649869 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074559321 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022855663 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071540817 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089598764 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069426106 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093400806 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118900654 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070920409 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07147822 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.06716618 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058791475 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032553258 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078538509 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088329257 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049266823 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044946562 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088711649 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072663288 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.092236764 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074287572 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074324034 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.061967417 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062451332 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059797154 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.061217167 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103840076 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078428712 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081831436 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037944284 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062093824 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07366526 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094226916 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036408584 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100926164 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040825559 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077161177 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.03302451 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081738315 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030405435 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.125574982 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034301713 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057962809 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024182494 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029333853 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102527428 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.071177267 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067657912 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061004243 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.101128692 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098274349 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032020303 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066503808 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074062812 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060106707 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.227949375 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062894698 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.04275528 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04863615 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060249243 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038553131 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034590014 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070043094 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047299941 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080354222 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037726779 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028443423 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092721651 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057688095 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048180558 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029724404 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060072479 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078659162 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046190468 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040026257 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067804627 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058088262 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094535162 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043985789 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050867378 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077941591 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033466457 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045707745 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.02285395 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038873921 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029487251 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082710626 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029126123 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070862525 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022398731 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086872838 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042629252 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04739752 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057533321 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065959583 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084490631 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049669916 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098872485 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044711755 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07715376 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06389278 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049779645 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041625878 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058391033 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055704534 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079116027 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050979238 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080230985 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102462271 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058700665 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099861552 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045775202 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07866928 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062532345 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081449526 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069079565 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129672448 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102261647 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071715326 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068796955 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030257736 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053696272 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0652538 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073425148 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14463395 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.231488139 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026059892 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058083234 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04751945 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062053527 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057518572 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035488761 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097649717 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056048274 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041348708 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064864989 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044406068 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057407149 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029502493 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053578806 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056858732 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048027528 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05095678 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06693459 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081748969 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066588627 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097010812 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.055538362 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045343403 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.07181098 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063607444 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062628509 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038948959 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039647491 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092652923 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073943194 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.08104917 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055658497 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064677007 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065887578 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055348565 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082615996 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063373949 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085462825 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034633587 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031200202 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022165471 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026001312 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08091165 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063664566 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067377133 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054051326 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026205087 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058989333 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059123901 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026056767 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042798369 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050334924 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053161459 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047738426 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063981044 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.06605515 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051336867 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060353091 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052982201 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107717562 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058011414 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045699427 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106306236 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11654404 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045724852 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052212334 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026128597 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034434769 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073704585 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11537566 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.258730833 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032031813 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040530381 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039513012 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039983127 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025107149 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041757304 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042514158 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058634776 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05155644 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066753131 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057815822 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028703784 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055646128 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052049938 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04561882 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060105549 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072425185 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078741931 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094500822 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066673376 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060255754 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029418782 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033707482 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029146603 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032724866 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054673802 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032061532 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029459 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096525622 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044709071 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058538968 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061954394 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041411935 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029187183 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090142943 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023105381 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091005866 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024902227 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036319992 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036136117 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03299625 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048922494 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096270559 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065127792 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068187156 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061870259 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060201592 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118974656 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116689073 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036962904 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099315779 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030041124 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030938568 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030066158 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067588972 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04525351 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069414682 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100790398 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045559994 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057707594 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032626902 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102933721 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059165057 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060788313 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041589676 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034002628 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106255426 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034532388 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.04025716 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046312308 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069913359 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027064601 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059965958 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038871193 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03510341 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.271772459 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663434693 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045237724 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029306654 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049444618 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094094603 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084984205 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049985243 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061241587 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.072175179 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053499734 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04671601 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060701453 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.146858384 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027573304 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047867914 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.05700088 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050526211 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054646558 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.05190556 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.04023596 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045636267 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040199063 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03247828 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060763778 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041424209 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049592737 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060341508 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036179727 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041018014 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084708351 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.057613337 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.036769941 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042245032 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057226167 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041915665 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057696279 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.02295115 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066667395 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042904661 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074699283 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054848711 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06397785 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082572539 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048998096 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094998905 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064128647 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079387523 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041860031 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032669726 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084003695 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045334613 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031998211 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104607861 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.054104936 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.058318241 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059824297 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051156675 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06925478 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076634347 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070796186 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053326815 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033910898 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06063563 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062567005 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043998954 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035264682 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029858238 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030920114 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066401516 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044492799 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041291153 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071675711 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046860593 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.210237306 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.057565557 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07661299 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041157942 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055305902 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064582784 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045355633 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063615781 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054609869 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082183727 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12789396 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078145006 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082584418 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088037552 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031284643 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028955075 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022242591 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067010855 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033058781 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.04271198 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03251492 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087784802 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.03714006 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065161619 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.19805181 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034046971 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047913815 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049535455 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023136632 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036613031 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061148168 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04059212 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033891461 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073057985 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035123793 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084074518 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066445422 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054582608 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050156509 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035108916 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069897589 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057560589 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085217858 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049616577 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029508245 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080397469 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059478582 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097025143 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027130341 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035415595 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087137418 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059532944 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089875435 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034912512 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110487578 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100199824 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055872647 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09369379 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025119843 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042343593 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045806933 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082432778 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040381419 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069799444 seconds)
  done (took 40.458731217 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.105779051 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.133610575 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077006607 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089141066 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245107016 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253651916 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106321786 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077909181 seconds)
  done (took 2.186098128 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024436038 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037149775 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034718612 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.279084546 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.053080378 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020721677 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025665985 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035311944 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020616227 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020299657 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054993607 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020565169 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.020873663 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.430049523 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019830349 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025460065 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020872047 seconds)
  done (took 2.217441436 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.306785334 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.464151574 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.319514837 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.415871506 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.117814974 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.676215357 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029031601 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035753924 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.751691767 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.35693003 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.113718775 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181126431 seconds)
  done (took 19.830616002 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031292805 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.154632361 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152889533 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027693749 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027309872 seconds)
  done (took 1.514318501 seconds)
done (took 77.959787983 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040404995 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.388094201 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020830204 seconds)
  done (took 1.500710208 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.157783806 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.152017087 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.151834214 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154561741 seconds)
  done (took 1.674267816 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030129055 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029646684 seconds)
  done (took 1.124699955 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.184463217 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.246930785 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043919473 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038925495 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034009935 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033949084 seconds)
  done (took 1.175115061 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026730758 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024523693 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024560529 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024848938 seconds)
  done (took 1.161156281 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.13419553 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019302129 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021746627 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023553128 seconds)
  done (took 1.260552312 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040355351 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040043264 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.069281417 seconds)
  done (took 1.215926279 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039072277 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038317309 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032588095 seconds)
  done (took 1.179700179 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065272457 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.050145167 seconds)
  done (took 1.182204443 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035293941 seconds)
  done (took 1.099136724 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047126011 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051062723 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.218313285 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183414217 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.22137711 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.206082608 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030346885 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030697285 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026460367 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025334746 seconds)
  done (took 2.105439682 seconds)
done (took 16.257522206 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035596114 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.147721856 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.27080044 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041248171 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608895613 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.26819044 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.679877618 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.04556985 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053729391 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021744323 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038373835 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586293694 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.68388499 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.106313058 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.66970122 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.089710881 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.516906066 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.02293581 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02134088 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021930401 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660598158 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022283214 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021874941 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022196691 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513466807 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.411067633 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023078742 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.088397675 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022847245 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025886243 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.392814302 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023285919 seconds)
  done (took 12.215877214 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025950004 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076105224 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026795492 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037331535 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023629808 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023673403 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.02537657 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021988497 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.064263858 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021736189 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038706219 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02113417 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025911744 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022671612 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042088926 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021572006 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023660396 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022313012 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021607063 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022080913 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040534519 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021255724 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022084828 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022130156 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021839746 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036055141 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022766195 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021578996 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021951743 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025771959 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026849981 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023189796 seconds)
  done (took 1.988576048 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078342036 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078882886 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027267742 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062002639 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074073341 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024123794 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.104995455 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044283681 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.06724628 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021866318 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038808036 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021468226 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.05804458 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023210135 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042190783 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021947889 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02415227 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022218914 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021441136 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022043638 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04068281 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021660351 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022174872 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022321426 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022188685 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.038054835 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022757678 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021759114 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021584966 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025753835 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027611309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022960748 seconds)
  done (took 2.261787714 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024915063 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02502503 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030861581 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.03391552 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019986864 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022053898 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.02309506 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019979005 seconds)
  done (took 1.273848456 seconds)
done (took 18.817498261 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035361549 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022102368 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024918644 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041529548 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027987831 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.142678381 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.019006737 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028629847 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025096065 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025280596 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026597384 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.02002951 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023658552 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.01854848 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025406405 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019698585 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145449727 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024156877 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.143322858 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.144830271 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022469941 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025457494 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028462148 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.143618313 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.143631882 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.143621651 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028921735 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025724676 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020154618 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022787142 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.141352899 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.143857336 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022935929 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.139717062 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020296553 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020045997 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024302321 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021854152 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.147590528 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029200115 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022346082 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028701271 seconds)
  done (took 3.409810921 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.147018848 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.152818493 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.145200166 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032177556 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028547085 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031683055 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.151643016 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029016855 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027410174 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.150945469 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023326463 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027473594 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029846363 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020556604 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027361419 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023622994 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028992282 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021619308 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027351952 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027351297 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.150995628 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.02096892 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028211177 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028927216 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022928214 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029033671 seconds)
  done (took 2.526974255 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030198369 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043097061 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045889004 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099510707 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063466807 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036123396 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036356801 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046833772 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054227198 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021054781 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042885866 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048450754 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049284494 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027861005 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060441153 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.03950348 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033606462 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022723377 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027773965 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055399443 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043919843 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.03983955 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054512744 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.04130188 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020352552 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030482141 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028599896 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037682805 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028737156 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033408169 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026039405 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024715593 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022625593 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033081167 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025334521 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019161145 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043940635 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033751839 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035792276 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060708646 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031153634 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022507855 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.04824982 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086336092 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020736339 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023649572 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025297415 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033549612 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022454622 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051610685 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036259545 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020844969 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040093225 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022405719 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022388396 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036543381 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022645738 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023254263 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032639883 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027160773 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042190624 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026325747 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041542549 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020830874 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032232 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022444614 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022812974 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019848853 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055493697 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028477069 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.07093381 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022251243 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019272003 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033343174 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032431415 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028280515 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020791741 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039916811 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033747687 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024917242 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032000774 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.0240124 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024422039 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057588584 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020133295 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019258541 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019154899 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023418924 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024218838 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021657063 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033534734 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020541829 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024330529 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035407637 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020974686 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021739192 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023523079 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022286482 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020511022 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031078156 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024948387 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022753175 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033823697 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022116065 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.0243646 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035949113 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030165306 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020494627 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022122635 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023393739 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022786672 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025482397 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024442592 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022840842 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026046962 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028569751 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027207286 seconds)
  done (took 4.908844691 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.238993005 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.227709491 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022179484 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.223945904 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029753622 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.157133773 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.230672009 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.227576355 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021884688 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022580336 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020894292 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171604918 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.166105235 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.179525137 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.159686718 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023950911 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.049743359 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.179915477 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.235488503 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.229655738 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047990663 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028945719 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024165773 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023123816 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022508644 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030550151 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038771524 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.03053006 seconds)
  done (took 4.170355062 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030082371 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066196657 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025090837 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045934916 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038417827 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021544338 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023313782 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022633358 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037973193 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026835657 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021221527 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025542767 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.02476884 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023398661 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022238096 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027913124 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027861347 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028977085 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025043621 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02590172 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032251588 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045880714 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025726084 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021735582 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024895907 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021625657 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026986542 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030091117 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021234228 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021400721 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018745406 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026133886 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036101257 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022713036 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021298167 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022191473 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021932371 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021907719 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022056099 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019931822 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019872509 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026739191 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020350999 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026496212 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035922495 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023794727 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02296315 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024132797 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.02394095 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018543146 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025255653 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024844043 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024162623 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029819368 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025386251 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024068169 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023060769 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035844967 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027046347 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.02105222 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020696669 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020101447 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023297587 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028175531 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038389372 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023254147 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020105455 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021797321 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023254989 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035727162 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021134209 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027005498 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018699439 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021839406 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024020454 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024669064 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023076969 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020268551 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021534826 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021969867 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021680782 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021534571 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020979764 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024442163 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019560889 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020072829 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022287083 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023249236 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027225258 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020599889 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024349036 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023083542 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020464141 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024518406 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026851445 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024564616 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.04176038 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029586903 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022347574 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019642588 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036452229 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023424918 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021025681 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023628775 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026100381 seconds)
  done (took 3.809866572 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051311035 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024239133 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041698438 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052974498 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031697143 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027286299 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035376637 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.02287026 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042638503 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020894766 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030822613 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020189092 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034495713 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030181097 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023490959 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031422501 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024340914 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042064531 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036067744 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020386824 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030195316 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033704249 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033932975 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039334799 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03907396 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040468583 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033966734 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024606483 seconds)
  done (took 2.026463397 seconds)
done (took 21.922075841 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.13488119 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.342837874 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.112731061 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.826916285 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.187564077 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.207760197 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.22628453 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.09708491 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.758497189 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.194270682 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.889868756 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.13057934 seconds)
done (took 59.274345549 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.175466468 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.251360424 seconds)
    (2/2) benchmarking "String"...
    done (took 1.340757712 seconds)
  done (took 3.695407013 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.53459526 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.099938658 seconds)
    (3/3) benchmarking "different"...
    done (took 1.131551645 seconds)
  done (took 4.849946336 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.434691459 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.871364604 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.383819646 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.086557247 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.102760653 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.70512809 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.272118265 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.7564038 seconds)
  done (took 27.270990377 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.094064596 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.448355788 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.453659127 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.563557846 seconds)
  done (took 17.731270751 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.542216997 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.516426349 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.515099677 seconds)
    (4/4) benchmarking "different"...
    done (took 1.806838691 seconds)
  done (took 7.592086224 seconds)
done (took 70.933492454 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.087741696 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.384556731 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.110625404 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.280334701 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.134788191 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.18093657 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.100579172 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.112013289 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.095941449 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.101662118 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.095344975 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.095459498 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.091780383 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.141767943 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.100076869 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.14372108 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.380741171 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.102816533 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.135833336 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.926040547 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.423442698 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.094331885 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.098535072 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.169113382 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.511438677 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.146807422 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.540000706 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.094081187 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.693016438 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.107906253 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.101647148 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.09470626 seconds)
  done (took 181.96277516 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.089260265 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.013747038 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.006162555 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.114163397 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.479685883 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.447897842 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.947702449 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.500615728 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.095433758 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.131216578 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.115413818 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.093393707 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.13961983 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.66005794 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.133587541 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.094795427 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.016989997 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.920085768 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.142199422 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.013245029 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.102485093 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.66771843 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.666801962 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.929845801 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.116589384 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.122560546 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.10866986 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.130241633 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.59896526 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.006445512 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.118131425 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.126473601 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.285650074 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.334563351 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.095369564 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.10763305 seconds)
  done (took 152.766989166 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.343747009 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.096347865 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.132982893 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.205154754 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.041391219 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.96964097 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.093276509 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.085007225 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.084364035 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.090460071 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.084973942 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.152882395 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.093780608 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.249454678 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.123274128 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.085498558 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.085873529 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.24108557 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.102685777 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.084386695 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.085652723 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.186365436 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.436563959 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.197413953 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.093289705 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.093009373 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.193452804 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.100265123 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.08518832 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.083548599 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.193306485 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.094642285 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.21773225 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.202533671 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.102139347 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.144305382 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.103987011 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.301302853 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.097592832 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.083547491 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.085424232 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.131987999 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.09287111 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.119051263 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.197027458 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.096254469 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.104254068 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.544133866 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.664441805 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.096276266 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.084465664 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.084060224 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.086814089 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.085313877 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.581437485 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.097664158 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.118948039 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.663538632 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.100451104 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.083561746 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.086788464 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.083562515 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.088157333 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.090558364 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.120047605 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.746811363 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.863345586 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.450557736 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.791820566 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.094925741 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.084499922 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.084126653 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.859341717 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.156716774 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.085206013 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.084198295 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.259286486 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.09717285 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.087477643 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.012414048 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.01091173 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.095857468 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.194338186 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.094763748 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.085181434 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.185652985 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.257897676 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.102712084 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.104604536 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.139495945 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.090257357 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.087482394 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.093882184 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.014216689 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.094234402 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.099312468 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.480498749 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.096266423 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.085158702 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.241057199 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.45459095 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.097559056 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.167756777 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.499063091 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.06348333 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.095112677 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.085293339 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.10255915 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.085405948 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.095753654 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.095399524 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.085705161 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.08410135 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.088940435 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.084335023 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.083788267 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.086832753 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.103454784 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.086248269 seconds)
  done (took 324.860640179 seconds)
done (took 662.160214199 seconds)
(4/20) benchmarking "parallel"...
done (took 1.087699163 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.347973562 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.073514467 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.208552919 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.340470133 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.298065438 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.270934293 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.300553718 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.388696186 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.327331297 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.26666394 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.326054759 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.267218409 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.382129641 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.353573322 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.387678521 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.356243122 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.294161283 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.789789984 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.311146758 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.267930281 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.298224252 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.265527276 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.256559951 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.329071529 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.404695307 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.269576387 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.494409161 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.332927571 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.303966544 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.345439815 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.365556185 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.381276105 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.311281509 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.377467913 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.340671797 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.406521822 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.265421934 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.36320672 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.281400221 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.307458555 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.324265262 seconds)
  done (took 62.669564679 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.456886525 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.28998473 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.413115637 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.394859506 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.048086245 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.432858515 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.486629939 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.303928158 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.286292118 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.421323675 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.444046774 seconds)
  done (took 18.09071057 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.393815515 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.288138493 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.425309966 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.415015764 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.484365652 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.450351919 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.454562207 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.283669981 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.294922796 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.458158818 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.450397406 seconds)
  done (took 17.506694227 seconds)
done (took 99.351623298 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.660363015 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.167350373 seconds)
  done (took 3.912548274 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.117810878 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.106620216 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.097151011 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.100668667 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.09872124 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.097556198 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.15114591 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.109210174 seconds)
  done (took 9.966090837 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.103259468 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.097706655 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.099102693 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.100797823 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.099513315 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.099347206 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.098574303 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.097372085 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.096349264 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.103510412 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.098349929 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.09990826 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.099079448 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.097253645 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.096478471 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.096701685 seconds)
  done (took 18.669237048 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.096835739 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.100670912 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.097205701 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.097401985 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.101144114 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.100621285 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.097991141 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.105489925 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.100876764 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.09881017 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.098496802 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.097447084 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.097564553 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.097932897 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.097836965 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.099336513 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.100659154 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.10048341 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.097017781 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.099912366 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.100873366 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.098357674 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.104591563 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.105436296 seconds)
  done (took 27.476994857 seconds)
done (took 61.138274937 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.681638824 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.11945308 seconds)
  done (took 6.884196064 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.101037608 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.097141739 seconds)
  done (took 3.394845322 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.09627197 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.096519084 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.098345805 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.096753122 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.096712912 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.099072968 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.100010288 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.099058 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.098239809 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.098360013 seconds)
  done (took 12.061944838 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.097856545 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.100874774 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.097383794 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.097982495 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.096281062 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.096677109 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.096441545 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.099657984 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.097172332 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.099816418 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.097690844 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.287308214 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.09933499 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.327059864 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.097624231 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.096449888 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.09771263 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.097131313 seconds)
  done (took 21.263877134 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.098067868 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.096715249 seconds)
  done (took 3.281690412 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.097247723 seconds)
    (2/7) benchmarking "second"...
    done (took 1.099162656 seconds)
    (3/7) benchmarking "month"...
    done (took 1.098599329 seconds)
    (4/7) benchmarking "year"...
    done (took 1.097843366 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.096848434 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.098565025 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.102808127 seconds)
  done (took 8.774327462 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.557963392 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.271571632 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.324916957 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.564001753 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.720976615 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.052019422 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.72331475 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.047305918 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.918843674 seconds)
  done (took 16.266478317 seconds)
done (took 73.014205833 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.783970693 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.101854562 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.742624693 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.231639617 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.106121709 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.435692734 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.102845125 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.695196779 seconds)
done (took 37.312289268 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.321976252 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.090683286 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.13319764 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.132238188 seconds)
  done (took 19.456302869 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.08773188 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.683559213 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.139479031 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.119651501 seconds)
  done (took 19.211988301 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.603026756 seconds)
    (2/2) benchmarking "read"...
    done (took 1.634547096 seconds)
  done (took 4.338414834 seconds)
done (took 50.423222414 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.09616639 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.096932265 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.099783105 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.097390674 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.097631454 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.099613834 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.098752845 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.100222612 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.101474658 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.096618743 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.096774213 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102188112 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.097726734 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.104071657 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.102159868 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.099183582 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.098134754 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.098060243 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.098492163 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.099861072 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.09837926 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.097593876 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.097550227 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.097603983 seconds)
  done (took 27.455760878 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.164795769 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.155698696 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.169071777 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.158954893 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.192122228 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.162291303 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.164762816 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.142610931 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.169921781 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.14921021 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.14062073 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.184142475 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.143890342 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.18617752 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.13775785 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.187586437 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.169836542 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139567685 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.136826788 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.187756641 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.160891303 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.143475333 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.183783008 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.134921464 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.183761848 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.14067019 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.148919027 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.154755851 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.130957992 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.179138707 seconds)
  done (took 35.889268613 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.130576482 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.096499248 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.097140138 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.188065761 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.098536156 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.097949531 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.097018013 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.097161071 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.098875524 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.098335205 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.102092741 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.101968899 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.098630362 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.097331358 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.097070837 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.096636621 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.136285687 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.271952625 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.097687274 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.096726224 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.142429541 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.096637343 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.096956191 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.098280113 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.097901025 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.100160161 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.100041806 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.097588396 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.097248298 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.100852878 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.101313025 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.147923433 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.138382415 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.09683947 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.219175446 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.159365697 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.097754642 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.823896429 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.107552899 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.100816452 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.097727795 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.096664839 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.097161401 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.098589294 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.163407499 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.097602039 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.09733248 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.09728409 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.095920025 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.097924562 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.09823222 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.097011287 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.112103637 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.096795753 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.100775864 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.09732442 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.100799542 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.096929724 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.098563008 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.100201146 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.100289514 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.180004499 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.102538782 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.09641858 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.467570099 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.100169296 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.165465141 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.099875841 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.096336099 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.308873745 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.106291518 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.300929548 seconds)
  done (took 85.568195593 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.097090479 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.098465221 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.175598978 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.17858307 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.101099151 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.099636032 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.103363415 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102206554 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.763134661 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.102385974 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.097357829 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.10054085 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.769190955 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.10238744 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.097938595 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.176252591 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.097830309 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.098743529 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.097355358 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.097222987 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.097517101 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.098337093 seconds)
  done (took 26.837427935 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.134909145 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.114584991 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.139098481 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.111886973 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.113282336 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.113456635 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.141963873 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.112426452 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.138097045 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.140390786 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.144977845 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.131290264 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.117119948 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.143403855 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.140028488 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.197906727 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.13311916 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.202972643 seconds)
  done (took 21.556759377 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.275728853 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.264320255 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.182544626 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.147196077 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.360821689 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.333502099 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.203340062 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.272984311 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.141263953 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.263849502 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.273040387 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.143215377 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.333348107 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.142177162 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.142055114 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.366175958 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.185515275 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.142674729 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.21072587 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.203153477 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.282179341 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.209801714 seconds)
  done (took 28.170128976 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.13437046 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.142643294 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.182480533 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.175998366 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.099046819 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.097510538 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.156865372 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.134517376 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.113816314 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.143713487 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.141737752 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.097767996 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.189468174 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.153243874 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.191759408 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.14218067 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.14947769 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.151998055 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.134820607 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.100201712 seconds)
  done (took 23.920999758 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.099686497 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.098297874 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.098712285 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.100972678 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.099112233 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.103896059 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.104072046 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.098483967 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.099497425 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.338028532 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.102140942 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.099677178 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.098853314 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.09890595 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.098191162 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098392732 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.098752493 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.098048965 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.098312602 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.097655838 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.337542344 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.101298608 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.098492978 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.101174381 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.102162326 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103749282 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.102562879 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.098561228 seconds)
  done (took 32.360750527 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.158992439 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.13941973 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.138787536 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.220722772 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.220504829 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.133179888 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.220141814 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.220566801 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.13340715 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.14401674 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.186645208 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.137201229 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.141808336 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.135454019 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.136850372 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.186682725 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.1438821 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.220167919 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.177174638 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.133330558 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.185772248 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.135872973 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.188452789 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.137330424 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.137466317 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.185745337 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.179435875 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.264108387 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.166289669 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.141261703 seconds)
  done (took 36.135987751 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.119856072 seconds)
    (2/2) benchmarking "in"...
    done (took 1.120428002 seconds)
  done (took 3.327119417 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.099990123 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.200917751 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.100267658 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.296482584 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.265793131 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.273624654 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.264634708 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.19476902 seconds)
  done (took 10.785222978 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.100535192 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.548148518 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.12046867 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.102071117 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.100441497 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.599673211 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.058517729 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.018853183 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.898306214 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.97533191 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.205203393 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.683497697 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.078014677 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.416921503 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.226643376 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.958261131 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.365440501 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.734605888 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.206346768 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.233219878 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.862453852 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.21023013 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.098946334 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.097687981 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.097249039 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.125064779 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.998326331 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.530080395 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.288603933 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.2324159 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.889880603 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.187078393 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.098870696 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.352167469 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.22533847 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.103964308 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.26718566 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.212556303 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.098978071 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.100320766 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.884964808 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.8345644 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.38658035 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.35224527 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.192300169 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.103791641 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.100787978 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.098732708 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.377408242 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.836033579 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.079290229 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.081590093 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.24742227 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.102427019 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.830399556 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.114831953 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.10156707 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.124321686 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.714177326 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.365934881 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.51273639 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.215269074 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.145086808 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.236001748 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.097822672 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.347910879 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.925773015 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.927128237 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.862808057 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.221504978 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.632561821 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.121181928 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.098781747 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.097537139 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.062024879 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.414956263 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.099258446 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.09995236 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.098702129 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.099858811 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.363351734 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.226804917 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.944169648 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.249236478 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.326686822 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.563669705 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.236100445 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.100479981 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.776401835 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.966864112 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.207428485 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.800763685 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.325877716 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.246702318 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.116500362 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.378308321 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.147240435 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.104485148 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.956634794 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.74967628 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.115415512 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.101597142 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.493850111 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.138388516 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.104522975 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.100486138 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.824320088 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.239551688 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.292116525 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.146338591 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.099431991 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.102271518 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.718727231 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.211052002 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.10371943 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.70109589 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.082977647 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.644394759 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.368318546 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.316645286 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.477379662 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.119475075 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.427351405 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.924688214 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.10290314 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.64440791 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.123916191 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.693458527 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.37413069 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.234259978 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.992964304 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.173195971 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.097574173 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.260342384 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.184372526 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.099212136 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.099382312 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.09866533 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.098848433 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.100756283 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.227968685 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.50461533 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.974925631 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.113504253 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.34514349 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.232989625 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.988686132 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.332551906 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.813598596 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.246919758 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.101748813 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.876055674 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.394885877 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.834720405 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.238149239 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.102011475 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.103073537 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.958516162 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.119171016 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.208501844 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.09914742 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.739764143 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.214236128 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.102617159 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.100917716 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.568698315 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.24995491 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.100372449 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.232527757 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.911232902 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.028959283 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.117971922 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.418289177 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.226358796 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.100118235 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.104079865 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.105330018 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.899741833 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.839600258 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.279295784 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.873079301 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.891537133 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.202826982 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.268113597 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.201719913 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.384939932 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.354804513 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.249869656 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.100309612 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.098840752 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.101306385 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.681891265 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.950263384 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.185968981 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.990646292 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.207904207 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.1903415 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.20803514 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.910757593 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.118319421 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.845753593 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.100407323 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.210739379 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.099510764 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.100623182 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.258241808 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.298749619 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.252795459 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.687654165 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.113904125 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.100875566 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.799616715 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.238671029 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.783169344 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.217238103 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.943527322 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.221280948 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.237840241 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.304682546 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.807881831 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.240653017 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.102165093 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.854405866 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.259492582 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.104114283 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.191585772 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.825043904 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.922035977 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.85109614 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.768950438 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.057884906 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.668559204 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.369646498 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.251794909 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.937654207 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.212399238 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.384553377 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.160447264 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.635267267 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.127665409 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.861180562 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.118076264 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.893952739 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.115125776 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.142407678 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.232657267 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.591926597 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.232532707 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.106544946 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.289968025 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.207159839 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.784984605 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.238224571 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.227118662 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.437008195 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.01256312 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.212324962 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.384902599 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.161679445 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.03136606 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.075340897 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.460574945 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.041198407 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.231689099 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.201737316 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.898888149 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.279364387 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.348769257 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.250473764 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.101198151 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.099914227 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.322907854 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.198121162 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.100498335 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.441101142 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.099672643 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.268403719 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.203050867 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.104422702 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.101500596 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.346341745 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.286363926 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.432432412 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.605156316 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.688352231 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.934967722 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.238415962 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.79214637 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.24227241 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.816978011 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.212156995 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.10447439 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.791497327 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.23880895 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.401930808 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.261123591 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.222122441 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.793738157 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.258129641 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.413475579 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.260180352 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.233670705 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.9003839 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.667991734 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.368586774 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.529532296 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.145756235 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.740113959 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.189844349 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.799923011 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.105266213 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.82769719 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.187174544 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.163248323 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.102552385 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.100323161 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.742230196 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.085082294 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.106640165 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.903498755 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.834128467 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.020347657 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.867643643 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.214602803 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.104437877 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.102448369 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.100266374 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.127259405 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.225242083 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.482123511 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.247143906 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.102710753 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.100467661 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.084542458 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.470566148 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.959988039 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.01764504 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.095544192 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.247898016 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.103058441 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.101148246 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.10028066 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.09994702 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.104343594 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.101029797 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.635127995 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.115816213 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.738339261 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.218460958 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.108962111 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.360398773 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.172264546 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.102428926 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.33984709 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.192708526 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.218201488 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.177287613 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.101166952 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.511338112 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.253118983 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.119434638 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.407832713 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.411463028 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.350162146 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.689821615 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.160678236 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.530857079 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.468419434 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.919649076 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.108438909 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.126967289 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.205938373 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.912172245 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.219424191 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.588877775 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.829302037 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.091633693 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.371329008 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.022399797 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.515842393 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.236380617 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.170161482 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.095494016 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.094585652 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.191624985 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.341881385 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.146058316 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.369694617 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.312425969 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.204611338 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.405637223 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.200591946 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.32101694 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.1292191 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.112815379 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.094436806 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.095785541 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.56543298 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.02416345 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.192914977 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.09533657 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.122439917 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.991102495 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.020919379 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.868027328 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.995752981 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.241466814 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.095542198 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.298586421 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.151749283 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.905813972 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.120704724 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.888965967 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.435811109 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.146936284 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.321224546 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.51268819 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.826487595 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.498267561 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.221576085 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.095911547 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.476453495 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.111727311 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.246365861 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.002971033 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.498356555 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.787144629 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.660902573 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.363854782 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.220668859 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.117451736 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.786947782 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.093382817 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.098944435 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.950774433 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.246907081 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.448837694 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.069359401 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.396481112 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.246864624 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.753230822 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.803349521 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.244450633 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.718581359 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.244053833 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.0964733 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.923348315 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.143618268 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.282201755 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.226728451 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.096792701 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.113696075 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.795801467 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.698733851 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.315766579 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.180109838 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.0961336 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.913395935 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.872920871 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.214662585 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.100135074 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.097909133 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.567757793 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.15166851 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.096978344 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.515602939 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.712403914 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.245053307 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.716315185 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.211041246 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.248477502 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.375838839 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.499010609 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.308053102 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.164013306 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.09559096 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.09567598 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.096175302 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.681590028 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.119460744 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.096086805 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.717392063 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.265067192 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.906342447 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.066773116 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.35577654 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.175469125 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.515951811 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.251774489 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.742289009 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.084894785 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.218863853 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.417175196 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.182131901 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.269073187 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.862498826 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.210277131 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.096312341 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.050821942 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.467964266 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.475117542 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.503327139 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.422400715 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.190600072 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.781975782 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.21612813 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.915008147 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.12051206 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.095339784 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.708427452 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.24175068 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.562307446 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.258101053 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.569370828 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.221603961 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.478620919 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.344461826 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.195221142 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.095505041 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.095827415 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.224185151 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.259689036 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.776582779 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.994765044 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.598910554 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.237379952 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.081710837 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.640576812 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.007228182 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.346884951 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.415941508 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.414495965 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.135446149 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.075497273 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.532051523 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.225221464 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.303729022 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.236661124 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.955436286 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.17757739 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.098865988 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.69623044 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.143580419 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.118051678 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.09872096 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.222908607 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.157023976 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.413121831 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.540903437 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.380237132 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.301149786 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.874729961 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.56441289 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.287079412 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.25212674 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.307621901 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.204505965 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.384891445 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.262409992 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.574128516 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.326632524 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.509257285 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.973829197 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.55067889 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.194631266 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.118034839 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.12629128 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.810101353 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.708491458 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.135515179 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.464217629 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.13809912 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.68048031 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.081567823 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.560327471 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.635599471 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.134853582 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.230242531 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.097055571 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.134092097 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.045377587 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.022077545 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.879783832 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.59932784 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.196985458 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.914821273 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.112598968 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.165539806 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.284123617 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.174020716 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.096642589 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.115285868 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.115218066 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.743684296 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.08893249 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.099364171 seconds)
  done (took 1442.669747499 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.365269681 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.097148136 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.09699673 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.096913804 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.097329254 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.096882148 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.096929575 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.096608463 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.096917512 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.096830484 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.0981229 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.097312941 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.097479215 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.372481679 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.096877147 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.097015824 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.097343836 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.09698042 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.097284651 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.097210339 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.096736402 seconds)
  done (took 24.665981138 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.09636446 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.096815862 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.097974076 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.096468213 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.097515831 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.096592137 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.097334294 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.096506158 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.096696706 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.097182274 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.096152813 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.096322304 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.096707345 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.097375079 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.097012334 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.096353418 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.096450349 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.097245265 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.096199094 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.097205569 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.096791809 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.097252559 seconds)
  done (took 25.214071119 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.096144364 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.096112918 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.853848888 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.23209395 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.097614683 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.09629086 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.096839377 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.304394434 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.142413644 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.003411379 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.554545164 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.142289081 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.10043481 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.285447635 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.200348455 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.096727577 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.219039062 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.096263906 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.096521746 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.096438122 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.096745674 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.3457089 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.245023811 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.097567247 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.945653183 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.248914666 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.09671046 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.097139511 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.097251686 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.118185301 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.1956364 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.100651744 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.986465105 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.901323988 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.460036366 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.005469359 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.206467539 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.100670701 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.096952865 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.096405029 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.353856229 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.879032995 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.101049391 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.097444778 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.402813538 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.223385568 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.097740473 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.484359116 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.143611407 seconds)
  done (took 88.314378471 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.096948636 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.217000256 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.151537617 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.097000617 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.212560714 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.096985765 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.15335359 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.097084863 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.098020041 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.097853836 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.224360088 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.241895795 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.098194572 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.097025548 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.187432513 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.09765955 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.097654187 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.097422073 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.097766129 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.097734377 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.097805535 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.147957416 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.206437292 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.242491221 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.097185695 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.098051123 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.097739533 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.097989544 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.236150199 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.097902358 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.096808268 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.097277893 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.219589235 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.202710822 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.097758964 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.096915389 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.216814435 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.098061555 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.096504924 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.098402578 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.097610789 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.096767289 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.14935868 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.224738831 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.097943676 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.20101164 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.097346637 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.09741174 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.232972015 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.09716785 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.097488254 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.248684412 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.096830835 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.097376647 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.096937751 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.211512463 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.097415246 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.097826092 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.096975458 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.229731353 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.098364289 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.097391033 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.24282032 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.097779904 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.09743418 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.250699437 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.208212677 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.110049672 seconds)
  done (took 78.450794114 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.111023714 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.235888869 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.292511999 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.329501362 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.256573633 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.216238519 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.236547184 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.233306013 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.233419742 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.249522017 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.233134964 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.200170528 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.204042784 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.200244178 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.236260547 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.219872219 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.216562126 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.218521446 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.237428862 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.237007398 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.219975521 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.28651151 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.233363757 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.28845354 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.453138628 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.203861366 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.233715958 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.237864623 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.290288757 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.234186018 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.452171291 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.23799363 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.234164604 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.290663835 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.450808546 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.23071381 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.119985425 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.252256555 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.253764017 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.299542969 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.26459295 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.347323171 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.32887148 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.413422984 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.277639679 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.380513878 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.43710279 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.507415284 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.247884394 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.304482141 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.304095133 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.345842214 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.289190114 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.283404654 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.350460094 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.262333806 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.34208974 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.374936182 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.319763527 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.369130232 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.385616991 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.267061864 seconds)
  done (took 80.596470458 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.189248761 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.191420139 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.250572583 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.168737893 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.170143261 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.257572698 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.164166581 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.183974103 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.182655217 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.187462387 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177021062 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.241797173 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.524828701 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.166863359 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.25007585 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.5623194 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.263600666 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.274513758 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.219317506 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.347091576 seconds)
  done (took 28.129944682 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.18278704 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.182361068 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.220660923 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.368213835 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.196728073 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.318309204 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.172647695 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.224587337 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.209599371 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.199463967 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.173158694 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.190249609 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.226442901 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.380052716 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.19757995 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.312857579 seconds)
  done (took 20.922028208 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.16065033 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.178156986 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.114321092 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.111831683 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.150848319 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.119884083 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.111987951 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.145009377 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.158347083 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.617497116 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.182144401 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.220168831 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.198802237 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.167095019 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.174566564 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.151006908 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.142603873 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.159993094 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.211873166 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.275435669 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.912696742 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.266409117 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.18583437 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.186930016 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.186027307 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.681120512 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.113598119 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.113247093 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.108072603 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.107258726 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.108849201 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.583847273 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.112548481 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.107001677 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.107499611 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.111295568 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.107630213 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.107486176 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.108155341 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.14310083 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.134904949 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.113321635 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.115502454 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.112174961 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.117513038 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.117268615 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.133085711 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.622964896 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.178630955 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.177536967 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.143476743 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.136999231 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.157775484 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.615165581 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.110284371 seconds)
  done (took 67.344570891 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.148143261 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.167482456 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.111265412 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.107364032 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.161914344 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.158163326 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.18661916 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.148897523 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.150319756 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.112321485 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.170964183 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.123041288 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.150547567 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.159361768 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.176439324 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.153050754 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.108505443 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.184580113 seconds)
  done (took 21.772953601 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.107995506 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.108482397 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.107072713 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.109969127 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.108089275 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.117699258 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.13665157 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.164492265 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.168242217 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.162702026 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.163187179 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.168105977 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.164098655 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.165643719 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.164422941 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.168979152 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.16711118 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.164056805 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.157557994 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.173369591 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.170507142 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.162435961 seconds)
  done (took 26.379068336 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.20157836 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.20711098 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.16992881 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.17382281 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.156837686 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.137914293 seconds)
  done (took 8.198328053 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.217116673 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.177837464 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.158692412 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.195880699 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.221929427 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.246726432 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.231736263 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.238477165 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.233774818 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.457002083 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255698992 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.221864502 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.230779143 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.286982406 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.219823455 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.223081644 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.254252186 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227653478 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197076371 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.227476104 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.230996964 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.236195568 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.24349613 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.189392778 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.220035051 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.237137931 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180217853 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.45812441 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201845563 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176672235 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.167187652 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.205084752 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.212521693 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.432483247 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.229436033 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.221713066 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.202948025 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.202584766 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.201102685 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.230934056 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.186803637 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.218583882 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227489751 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.250587139 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.201392093 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.195800563 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.237028382 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.221022228 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.202956515 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.412718259 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.19910106 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.250513249 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.193265262 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.220631334 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.218123645 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.436870416 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.447720385 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.274458025 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213860084 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.464148386 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.293881838 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.210604075 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.273643973 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.448871909 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.217298496 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.274872974 seconds)
  done (took 83.544373445 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.286244689 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.203460743 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.240447973 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.462297101 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.288026542 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.242600386 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.244993284 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231484289 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.230578893 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211716556 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.242122365 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.239749008 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.277846655 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.282204715 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240334311 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228916274 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.240605591 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.282037091 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.210111871 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.439080731 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.235800413 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.276693636 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.278752438 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.284660741 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.446214813 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.231687483 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.242341657 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.241293175 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.237372771 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240102159 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.241415126 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.243346047 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.280973419 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.200373644 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.279593135 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240290216 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.239308748 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.248643667 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240996713 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.229029161 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.282872963 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.259790206 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.252602171 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.238825025 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.413109127 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.198908509 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.213669652 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.21037323 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.237557048 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.211487226 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.44151297 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.441207327 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.451684033 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.27558823 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.237609137 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.237733626 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.235379593 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23566042 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.241221947 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.240318715 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.279654856 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.231403531 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.44551344 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.238723943 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.238993355 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.275691631 seconds)
  done (took 84.888665124 seconds)
done (took 2414.186891762 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.222144201 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.288932801 seconds)
  done (took 13.646417157 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.153531938 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.152097985 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.303557302 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.151470749 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.191125887 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.208989144 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.217907078 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.157782261 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.157935095 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.24799016 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.160156319 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.295369413 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.249046174 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.148120338 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.192795737 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.170371008 seconds)
  done (took 40.306085174 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.263796894 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.712260761 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.112642527 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.965361595 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.141824756 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.960992702 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.49457925 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.818201321 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.462853336 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.605953719 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.417528626 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.055983414 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.976059447 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.345868435 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.621795969 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.687387326 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.779104695 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.85777592 seconds)
  done (took 61.423554547 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.153174789 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.311568768 seconds)
  done (took 8.629303858 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.150441294 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.179204815 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.174843676 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.159876019 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.16162009 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.195567008 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.168152113 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.154367366 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.158154445 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.144214038 seconds)
  done (took 62.807525698 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.193722798 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.586343898 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.446330393 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.583031053 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.761951723 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.592724355 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.303457031 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.543858856 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.200830482 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.09219532 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.45249963 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.503716157 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.952459164 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.39290923 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.744123093 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.365179676 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.874782163 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.552768775 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.432299813 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.526950031 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.316072876 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.252968549 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.556738456 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.012089059 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.114085001 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.732067625 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.269555143 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.251835461 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.214113597 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.292249559 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.562090619 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.193001164 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.485821098 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.110071257 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.231032689 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.816807794 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.858429962 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.337598882 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.689776717 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.503552373 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.527038706 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.819852438 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.187763917 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.799732403 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.326603836 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.541596113 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.224609297 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.365098139 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.226290617 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.252703486 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.707893237 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.35894945 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.29364811 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.276707901 seconds)
  done (took 155.948510641 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.149686758 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.533983903 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.302019131 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.173288632 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.538968919 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.344774078 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.935043652 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.731068975 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.172117037 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.389029195 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.323301426 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.282604556 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.151474346 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.163175998 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.156109216 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.146753439 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.341545587 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.764713666 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.158485899 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.148841769 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.320630241 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.367509579 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.23872195 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.098958299 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.269734216 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.365364677 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.512716493 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.228889254 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.515106892 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.151618425 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.591745992 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.162063921 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.144821344 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.047037441 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.555216288 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.472280501 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.582433738 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.147546788 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.898349455 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.147948449 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.851852589 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.356781491 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.461077776 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.330700461 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.419193815 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.405167695 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.768917367 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.149592363 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.922819536 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.330136912 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.37640383 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.393015604 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.43843205 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.158738095 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.729373792 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.123012666 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.130182511 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.388290576 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.286583771 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.255183237 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.121787644 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.126066506 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.114886215 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.373139709 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.127986985 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.257203369 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.110616085 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.267623627 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.274703905 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.272854762 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.305934241 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.410401661 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.398039077 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.359727272 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.144674538 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.382569799 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.568385912 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.401794931 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.146891594 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.140842504 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.548079881 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.592782453 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.319731905 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.395807977 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.461552438 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.447422198 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.706067153 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.144695477 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.382571403 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.318807778 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.505155712 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.423110137 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.514271657 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.030369305 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.1465799 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.143940481 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.499140787 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.230344568 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.092418601 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.601304126 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.385713032 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.701600245 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.272772897 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.538963709 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.20036501 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.094767653 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.660331773 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.086517649 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.317166848 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.413457698 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.097337528 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.09285062 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.256932823 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.045170886 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.086942637 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.5100259 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.514722017 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.107488112 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.261430059 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.08907412 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.347312946 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.900000437 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.326846268 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.01926795 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.37972756 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.289239773 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.378217364 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.089787568 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.361869014 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.380155581 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.49777883 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.425131427 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.089766941 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.102989579 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.411473145 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.091616036 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.091021693 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.290187152 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.028214318 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.281347293 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.091569382 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.461838284 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.268358037 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.468822856 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.090834979 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.373337763 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.346845819 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.49968483 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.098834412 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.238818926 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.08989491 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.076754546 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.257496507 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.088358539 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.098416424 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.911440599 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.095761621 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.271175869 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.324425759 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.7840326 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.50580015 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.460947837 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.0907359 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.55651462 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.303440537 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.521575209 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.631147653 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.267994183 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.820758306 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.348936552 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.088707038 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.344275566 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.392550095 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.090045498 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.093029266 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.815171714 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.223865697 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.08929539 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.266706591 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.026581617 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.535369805 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.300105417 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.09272176 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.456018886 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.091254207 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.27911248 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.586964301 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.249464553 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.089428156 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.09027451 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.089903112 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.08987152 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.308573851 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.337512004 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.653558823 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.238389882 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.39214147 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.311765974 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.413789913 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.552068582 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.102964751 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.422150383 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.103315891 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.529623577 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.100444583 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.23002421 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.364350863 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.090737528 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.309502033 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.44997769 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.174971926 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.486347987 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.09056736 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.089064944 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.660978387 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.268798232 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.523543564 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.089222395 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.179028077 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.454743851 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.221958555 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.289351969 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.14781225 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.088036085 seconds)
  done (took 729.985958237 seconds)
done (took 1073.885309333 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.087313945 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.091615152 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.095317606 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.093792496 seconds)
  done (took 25.453190835 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.066185886 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.165975795 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.277642843 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.099697203 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.456058551 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.156627651 seconds)
  done (took 11.314829408 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.086902104 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.091285607 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.095817997 seconds)
  done (took 19.359481156 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.374702929 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.473366903 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.240266371 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.190677013 seconds)
  done (took 6.372480236 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.125002308 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.128244014 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.099363105 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.125546627 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.09998963 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.098769165 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.128349586 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.121028035 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.099839839 seconds)
  done (took 11.116093677 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.575979294 seconds)
done (took 80.280650051 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.359520524 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.401310289 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.101274299 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.420979128 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.225635804 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.430434293 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.215832255 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.112126905 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.441781476 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.519488948 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.541092997 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.2017848 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.451369158 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.502383255 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.33618645 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.125734084 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.108643413 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.160655636 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.690621592 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.274831426 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.511218285 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.233214254 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.087914503 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.126452973 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.982054668 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.235600788 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.34709103 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.090292898 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.625893217 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.122332724 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.184708303 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.577420116 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.288736911 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.429046142 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.195888638 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.964258986 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.522440102 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.101206365 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.400201601 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.612238773 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.39103629 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.222036614 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.087762951 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.266572819 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.493944805 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.117916263 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.076648939 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.259373592 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.513748223 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.26270071 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.620248424 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.102904162 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.720182869 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.177929954 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.225422305 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.089491368 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.034951418 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.551744729 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.253489044 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.409311752 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.108970477 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.087712991 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.111595459 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.129447288 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.420033217 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.379076628 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.541800162 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.230872747 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.623829076 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.126251558 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.113486423 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.123560151 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.840349296 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.243969727 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.087931836 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.253998849 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.42513076 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.263584383 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.09703145 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.443221803 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.327875574 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.091156221 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.237896076 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.449618664 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.26436284 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.494921916 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.53413386 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.447615771 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.472901572 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.104290447 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 9.330931319 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.206190876 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.59078833 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.117997647 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.104121769 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.429663061 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.703509624 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.593747769 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.23477222 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.608493532 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.128162341 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.109550884 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.434416333 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.402508474 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.865221278 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.13301486 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.251762924 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.08821311 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.400637603 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.087899207 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.623123792 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.641338761 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.100270503 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.161583163 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.613474048 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.102119519 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.444551477 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.537406121 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.162418218 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.094822843 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.39930607 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.103829301 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.219691237 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.658678763 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.483445629 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.312316257 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.092307766 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.737583536 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.102354328 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.293987223 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.104442524 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.672707697 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.582091969 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.131809809 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.380778311 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.223480583 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.087350139 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.465016111 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.150684973 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.322845832 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.431684967 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.424218242 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.254511475 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.088399897 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.42516954 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.101170967 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.341511788 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.43398637 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.263537766 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.388530433 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.226057871 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.11499087 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.090354486 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.484255547 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.73129476 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.64530278 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.322716106 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.231370587 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.597886989 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.450580527 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.909063689 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.192661342 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.149471035 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.102025196 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.117774734 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.161626676 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.089733435 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.099095327 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.401222249 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.278655365 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.595246936 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.849258509 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.105846892 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.4246371 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.252015026 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.969216604 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.681437378 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.104243845 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.406842045 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.591336045 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.264596787 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.127758458 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.091426194 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.152239304 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.802843899 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.135154703 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.375499201 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.582941297 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.3874319 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.452117631 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.342271567 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.137276846 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.418008044 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.357809864 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.416271485 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.31363489 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.481965597 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.240306231 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.395434691 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.151649656 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.421528464 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.101149203 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.571432193 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.341845585 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.595358734 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.45398718 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.331923006 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.266782351 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.410911989 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.10170785 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.473870861 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.201968055 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.486530709 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.122933124 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.458780673 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.200748265 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.094835652 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.014550727 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.217591265 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.389819212 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.250354968 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.226012126 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.62787692 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.112549253 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.402278859 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.261848244 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.325142527 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.347036786 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.131259207 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.227779967 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.294116113 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.232869016 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.307267921 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.942933031 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.496477732 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.803007851 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.228239863 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.089052633 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.12666072 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.125822375 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.11026502 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.374545472 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.262919775 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.404265648 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.225872917 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.268868695 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.168887311 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.132662503 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.594889614 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.931930858 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.684718002 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.074469485 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.131291834 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.088779929 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.52710281 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.506315894 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.165874303 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.235045428 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.674914974 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.135727388 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.259118046 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.104510773 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.102382103 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.837494189 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.232909874 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.345683134 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.582142111 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.103263911 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.73872323 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.129622635 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.518881758 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.612287947 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.151533384 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.220943673 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.529325574 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.12065225 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.481630378 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.123251581 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.271127448 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.453370439 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.219890357 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.209836612 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.091425649 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.136289134 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.517309298 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.326044491 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.572850824 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.131838603 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.438067321 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.102206301 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.733835328 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.121191364 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.226792331 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.439379485 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.256460277 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.437811349 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.104717535 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.257850825 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.3508868 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.121287003 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.147598121 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.237835554 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.883934401 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.677136809 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.385325859 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.310039813 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.051504396 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.341945193 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.099577284 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.485997385 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.241463941 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.207166495 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.708751442 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.573409178 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.101570562 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.280183665 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.090832416 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.456098739 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.127652504 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.116157496 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.235294279 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.184867006 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.088280054 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.464731929 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.293371207 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.575785799 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.186282214 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.964851229 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.105544163 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.659023138 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.218574318 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.377830653 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.102405458 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.117781151 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.23848983 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.755068632 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.31104232 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.133026723 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.36176892 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.103328143 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.697920347 seconds)
  done (took 863.226551604 seconds)
done (took 864.488775083 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.289194826 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.504236799 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.36331355 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.018643397 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.908408851 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.789105846 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.36447464 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.330834771 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.18118265 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.393828808 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.095492962 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.934999325 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.215439269 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.23830265 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.206214915 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.213351035 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.290282969 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.375285038 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.252270232 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.080775147 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.624227266 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.04188018 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.515398423 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.395339998 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.478604093 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.195621275 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.300692038 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.487879205 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.487226636 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.28483404 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.301478949 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.37213356 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.931570974 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.338447031 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.186698468 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.180812096 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.913377813 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.190695495 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.293973128 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.208493067 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.524423073 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.232274158 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.815739905 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.960430083 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.94911119 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.559658357 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.983160026 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.248122664 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.251156271 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.348966222 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.306697059 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.297094732 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.490877602 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.310606175 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.995941095 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.996192747 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.516864443 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.118038924 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.038284981 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.508490328 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.712360685 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.405017876 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.506639181 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.527236636 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.418786623 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.591087037 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.710304645 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.493335252 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.384772257 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.362270043 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.343226329 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.323456588 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.214994917 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.253735429 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.218867097 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.364353263 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.12181058 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.50324389 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.04918294 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.370787216 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.199277384 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.177714828 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.224913928 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.332848718 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.445206664 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.032124279 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.089365923 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.194313304 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.373763265 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.537754776 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.192124032 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.495243599 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.664864887 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.50705552 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.371047052 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.41581065 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.997196266 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.326820315 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.07125177 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.373024594 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.878853179 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.302259899 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.128948666 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.177472891 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.200523564 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.293923721 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.302279334 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.514562122 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.323281285 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.28047503 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.472628062 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.217422403 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.322332301 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.213575233 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.173634275 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.885571177 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.383587772 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.950131843 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.287929625 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.770356894 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.356555818 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.17621047 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.473230286 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.393498079 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.288584624 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.191423607 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.20149165 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.040183922 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.200991819 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.205405089 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.279660293 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.551037937 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.303105243 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.97855371 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.323056406 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.885240571 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.33667629 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.323667782 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.17459677 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.018918135 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.192041512 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.051815804 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.395425277 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.475492596 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.358038428 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.416151918 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.216763707 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.395769913 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.289240047 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.215324399 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.322932717 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.220217274 seconds)
done (took 249.573926362 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.447082962 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.294634905 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.363452855 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.380836359 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.476438776 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.456313882 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.167109451 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.569526076 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.210384435 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.512457028 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.357848408 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.994359296 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.208127723 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.314811497 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.448374916 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.349126145 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.221677197 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.377671443 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.563979985 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.468238877 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.895756294 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.347286184 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.25429726 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.520439733 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.088668392 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.855826655 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.452366007 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.227419549 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.363579668 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.84696348 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.878837195 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.363936104 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.453869744 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.858490253 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.525639704 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.807014356 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.475565211 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.908251078 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.444676712 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.431310633 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.362553259 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.96415582 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.842876861 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.909766343 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.255430797 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.458040059 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.166564726 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.976709823 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.089917496 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.812655966 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.358230211 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.898485578 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.978001511 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.424790584 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.307179524 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.761497679 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.575156982 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.589768537 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.456481296 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.400373637 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.445986403 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.520247393 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.512668131 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.291742794 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.855861187 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.411427612 seconds)
  done (took 146.89933451 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.531271669 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.389713233 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.499793001 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.491873556 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.671367343 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.518765185 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.597726962 seconds)
  done (took 13.78852017 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.158302935 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.142653613 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.345679245 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.347760237 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.151778615 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.276113087 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.234754637 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.870795675 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.368467821 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.189205288 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.475934918 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.342342342 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.788186845 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.872928684 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.234821592 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.385796369 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.117006251 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.214678202 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.206503026 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.404942246 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.877888563 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.868423613 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.337371141 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.234708575 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.156247281 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.188178502 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.143127732 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.117320587 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.187660647 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.133457335 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.15623151 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.258583193 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.146827339 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.857022962 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.170444513 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.480803047 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.152456147 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.195327584 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.286363353 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.094228906 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.127125417 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.151349988 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.292066546 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.158789018 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.130226665 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.336181833 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.133007945 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.155586063 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.127300402 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.143184977 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.336092626 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.145054325 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.169778203 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.78742455 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.360854411 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.852131202 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.213519822 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.1424951 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.139797288 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.203352852 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.145308392 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.406599744 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.390203908 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.1270495 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.364799843 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.429931797 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.144197752 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.127266958 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.126957078 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.391007236 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.138630338 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.39111426 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.14913043 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.197391036 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.194933858 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.281221739 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.335717435 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.935118614 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.907886607 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.802385122 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.115671511 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.133977063 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.445124806 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.080198825 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.790299972 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.133434042 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.194976194 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.797400345 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.054660809 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.144367576 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.45628587 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.130464173 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.204640964 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.196396877 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.174598416 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.206467129 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.369287803 seconds)
  done (took 151.166852688 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.432133011 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.749115038 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.364633088 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.362634907 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.515228543 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.59361622 seconds)
  done (took 16.105198903 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.556445471 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.94225408 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.165428463 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.160174851 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.201143911 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.141524693 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.14083941 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.353018966 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.282892641 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.152155922 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.140430653 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.163006706 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.144391566 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.28056536 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.140739752 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.155394447 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.14408944 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.169890367 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.153375134 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.232042227 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.459246111 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.224209247 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.248059695 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.084679034 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.215091705 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.158479249 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.106342001 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.15185796 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.148708411 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.474223335 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.350813386 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.179724189 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.034529896 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.585377316 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.914524587 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.079816657 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.30652028 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.20705029 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.232979297 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.142231591 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.166532465 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.212962977 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.166855881 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.165032271 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.627432713 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.979384952 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.210328406 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.404225379 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.141940577 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.165352769 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.163801303 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.215018538 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.208254139 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.207520807 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.684679441 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.746944134 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.160486149 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.16290958 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.20307463 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.077029581 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.22228191 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.18698863 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.651649529 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.083040562 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.866122031 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.326836311 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.243834697 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.435277684 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.301753212 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.2147632 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.168862567 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.163466793 seconds)
  done (took 119.247658846 seconds)
done (took 448.296849092 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.106034556 seconds)
  done (took 7.194267278 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.175992212 seconds)
  done (took 7.411795998 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.089239616 seconds)
  done (took 7.189336691 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.093040126 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.147921265 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.118612501 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.121997521 seconds)
  done (took 25.611216132 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.305140447 seconds)
  done (took 7.396361661 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.111052486 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.203947303 seconds)
  done (took 13.547802915 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.406932929 seconds)
  done (took 7.615455768 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.421401481 seconds)
  done (took 7.557079362 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.105662916 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.109431413 seconds)
  done (took 13.342088043 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.089090322 seconds)
  done (took 7.17806713 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.539613334 seconds)
  done (took 8.729739429 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.09267451 seconds)
  done (took 7.225201144 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.154013424 seconds)
  done (took 7.287275063 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.18693065 seconds)
  done (took 7.285247591 seconds)
done (took 135.661187473 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.089308835 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.096719135 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.094155082 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.095618636 seconds)
  done (took 25.463723747 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.425850953 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.426306464 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.403060479 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.575817795 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.369123865 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.369531326 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.425437616 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.425604474 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.369721023 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.470771047 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.425301451 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.469447554 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.576613433 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.403251595 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.403221514 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.471622631 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.476445069 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.425382712 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.370267589 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.402404775 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.468782653 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.47665762 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.84407957 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.836717342 seconds)
  done (took 36.405221081 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.31308424 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.546594592 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.255899513 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.419131697 seconds)
  done (took 6.624690541 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.134541792 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.475856104 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.458284863 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.517867617 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.476120126 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.292593294 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.460563521 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.311536655 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.2504167 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.281336673 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.726428143 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.252411708 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.265520974 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.517599589 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.272363411 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.101840609 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.101753857 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.281303737 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.476204988 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.301583448 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.37302954 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.459356922 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.477163361 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.476306821 seconds)
  done (took 33.830752115 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.86854125 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.031870891 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.45997433 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.016764318 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.801098353 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.897644641 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.381588736 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.600448166 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.369125529 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.351308418 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.825461204 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.874023404 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.245333175 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.997888569 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.860015117 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.278919207 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.279547959 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.952495595 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.712669079 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.401578815 seconds)
  done (took 38.312601901 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.089499385 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.348251355 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.338005219 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.267356213 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.090699295 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.094074505 seconds)
  done (took 26.316657864 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.149044002 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.250761406 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.414799189 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.376773963 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.263662116 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.239953954 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.763774606 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.32308951 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.872054318 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.907405506 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.748885094 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.565214865 seconds)
  done (took 21.968423282 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.090649185 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.136365383 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.097515598 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.267951856 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.920787482 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.966336357 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.419110586 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.09120482 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.172001691 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.295228164 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.956889024 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.265137959 seconds)
  done (took 39.788554547 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.311696491 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.287919506 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.446103034 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.91725778 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.632759435 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.191265464 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.516724461 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.608180087 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.865959904 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.21998418 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.631570996 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.155395322 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.624759215 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.067011909 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.091713872 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.422973603 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.91688649 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.589131079 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.544926932 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.175627932 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051206302 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.248436218 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.098647199 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.636632271 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.427669533 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092044857 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.296212145 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339978387 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.090413238 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.334442396 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.114705406 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.570457747 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.300639731 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.399657406 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.629935298 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.180928324 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.210452789 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.231057749 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.69019595 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.388087696 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.246595224 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.257052454 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.621824592 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.319497075 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.353512 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.874873904 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.105564096 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.744128587 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075450896 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.245688787 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.99139108 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.973092618 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.420134323 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.867581625 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.235865955 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.423295444 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.251807747 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.250405285 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.396350254 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.154676624 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.292092346 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.212050098 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311325219 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066333728 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.591879609 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.442589517 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.421269125 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422068192 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.35133436 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.393213293 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.482801631 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.243399024 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.917141475 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.230765506 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.630187372 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.003815549 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.449580551 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.093031156 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.82750049 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.626253515 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.073957424 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.206311929 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.744442541 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053726604 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.090521137 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264706905 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.96379163 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.063035711 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.186902134 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.167335928 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.490030357 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.231074186 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.249120072 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.399753484 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.793383091 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073530603 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.878954598 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.392648508 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.06345811 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.65584709 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.126467636 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071916997 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.104871041 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.655394149 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.50923219 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.147491172 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.867076123 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.792707427 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.406392943 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.732829238 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252202994 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.091220348 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.472154625 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423433366 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.090828511 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.784110306 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.230473631 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.228122289 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.453831426 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.091281867 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065650544 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.506791478 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.301542371 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.118847946 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.321123008 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09361072 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.243154375 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.091599696 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.74323035 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.143588484 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.337740838 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.621572966 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.317041205 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.183652768 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.061980271 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.239826538 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.601127057 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.228366927 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.439265463 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.535198052 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.699914286 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.566161448 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.116127003 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.989773437 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.60772118 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.382713161 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.472292763 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.752749638 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.293425801 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.212119651 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.11059957 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.293965139 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.172976154 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.655022739 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.093817133 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.803047588 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.920705501 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.443092476 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.091314381 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.07508411 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.877744249 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.344714791 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.759180136 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.145816579 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258542142 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.396636498 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.286701809 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.091326408 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06242751 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.470778584 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.354240666 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.64059352 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.415950328 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.821301084 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.508714529 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.636454739 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.295715405 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.458589062 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.826091829 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.555018781 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.452688167 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.42728257 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.210590275 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.186619495 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.290172691 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.613543808 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.417403619 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.913007489 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.020690203 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.980980931 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.236241802 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.771714441 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.162850013 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342082486 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.675078858 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.222996537 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.752167037 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.372611327 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.386030721 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.465941035 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.221118866 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.533630065 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.043579823 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.622210372 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.563083469 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503058959 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.172131764 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.47281106 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.67753537 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.700343525 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.326042728 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.644596438 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.453320705 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.242907988 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.18698402 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.535758932 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.138204719 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.926136507 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.479898512 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.02959711 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.822685849 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.329015891 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.150230141 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.105546272 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.039989625 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269774518 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.163522575 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.268565451 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.635441559 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.363991086 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.421944515 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.09158202 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.098070506 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.381648298 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.562893439 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.499068461 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.669088921 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.75791876 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.779727313 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.204920102 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.778759281 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.274909162 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.178475043 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.797864008 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.496303789 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118187156 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.298848149 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.843503265 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.24693874 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.166774875 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.381771354 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.091370131 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.568766932 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.721559165 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.106267156 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.087312255 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.244399594 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.092387218 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.323301538 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.858964406 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.329786008 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.832124583 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.378459708 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.351643572 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.290660245 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507350355 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.628897564 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.882443344 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065292886 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.247956948 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.19419137 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.421178148 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.109687742 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.38378575 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.758575894 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.761376375 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.922245785 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.640351616 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.347296279 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.291965899 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.563948215 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.349821705 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.423982768 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.051403043 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.71365822 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.077851001 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.234083382 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.065241593 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.144873221 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.421524523 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.468940298 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.580122246 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.167487447 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.624791945 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.495028909 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.168966677 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.282117149 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.353167291 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.091291458 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.432297421 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.091187663 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.904291285 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.536175627 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.100679218 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.29635654 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295765372 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.422956389 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.256002055 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.668394638 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137528089 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241303768 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.848105808 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.271036931 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.232907889 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.432624981 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.164039973 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.136996462 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.134347709 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.633596278 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.724950751 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.572320649 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.713287499 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.719806522 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.440691178 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.868389729 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.093260929 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.294900174 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.256222008 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.503283072 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.288950852 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.496587519 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135165143 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.314964477 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.422926726 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.236628491 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.626379935 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073911794 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.69380682 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.290610277 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.610741779 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.623221899 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.875507385 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.581083946 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.932804993 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.628468349 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.080001773 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.24832526 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.521850308 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.819226219 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.580604717 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939726006 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.887324504 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.244035842 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.529190805 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.198755368 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.864758901 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.262126771 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.329031456 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.293838758 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.23446186 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.061995178 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.662397768 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.871253466 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.371270124 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.257621569 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.288132534 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.247549262 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.239476917 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.648299787 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.406387015 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.866879288 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.573512203 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.347129116 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.06642519 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.093123714 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.367027413 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.276056856 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.188372431 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.394420422 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.5300444 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.15466401 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.131468965 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.084835816 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.62550799 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.845741695 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.818806558 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.438817096 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.637625548 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.607568794 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092807295 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.866740533 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.294628752 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.457709322 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513417863 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.029791819 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.48648341 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.403664998 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.249092639 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065834505 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.291918422 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.095508534 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.066348573 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.853303715 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.40006233 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.169621527 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.938521811 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.691250645 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.043107667 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.140245247 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.333037425 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.321052304 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.291448308 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.091983854 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.688322059 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.513926038 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.248800716 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078042142 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.856478 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065187437 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.295457409 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.063131093 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.2985117 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.939545343 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.205839214 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.799991467 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.666692354 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.18977367 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.32468084 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105817808 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192581517 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.129027789 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.820733458 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.919627138 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34224163 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.61622344 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.292491777 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.099077568 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.422391404 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.228670316 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.424139607 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.388888139 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.57384054 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.518398738 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468114731 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.395687851 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.619294246 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.255271579 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.345925343 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065974103 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093663584 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.113301011 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.46619182 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469181181 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092555023 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.62997063 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.342998194 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240663059 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.279129249 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.201670012 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.653042252 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.303111678 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.24899656 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.265649228 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.336326238 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.46437525 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.092617415 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.311558031 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.092564815 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.097869278 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.297920305 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.344084978 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.474620129 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.407584613 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.694657096 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.256322901 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.622487521 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079924052 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.624095611 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094054675 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.206073161 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.468248408 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.09218119 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.5813612 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.741845933 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.289390287 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.793729616 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.172570745 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.088150132 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.296984293 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.607741537 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.094585843 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.750618365 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.500593526 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.093285615 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.574925423 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175241479 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.258620166 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.842885771 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.594318569 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.093567833 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.154629628 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.223446379 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.592629869 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.792502095 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.275599679 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.116322322 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.748182389 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.074193841 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.093808331 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.226262122 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.632666256 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.103684873 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.677363997 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.270141945 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.260085337 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099145602 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.235569996 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098035661 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.295631445 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.696606231 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34005819 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.369189128 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.291008798 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.101354153 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.693777988 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.79023346 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.195238302 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.308851007 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.059923053 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.48591522 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.018333245 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.064967503 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.673103548 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.289960111 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.301251033 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.532198272 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.354984797 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.127769202 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.312048845 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092967101 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.36462507 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.253987484 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.657405963 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.365770046 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.016236914 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.378296249 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.116818347 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.64619953 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.569196532 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.979508854 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.092526399 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.403097466 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.092670007 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.873224927 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.752865888 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.290706245 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.239085646 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.327471968 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.676774887 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.406331084 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.229505759 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.095655986 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.307718109 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.600439515 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06467769 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155898457 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.01138805 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.323044106 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.425186567 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065532674 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.292043243 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109657318 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.07603228 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.594424002 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.093039843 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.451131132 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066674987 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.629732299 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.072246868 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.201053909 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.259396799 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.416230419 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.093435005 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.813225882 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260224151 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.092515741 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.092569796 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.481809327 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.184409808 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.348426307 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.568573962 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.35321645 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.441475454 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.947303833 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.894346421 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111001249 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.405019068 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.092991069 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.655388725 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.211900755 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.622014359 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17357981 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.115319622 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.64655491 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34189951 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.829470036 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.24118587 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.589916607 seconds)
  done (took 1939.280098252 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.180405429 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.184716399 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.189153223 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.153515319 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.131828075 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.150826651 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.145318877 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.112976729 seconds)
  done (took 50.33933874 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.09263683 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.059990368 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.549958081 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.278316816 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.126142336 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.317107124 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.254158137 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.613203715 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.297842771 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.160086305 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.166053227 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.148504087 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.107659588 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.137585848 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.999528604 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.184501788 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.098330712 seconds)
  done (took 90.744124002 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.103363987 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.041906274 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.105025359 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.55809167 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.206621311 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.375086726 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.112288653 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.09207356 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.775030579 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.385271495 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.108793815 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.190274795 seconds)
  done (took 78.188372617 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.132302996 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.132550518 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.130926439 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.131386239 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.133223356 seconds)
  done (took 6.7508693 seconds)
done (took 2395.134824452 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.325306317 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.571527934 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.65507974 seconds)
  done (took 4.316455672 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.161502179 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.225574237 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.295384756 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.242418355 seconds)
  done (took 6.041712325 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.398288519 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.592409116 seconds)
  done (took 4.081210122 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.551894722 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.106972047 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.651085887 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.095148992 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.103884047 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.099586344 seconds)
  done (took 19.406388805 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.125521177 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.124586913 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.125667441 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.122608221 seconds)
  done (took 5.598284485 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.092587242 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.089617456 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.100809431 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.085898375 seconds)
  done (took 18.459397534 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.391685952 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.346143486 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.842418555 seconds)
  done (took 5.684974146 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.913909519 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.475563763 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.899237581 seconds)
  done (took 6.378917609 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.384640577 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.023405706 seconds)
  done (took 5.498586306 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.260320647 seconds)
  done (took 2.350750552 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.582167202 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.583409289 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.952038917 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.98886988 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.127475578 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.425246865 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.416175259 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.392455425 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.792886428 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.643316588 seconds)
  done (took 17.995689469 seconds)
done (took 107.539618676 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.993281406 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.496645183 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.241334949 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.789604247 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.194673298 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.242251161 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.709115467 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.563921516 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.403077497 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.402777021 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.17465586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.194302593 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.121615262 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.486118431 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.122060958 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.430651608 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.500193379 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.002361602 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.356856925 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.025495219 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.725030413 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.682795492 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.868588206 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.697914007 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.514668189 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.255022301 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.274528708 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.445336589 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.616615029 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.288883235 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.269553073 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.291983247 seconds)
  done (took 152.473757957 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.093531383 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.108408324 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.108612584 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.103788318 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.214152478 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.109738079 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.102936509 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.103552271 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.815401004 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.816779248 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.108517536 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.252107598 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.111670585 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.103311184 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.110964491 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.104361297 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.116837629 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.128318904 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.108475034 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.145806264 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.128616588 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.036579533 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.108825254 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.003858064 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.092303342 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.107845644 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.103753602 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.108145865 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.111138094 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.108189225 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.107550913 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.103529683 seconds)
  done (took 188.095314332 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.092101283 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.10682673 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.107891745 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.104339301 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.106890564 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.108205668 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.104788976 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.104265977 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.106833096 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.107874057 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.10760379 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.106854301 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.10879875 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.102985141 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.107117765 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.103416535 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.106908761 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.107040608 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.107437273 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.170547926 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.147804602 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.10497222 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.143615517 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.297159992 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.29785458 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.299258961 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.256193123 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.250039721 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.258365535 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.25847767 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.261573345 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.265797068 seconds)
  done (took 198.127331609 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.431320683 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.144985972 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.026457574 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.876685169 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.040079785 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.125406133 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.875181656 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.4035769 seconds)
  done (took 16.055905926 seconds)
done (took 555.860268149 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.829025311 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.048033959 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.280520165 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.35922465 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.735542219 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.40526825 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.35555953 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.592191525 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.846481465 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.564573074 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.597213022 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.327400234 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.936065616 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.371535338 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.2902182 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.593069924 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.528479342 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.823698669 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.304885856 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.98185734 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.31837444 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.94681034 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.58674013 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.89042446 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.617750848 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.996000065 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.20816719 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.548120574 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.360195328 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.313688067 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.137217331 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.469912693 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.335696963 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.332793376 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.571492607 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.565781114 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.429288141 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.542901267 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.278543238 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.754950446 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.987634399 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.71290747 seconds)
  done (took 74.767869002 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.123528029 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.151190154 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.293685858 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.200160194 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.750047357 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.203362229 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.354189267 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.340161059 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.2145935 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.336985659 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.376985493 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.795827128 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.394923967 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.770341413 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.366841876 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.384917859 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.207066208 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.728261653 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.361239445 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.349230922 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.168529579 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.291732965 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.163916243 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.322113911 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.159377158 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.173910399 seconds)
  done (took 36.104884654 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.176853754 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.285473266 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.400367028 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.492868592 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.359920152 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.151662946 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.467802385 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.292150762 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.016834651 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.361196064 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.212458831 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.229647836 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.306574288 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.429139139 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.682439058 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.293214772 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.291392795 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.2866172 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.283444284 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.327193592 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.261309257 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.212974664 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.472458057 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.276761209 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.811489267 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.46127166 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.470605831 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.730589355 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.657761711 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.270768062 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.262447624 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.452093597 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.502293899 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.403002549 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.279079609 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.152353403 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.154131328 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.21079246 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.045735824 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.299069427 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.465295024 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.312607884 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.545399094 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.691405416 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.209515897 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.38687603 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.587031579 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.22008086 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.261076121 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.930412224 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.451153857 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.073844633 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.294021255 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.332527855 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.250965153 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.572498923 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.332823244 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.406910852 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.318382099 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.724415662 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.21535884 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.522121952 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.2879258 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.207943018 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.437239582 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.34455589 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.284958466 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.527349175 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.545724708 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.595669993 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.709924844 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.213723166 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.165479114 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.208312659 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.281933594 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.623646541 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.611511964 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.381467814 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.518657859 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.455719836 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.677924342 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.586870347 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.109465722 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.81699318 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.196653384 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.141495756 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.215534911 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.440932804 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.448984337 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.629953035 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.701533949 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.427162623 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.578290215 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.555112802 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.521826817 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.548056688 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.139294871 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.153890674 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.420054651 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.724961531 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.24985203 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.417214321 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.863070415 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.569711312 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.486670139 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.418865735 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.572762905 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.225580188 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.571332216 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.164217409 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.387596277 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.391689855 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.398170755 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.495067338 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.128158855 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.667972471 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.232929908 seconds)
  done (took 227.612878047 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.093948356 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.108544027 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.094376224 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.135815663 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.10317914 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.721623709 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.175206735 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.095334693 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.722662912 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.174898732 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.094968237 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.096852107 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.095376742 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.099885606 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.699491382 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.712670804 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.778897357 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.141129054 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.108053667 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.128683064 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.839182839 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.130671903 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.205642944 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.10555423 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.096672164 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.095388331 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.096144318 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.149292452 seconds)
  done (took 152.197545632 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.153149001 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.561430245 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.186357888 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.247262553 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.197636008 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.169260647 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.676075829 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.291656499 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.229032157 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.166277763 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.158175497 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.380018695 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.407597085 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.768842215 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.320047043 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.293383284 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.871942867 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.467630455 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.376890651 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.372567739 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.5288333 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.722583131 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.665985004 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.644382438 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.44626665 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.648362527 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.441263953 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.304308183 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.47413916 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.861142192 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.320397032 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.702145092 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.482758689 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.352812783 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.826442121 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.685536018 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.82411682 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.795211561 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.436761172 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.195918014 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.206113718 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.455957797 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.529883794 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.212800626 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.161940477 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.825068296 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.178054228 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.572776866 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.201629826 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.120799372 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.254180755 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.265235363 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.437857889 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.142211853 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.331353885 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.309376963 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.674899618 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.143082307 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.230088924 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.509921231 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.139464905 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.653960213 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.646356649 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.220826945 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.166944424 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.312181824 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.248821357 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.696948397 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.787123787 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.209939767 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.497476002 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.347716363 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.137261821 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.425688546 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.333457655 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.681047558 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.747450092 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.293693642 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.262509852 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.239352135 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.4448585 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.149591377 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.721512438 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.258418615 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.136084087 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.656338389 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.547176743 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.135997857 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.151367725 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.276818145 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.313260711 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.377666896 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.470012381 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.226957646 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.06186482 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.436616057 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.483369505 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.173755889 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.289348578 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.150658747 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.55527682 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.341618065 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.143394739 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.470627624 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.583246276 seconds)
  done (took 160.120701782 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.844520335 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.205229486 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.352538335 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.743051785 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.477572015 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.595766571 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.378160838 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.222151945 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.417247359 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.366847664 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.359703374 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.243990606 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.117702233 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.912381157 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.202593489 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.325042123 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.229685769 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.827780775 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.484082894 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.141677195 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.453225842 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.991524519 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.4603269 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.609582945 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.596033603 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.668699241 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.807319825 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.303541672 seconds)
  done (took 48.443924672 seconds)
done (took 700.340209286 seconds)
SAVING RESULT...
DONE!
