cset: moving following pidspec: 11275
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.811895107 seconds)
loading group "shootout"... done (took 1.123866697 seconds)
loading group "string"... done (took 0.664762652 seconds)
loading group "linalg"... done (took 8.562417542 seconds)
loading group "parallel"... done (took 0.164670278 seconds)
loading group "find"... done (took 3.00284314 seconds)
loading group "tuple"... done (took 2.11767896 seconds)
loading group "union"... done (took 14.74872683 seconds)
loading group "dates"... done (took 1.467194492 seconds)
loading group "micro"... done (took 0.218684255 seconds)
loading group "simd"... done (took 4.745900135 seconds)
loading group "io"... done (took 1.074870182 seconds)
loading group "random"... done (took 9.488820301 seconds)
loading group "problem"... done (took 1.505768438 seconds)
loading group "array"... done (took 25.130142375 seconds)
loading group "misc"... done (took 1.877382586 seconds)
loading group "scalar"... done (took 43.287068033 seconds)
loading group "sort"... done (took 3.314100406 seconds)
loading group "sparse"... done (took 12.665028778 seconds)
loading group "collection"... done (took 17.574985543 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.443581025 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119449675 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.133805822 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118899295 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187590961 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.127273733 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.135096175 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087715207 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.958611721 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.145230005 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117874401 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43722876 seconds)
done (took 5.622239972 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169451425 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.091574674 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084570845 seconds)
  done (took 1.553154979 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072399362 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061292509 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068782173 seconds)
  done (took 1.578808474 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066044291 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138857438 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067075331 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067961923 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067333895 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067148642 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066972922 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066687698 seconds)
  done (took 1.922304411 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072491155 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067851254 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066035674 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068087762 seconds)
  done (took 1.654036529 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065426093 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123151489 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065233204 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064967703 seconds)
  done (took 1.694728431 seconds)
done (took 10.035409167 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.141203527 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.7986365 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.779616451 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123052546 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.247792167 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367714988 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123726172 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183808198 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088402122 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074965951 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122207751 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077469196 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.392079246 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.499734094 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070271261 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169025175 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.643971514 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085739411 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131332543 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.446136116 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072766292 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.086348346 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083765303 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070221517 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.317278894 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.150714335 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.657346872 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09187905 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066997031 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093326984 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069103266 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076827462 seconds)
  done (took 10.816743123 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091594735 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088671452 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067310725 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122592372 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092478197 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068828305 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07409422 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066294039 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.0871 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122562985 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088458743 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097347972 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065027625 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067796583 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.072113127 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.195333403 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079121166 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082572985 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066221136 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080068795 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104169417 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076697697 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076960753 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076313039 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128612759 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167798729 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095117802 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096830038 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064366868 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077495198 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114066105 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123599395 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065462173 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063718771 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118545657 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09349028 seconds)
  done (took 4.748261506 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.881069216 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095157732 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081778001 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073175476 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105040398 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112181052 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119278043 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120895753 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097624354 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06748391 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.112560417 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.15068907 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.668818847 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.157137548 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070358669 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118614212 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.355449785 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067210478 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.060204351 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068863189 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066891453 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06941841 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067944115 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.11101245 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065112167 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173950496 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.577100517 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069174032 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067853842 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094951815 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064220849 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139125743 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091819464 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069136511 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.542299246 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064353538 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062898356 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.198419486 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093026741 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065712856 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066711527 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077282133 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064644734 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10690444 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077807466 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.509748728 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068239392 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.57869706 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224351743 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071167806 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.069760926 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100264933 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063119748 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066113513 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.953114123 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.144799531 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065666973 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.270028245 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066448441 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06652112 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067613032 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.097421711 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065531733 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06719996 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071204827 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094769924 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.870080626 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086978489 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094974815 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065576143 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.396972666 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073097498 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067597692 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067925159 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067223669 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104652715 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064831059 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064723941 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108611108 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093168237 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087407644 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068614481 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065543831 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064457766 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.333733756 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062780035 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.160256091 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065088692 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065605889 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.476442315 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063110878 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064658549 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069251653 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.20656675 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065877763 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062953282 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064068309 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098501071 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066261879 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.330979568 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065296402 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.471269997 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.067475438 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100892301 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118245148 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065818186 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098618129 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066128795 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063561739 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072026142 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064560693 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063236755 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067641604 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064198064 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064933721 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062885523 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067726371 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066706065 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065781717 seconds)
  done (took 22.812580533 seconds)
done (took 40.640425623 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312355891 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076789737 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077673007 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.077058333 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.077034036 seconds)
  done (took 2.048547993 seconds)
done (took 3.568977791 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.249479273 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.073502196 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06286823 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.198895695 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089088638 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.173605842 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.211166204 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.15760858 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.086388546 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.086132093 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.08594207 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.214570415 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.22276088 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.086500769 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.156944906 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.222521844 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086657055 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062694601 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.086116185 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.086850541 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.086067745 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.062678592 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.086081276 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086285422 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.155248232 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.086115601 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062458838 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.156189775 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.085986697 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.156989017 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.085978244 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.085545619 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.08591145 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156664273 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085972324 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.155315465 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.062346204 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.204902949 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085693509 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.085943295 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.085745482 seconds)
  done (took 6.37872252 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072737664 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08394717 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082096347 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060231109 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069758635 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080546179 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060464284 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080262838 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086614772 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080928944 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080766612 seconds)
  done (took 2.341158909 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068835681 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081573994 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082721128 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060293885 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.0716084 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081826696 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060317224 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081937291 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084206303 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081818501 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082314202 seconds)
  done (took 2.297247683 seconds)
done (took 12.465576728 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095314456 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.063901959 seconds)
  done (took 1.603043104 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.220700822 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.490385829 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.879871476 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090403095 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069984345 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08314266 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.193655999 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065910302 seconds)
  done (took 7.728224671 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.101560081 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066804579 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066017509 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065837968 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066456086 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067952843 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068505226 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06629414 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066982599 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06730035 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065833364 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066899495 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065958714 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067730341 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066309857 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065674834 seconds)
  done (took 2.656819302 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101863585 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067736418 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097891923 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060798933 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069953633 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060516212 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069183394 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071041298 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068286976 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.069237488 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070574429 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.069662354 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069790068 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069823714 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071536641 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071223761 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071035833 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069146393 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071197611 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071698703 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070577816 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071185345 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071934472 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.069556952 seconds)
  done (took 3.302777575 seconds)
done (took 16.751060085 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172218388 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07306307 seconds)
  done (took 1.700214945 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066145303 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066207166 seconds)
  done (took 1.603536206 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070804307 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059161358 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076369729 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068437915 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059484518 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059670458 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074829105 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059965161 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059467862 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059955131 seconds)
  done (took 2.117096735 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061139353 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066415705 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064593721 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062789751 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065296773 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060648578 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063297299 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06062844 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06697596 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059783007 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06388779 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081006888 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063824083 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081393798 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063280668 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.064044958 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066112488 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063502411 seconds)
  done (took 2.651729169 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059449241 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059917156 seconds)
  done (took 1.597519974 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062674244 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059939945 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062675394 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062141234 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.05968779 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059908057 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060379179 seconds)
  done (took 1.900076758 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.418269701 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121890375 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341127346 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067224405 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074554997 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253901263 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062404535 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066981167 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066711799 seconds)
  done (took 2.989401123 seconds)
done (took 16.044824343 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08068528 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178646335 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.085939539 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.37613024 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.089717965 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065570399 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11123393 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17327763 seconds)
done (took 2.65764523 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276715048 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.127062023 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.307972372 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.147021313 seconds)
  done (took 3.064135598 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.3291526 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077428176 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075468572 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06461191 seconds)
  done (took 2.036611528 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063256105 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069490885 seconds)
  done (took 1.619550951 seconds)
done (took 8.493045423 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069628793 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059876684 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.065365824 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061909226 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.090183787 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061896442 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061477429 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062213994 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059775566 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061085839 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062077786 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.06193909 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062323949 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061659242 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061873393 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062514141 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06159499 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061873137 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061958191 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059922957 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062080696 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061296217 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061587279 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061269604 seconds)
  done (took 3.031381451 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077532272 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063960451 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064495196 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065111782 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065156996 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064748347 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064763771 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06380624 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064824438 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063695893 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065218857 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065138982 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063492292 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065278565 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063851394 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065788174 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064919621 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063813715 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063755513 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065374419 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064868995 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063887259 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065297246 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064835111 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065358759 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065135135 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063541213 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064192503 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06503764 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065454126 seconds)
  done (took 3.45691737 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064317472 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058099615 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059013905 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067832066 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058413185 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058424336 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059072328 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058121394 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058529324 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059837719 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059467886 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058343162 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059124512 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058282331 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058619358 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059561736 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06370449 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077818922 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058759854 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058561108 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063116409 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058830538 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058733179 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058324251 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058978785 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058296005 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.05792505 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058579868 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058528673 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059004004 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058295681 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062644977 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063328051 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058461977 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068621271 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063414268 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058184262 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065050027 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059479751 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058253657 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058173105 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058361349 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058701619 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058245143 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068637204 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058914029 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059411323 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.0591345 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058851966 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058392127 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058506688 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060348804 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067428009 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059912913 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058563793 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059474578 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058243514 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059092299 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059100454 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058337556 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058306376 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062277837 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059832613 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059233635 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078354592 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059947373 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068606446 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058415024 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058825826 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062217261 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058793274 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076571187 seconds)
  done (took 5.875044047 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069805311 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070188807 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077080881 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068369151 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062472101 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059456995 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063129418 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059368505 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06862152 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063144522 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059582106 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063026528 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069037604 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063175232 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060543279 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068855168 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063490469 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062201426 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059048781 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063182476 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060596091 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063426947 seconds)
  done (took 2.931817627 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136226202 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064573444 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103283277 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068427721 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067113989 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068785449 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065140007 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064741219 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065124314 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065844383 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06564104 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064768938 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067141601 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065187753 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065215584 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065043677 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064743512 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064940337 seconds)
  done (took 2.796894261 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074763276 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063918969 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087538223 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064088023 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064394253 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063953375 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067320676 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067960248 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064127934 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06413673 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067931215 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063984518 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063967294 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064397517 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064486927 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064405775 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063852737 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064617043 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068124802 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067971069 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067358686 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069200798 seconds)
  done (took 2.980173248 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076739893 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062752984 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078161803 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064764825 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05882726 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058705063 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064557918 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063905626 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064777801 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063090155 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06352476 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058995311 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065439038 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063646151 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065645555 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063823746 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063591011 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064265988 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063028279 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058939226 seconds)
  done (took 2.793125195 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069789176 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061024736 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061304903 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066213677 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061506587 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06205308 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066427579 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06146001 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061350783 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083742941 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061761803 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072450767 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06711505 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06484346 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061883838 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066594291 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066540557 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066563203 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061658179 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062267474 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083133257 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061715224 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066518511 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061791589 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061913027 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061613633 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061564342 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064668734 seconds)
  done (took 3.336381495 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062652121 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061361532 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061770739 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062119733 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061963986 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061929619 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062200037 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061988436 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061502815 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062117986 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061787336 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061481283 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06435416 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061635547 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061747096 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061535549 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061409864 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062088695 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062293321 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062438251 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061528336 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061612881 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061791212 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062158738 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062408499 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061955111 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062075936 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061902077 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061541924 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062078195 seconds)
  done (took 3.373480768 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071138219 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069676421 seconds)
  done (took 1.653950866 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060106645 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075334241 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057795443 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070600234 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066544123 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062219694 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067387576 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066739035 seconds)
  done (took 2.035400578 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.065570157 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088274724 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060290834 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060813458 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.063510094 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125353213 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072703533 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072341593 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074109911 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063045836 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060787426 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072634661 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060014712 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073531936 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061540946 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069468773 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067766965 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078204494 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073308022 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059172624 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073383747 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06113453 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05887289 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06091912 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060252551 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067209011 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075700047 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072755242 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068857453 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058148866 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078858222 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058865089 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059936503 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068807754 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062905181 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.058832763 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096024292 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05940235 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064117861 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.0584695 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071338515 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080024885 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073320022 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077190894 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06088148 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061608 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059352938 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061688603 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06355809 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069113997 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059326658 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06719923 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058831895 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060658478 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070161181 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059719606 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064004014 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068817238 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072922691 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07032328 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.06897447 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075761224 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069637645 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066978547 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06072325 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079796531 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061246907 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073282381 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074970864 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061011253 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072955487 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059578375 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058300362 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059094235 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092781081 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060723668 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060496127 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059134475 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.058735793 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060245773 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06843783 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064124599 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066688824 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062257173 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075501071 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068474897 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059237673 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065219601 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076740087 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062349865 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059383929 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.076095404 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.062468874 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058474346 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076777095 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069048422 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06042051 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059939859 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062587823 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072805622 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060241324 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057892714 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067665248 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060511751 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061216018 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063354478 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066901312 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058597641 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069417798 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063544753 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060260441 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057570578 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063654466 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060110493 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057758922 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068538166 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058907147 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073236983 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06546757 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073379458 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073961086 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069816622 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075248036 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058743886 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057874784 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076872353 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068571841 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060128759 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07681586 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05833615 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072225343 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058311158 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059968826 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.202186391 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058291757 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060815199 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058751289 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063622684 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060190505 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060569915 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064832907 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067946838 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071374126 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059971218 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068108533 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059047611 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074519118 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.06911557 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06365929 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06221308 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059622182 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.070745043 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065228003 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068560176 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.05845259 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.059535221 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059130468 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070297211 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068770984 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060739619 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066213886 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063531306 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059447613 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059325231 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060370891 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063068498 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062144671 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059539439 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067140879 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.067939637 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073062049 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065748871 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068455798 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058295313 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058510897 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060743718 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058605824 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063472459 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068613296 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074520486 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070277759 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.079761749 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.058568412 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.068743725 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06048762 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076158814 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.071979992 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.059775171 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063360761 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.057662736 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060369955 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068256121 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070390969 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072521196 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073991525 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063647272 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06329002 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.058232858 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.073852914 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.059274923 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067419051 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068148144 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063030251 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.058868069 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060292251 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068704524 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063360778 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.058800591 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07477378 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.064631038 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058139364 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073076609 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059166257 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069709317 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058488055 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.062554614 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064008692 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060490337 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068500448 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074352447 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057588414 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059797905 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074380183 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060987466 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06027651 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067096211 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074296119 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063523571 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067366769 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069875677 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069423432 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063544655 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068737123 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059965166 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06865703 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061928165 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070527016 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059133956 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076690373 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057847375 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074155117 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058719878 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070214289 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059423812 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068599061 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059721349 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075721903 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060347782 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059701608 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070849654 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05789354 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06862665 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058764547 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064018394 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065432502 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068564946 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060454708 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068552575 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060587737 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067833782 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063599899 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067255796 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068223853 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063473428 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058735296 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067746812 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070214127 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067436081 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060254737 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060275755 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.05947097 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.206363424 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060344654 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060551226 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067609998 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.063673557 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065112795 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060650058 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.060788513 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060382581 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067771868 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068748097 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077297691 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067745129 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.066763306 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068621839 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.05839696 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07436174 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059084739 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069426626 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.057601028 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064908221 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068193551 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059011326 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078037176 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060568368 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067104302 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071088698 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068414587 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.062559555 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076882082 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062007318 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.067592948 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067266239 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063710041 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065977116 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.060784832 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067744242 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069030684 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.06960545 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060002926 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066468785 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068684544 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060672536 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.065961866 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060672637 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067715384 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.060858381 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.057856409 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063327992 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070446742 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063509589 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064048392 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.059134623 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.057853753 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059141815 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065565788 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063726151 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.067680714 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074453813 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.057787022 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060012394 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058688795 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062753064 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077466555 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068743413 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067027994 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06377179 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058219608 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060850058 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060689874 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059826018 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062291135 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05779105 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058221167 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069541612 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060628081 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063350803 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059642074 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059965702 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068640163 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063881251 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060144454 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065663845 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058608597 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064168374 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058424878 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060333015 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06338722 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058299547 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06286225 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.06957505 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075550772 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065544131 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067837412 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059861337 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066671848 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074185845 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065632751 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059911144 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068120906 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058072294 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077677103 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068612306 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067671229 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068942003 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060079602 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075947205 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063388907 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068902071 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074452272 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060053092 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065232526 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058222633 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074436771 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063827025 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05853178 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066972949 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067073052 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064946569 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07131943 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.05988248 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066920057 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064233815 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062563824 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060602566 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060772455 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067785609 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075083826 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059971133 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063169627 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067102014 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067928194 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063685158 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07138127 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067352241 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060431488 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060621777 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062796374 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.202154578 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071537817 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059943347 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064031735 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063757477 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058879537 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065995611 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075771143 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069163114 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069843759 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059054729 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058681183 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077077562 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06291348 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062701795 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067643366 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.069014281 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071512927 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.06884942 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076182572 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.05990126 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065130095 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071458763 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.059943486 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.058911651 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062738113 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060370586 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.067959858 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068834787 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066457456 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060884705 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065907873 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072850718 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060525131 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063741797 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063497666 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059562576 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069588494 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067291942 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070625067 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060556858 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058748841 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062797591 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06804076 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067146892 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068404893 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059491816 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065043638 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072177182 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066518722 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062006126 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058536413 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061930698 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068160977 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063475012 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058634039 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063555005 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06265899 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065607582 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068788531 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063490172 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058666798 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075620519 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06704895 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068032384 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060617662 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061006928 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059390904 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058388192 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070273239 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058402437 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060416798 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063695328 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060318281 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07638819 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067429921 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074894918 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059858201 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063417923 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058523418 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068677068 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063580512 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059360018 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069792515 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057952198 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074531335 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070274974 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064290224 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058760784 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06395573 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066905882 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.073941303 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068484466 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068443835 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.061959459 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068678125 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06060812 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070245504 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058686522 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057954298 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069321212 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067563408 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071481472 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058606729 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069409304 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06117165 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067596305 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067208943 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060674521 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060507468 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060750279 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068351108 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063530114 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068295687 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063592218 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07561453 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059800673 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070185762 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068277809 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069709776 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072946248 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071311967 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067086473 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059495268 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066551071 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067014508 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060060648 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064054966 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062416096 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080531175 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.060453122 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060660374 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073327987 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065129249 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059184976 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065039761 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.202790284 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.06991524 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060039434 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069563761 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063188225 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.059902873 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06333814 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.063837526 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.057937491 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058351449 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.058889323 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068795579 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063382761 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059197029 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077374222 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060525401 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068452431 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070200993 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065600764 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060347931 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058157903 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060438513 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072629955 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074853757 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062450292 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068505138 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06063867 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06834853 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057761932 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067803869 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067067415 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067856406 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058667029 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058893463 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073814738 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074650269 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063676324 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068810448 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068270868 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06012227 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080396505 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068168617 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060064428 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069702705 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061428458 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058286581 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058081085 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06011032 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070194624 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058381448 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061123751 seconds)
  done (took 41.048885778 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.095919437 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059656858 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058604134 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058762314 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066373745 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059646761 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058970332 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059753741 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059734092 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061233343 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058758776 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06169838 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06533128 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071316957 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06689861 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062206988 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058605644 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059467184 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058567092 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059698699 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064615717 seconds)
  done (took 2.927840312 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062201341 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062820888 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063207274 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062696575 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061964741 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058690123 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06300054 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058818424 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062990447 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059839997 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063412818 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059042348 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059221613 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059306083 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05901169 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060357942 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063488032 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062288068 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058623684 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062465729 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060277822 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062410243 seconds)
  done (took 2.93101613 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.060471292 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059219376 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067127205 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058151924 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057964466 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061634652 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057892022 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063021958 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063081192 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063485347 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067958613 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059190989 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058389912 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064293073 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058073338 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059265053 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.100311788 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059433194 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059499921 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058353593 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061011115 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067751638 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058146383 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058350117 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063180954 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061494067 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058282529 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061047413 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.05922262 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063301913 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059478246 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058019428 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067520182 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.066903651 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.062850502 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.062882103 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.059970288 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059308896 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058329478 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058263548 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067342128 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.05986605 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058951806 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059807072 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067591766 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058437698 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058103436 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067664641 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058523034 seconds)
  done (took 4.626160114 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.068586734 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.109988789 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06420826 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091255027 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070757704 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064165091 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064025047 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092771506 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059370495 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060385246 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071853299 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071896596 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061384298 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062471825 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065656039 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06092933 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061994175 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060444513 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063872738 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060622371 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063684908 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065285941 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070682559 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071875177 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06223668 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060444341 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060826745 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062346894 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071329781 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064260605 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062696527 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063073847 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071601841 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.064487855 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061065742 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06104771 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071865396 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061413131 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061021987 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059438265 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.060783166 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062322273 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06557265 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072453833 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061699969 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.065722116 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061227536 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059195253 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071358217 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.060759549 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.064878251 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072117718 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06232107 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061985253 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062627794 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071345245 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061742165 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060454527 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06129769 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071193364 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059533004 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.061823881 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074421617 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.060356325 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064368564 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072146427 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066018286 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062293927 seconds)
  done (took 6.218643494 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067622434 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093187118 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074029284 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073799494 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06903456 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068890357 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069350371 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068994504 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069144853 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072500095 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06934848 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.103105206 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065865098 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070671019 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.06921628 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069018355 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.068586571 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069197807 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069098119 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068964742 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.068565544 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07360575 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068861145 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073665 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071258017 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065335381 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.0684278 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068904534 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074012387 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068883411 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071316533 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.06845023 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.068931949 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074151338 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071134922 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.068616838 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059343925 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068368983 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.068748883 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.068819525 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065074728 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073499135 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06855224 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065051152 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06861968 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.068431212 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073636602 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071163048 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070425244 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07204869 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069030398 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074045191 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068950795 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069304222 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073795714 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.075771581 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073769224 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074053734 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06941372 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074045341 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073999273 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076163788 seconds)
  done (took 6.031569207 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071611632 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065084683 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077153014 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058252194 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058374591 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067687587 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059078569 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059172419 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065107634 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065477782 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06676825 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067805241 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070047198 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066812193 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067902651 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070005721 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068276535 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067831556 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06515398 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068384862 seconds)
  done (took 2.944360755 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073539835 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.076973024 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06414998 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067380812 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064146122 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067666597 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06306381 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064304405 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064616885 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064219406 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.0691236 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068784751 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06458374 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067843122 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068657612 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06756847 seconds)
  done (took 2.682765026 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062265527 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066258441 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065132295 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059880534 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061726258 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059331584 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060204485 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05861891 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061196405 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.0725541 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059315337 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062074331 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060186071 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059012556 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059349222 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062441086 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061489718 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059487411 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059876048 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.063851064 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067792417 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060480501 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062113479 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.059221136 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06172251 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067946526 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.060835735 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061618892 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.05971323 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062048291 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061526626 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.065844654 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061716224 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060081067 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058516321 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059687221 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059828307 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.061938447 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062106192 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.05997474 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058416372 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064820452 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.059788302 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060483494 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061310081 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062088213 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.060890351 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06502546 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.0597198 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.061443091 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.059991191 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06135312 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.059804896 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066855248 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062199445 seconds)
  done (took 4.999669806 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07592635 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063905765 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058467518 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058458639 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063215906 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064149524 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063578866 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063846137 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064470269 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058301844 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064250503 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063317284 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064455127 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063709602 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06414629 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064101791 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058511793 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065343677 seconds)
  done (took 2.763182276 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065497212 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064343294 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.0628817 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060531804 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060771084 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065267811 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058733003 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060099078 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05995523 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060422213 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060345833 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060022897 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060206853 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060070372 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064681585 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060914505 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060212297 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059259438 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060545892 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058712212 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06478211 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058798206 seconds)
  done (took 2.962018105 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08576163 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082334157 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.125023179 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077774669 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086489411 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069716794 seconds)
  done (took 2.141866558 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091447095 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095184892 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063127416 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063307423 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06791776 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066404572 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066584253 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066669605 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069564916 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070022081 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066530584 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069946909 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069710125 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071668364 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068466025 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068297383 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066755485 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066504105 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063586074 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07387445 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066613299 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070031037 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066530721 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066295979 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066854388 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071693532 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069692095 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070091445 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066590667 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07002241 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068347296 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066570092 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070079491 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070666 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063674665 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069604495 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066789658 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073722135 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067928977 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071718314 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063306934 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06873976 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069967667 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0698829 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069819168 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066939685 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069741801 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067062861 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066602124 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074819952 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068406379 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071514321 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067936663 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069870156 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069937077 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075175333 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07048533 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071584263 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0680539 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070345366 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07187388 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068238301 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071933436 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070633663 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068478651 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071662744 seconds)
  done (took 6.212567917 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101637071 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064469393 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066929085 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070241044 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071640622 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066661605 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066919791 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067140673 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066764211 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064650176 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101697315 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067087861 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071942968 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074987942 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067091613 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067166037 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066951115 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071924447 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.063988159 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074959273 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066750568 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071558844 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071698762 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071502805 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070519897 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068649761 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067004604 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066717478 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066420063 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066428066 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069406765 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066611249 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071244543 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063821909 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07159514 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066981135 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06644363 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069674244 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066555356 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0679636 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072075871 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073765324 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066674627 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066500082 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070370353 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066521722 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066721123 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064154102 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066518175 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064159387 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07055533 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070310183 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070449197 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071772833 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066754605 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067263638 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066637064 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066913431 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066710561 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068611452 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071797858 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06686184 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075761309 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066812708 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066970387 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072084864 seconds)
  done (took 6.225122068 seconds)
done (took 130.468109579 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216159125 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187996633 seconds)
  done (took 2.007867174 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072186284 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.163117668 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072563088 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072495311 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106030604 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105026999 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073643145 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069756519 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072316499 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069426937 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136678974 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073577453 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069784979 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070298358 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069459397 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069837935 seconds)
  done (took 2.989121794 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10464338 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.201861061 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.079609552 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067523562 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.148837488 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074078299 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.069772668 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074501305 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.074406509 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06778059 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.104308645 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080744072 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073236477 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074664128 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.06959778 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073313823 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073781637 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.073784078 seconds)
  done (took 3.215043461 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100681227 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.088596913 seconds)
  done (took 1.822299108 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.152476623 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102634627 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.141716171 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.340201826 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133502187 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.135324534 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141261258 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.133776428 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107636722 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130558644 seconds)
  done (took 3.14497167 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103495833 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102252471 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.303483925 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099487084 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079513974 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075712827 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072771543 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077211019 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072553924 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074450347 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119657919 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073037771 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070129353 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121317355 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095797202 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104089662 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068905161 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075675981 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077460335 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068497097 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07341044 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.076716525 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.173213264 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07559595 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.09641774 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.072403948 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07427764 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071502696 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071646875 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.074945482 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076264848 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.095654296 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075329028 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.079950705 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.073864527 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09335013 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069166222 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095288891 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071658054 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069666584 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07230509 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.075593288 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069831548 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075355029 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07244205 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.074686662 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.0770413 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068261525 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072126381 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.071519457 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.070283189 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.073811353 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073655135 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074115308 seconds)
  done (took 6.263185694 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104814168 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105812006 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068101477 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110481524 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102779582 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067796582 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102355746 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097570909 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105073833 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067483719 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066738746 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066817829 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073652499 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07651227 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.112523873 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105091251 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068625973 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.0674415 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104506037 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.103855815 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066561032 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.098748752 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097531934 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103502566 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066534661 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06764572 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065914168 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066603101 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071004502 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072432299 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066417059 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072930566 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.077947328 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072567391 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065567669 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065898858 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065882023 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.072342077 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073522152 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073582393 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072105885 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065488049 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066161787 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066157004 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067166436 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065535889 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071737748 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.072854288 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072356223 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06614105 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066592962 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066050247 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066511893 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07258981 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071445246 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073426759 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073046359 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066194327 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066369386 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067896497 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074197776 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074045724 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073160106 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067255143 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074071978 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065955123 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074647193 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077801033 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066237251 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066724231 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066338345 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066291281 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066673147 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071836671 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.071785131 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066852633 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066539137 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066048798 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.073907812 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071948562 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066497738 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071382934 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066114799 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066748612 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066654585 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06667831 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071228672 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.072524282 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066800439 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066070182 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066264482 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066265373 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065855927 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071488365 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073052844 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.072895196 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072633845 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066768126 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072485481 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072204216 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066947314 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07262235 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066104678 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066818657 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066498453 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072401722 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07177109 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073796761 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066027289 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065816801 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07216407 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074512615 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066190301 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07174706 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074165587 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.206466648 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066255214 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075380832 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06665911 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073956123 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066950181 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074447385 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066545412 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072355763 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066625917 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065733654 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066406189 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.072149166 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066859494 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066450865 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067151236 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066450312 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072435545 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075679207 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067333823 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072140964 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.072049963 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066892997 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072296921 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06638163 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073537486 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066783884 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066845441 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065758448 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074731732 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066520983 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066381202 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066112705 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073637711 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066269341 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073762158 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071499901 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065684052 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075908639 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074443057 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072160873 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07490797 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067489971 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066412705 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066433244 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069204396 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071592207 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07280653 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067177452 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066211833 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071397359 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074403076 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06588351 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.071683405 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071993713 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071867629 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06680542 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066301127 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074732059 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074451014 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.071774227 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.071764464 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07287595 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066329161 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071638315 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.071982618 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066260996 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078098759 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066370071 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076039251 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072548092 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071663002 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072820906 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.073770764 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074543015 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074304684 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.0766804 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06621433 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065992084 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072536548 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066239347 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066726162 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072043703 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06672216 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06672319 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077143531 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067072455 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074458482 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065854551 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073094169 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065801432 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066814414 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077031196 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066987197 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066742428 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072043664 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066558612 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071927867 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074623 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072060361 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066234742 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066887395 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07272149 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073509968 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066166235 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066139672 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066581745 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071825628 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071360899 seconds)
  done (took 17.900698044 seconds)
done (took 38.986296657 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.165402216 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111923351 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206275911 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.195392797 seconds)
  done (took 2.406466299 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097655537 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062750925 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077436362 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.086697263 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063097208 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073308065 seconds)
  done (took 2.135451305 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.196766138 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.171166806 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240040435 seconds)
  done (took 2.272071286 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.362346547 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.145460414 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.2112939 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.494520313 seconds)
  done (took 2.98055247 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107015995 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.09727735 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074760757 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10827884 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082033917 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060380316 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.129721368 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06724594 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09657541 seconds)
  done (took 2.555469294 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135628959 seconds)
done (took 14.168802075 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.154719706 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.466849047 seconds)
    (3/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.169913634 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.249139855 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.1105136 seconds)
    (6/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.19637261 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.210796526 seconds)
    (8/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.202409514 seconds)
    (9/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.160839215 seconds)
    (10/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.115829202 seconds)
    (11/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.178892649 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074511921 seconds)
    (13/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.185583763 seconds)
    (14/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.184940504 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073728215 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.222861183 seconds)
    (17/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.077132485 seconds)
    (18/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265664815 seconds)
    (19/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.136685009 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.089262806 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075775824 seconds)
    (22/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.197537935 seconds)
    (23/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.196994798 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076007861 seconds)
    (25/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.063322359 seconds)
    (26/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.169714011 seconds)
    (27/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071915172 seconds)
    (28/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.221441634 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153645978 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072083724 seconds)
    (31/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071550855 seconds)
    (32/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151997184 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.138924984 seconds)
    (34/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.15806749 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074094755 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.070278234 seconds)
    (37/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.179725239 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169127392 seconds)
    (39/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.087015212 seconds)
    (40/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.199282615 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.120149622 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153975083 seconds)
    (43/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.245235835 seconds)
    (44/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.081763617 seconds)
    (45/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.193227458 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.085585315 seconds)
    (47/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.13942904 seconds)
    (48/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064171561 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146948375 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083292864 seconds)
    (51/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073482172 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084634069 seconds)
    (53/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070814274 seconds)
    (54/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070355022 seconds)
    (55/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073429304 seconds)
    (56/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.159049822 seconds)
    (57/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06405843 seconds)
    (58/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066847346 seconds)
    (59/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.080982484 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.167146033 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.079756748 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.192768364 seconds)
    (63/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.154647315 seconds)
    (64/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152465858 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088903164 seconds)
    (66/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.075996218 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132306516 seconds)
    (68/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.139580761 seconds)
    (69/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.149725668 seconds)
    (70/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.074339945 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087243207 seconds)
    (72/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.165236045 seconds)
    (73/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072713454 seconds)
    (74/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091664722 seconds)
    (75/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066023216 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065083495 seconds)
    (77/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.070856678 seconds)
    (78/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.241932547 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.195207807 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072836599 seconds)
    (81/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064004792 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071588919 seconds)
    (83/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.182746853 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067270802 seconds)
    (85/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075276322 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.08615744 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081796031 seconds)
    (88/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063280986 seconds)
    (89/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.196575058 seconds)
    (90/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.067447042 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.115842113 seconds)
    (92/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.160380907 seconds)
    (93/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068088464 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.148785047 seconds)
    (95/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.195088939 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064721456 seconds)
    (97/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064115595 seconds)
    (98/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077771965 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064137928 seconds)
    (100/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079326734 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.065486534 seconds)
    (102/341) benchmarking ("sort", Float64, false)...
    done (took 0.135103866 seconds)
    (103/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.080672227 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.06326298 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.232646248 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14431505 seconds)
    (107/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.08982598 seconds)
    (108/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.065903939 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074064548 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07099188 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.215321946 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.085746504 seconds)
    (113/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.075411711 seconds)
    (114/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.062872659 seconds)
    (115/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.063684263 seconds)
    (116/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.149608991 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088518606 seconds)
    (118/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067274313 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.070933089 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083332114 seconds)
    (121/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070449511 seconds)
    (122/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064612393 seconds)
    (123/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.063237044 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.084475334 seconds)
    (125/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063198125 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063381427 seconds)
    (127/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.186780166 seconds)
    (128/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071034858 seconds)
    (129/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064442878 seconds)
    (130/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189776228 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.067939202 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.23533706 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.064753136 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07334515 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066752756 seconds)
    (136/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.065697539 seconds)
    (137/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.079581105 seconds)
    (138/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.064889037 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114914093 seconds)
    (140/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063841545 seconds)
    (141/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066175143 seconds)
    (142/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.232744737 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064607216 seconds)
    (144/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089772553 seconds)
    (145/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.185600664 seconds)
    (146/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.193516592 seconds)
    (147/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167132399 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072453662 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092791424 seconds)
    (150/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177051631 seconds)
    (151/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.137197259 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.174864427 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071494379 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073372948 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071022719 seconds)
    (156/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065873755 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072857336 seconds)
    (158/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064088842 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 0.143722349 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063391673 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062550081 seconds)
    (162/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071894001 seconds)
    (163/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.07960841 seconds)
    (164/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.139676843 seconds)
    (165/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.081799251 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.143712011 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064349776 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070609066 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072949373 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063451715 seconds)
    (171/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072181211 seconds)
    (172/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075748918 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 0.064349734 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120310901 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.063247661 seconds)
    (176/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.080810658 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.082283172 seconds)
    (178/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.149165656 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.152270978 seconds)
    (180/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072387421 seconds)
    (181/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.063709867 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062979648 seconds)
    (183/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.063660711 seconds)
    (184/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.225468184 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.135225875 seconds)
    (186/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.067086296 seconds)
    (187/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067321057 seconds)
    (188/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.306207383 seconds)
    (189/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.07081627 seconds)
    (190/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075018329 seconds)
    (191/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072780329 seconds)
    (192/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071195693 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072767894 seconds)
    (194/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.063978335 seconds)
    (195/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072096595 seconds)
    (196/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.064106141 seconds)
    (197/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064618337 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088693039 seconds)
    (199/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.177874803 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06195718 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.089736133 seconds)
    (202/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.071138982 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.065889964 seconds)
    (204/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.07068786 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06402796 seconds)
    (206/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.196324857 seconds)
    (207/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.063842662 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.114855677 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144215067 seconds)
    (210/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062216788 seconds)
    (211/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072173325 seconds)
    (212/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074926585 seconds)
    (213/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067013929 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067682183 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.085950507 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063561606 seconds)
    (217/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145291687 seconds)
    (218/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063929063 seconds)
    (219/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063575352 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061954732 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070772849 seconds)
    (222/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063752819 seconds)
    (223/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063554764 seconds)
    (224/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.063906463 seconds)
    (225/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062807319 seconds)
    (226/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.07909015 seconds)
    (227/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.160190632 seconds)
    (228/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064530787 seconds)
    (229/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066257392 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064137311 seconds)
    (231/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063396925 seconds)
    (232/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.0713915 seconds)
    (233/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.075243793 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064140216 seconds)
    (235/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070711095 seconds)
    (236/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070638692 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.129639509 seconds)
    (238/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063280868 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08257939 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065601514 seconds)
    (241/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.063357054 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064182271 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.122832193 seconds)
    (244/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064000153 seconds)
    (245/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07445768 seconds)
    (246/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071937212 seconds)
    (247/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075170574 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063673114 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073571067 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.09218604 seconds)
    (251/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.063743777 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.08837755 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123352517 seconds)
    (254/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065070385 seconds)
    (255/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064013544 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064248614 seconds)
    (257/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.070566918 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063190348 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070445334 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063145501 seconds)
    (261/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.063332667 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.139025745 seconds)
    (263/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.149637944 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070313249 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066505679 seconds)
    (266/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063259306 seconds)
    (267/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.204292502 seconds)
    (268/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.063687984 seconds)
    (269/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070450443 seconds)
    (270/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074908035 seconds)
    (271/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.063944901 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139473105 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061645024 seconds)
    (274/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064123183 seconds)
    (275/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071359578 seconds)
    (276/341) benchmarking ("sort", Float32, false)...
    done (took 0.135642675 seconds)
    (277/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064089039 seconds)
    (278/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063478063 seconds)
    (279/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.063676781 seconds)
    (280/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.067033328 seconds)
    (281/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.16943143 seconds)
    (282/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063494861 seconds)
    (283/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070013775 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062860363 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.06324905 seconds)
    (286/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06388286 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.064339248 seconds)
    (288/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.063042635 seconds)
    (289/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063145109 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062000305 seconds)
    (291/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063646011 seconds)
    (292/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070448168 seconds)
    (293/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.062997463 seconds)
    (294/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.063406148 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147344228 seconds)
    (296/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065966068 seconds)
    (297/341) benchmarking ("sort", Int8, false)...
    done (took 0.146554634 seconds)
    (298/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.061985142 seconds)
    (299/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06346881 seconds)
    (300/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.061605487 seconds)
    (301/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063689878 seconds)
    (302/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.063461872 seconds)
    (303/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065392398 seconds)
    (304/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.066630964 seconds)
    (305/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.067779324 seconds)
    (306/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.081780825 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129424943 seconds)
    (308/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.063075276 seconds)
    (309/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137739396 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.063969556 seconds)
    (311/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06619588 seconds)
    (312/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079614319 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.062947135 seconds)
    (314/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06227846 seconds)
    (315/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.062909401 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.062940762 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.063996075 seconds)
    (318/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074991022 seconds)
    (319/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.063441631 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.083761882 seconds)
    (321/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064178207 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.236648439 seconds)
    (323/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075617942 seconds)
    (324/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065633667 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084735263 seconds)
    (326/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067941429 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.07608982 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.220860389 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089236839 seconds)
    (330/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075433559 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128869865 seconds)
    (332/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.06453719 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.081412339 seconds)
    (334/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066493745 seconds)
    (335/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062526772 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.063421336 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066161386 seconds)
    (338/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065236862 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064159909 seconds)
    (340/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065231864 seconds)
    (341/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063691281 seconds)
  done (took 36.244757459 seconds)
done (took 37.932975416 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090041277 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077157215 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07612831 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072839222 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076147952 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07498868 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075980568 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074222225 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075747407 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075227863 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074523235 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063163192 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071439529 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078787963 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072295665 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078482266 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075708811 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078712037 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064229224 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078034932 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090801697 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.075613204 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072025779 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.077071146 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063725539 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072606392 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086857003 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084338181 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070392105 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072996239 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070910107 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081692374 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071130034 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069649603 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.072786686 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069377914 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072376228 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070278651 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.085822392 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069181369 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063563812 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.074828568 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070281588 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071170141 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072045454 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075477677 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069202495 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.076975331 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063091328 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074244616 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086260162 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068450738 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070034623 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071593523 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068502797 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.072797975 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070090944 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.074461128 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068276428 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075057212 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074652272 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071702947 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063192056 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.071939252 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070333437 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070649683 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062165704 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068569386 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063523239 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06290299 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062112598 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07192054 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069918606 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068010798 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062312037 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063210809 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062340337 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075006384 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069271925 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072745353 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063960969 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068408633 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068050068 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063452733 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068653853 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074728653 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062137194 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063611359 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062108269 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077669046 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.06943232 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.062855245 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074730856 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067819259 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06807677 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.063038732 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.062035286 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068021265 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.070889958 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06327197 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062280683 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068090663 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068067984 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071657746 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063744463 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068111673 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067652477 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.061695591 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.071672944 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070362074 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.071466033 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076031061 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.071985933 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.074764665 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063099893 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.061955976 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072410511 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063390592 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06779816 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070718107 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068266742 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070869746 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063379714 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061871947 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06794859 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069263836 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063165054 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063182482 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063498028 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072455017 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070161791 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061908487 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062611299 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071538485 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071406634 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061866733 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062104433 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07221472 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063184603 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068490134 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068897847 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072162921 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062410242 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063257329 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061862935 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062946055 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062449471 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.06796658 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071179218 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063694385 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07159128 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.211423067 seconds)
done (took 12.569618562 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064610511 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105116042 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077270684 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079598444 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076602145 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064865913 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067539537 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.081705028 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066600903 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087617529 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088881369 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085452341 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094080894 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062421934 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064134248 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065002077 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062355095 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075910297 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080408315 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.086840434 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099250746 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063483366 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079429087 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083187384 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077612419 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081444128 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065213471 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064365742 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066824629 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081867287 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089534801 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063599226 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064891748 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081175159 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078350536 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071620182 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064536725 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.069899706 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067220076 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063741663 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065831071 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080523329 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070316029 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070390741 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.064867659 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065041866 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064432514 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070635304 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081286802 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069189745 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075457111 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.08201841 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06538047 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064214572 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062495076 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070673398 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064029077 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064959686 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064559744 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063914766 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06447261 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066684269 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.0684685 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069823295 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067052366 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.06965281 seconds)
  done (took 6.542749424 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.079748132 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089324738 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078720259 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079120792 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063753465 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064596478 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064533115 seconds)
  done (took 2.313233671 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064718697 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071673048 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076503349 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.075733224 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085100934 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073284064 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064639019 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.095518575 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063371168 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072453848 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079105742 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076905134 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067293838 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076137724 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064639161 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.075199526 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064645733 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071236344 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071320115 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.0775691 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068655429 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093368533 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077542956 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.064692775 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.076782924 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071234852 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066209421 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064851524 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064650592 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063670482 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06385709 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.086228958 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070544777 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076372273 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064431174 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063260808 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.06831739 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06464496 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.06789565 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073030088 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067571374 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064098151 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064591388 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.0642065 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065053999 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068824518 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065098916 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063696393 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063565962 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.070960642 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063304808 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070110531 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065972995 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068857645 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068502105 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068286077 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071090891 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064395669 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071387449 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070375093 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063946873 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076190347 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075331049 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067355186 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075331119 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.0727699 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070463301 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067746045 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063586451 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063608731 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064388715 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075241521 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.066951147 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066165647 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.064771703 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068681889 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067553391 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.078603306 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.078784853 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077150114 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066333081 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.063860117 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.067428815 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.079119219 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068658029 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063973323 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064896805 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.0631441 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068542216 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.063881889 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068791402 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063689462 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070593864 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066544312 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066085646 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071439024 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064256718 seconds)
  done (took 8.538956267 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066887602 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.065949537 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065430025 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065221154 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065725983 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065262132 seconds)
  done (took 2.220861008 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087483111 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064659607 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076755916 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.06475093 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086454575 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070824935 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071072411 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066601365 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080849663 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.074873668 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071156072 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073491455 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07337748 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066568127 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070467604 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065456684 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070239113 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067492156 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.074323385 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066541482 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080830867 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066070454 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066527217 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.07609359 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067789789 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065268828 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065811577 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07456301 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074190726 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.065934986 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066068091 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067960605 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073190555 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066059144 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071026768 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073094209 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064464645 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069896722 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066979126 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067475344 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.072764112 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066526721 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066930248 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070136231 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.066257967 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073006407 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069916407 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067991742 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07102085 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070004616 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.069579533 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.064913244 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067536983 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069727618 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072931283 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066135403 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.069790288 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070218337 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06564242 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072987192 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064343793 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067119007 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065909521 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.066866348 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.068981317 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069520245 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073138958 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066524791 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066232699 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069412147 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069991767 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.064777874 seconds)
  done (took 6.819184372 seconds)
done (took 28.208644932 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.535448721 seconds)
  done (took 2.306341893 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.881196201 seconds)
  done (took 2.692488468 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.051261061 seconds)
  done (took 9.870008283 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.33149918 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.394151542 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.722524859 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129208434 seconds)
  done (took 3.42565034 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.738549414 seconds)
  done (took 2.566982253 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225734931 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217458517 seconds)
  done (took 2.271302077 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.330921011 seconds)
  done (took 2.149652582 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.133914027 seconds)
  done (took 2.949181472 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228647551 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159240311 seconds)
  done (took 2.212677215 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.529704402 seconds)
  done (took 2.347813317 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.233821546 seconds)
  done (took 6.055246104 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.227396721 seconds)
  done (took 2.081382882 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.224607514 seconds)
  done (took 2.047415943 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 1.998654954 seconds)
  done (took 3.814393894 seconds)
done (took 48.609101534 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081789124 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083289914 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08367484 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078481385 seconds)
  done (took 2.121992327 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071505915 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068107801 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071008767 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07096979 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069086502 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069570742 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070504927 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.0673576 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068661689 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.067553675 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066197268 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067812397 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070350528 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067328842 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.06994397 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071259497 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067470856 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067790054 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069912764 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067188473 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070130614 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067276616 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065969454 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067222004 seconds)
  done (took 3.470292838 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075612978 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069579486 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072657574 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068434065 seconds)
  done (took 2.115408216 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.073876674 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.073754448 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08256416 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.08711167 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073406897 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074178778 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.080479695 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081425386 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063004566 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084102419 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065468346 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064522719 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064251038 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083002653 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080339067 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060027916 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06116952 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074309333 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073430103 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076296248 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.065732726 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063284318 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073393614 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074517938 seconds)
  done (took 3.581986382 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079988754 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063092202 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078037642 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.087999178 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089617551 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.062924732 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.075908379 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090121056 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.124558908 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063456756 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069307335 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063108005 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.101715607 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063123345 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.077950339 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.105766349 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109235891 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067293294 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.09624689 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063574066 seconds)
  done (took 3.470735781 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07347403 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067084177 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067691626 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063186141 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074319082 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070583656 seconds)
  done (took 2.259084174 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.065734444 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065572242 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067799806 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069796024 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065374604 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065520524 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065045409 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063505139 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063735375 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064417504 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064472761 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06520732 seconds)
  done (took 2.622154378 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.144716151 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.066595309 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067580259 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063699727 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065652541 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064390582 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078806715 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06636684 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081895062 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064628572 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065499143 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06631025 seconds)
  done (took 2.732816663 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101606162 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107879715 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141124344 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113572946 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113189639 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092938135 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122661207 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092732492 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156165927 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13307676 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113801335 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090676909 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083942848 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067257182 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096433074 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114081802 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132387351 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069639626 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110058453 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.160955646 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127470906 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13080186 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143538153 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113302731 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087109832 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143432862 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093867647 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099164335 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120512457 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121885294 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115769222 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09451494 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069115236 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068084158 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144513296 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.099746355 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116631406 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090180839 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100845929 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084655376 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103663127 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066876461 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082470506 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108690324 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081483295 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126885951 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085498858 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111065839 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077893748 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133143444 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119357155 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095505111 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082860589 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101028295 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.285417173 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109026256 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130834202 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104055653 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079578118 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115590953 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.09991748 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097140911 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103280353 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07687214 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.172267991 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085546696 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108431941 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10793584 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090684452 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091714588 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10346642 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130876646 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121413611 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.121055745 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133359699 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09189551 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117759385 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096377942 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125557483 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101536802 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070169741 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.116978561 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125049584 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095522331 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097627915 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125366922 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088753384 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074655747 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.095948856 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.114765216 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077658412 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.108336595 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0776331 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.105554909 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128924635 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0934528 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107807977 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113062455 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075090048 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149749141 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105190312 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069805287 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113125269 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109780217 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152176113 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092756126 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074155178 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096575537 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255683989 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146818544 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104244845 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077699287 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10691392 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136127341 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092178131 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165302577 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093131511 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135926165 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108313068 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084206297 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072483291 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087722679 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108530161 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104089456 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108382968 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08728477 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080900501 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084122774 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10786707 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0894523 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077722934 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109939141 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098196844 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.071738037 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08508511 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076735417 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137747104 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075680379 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133149003 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121327553 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076164531 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10259603 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094570021 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105769268 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094558432 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113126185 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135510709 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.112131601 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086704395 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.090385045 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104597582 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13945164 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1229819 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089681696 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07376365 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097189502 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108025785 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094481992 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12206416 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096913314 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105354667 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099856131 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136921036 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140770039 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097197407 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097779503 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103758729 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.278625162 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074405359 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151752862 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101650354 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114731483 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082306205 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13740775 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111166573 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087117396 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084437605 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097513307 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.100673382 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102727887 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138727852 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.092721398 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070028794 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08978163 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139654227 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073793223 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106537768 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088129908 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090239412 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115148007 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090441336 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078653072 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065549442 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122513667 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153771484 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.067442382 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111422195 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.10844854 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0989098 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.117064031 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066803122 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114857823 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134112375 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114394934 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136709204 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142662497 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112862151 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115096936 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110441587 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102510858 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076828363 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.121926954 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13071174 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092900896 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089595546 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131462995 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1151054 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131928993 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113039644 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110804795 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101742815 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105089287 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.258125021 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099131634 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140282852 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117392936 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.120536988 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083278405 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103033925 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114912655 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131644798 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078919012 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137325537 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.080795306 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114349049 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074644868 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119358925 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076716344 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108545848 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076831815 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096710018 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.066857174 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071323742 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136861491 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.108957393 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102362679 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096398614 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133794099 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132484516 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078312021 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104449771 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111763972 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098001278 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112921182 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105803914 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086167218 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092165653 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10603768 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082291821 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079033642 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111223373 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091234879 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123070777 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081495259 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07224018 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136499056 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101396439 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092341177 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075284484 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10433416 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.118035529 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090129496 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08457049 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111968472 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10144031 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137452655 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088005116 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095059584 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120544716 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077513429 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089461543 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067260647 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082681165 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073353966 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.282953055 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073985215 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112988225 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.066826185 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126216061 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083864257 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.08996028 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099033083 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10762275 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123425131 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091476842 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135757356 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086000405 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11445794 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104216441 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090921471 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085175423 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099937983 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097403892 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.118236701 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.093127864 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11839437 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138559662 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100303023 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137224246 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08814163 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11784563 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103325785 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120773108 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109087658 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142816167 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13400367 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108829588 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109203233 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072763667 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091948732 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101922987 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10860702 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169932676 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122063391 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070092609 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103745805 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091756148 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104648916 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101869541 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080014787 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142384201 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099083509 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085542358 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110098137 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088166294 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10115986 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073507678 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092669487 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.09800612 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091575979 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095216421 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.265651423 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124044115 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109975312 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138985938 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.096240246 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.089427999 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115284409 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106972477 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107024062 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083080074 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083789926 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132899888 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114800487 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.124256734 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.096997153 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105923057 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108072763 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097225503 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120934022 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104875071 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.122279894 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077533072 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073620268 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.065589033 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069547843 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119610802 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105780844 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108545369 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095569223 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.069694623 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100022344 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103176182 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069327081 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085953981 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09154562 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096636759 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088458086 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103526843 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.110560377 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088699271 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100874816 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096700819 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142953055 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097476864 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08583064 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139899998 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145694998 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085260606 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090218215 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069470829 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076503947 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109366257 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145471342 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147850523 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074887582 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084137067 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082683654 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083947662 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069256055 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084754558 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.242842714 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101886294 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096155674 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109846207 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100799418 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073203565 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099581088 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096068943 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088822114 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101180449 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114363278 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120480908 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.136130155 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106916087 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103510307 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073332185 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077489124 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.072896509 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076481367 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099072067 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076426914 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073540097 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138131046 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.088970243 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100786595 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105772748 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085647304 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072473183 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129344266 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.066664853 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131028229 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069054407 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079302274 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080029094 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07641474 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090865696 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135705062 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106558562 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109620958 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103229011 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101326745 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137008039 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151955993 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077622831 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139613872 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072943098 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072697715 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073307222 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110719644 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086888728 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111269409 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136891191 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087943042 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100080223 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074351456 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139509712 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.095627119 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10074007 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083608816 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075883127 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138514343 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076621162 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.234149627 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087280402 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108246301 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070086904 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100745652 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081859547 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077039087 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138443305 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.626849609 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087161788 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.073040078 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092689997 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137402505 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123113553 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091458841 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105139032 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.114771822 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096590744 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092161368 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104087963 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180308632 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0713127 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091104515 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10020507 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095013911 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098465925 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095009162 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.083117415 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.088979273 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084302728 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076846676 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104936418 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086187502 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093824023 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103936114 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080158085 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084386888 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126972175 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100573363 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079212255 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085723025 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103393073 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086112329 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097560343 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066648263 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110405194 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087998091 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113561042 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092153094 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103677001 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123202767 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086964114 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133854362 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.103010876 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119402008 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084371881 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.075693562 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121949644 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.084910362 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075000406 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140778655 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092125187 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.090430041 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100680891 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.093553749 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109081072 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112884863 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10734694 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093748076 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07562343 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096339884 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.098155245 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081501703 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075539021 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.071528915 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.073409598 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103204051 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082118864 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079728937 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110403792 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085044316 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098920865 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.094972579 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116280712 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079367671 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096230235 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104415491 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087370105 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105039214 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095577103 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12112835 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164895003 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118442645 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.122379633 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126974573 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07324112 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.071903344 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06562253 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110384668 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075814286 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083913858 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077137796 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125856116 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.077796002 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104357473 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226209832 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076194612 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087621895 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090258246 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.0661191 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078325345 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101451458 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0826568 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075794771 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111272736 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079087565 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12010806 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1048145 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093275724 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089041612 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076243592 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106176567 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.099841481 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.122754612 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089438783 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.070748899 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107717527 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09775747 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.408149775 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07333855 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081470064 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130205623 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104040395 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13138986 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079856739 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147544227 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141639502 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098821776 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132675844 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070266405 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082307638 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087604636 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124853294 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083134199 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108830616 seconds)
  done (took 65.910663759 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.148470948 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140637046 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081038301 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102732101 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185712692 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19675887 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118258272 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095088679 seconds)
  done (took 3.07965534 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066659197 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082653478 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079512463 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.202982911 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.093966279 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065254074 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070756068 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080006023 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065343207 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.064682612 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099659431 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065256023 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065657119 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.37285225 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064297858 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.069838979 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065227762 seconds)
  done (took 3.661979414 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330422234 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.946927007 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.232903538 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.256191885 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.146018968 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.553302392 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074068197 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.0802877 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.693579123 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368564224 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.139716511 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086094294 seconds)
  done (took 19.907026983 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07412774 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.076148248 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.075881246 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07261737 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072399725 seconds)
  done (took 2.360725958 seconds)
done (took 119.135899326 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081107157 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.168155679 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06545512 seconds)
  done (took 2.261162627 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.079882957 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078587005 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.07823112 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.075579979 seconds)
  done (took 2.313382249 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072328144 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074054329 seconds)
  done (took 2.138759593 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.216680346 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173545198 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087159531 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079635318 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077299982 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077666794 seconds)
  done (took 2.241235217 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.06890345 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069486763 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069602417 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069579931 seconds)
  done (took 2.268977758 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.06556227 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064086298 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066722952 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069093431 seconds)
  done (took 2.259665056 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082762201 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083675325 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11300834 seconds)
  done (took 2.273416192 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.080565535 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080500033 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.075878218 seconds)
  done (took 2.240074816 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106676003 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094549621 seconds)
  done (took 2.199526767 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078127739 seconds)
  done (took 2.083453243 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086850019 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09517043 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.135849269 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.103210907 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142438152 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.122373777 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075269721 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075800679 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071379447 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075810132 seconds)
  done (took 2.984651509 seconds)
done (took 27.814521509 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076512256 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370021219 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357597566 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08464963 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.670666104 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354559886 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.011215169 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088316054 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098472604 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065853553 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082684486 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.645214988 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.002320082 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328831769 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.988800963 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327221495 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649254938 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066643725 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065920074 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066268749 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.997497146 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065380758 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06585206 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066695309 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647385481 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.371386681 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066646225 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.322098144 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065462142 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069518044 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354571931 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.066842878 seconds)
  done (took 16.536043363 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067791081 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119919171 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.06999485 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081459923 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067610295 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067141071 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.068748554 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066595218 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109701607 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066406195 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083365126 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065730371 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07006843 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067199531 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088471464 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066086036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068142916 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066460391 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065897654 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066483421 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084185973 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065589969 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066175729 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066567079 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066024556 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.078973588 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066930565 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.065404009 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065899648 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069671387 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070749196 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067225322 seconds)
  done (took 4.340984649 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119169702 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123417944 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070840237 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106111602 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11542666 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06792286 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148154945 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088884767 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112496867 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066237949 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082845036 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065873953 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10125337 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067349122 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086733245 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.065789744 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068144298 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066640763 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065886681 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066141672 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084844048 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065709439 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067279726 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066920017 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066288455 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080870184 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066831771 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066135047 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066171004 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070306549 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071028357 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067014921 seconds)
  done (took 4.611524935 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.06721379 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069115876 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075560568 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078446178 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064378587 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.06672784 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067261165 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064325682 seconds)
  done (took 2.574743957 seconds)
done (took 30.082601697 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076783336 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065484835 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068395904 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.084663176 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071726815 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.067451354 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062615051 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072264671 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.068877621 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.068860675 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070817041 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.064716093 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067747131 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062406389 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069567224 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06366627 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070110589 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.067950728 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.068633297 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.069922571 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066503257 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069647951 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072789947 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.068864927 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.068797231 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.06883258 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073075069 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069924034 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064419314 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.06683833 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.065973999 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078289111 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.069718342 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.070061722 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063451409 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063704146 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068189099 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.065884305 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070283427 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07254961 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.065796728 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072229248 seconds)
  done (took 4.88178818 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086323978 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091811196 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084496553 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079143194 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105009222 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078934999 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088540652 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076783348 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07487889 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.08801341 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071064757 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076549748 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078482988 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073109684 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075387743 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072016385 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.07733055 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070822506 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075506619 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075532745 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.088353421 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069109996 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.075674187 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077018544 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07076395 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077044617 seconds)
  done (took 4.087757637 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070342336 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.085832216 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.089825041 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.137691527 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106335892 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080683373 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.07960338 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091091666 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098471455 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06544379 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.069677534 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091398273 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09449877 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072723414 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.103403631 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08357154 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078230207 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067653215 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072396723 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100370269 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088408538 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084266731 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098020004 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.085540038 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.064965943 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.074626445 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.072272815 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081256551 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.072620103 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.077805572 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.069606933 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071869394 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.065737026 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077405279 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.069573568 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063363314 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087401388 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078338966 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080071455 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103452547 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075395819 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.067657206 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095754922 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131299937 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065102767 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068338545 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069910263 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.077979018 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.066943646 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094786725 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083778006 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065222264 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.083717408 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.066857651 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067357583 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081793916 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.066906146 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.107543931 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078298983 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.071589982 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.085985606 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.070660884 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08656388 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06505501 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077102146 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.066659912 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067085431 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06418015 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101064022 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072625164 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116885283 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066436569 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.063470982 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078041558 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077337579 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07206938 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065026767 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085136033 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07719148 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069241101 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.076898012 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068362223 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068928453 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100426492 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064269794 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063580708 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063185841 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067606657 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.068368249 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.065959067 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.07846891 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.064872578 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.068112089 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08060335 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.064815506 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.065900139 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.067533141 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066406421 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.064766419 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.075505699 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.068898639 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067019535 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.077734396 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.066281353 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.068301135 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.079825439 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.074430481 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064555622 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066052718 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067414176 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067094927 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.069188386 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.068544138 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.066846486 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.071998539 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072598287 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071122669 seconds)
  done (took 11.042999571 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.158627882 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.148900049 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.066047886 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144370383 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.073598242 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.069977012 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.145647554 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085156138 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066197763 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067343702 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065338604 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.093707058 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089296996 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100392198 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.069903224 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066602147 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.090831075 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.098340832 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.147994655 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143590828 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089355929 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.073597035 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.068445066 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.067117641 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.067326676 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.074612681 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.081968224 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.073961988 seconds)
  done (took 4.621169992 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072952697 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08102298 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070034645 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089404505 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083993043 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06619056 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068131543 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067391231 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083150107 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.073023912 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066193376 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070167964 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069649632 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066732847 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067205002 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072249687 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072639337 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.064954447 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069299853 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070289027 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.076669811 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091260958 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070498408 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066094562 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068605189 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066222919 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.072494799 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07520303 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06538618 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09616032 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.062934001 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07043712 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080087644 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.066783429 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.065479515 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.066309488 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.065894049 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066051835 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.066735407 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.063913276 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064103491 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071166662 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064502285 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071411027 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082705174 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07370398 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067460679 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.068286442 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068184469 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063008268 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.068817607 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069282313 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.068286069 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074245565 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.069177246 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.06815041 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.067119548 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09569623 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.071713594 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065400463 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.064888114 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.063707753 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.067173197 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.073401627 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08191424 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067368303 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.063892505 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.065800012 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.070078859 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080068891 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.065155128 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.070564663 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.062565993 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066060478 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.067926169 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.068666092 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067194257 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.063987455 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065426937 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.065728438 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.066148438 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065445859 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065625385 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068412682 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.063469292 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064065638 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066565968 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067015754 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.071359253 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.064701209 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.06862542 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067053172 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.064621744 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.06827914 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07151011 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.068771482 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08540128 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074363993 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066670995 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.063685855 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080301948 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06805971 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065071003 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071031314 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.070502656 seconds)
  done (took 9.420928216 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088688028 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06720437 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085687462 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.091690831 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.075846094 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.070882853 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.079813449 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066650476 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082005524 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.064846073 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074919193 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06408957 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.07893764 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.074666407 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067304035 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076232579 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068128694 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08636937 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.080325728 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064878262 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.074203146 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078054969 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078395982 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084093846 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083875599 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08443905 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.07801749 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068478347 seconds)
  done (took 4.21431103 seconds)
done (took 40.280969285 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.106484386 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.264575819 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.098766415 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.347271812 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.356839013 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.124458394 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.322551716 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.095429697 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.371451144 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.121854897 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.410942983 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.474788855 seconds)
done (took 71.180941843 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.160729915 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.230387041 seconds)
    (2/2) benchmarking "String"...
    done (took 2.299712456 seconds)
  done (took 6.563432977 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.690018333 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.087929508 seconds)
    (3/3) benchmarking "different"...
    done (took 2.136108669 seconds)
  done (took 8.942629355 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.203235125 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.7219057 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.339196469 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.086499058 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.09288435 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.467998144 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.873241078 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.558118059 seconds)
  done (took 34.145158586 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.335872042 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.303370345 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.848565263 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.889397569 seconds)
  done (took 17.455359021 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.691457868 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.34980849 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.350561739 seconds)
    (4/4) benchmarking "different"...
    done (took 2.346457273 seconds)
  done (took 11.831400138 seconds)
done (took 91.423903022 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.089112041 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.144142685 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.100482571 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.242825548 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.148022043 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.121421634 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.104094269 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.127578887 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.089225553 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.089572976 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.516597635 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.088546438 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.099845226 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.111363076 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.088061309 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.135791975 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.636894264 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.099408384 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.118742183 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.763493183 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.609125785 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.10166432 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.087010584 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.144534784 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.253844335 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.105489353 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.16667687 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.093330821 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.69900686 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.086832851 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.097195749 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.079417501 seconds)
  done (took 214.470149014 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.075560457 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.033944764 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.070228242 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.11464958 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.445538145 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.269141111 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.217704367 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.501238576 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.078372537 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.086188989 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.231601176 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.078111591 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.249941166 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.024713713 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.068075943 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.168913243 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.243562504 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.259197775 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.073523779 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.259181865 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.073468404 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.130443811 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.076645202 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.213906922 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.079246662 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.135015407 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.097092925 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.100294626 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.257827551 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.221633028 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.088197528 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.077780818 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.203586486 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.942883145 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.079439851 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.096124047 seconds)
  done (took 180.44083557 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.440431043 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.092006308 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.136104166 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.291838101 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.830920898 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.798646356 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.073113927 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.073250786 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.073713408 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.079419078 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.072172827 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.074485019 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.141879052 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.635396176 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.085954463 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.072807971 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.073894757 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.07297515 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.646943119 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.075510138 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.071566906 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.072047004 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.135414596 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.445146703 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.210337556 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.075007644 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.081556437 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.208957476 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.082695 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.073018456 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.210017378 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.074809905 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.150386855 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.211368242 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.08148235 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.154027339 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.080342047 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.55589902 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.072648728 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.072712609 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.07568699 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.134737929 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.073211278 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.162680077 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.16261179 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.072891728 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.086061429 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.268829789 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.764035457 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.077023467 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.072624159 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.073475583 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.075486505 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.073591853 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.301113856 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.076323036 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.097810891 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.677321234 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.073625468 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.073695355 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.075355049 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.074101579 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.074815063 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.080537681 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.112448112 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.874167386 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.140134426 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.46491225 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.872343723 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.074061387 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.649143139 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.133047913 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.074992082 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.153678095 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.074468182 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.074512378 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.074434754 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.07393763 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.203538621 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.214800274 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.079428179 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.214650616 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.07183671 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.067457068 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.116376069 seconds)
    (85/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.066006746 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.617887663 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.071293537 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.078272623 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.122939857 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.066212652 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.065881244 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.073013407 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.229648424 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.057532363 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.048534319 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.065970486 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.160375686 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.067541347 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.272788413 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.293405971 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.141073204 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.314776552 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.293907418 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.068310985 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.06525289 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.080821083 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.06694496 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.066265584 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.076594475 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.067358184 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.067087293 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.067433508 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.0676055 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.065736723 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.065799747 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.067930347 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.079990369 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.067229631 seconds)
  done (took 443.299862638 seconds)
done (took 842.722960747 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.76378733 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.833995808 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.675800153 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.718883242 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.681289086 seconds)
  done (took 15.683305065 seconds)
done (took 17.683878646 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.088766117 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.084223182 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.07409122 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.092127705 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.088792606 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.08639894 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.119974577 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.100637312 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.106783549 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.085589462 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.094860632 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.077764106 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.089667669 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.100646775 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.090604907 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.09265539 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.079970738 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.078225776 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.095061032 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.075477774 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.074515382 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.089894108 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.088822899 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.093893694 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.107930094 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.088141868 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.080579745 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.088987774 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.087947047 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.095284766 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.122923338 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.092260093 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.117426674 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.094317656 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.093061174 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.096353857 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.084078668 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.109238524 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.08596647 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.123847981 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.077215786 seconds)
  done (took 87.805684223 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.075843147 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.210609503 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.286378451 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.1073459 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075114475 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.290476175 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.132552719 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.202639698 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.206720422 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.286878656 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.298434917 seconds)
  done (took 26.173931543 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.074321963 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.211218053 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.289061219 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.082134308 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.077562673 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.28934737 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.139284647 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.210309663 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.211143239 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.290581714 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.304055873 seconds)
  done (took 26.195674701 seconds)
done (took 142.177165237 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.450803284 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.096364157 seconds)
  done (took 6.55790544 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.06886211 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.08501949 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.215652636 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.068772323 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.069871531 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.070389231 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.070845064 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.069315042 seconds)
  done (took 18.727545165 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.067363389 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.068300329 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.067887131 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.067476122 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.068104034 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.055554908 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.068004155 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.069119242 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.068635555 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.068744434 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.067567426 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.068810569 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.068768969 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.068564248 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.068867059 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.068736314 seconds)
  done (took 35.090733319 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.068861801 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.069153171 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.067888564 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.069426209 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.07375296 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.067387613 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.068276999 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.067393563 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.072459729 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.067487761 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.066503538 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.064703757 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.065203903 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.066865154 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.066580051 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.066530364 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.066510795 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.066196381 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.067140921 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.066137995 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.065893042 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.066003519 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.07101571 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.067342432 seconds)
  done (took 51.635574829 seconds)
done (took 114.020395884 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.31189797 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.64299325 seconds)
  done (took 8.962582489 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.070503522 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.067030896 seconds)
  done (took 6.200138929 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.066980108 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.068185817 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.067808042 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.067402074 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.067436934 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.067552518 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.067667184 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.067133059 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.068003248 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.067142655 seconds)
  done (took 22.683592063 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.067171531 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.067830895 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.066890911 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.071689816 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.067407542 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.067674988 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.067947107 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.06810765 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.068146599 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.067855987 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.067762565 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.067745885 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.067868385 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.067589483 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.06862423 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.067946991 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.067661638 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.062343665 seconds)
  done (took 39.227431316 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.068726858 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.068885685 seconds)
  done (took 6.140119771 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.067774366 seconds)
    (2/7) benchmarking "second"...
    done (took 2.068576978 seconds)
    (3/7) benchmarking "month"...
    done (took 2.068744549 seconds)
    (4/7) benchmarking "year"...
    done (took 2.068265541 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.068762065 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.068183306 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.068608838 seconds)
  done (took 16.487977564 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.068885681 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.224529487 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.278614395 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.692783153 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.070020107 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.071373399 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.948665779 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.071647199 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.073432735 seconds)
  done (took 22.508790162 seconds)
done (took 124.211004122 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.916421363 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.075155426 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.349955123 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.135557273 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.097063363 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.368995265 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.090154995 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.617892441 seconds)
done (took 44.652875295 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.21804501 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.067549315 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.098058681 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.098275514 seconds)
  done (took 23.275229741 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.069443147 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.372201323 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.094508569 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.025704518 seconds)
  done (took 23.583789834 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.445335498 seconds)
    (2/2) benchmarking "read"...
    done (took 2.413766433 seconds)
  done (took 6.873477679 seconds)
done (took 62.953532735 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.071032982 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.07042844 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.070470645 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.070250601 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.069922707 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.070400857 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.070353339 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.070365736 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.070675071 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.070480234 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.070467944 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.070582739 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.070597655 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.070369878 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.070767114 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.070695044 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.070903885 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.070283216 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.071608045 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.070908952 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.070456623 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.070311442 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.071089402 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.071533624 seconds)
  done (took 51.706961405 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.071132603 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.071306453 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.071344096 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.071198316 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.070840534 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.071624287 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.071404056 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.071922681 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.071261011 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.070547904 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.070757138 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.071243112 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.071327613 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.071380943 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071961503 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.071948193 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.072264916 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.071180323 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.071394178 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.071863504 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.07197051 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.071128074 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.072116316 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.072588034 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.072366296 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.072195652 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.072329595 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.072161654 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.072556105 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.072937286 seconds)
  done (took 64.162987982 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.07183072 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.071376198 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.050075849 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.060845161 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.07263279 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.073337112 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.071894208 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.072845112 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.072725191 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.072980712 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.0728488 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.073573306 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.073484919 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.073371875 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.073159446 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.07375476 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.072761525 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.073561048 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.073244794 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.07298291 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.072549875 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.073559082 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.072220362 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.073692627 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.074155671 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.073577501 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.07407633 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.073692378 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.074392763 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.073598104 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.073251833 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.074051381 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.073878973 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.073695515 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.074406118 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.072938069 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.074813042 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.077111791 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.081997753 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.073930062 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.073812026 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.07500437 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.074801682 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.074763444 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.074127163 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.074314301 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.074312187 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.074299062 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.075747978 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.064600614 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.073990204 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.074128528 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.074173075 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.075098904 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.075634689 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.075198833 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.074404631 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.074989289 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.075733694 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.076366769 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.07514393 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.075506452 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.07558224 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.077705175 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.07599983 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.075995045 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.076266485 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.076306499 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.076574994 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.076145333 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.075899514 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.075607554 seconds)
  done (took 151.32328585 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.075715181 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.07674135 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.0770255 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.075909477 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.076460342 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.077128728 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.076504302 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.076511704 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.076614713 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.077120495 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.077108395 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.077137998 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.077566349 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.077510999 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.077315252 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.077269998 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.077648828 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.076720599 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.07751174 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.077954769 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.077346185 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.077608751 seconds)
  done (took 47.711367887 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.077526263 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.077468263 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.077160979 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.078341596 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.077845421 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.076873266 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.078078618 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.077929991 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078170614 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.077913559 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.077995771 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078601761 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.07795044 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.077203679 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.077290991 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.07831962 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.078300426 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.077798654 seconds)
  done (took 39.419459997 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.079164572 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.078020696 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.077908469 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.077860415 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.078319028 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.078397377 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.07760875 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.078346991 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.078105076 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.079012921 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.079008708 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.079198649 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.078968017 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.078350381 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079468438 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.07913384 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.079454754 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079321671 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078604694 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.078792168 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.079081848 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.078908018 seconds)
  done (took 47.749958741 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.079066036 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.080004202 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.078860006 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.07965315 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.078929028 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.079419687 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.079522086 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.080388323 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.079249245 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.078834151 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.079512127 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.080419851 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.079738141 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.07931287 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.079289157 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.080763274 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.080624261 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.080017632 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.080593577 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.081044344 seconds)
  done (took 43.614920167 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.081590717 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.080728268 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.080354884 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.081427063 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082103635 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.081105818 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.081576827 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.081062382 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.081906743 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.081944454 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.082025795 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.081982635 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.081943289 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.081549333 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.081240462 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082697026 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.080992739 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.081134281 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.082190096 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082000713 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.082568366 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.082192577 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.082045424 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.082838147 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.08200472 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.082758606 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.082715772 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.082461713 seconds)
  done (took 60.31278671 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.081913103 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.081446431 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.081975683 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.081925561 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.070979534 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.08184309 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.081157073 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.081375442 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.081488952 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.081940811 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.081837248 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.08191613 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.081779715 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.082178674 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.081757672 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.082751137 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082662961 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.082010621 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.081815053 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.08273878 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.082579274 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082465923 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.082935955 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.082995837 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082019345 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.082965555 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.08340881 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.082230369 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.0821041 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.083642879 seconds)
  done (took 64.478634945 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.100966019 seconds)
    (2/2) benchmarking "in"...
    done (took 2.10118922 seconds)
  done (took 6.22514581 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.083257202 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.083563964 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.083501047 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.083836366 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.083910212 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.083733673 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.08333248 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.083698802 seconds)
  done (took 18.693005241 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.084304254 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.087920156 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.084104351 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.084121134 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.08480034 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.091092313 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.085126897 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.085416649 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.08644744 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.085699286 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.08874233 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.076687403 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.092539689 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.075431578 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.083644868 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.084599925 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.08643897 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.08720301 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.085968801 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.085393383 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.08807921 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.085326899 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.084810431 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.084230712 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.084743796 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.087278855 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.095305332 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.086731334 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.086012268 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.08552538 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.091761562 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.084864564 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.086177804 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.087765424 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.085878411 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.086007156 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.092916173 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.086790067 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.086733485 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.057576809 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.08831933 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.088458496 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.089433959 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.093295933 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.085629351 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.086829185 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.085354157 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.086651789 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.086277379 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.089920439 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.094053915 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.085746727 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.086897434 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.086470914 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.088535035 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.08715963 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.081265856 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.089170381 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.093060624 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.093367765 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.091220163 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.106534854 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.095265837 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.087489344 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.0877203 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.096619096 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.11064059 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.087728473 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.089393898 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.087689819 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.092971444 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.085950155 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.086531021 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.087157348 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.09887145 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.09424924 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.086852391 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.086350775 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.086340338 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.08740136 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.088788542 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.087765992 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.087181314 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.087467765 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.085551883 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.112577114 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.087484753 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.087787445 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.0898565 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.087453152 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.091795274 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.089821287 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.087521929 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.087611594 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.08866722 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.089978753 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.087570491 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.087764411 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.086670355 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.095689136 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.087367888 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.08823031 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.091657353 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.09578415 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.087489926 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.088594751 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.090205577 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.089401161 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.094976414 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.088759176 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.089470982 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.088890535 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.08939125 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.092832403 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.088877016 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.091907653 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.095951089 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.096160518 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.08992388 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.072239197 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.083522988 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.09172269 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.099187332 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.11205231 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.088905577 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.093297343 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.093091558 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.100639528 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.09182685 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.088991981 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.091155976 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.087649549 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.090117043 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.091697691 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.089257056 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.080675361 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.088683266 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.077772112 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.089195372 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.090637503 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.092751522 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.091812005 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.093056861 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.089838562 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.0941745 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.09076185 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.093198265 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.097098481 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.090359204 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.090409738 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.090225897 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.092883115 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.091609299 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.091384611 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.090340692 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.090772063 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.090222728 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.09126053 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.093161622 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.091281487 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.090674008 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.091750988 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.095583141 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.090586103 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.091772981 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.091650219 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.091507111 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.090485526 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.093054913 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.092320756 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.093812458 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.091837655 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.096333861 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.090852517 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.090496296 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.091750477 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.091282085 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.091506012 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.095377982 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.10287205 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.095369414 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.101127355 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.092274738 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.0990588 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.091805582 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.09369792 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.093324456 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.092577846 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.093484081 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.091700329 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.092061153 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.096197275 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.113291873 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.101931396 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.094786872 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.093369572 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.09789066 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.096919816 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.098942502 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.092666605 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.094770932 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.09449529 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.092992808 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.093305055 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.093281886 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.096422359 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.093909864 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.092978085 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.09621673 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.09370404 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.093080577 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.095511951 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.094140874 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.095486407 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.09327999 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.093655216 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.094342917 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.09287353 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.101407786 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.095881433 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.09373451 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.094347636 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.082758082 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.076558202 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.094318333 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.095156229 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.09771458 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.094064526 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.095577438 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.101243902 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.095112174 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.095166195 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.094432006 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.095083204 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.096482477 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.095032596 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.097414106 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.101834183 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.067604364 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.094579012 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.099760338 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.09446858 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.096942292 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.095076039 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.096367708 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.095204592 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.096872797 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.096419705 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.09462249 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.102750306 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.095342947 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.095552552 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.094233853 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.098125882 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.096184219 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.097808748 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.096456739 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.098568237 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.104136389 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.10202915 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.096856734 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.099015553 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.099046674 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.097430481 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.100453665 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.097184627 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.108515656 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.105329056 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.096454588 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.096203674 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.096963779 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.098617921 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.096865723 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.09697096 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.103936142 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.097487619 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.097904825 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.100344567 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.097631408 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.097090623 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.103116422 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.097919839 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.100055334 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.098933247 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.097794118 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.098044631 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.096848714 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.099135693 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.097474823 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.098944287 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.10028088 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.097006233 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.098385888 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.09729095 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.106208426 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.097554799 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.098555623 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.105140509 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.099693356 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.098225026 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.099506156 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.097646559 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.098994307 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.099323048 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.09732959 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.099427968 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.098041456 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.101928758 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.1083724 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.101908191 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.106451977 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.099652673 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.109105382 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.0986679 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.098259394 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.099378965 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.102902899 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.106507219 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.098434668 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.097573996 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.106419752 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.099951871 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.099528464 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.102226107 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.098064416 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.099502486 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.099295825 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.100523211 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.104221217 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.101943909 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.099116915 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.099849776 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.099837122 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.098940962 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.102811905 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.101938682 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.09990991 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.100470616 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.098625189 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.100511614 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.101400961 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.100302104 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.100411437 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.099754082 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.099786063 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.108771556 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.101056812 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.100722237 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.103843219 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.100208402 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.108507755 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.101318517 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.101330186 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.101969535 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.101403167 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.10349909 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.10075217 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.101490954 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.101350473 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.101222773 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.103097327 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.111782058 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.108322229 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.104879871 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.102863796 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.102053345 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.102112178 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.111341844 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.124501954 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.101627913 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.103830744 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.105377049 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.107974225 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.103791776 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.107032889 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.105881652 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.110789109 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.103212791 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.102057958 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.105557473 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.114431174 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.10275162 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.102551823 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.102423167 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.10704976 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.104253787 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.101999289 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.103588386 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.105501951 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.103947013 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.113338195 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.102496253 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.103706952 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.103383655 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.102448627 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.103202751 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.102759387 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.099214159 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.082832961 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.103965033 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.103649967 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.104743199 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.107225209 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.102417506 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.107055994 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.112523394 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.104463809 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.104681253 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.105544568 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.104294394 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.10549571 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.104123971 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.103003625 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.105737694 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.103879337 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.105116948 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.106935448 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.111679781 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.105142293 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.102900001 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.103825518 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.107273489 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.103738871 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.104491741 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.106066683 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.112252216 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.107988196 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.11622054 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.113941607 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.104248052 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.105642506 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.112133289 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.111422018 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.104203131 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.103969734 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.105137364 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.107173774 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.107366794 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.105181029 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.104343235 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.106925772 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.110098637 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.104722244 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.08426648 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.097155581 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.105110477 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.107471357 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.107096355 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.11061663 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.106033899 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.104693763 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.10482046 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.106898507 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.10642057 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.108269324 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.106308892 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.104785812 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.107626982 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.108058386 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.109509159 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.105105539 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.105822401 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.108308076 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.106167833 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.105829584 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.107071819 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.106619786 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.106891699 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.109974855 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.113473681 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.106097394 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.107890141 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.108175077 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.110358352 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.106849047 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.107454682 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.107097846 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.106646065 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.114369204 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.106711695 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.106742641 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.107136872 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.106965898 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.112515279 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.108220939 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.111465707 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.108058897 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.107691962 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.10741452 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.111432267 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.116099405 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.111906754 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.111409019 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.115059081 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.112122003 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.109485509 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.107849223 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.10747676 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.108328394 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.108667472 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.109954137 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.109974378 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.110131763 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.108335367 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.110443811 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.108766418 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.110363092 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.108969641 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.108090296 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.111205363 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.117115053 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.117502991 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.107672127 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.110758436 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.109362048 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.112458934 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.119242201 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.108919725 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.109204524 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.10963324 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.110637704 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.109426985 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.117202969 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.117051287 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.11272795 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.11008782 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.114794005 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.125519152 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.111782741 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.118842657 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.141922416 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.111157354 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.10923674 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.110447667 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.110908456 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.11015971 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.112701461 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.110446357 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.116283335 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.110828109 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.109959758 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.11809106 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.110459916 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.110363557 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.110361261 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.111189607 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.116599921 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.111222185 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.117244012 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.110016942 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.109992696 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.111054516 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.112795363 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.110028923 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.110119531 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.109759032 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.112011167 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.109998808 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.111297281 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.119802607 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.111088734 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.1112045 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.124169523 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.122120829 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.110964953 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.110385347 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.111361676 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.116366305 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.114400289 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.111203947 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.115711353 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.11904386 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.115400104 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.118749273 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.112075295 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.112778735 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.112544967 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.111389124 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.111859585 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.125645564 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.122302475 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.11473901 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.112747422 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.118616933 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.112021745 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.118593803 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.118340747 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.113154913 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.114769777 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.112683925 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.112587401 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.112263581 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.112547337 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.116155118 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.119860233 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.113734864 seconds)
  done (took 1253.635943513 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.111662196 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112955816 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.112398247 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.113829218 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112645986 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.113147131 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.112556437 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.113365224 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.11246027 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.112770819 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.113174283 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113133726 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.112471979 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.11206441 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113302078 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.113153549 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113400966 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.113562081 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.113387836 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.114199504 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.112921257 seconds)
  done (took 46.424065261 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.113450705 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.113509131 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.112631968 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.113133952 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.113590646 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.113612083 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.1135086 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113260409 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.11290181 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.114207294 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.113526709 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.113295779 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.114225676 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.11387011 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.114188993 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.114658295 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.114471981 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.114430318 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.114179368 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.114414979 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.114122106 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.114386684 seconds)
  done (took 48.556753162 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.115795364 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.114438535 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.115733696 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.114863339 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.114292644 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.115032427 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.090873212 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.117483802 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.115609635 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.116486873 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.123097958 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.122590567 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.114983345 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.119530539 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.115137836 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.11584375 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.260564459 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.117180645 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.115534324 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.115492742 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.116621447 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.121185043 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.115547114 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.115534644 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.116109662 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.116498369 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.115672485 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.11616485 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.115160473 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.117321756 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.120830501 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.116490311 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.116912032 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.118494658 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.116807753 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.118153832 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.121498215 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.116808187 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.116735622 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.115854549 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.126308563 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.139033203 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.11683831 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.117559369 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.125033765 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.116966861 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.117449309 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.120526554 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.124916052 seconds)
  done (took 105.955410463 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.11770741 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.117164487 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.117965906 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.117033248 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.117527955 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.116896233 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.11687947 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.117044686 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.117008548 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.118003798 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.117410885 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.116961778 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.117706976 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.116387042 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.118663077 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.117772838 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.118528452 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.118014877 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.118892552 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.118208077 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.118436781 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.117598552 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.118465969 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.118572657 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.118833752 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.118263245 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.119220402 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.118165166 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.117935605 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.118511906 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.119625226 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.118385885 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.118620646 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.118685115 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.118487401 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.119262287 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.119094265 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.119158934 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.119757994 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.12192743 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.119538355 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.118987664 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.118601875 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.118579557 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.118990376 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.118902885 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.120044691 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.11931836 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.118856665 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.119125832 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.118377976 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.118920461 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.11941728 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.119458857 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.118206577 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.120342871 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.120564515 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.120276828 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.120122902 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.120202945 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.120454506 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.120124801 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.120490629 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.120768909 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.120632465 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.120783309 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.120602989 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.120802677 seconds)
  done (took 146.138910295 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.121572407 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.121363101 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.121001665 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.121225764 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.120489072 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.120601209 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.121675347 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.122216452 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.115803382 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.117235318 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.122390608 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.121770152 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.120976262 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.120984648 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.121801519 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.121892338 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.121923255 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.121471658 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.122246891 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.122053379 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.121939866 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.122892801 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.122829307 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.122189759 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.122616739 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.122821418 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.121578008 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.122549619 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.122501332 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.122848737 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.122535167 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.122625043 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.121816708 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.12282302 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.122894882 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.122881132 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.122861578 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.122716788 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.122183837 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.123495991 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.123960991 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.122864962 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.123313828 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.123455908 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.122529138 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.122951482 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.123361127 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.123549058 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.123211968 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.123148239 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.123249558 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.122878938 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.122855685 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.123291304 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.124751037 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.12311117 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.124115869 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.123822264 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.124316366 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.124388377 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.124349782 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.123254178 seconds)
  done (took 133.652020196 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.123568992 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.123413594 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.12379198 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.123346487 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.124082926 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.124061692 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.120932444 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.12471446 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.12466369 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.124249709 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.123713811 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.12388357 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.125177449 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123875027 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.123690632 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.125870301 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.124697299 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.125306499 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.125098625 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.124426616 seconds)
  done (took 44.545452453 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.124066829 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.124469062 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.124908657 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.125344993 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.124599179 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.125397775 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.124402525 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.12514421 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.12462777 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.125267133 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.124417613 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.124493823 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.124778118 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.12512813 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.124933641 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.126230863 seconds)
  done (took 36.062275901 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.125338974 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.125597899 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.126100778 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.125675014 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.125865252 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.124985729 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.125618878 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.125965487 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.126344202 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.127225418 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.125887337 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.126572126 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.126171985 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.113654044 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.125893994 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.126815945 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.126388504 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.125754633 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.126625435 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.126876755 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.127411055 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.126228232 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.126716514 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.127013183 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.127058781 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.127396459 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.126710649 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.127435159 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.12715115 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.126509217 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.127318832 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.126762262 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.126212322 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.126907268 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.127520288 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.127384906 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.12716906 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.126869416 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.127042578 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.127224933 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.127732645 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.127223268 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.127843767 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.127908797 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.127220323 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.12829019 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.127913273 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.127540198 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.128296774 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.127936022 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.127701946 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.128084886 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.128313233 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.129554637 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.128215349 seconds)
  done (took 119.034537717 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.127840484 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.128287412 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.12762882 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.128777712 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.128757007 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.125661685 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.128323313 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.127937512 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.128378318 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.12873139 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.129300953 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.128469108 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.128181302 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.128997047 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.128974714 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.128860453 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.128863986 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.129014752 seconds)
  done (took 40.378224619 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.128451018 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.128748005 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.129669645 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.129588073 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.129382086 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.129890702 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.129868022 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.129450708 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.128850683 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.129434513 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.130248245 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.128963256 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.129440615 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.129475916 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.129513565 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.130204543 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.129291178 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.129593132 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.129626318 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.129281928 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.129599376 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.129860054 seconds)
  done (took 48.917712731 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.129756222 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.130007202 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.147461217 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.152718814 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.150424138 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.165895692 seconds)
  done (took 14.945373407 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130351736 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129674495 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.130518881 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130646789 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130098009 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131000644 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130306858 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130088653 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130428833 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131103424 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130314553 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130636919 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130192763 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131268566 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131178234 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130727602 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130914451 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131119579 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131001293 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130469208 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130412289 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130671384 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130948477 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130590268 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131237435 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131152667 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132285016 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131491415 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132991406 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132043778 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130729412 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131658548 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13220653 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131841733 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131991169 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133106069 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132862167 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131946165 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132243639 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131658393 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.131892852 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132405996 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132684742 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132149637 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132315412 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132773835 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13254431 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132167982 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131909418 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132915826 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.100839698 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130982147 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132218263 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132616856 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133256343 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133375393 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133360145 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133627374 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.133137468 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13369572 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132592808 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132844055 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132693912 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133606058 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133676352 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133743726 seconds)
  done (took 142.737437477 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133524585 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.133638613 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132991279 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134460507 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133770824 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134160132 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133466459 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133939548 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13443388 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133612495 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133600719 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133500712 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134316444 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133896333 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134723296 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134640503 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134213424 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133399961 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133893795 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13450309 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128027855 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.112544349 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.135478487 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134681759 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135021195 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135298682 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134548765 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134158834 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135147172 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135272811 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134243204 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134700724 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135138239 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.135092436 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13512423 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134922653 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135269003 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135399741 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135425855 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135660134 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135696522 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.136109743 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134808743 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135020532 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135917229 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135501276 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135599979 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136142953 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135917955 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131910993 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127894815 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.136342688 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137174763 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135733403 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131860772 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.136425247 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.136411589 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135642668 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.136760613 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.137258077 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135372346 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135834804 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.137119854 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136579609 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.137036633 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.137313253 seconds)
  done (took 142.947607149 seconds)
done (took 2921.338700205 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.250850644 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.179099201 seconds)
  done (took 16.504875233 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.300546513 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.178712769 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.324901438 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.254644758 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.13928316 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.143468844 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.138065663 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.138673783 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.228682842 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.139505878 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.19402254 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.139152115 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.139826899 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.139654869 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.14004998 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.140137897 seconds)
  done (took 56.970159923 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.141735665 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.142780531 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.140639951 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.138210621 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.150695536 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.214284066 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.162260503 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.14302579 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.15439826 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.17420454 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.157955249 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.147551933 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.147376178 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.145054455 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.220598281 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.183824287 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.200778938 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.217051199 seconds)
  done (took 41.059064161 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.222079432 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.162153991 seconds)
  done (took 11.469217374 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.150469069 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.152472689 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.141968718 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.146011759 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.164057313 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.152581825 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.173786354 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.172292765 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.162550017 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.172225471 seconds)
  done (took 73.695389807 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.143113219 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.142894014 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.399966897 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.151277212 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.147425979 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.164307928 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.141716208 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.172242618 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.145450255 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.140232538 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.153318326 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.401476322 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.15567445 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.142804241 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.564346892 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.154989589 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.147415855 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.173754765 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.176019068 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.148204483 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.148922107 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.14537561 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.293164358 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.837264167 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.144352222 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.14624306 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.149528781 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.139946476 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.140319609 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.143361916 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.144255922 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.142873423 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.146326668 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.145908803 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.1492914 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.146314975 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.633716996 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.16061594 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.150220379 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.230861535 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.187104871 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.149839384 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.931433511 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.145485555 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.141522401 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.148924127 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.838156016 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.238237155 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.146490398 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.328795833 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.486804409 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.158367584 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.313816052 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.299547449 seconds)
  done (took 147.900085639 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.139985635 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.378897479 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.295197277 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.145415205 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.399273919 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.353351047 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.143747968 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.187787294 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.144269745 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.345116795 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.398252622 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.246573848 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144422388 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.141598593 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.142480196 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.141829435 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291548449 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.210894244 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.144416909 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.141705434 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.167098861 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.345483649 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.266447749 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.145126837 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.170373835 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.349244957 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.26561899 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.245572906 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.958321519 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.141463395 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.205274879 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.14496058 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.146209115 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.141914385 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.29707647 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.238224859 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.228432391 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.146178702 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.142256364 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.142945279 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.815268713 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.34405387 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.240601263 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.268239699 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.39559662 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.359046574 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.755320939 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.143619227 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.770285206 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.308102853 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.350203029 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.352379835 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.265271818 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.147431841 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.43957614 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.143219689 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.143562091 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.365711469 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.364270093 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.244420444 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.147437001 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.144630082 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.143798593 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.382848599 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.147951786 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.236577946 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147541221 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.144071823 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.236657231 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.247449896 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.372636943 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.36832686 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.177246341 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.464087423 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.633157822 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.348155904 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.210988972 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.366840638 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.148719207 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144508911 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.223325294 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.989076609 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.400862226 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.388514479 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.345313651 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.176717193 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.795631411 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.146447982 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.332763322 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.336808382 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.380301326 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.387148278 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.3847468 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.512497681 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.145260863 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.145944214 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.436656974 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.263517765 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.095636751 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.495547272 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.375087379 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.644361367 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.171952352 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.491610243 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277116237 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.150008658 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.794675036 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.606714788 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.351480616 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.18626367 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.149237981 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.146304774 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.335920457 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.050245023 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.145918946 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.841316486 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.207204966 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.15008886 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.351107035 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.149905127 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.390889712 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.14965814 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.377949318 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.779424533 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.176978581 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.322137787 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.390687425 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.780693872 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.38709353 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.396867661 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.262297922 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.382630242 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.958907807 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.148912282 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.407450712 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.150412062 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.145686254 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.315718309 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.149241584 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.290726491 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.149700717 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.412753278 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.169200859 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.376345697 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.150369283 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.38597932 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.181258442 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.1982282 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.150476803 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.277440495 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.14845639 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.994575294 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.305951042 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.151022445 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.148287511 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.755149475 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.147676469 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.296695113 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.373430708 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.169972105 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.219109713 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.714081625 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.140609506 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.236723558 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.172026531 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.784575006 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.147616856 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.405806087 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.127608262 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.627167213 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.148784889 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.384478759 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.335647717 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.152142334 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.149995536 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.988473069 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.148385576 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.148431799 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.30576496 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.615532493 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.055189676 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.34743572 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.152712154 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.278073044 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.152549372 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.230801819 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.489795366 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.1492397 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.150619444 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.149960423 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.150398119 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.148599326 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.358955317 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.177521385 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.584240874 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.286554304 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.406163882 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.457771911 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.34774202 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.191948306 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.153317028 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.373626521 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.152327941 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.214470709 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.153585594 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.168834144 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.379800476 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.154401184 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.357570984 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.384839393 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.204425623 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.194433184 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.153849692 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.151316544 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.063255488 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.296523184 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.239434557 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.154089671 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.150843861 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.265636618 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.274186527 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.334572965 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.986465337 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.298669474 seconds)
  done (took 963.688933433 seconds)
done (took 1313.355918956 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.150985001 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.154293245 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.156789808 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.151375058 seconds)
  done (took 30.704779344 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.152362976 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.152237369 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.153574006 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.152261494 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.153161448 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.153265511 seconds)
  done (took 15.007842921 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.153155345 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.15465309 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.15558491 seconds)
  done (took 23.554003865 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.586520046 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.563591675 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.203975005 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.297891678 seconds)
  done (took 11.743670988 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.157110625 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.154123637 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.154625701 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.154184591 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.123785937 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.154820376 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.12467149 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.155310261 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.15511991 seconds)
  done (took 21.434249436 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.310594184 seconds)
done (took 108.836486197 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.158372399 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.364215881 seconds)
    (3/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.165632334 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.632555949 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.025070361 seconds)
    (6/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.424825478 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.27364248 seconds)
    (8/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.460217811 seconds)
    (9/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.437017753 seconds)
    (10/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.166729787 seconds)
    (11/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.292281998 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.178500577 seconds)
    (13/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.154157467 seconds)
    (14/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.374634221 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.181086332 seconds)
    (16/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.592684722 seconds)
    (17/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.161274748 seconds)
    (18/341) benchmarking ("sort", BigInt, false)...
    done (took 7.153763137 seconds)
    (19/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.288408796 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.464978321 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.175660903 seconds)
    (22/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.142129243 seconds)
    (23/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.37492251 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.17231455 seconds)
    (25/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.301821072 seconds)
    (26/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.242949078 seconds)
    (27/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.236798567 seconds)
    (28/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.528438592 seconds)
    (29/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.162205535 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.169529548 seconds)
    (31/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.165913556 seconds)
    (32/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.155529816 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.254602999 seconds)
    (34/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.272187743 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.382654836 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.244187341 seconds)
    (37/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.361371988 seconds)
    (38/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.079996869 seconds)
    (39/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.160021862 seconds)
    (40/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 4.136093691 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.932811915 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.199038863 seconds)
    (43/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.553701496 seconds)
    (44/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.541274712 seconds)
    (45/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.481908774 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.490966047 seconds)
    (47/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.430125023 seconds)
    (48/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.398971406 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.183462369 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.573296668 seconds)
    (51/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.166823696 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.042708733 seconds)
    (53/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.180628711 seconds)
    (54/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.159924399 seconds)
    (55/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.459620575 seconds)
    (56/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.435513799 seconds)
    (57/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.290339832 seconds)
    (58/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.224140587 seconds)
    (59/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.357716156 seconds)
    (60/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.719396173 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.373133573 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.519687862 seconds)
    (63/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.386344281 seconds)
    (64/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.283643587 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.564123284 seconds)
    (66/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.291492163 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.283268637 seconds)
    (68/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.41550563 seconds)
    (69/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.098117866 seconds)
    (70/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.299909766 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.318126636 seconds)
    (72/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.397540458 seconds)
    (73/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.777664507 seconds)
    (74/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.295244668 seconds)
    (75/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.927104509 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.903736602 seconds)
    (77/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.374683341 seconds)
    (78/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.163734066 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.676185879 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.170377708 seconds)
    (81/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.351190125 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.172859391 seconds)
    (83/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.265756449 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.22784857 seconds)
    (85/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.920013982 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.460502575 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.474256991 seconds)
    (88/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.427009848 seconds)
    (89/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.520452296 seconds)
    (90/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.533874568 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.28704505 seconds)
    (92/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.247483942 seconds)
    (93/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.245588636 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.385612738 seconds)
    (95/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.698912077 seconds)
    (96/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.499256773 seconds)
    (97/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.556863645 seconds)
    (98/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.160941458 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.547573748 seconds)
    (100/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.99702052 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.898276655 seconds)
    (102/341) benchmarking ("sort", Float64, false)...
    done (took 5.878019091 seconds)
    (103/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.293687786 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.477838595 seconds)
    (105/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.16304739 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.18360243 seconds)
    (107/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.792847466 seconds)
    (108/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.146218217 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.167679564 seconds)
    (110/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.317164923 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.474349807 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.069832999 seconds)
    (113/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.849905661 seconds)
    (114/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.332307778 seconds)
    (115/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.459807596 seconds)
    (116/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.162270784 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.176059602 seconds)
    (118/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.238116259 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.170686466 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.404285321 seconds)
    (121/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.291595166 seconds)
    (122/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.158884868 seconds)
    (123/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 4.20333321 seconds)
    (124/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.883438514 seconds)
    (125/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.467355929 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.559048083 seconds)
    (127/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.164381705 seconds)
    (128/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.172466889 seconds)
    (129/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.157221532 seconds)
    (130/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.184810097 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.242447502 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.160161273 seconds)
    (133/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 9.454873145 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.561883235 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.43491936 seconds)
    (136/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.296860143 seconds)
    (137/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.436595034 seconds)
    (138/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.163875746 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.297645501 seconds)
    (140/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.261653795 seconds)
    (141/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.262425985 seconds)
    (142/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.055424975 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.47114049 seconds)
    (144/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.176732061 seconds)
    (145/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.020547341 seconds)
    (146/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.671575402 seconds)
    (147/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.622675646 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.178426184 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.869898391 seconds)
    (150/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.167907687 seconds)
    (151/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.265798872 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.164081585 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.255713109 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.40641437 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.458678308 seconds)
    (156/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.060472628 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.490370406 seconds)
    (158/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.466020985 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 2.38667067 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.403190358 seconds)
    (161/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.245457291 seconds)
    (162/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.173070802 seconds)
    (163/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.156197414 seconds)
    (164/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.346715991 seconds)
    (165/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.406138162 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.190367473 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.161716252 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 3.931628595 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.178178609 seconds)
    (170/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.399859833 seconds)
    (171/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.177708068 seconds)
    (172/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.961434222 seconds)
    (173/341) benchmarking ("sort", Int64, false)...
    done (took 5.804190556 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.921884795 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.657862454 seconds)
    (176/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.267757326 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.372476998 seconds)
    (178/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.071426622 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.071668734 seconds)
    (180/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.168617979 seconds)
    (181/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.266857587 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.375062964 seconds)
    (183/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.610326198 seconds)
    (184/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.559427962 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.313115538 seconds)
    (186/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.426387506 seconds)
    (187/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.248769443 seconds)
    (188/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.16675262 seconds)
    (189/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 4.243762875 seconds)
    (190/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.881866113 seconds)
    (191/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.881527462 seconds)
    (192/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.332991333 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.180433777 seconds)
    (194/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.581856202 seconds)
    (195/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.176695771 seconds)
    (196/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.252834654 seconds)
    (197/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.571144005 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.057272304 seconds)
    (199/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.335103699 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.32007245 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.16426053 seconds)
    (202/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.589129661 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.260029999 seconds)
    (204/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.306676874 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.954908676 seconds)
    (206/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.495065667 seconds)
    (207/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.147254491 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.383019785 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.162787475 seconds)
    (210/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.295902447 seconds)
    (211/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.293086722 seconds)
    (212/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.832645294 seconds)
    (213/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.585088697 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.081770541 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.156014933 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.571659734 seconds)
    (217/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.167405824 seconds)
    (218/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.018566962 seconds)
    (219/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.87320805 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.181215313 seconds)
    (221/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.182455429 seconds)
    (222/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.351975089 seconds)
    (223/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.363611653 seconds)
    (224/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.550878877 seconds)
    (225/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.566473502 seconds)
    (226/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.315161401 seconds)
    (227/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.46345445 seconds)
    (228/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.590979654 seconds)
    (229/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.226656312 seconds)
    (230/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.164555562 seconds)
    (231/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.169306802 seconds)
    (232/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.372803427 seconds)
    (233/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.164895327 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.658279955 seconds)
    (235/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.317353261 seconds)
    (236/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.179347484 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.298972115 seconds)
    (238/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.37330976 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.189487924 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.514880535 seconds)
    (241/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.391921511 seconds)
    (242/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.170134369 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.040706177 seconds)
    (244/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.339269325 seconds)
    (245/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.168593887 seconds)
    (246/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.241913748 seconds)
    (247/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.778918278 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.348069348 seconds)
    (249/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.465821995 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.264705506 seconds)
    (251/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.444047015 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.884154273 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.180801369 seconds)
    (254/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.214223321 seconds)
    (255/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.861818963 seconds)
    (256/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.316420323 seconds)
    (257/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.319484845 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.515467122 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.186573061 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.2891899 seconds)
    (261/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.392202971 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.303415601 seconds)
    (263/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.165581643 seconds)
    (264/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.186511704 seconds)
    (265/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.242993506 seconds)
    (266/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.288404851 seconds)
    (267/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.919314726 seconds)
    (268/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.947324245 seconds)
    (269/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.276751923 seconds)
    (270/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.168762944 seconds)
    (271/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.247501472 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.303642992 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.255118828 seconds)
    (274/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.244288332 seconds)
    (275/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.169229153 seconds)
    (276/341) benchmarking ("sort", Float32, false)...
    done (took 5.836346431 seconds)
    (277/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.933270955 seconds)
    (278/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.487952058 seconds)
    (279/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.279702777 seconds)
    (280/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.64325485 seconds)
    (281/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.168906475 seconds)
    (282/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.802457037 seconds)
    (283/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.247384971 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.276877217 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.425740754 seconds)
    (286/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.56395553 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.570480419 seconds)
    (288/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.255079176 seconds)
    (289/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.303772651 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.183642334 seconds)
    (291/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.590887207 seconds)
    (292/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.181667691 seconds)
    (293/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.352808297 seconds)
    (294/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.371728765 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.174760448 seconds)
    (296/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.163164437 seconds)
    (297/341) benchmarking ("sort", Int8, false)...
    done (took 5.136862307 seconds)
    (298/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.174647119 seconds)
    (299/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.327292698 seconds)
    (300/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.30998818 seconds)
    (301/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.50556949 seconds)
    (302/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.427861959 seconds)
    (303/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.147509028 seconds)
    (304/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.266766989 seconds)
    (305/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.260683859 seconds)
    (306/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.637987686 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.271319063 seconds)
    (308/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.170267509 seconds)
    (309/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.676620178 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.379675164 seconds)
    (311/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.230984028 seconds)
    (312/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.636345488 seconds)
    (313/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.406040166 seconds)
    (314/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.311594819 seconds)
    (315/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.290407853 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.524824983 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.174232698 seconds)
    (318/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.82980331 seconds)
    (319/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.485076977 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.61329791 seconds)
    (321/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.366011988 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.518032073 seconds)
    (323/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.18607747 seconds)
    (324/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.171320751 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.233787495 seconds)
    (326/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.177946008 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 5.529093288 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.169702771 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.04291142 seconds)
    (330/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.779819377 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.308708537 seconds)
    (332/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.170363861 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.097711042 seconds)
    (334/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.987785404 seconds)
    (335/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.388770912 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.300212236 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.441643216 seconds)
    (338/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.537115459 seconds)
    (339/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.273676177 seconds)
    (340/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.164591599 seconds)
    (341/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 3.976805722 seconds)
  done (took 1194.649037761 seconds)
done (took 1197.071334606 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.193636558 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.176872666 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.668209223 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.188902695 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.17895571 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.182740256 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.675467697 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.209167634 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.196349072 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.675321798 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.190873442 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.179610745 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.194915363 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.21470693 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.190856223 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.194217723 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.186109354 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.204148878 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.215644736 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.187397709 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.228702314 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.185982668 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.178463602 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.23198523 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.180645736 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.193817282 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.193447169 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.229412928 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.229205795 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.182516016 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.185259541 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.525811693 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.22585315 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.187573361 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.192151069 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.194465488 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.185979985 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.197092871 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.192352446 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.196410494 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.18110573 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.190306605 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.185065437 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.183478511 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.180067251 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.179628488 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.183594953 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.305874219 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.195638072 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.509296734 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.229465765 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.194312399 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.230681864 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.183921195 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.184620472 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.184027516 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.229825336 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.187307584 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.187586059 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.510346416 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.268249648 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.19648618 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.508619677 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.238437832 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.191576394 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.189863303 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.181150393 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.194100401 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.526579473 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.708929627 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.213198957 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.201583287 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.183052524 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.185792818 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.195981879 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.672911794 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.197123574 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.743645411 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.207487295 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.196699897 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.188819775 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.184816044 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.183992413 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.199730915 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.19503236 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.18272361 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.189537914 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.189276777 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.197296596 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.527885547 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.222484041 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.66812222 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.190277588 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.195939994 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.195712427 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.742884759 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.210737081 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.195745819 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.186049181 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.520397131 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.219608003 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.197253536 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.185586398 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.194823972 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.298274315 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.196475417 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.197095442 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.183873146 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.206343609 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.189963538 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.184320601 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.196903729 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.204828627 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.218802192 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.201239722 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.183850208 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.192694231 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.191581446 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.194662148 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.191764665 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.190005242 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.195433953 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.184907551 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.23600945 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.197765676 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.200210546 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.299357199 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.191585941 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.309996739 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.199582155 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.191063924 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.186831703 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.51365443 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.223553853 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.206136582 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.19801911 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.208085229 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.207110552 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.2024529 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.187227133 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.200794789 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.188693126 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.237179613 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.186144138 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.216994284 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.237457761 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.1994569 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.192013977 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.196474127 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.221460564 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.20680392 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.190454932 seconds)
done (took 343.150458487 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.224682147 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.181240088 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.25655219 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.178582773 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.24592368 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.231994279 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.181785758 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.178094184 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.178772113 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.563242129 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.184271506 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.183030795 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.176739088 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.184651487 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.227992569 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.17954104 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.178186246 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.413719181 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.179670048 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.238788046 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.179640611 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.183698053 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.179695343 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.568993133 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.183551617 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.178329234 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.240212821 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.179014915 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.427624424 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.180255383 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.17882312 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.424658233 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.239340664 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.192352653 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.18738986 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.186477531 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.246132933 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.192195545 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.22675795 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.226242004 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.253856468 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.214121942 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.186492227 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.180103099 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.185526966 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.18073261 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.183486277 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.213269358 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.180892936 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.192459688 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.41446066 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.186156192 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.186927852 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.186006453 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.180890758 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.19418085 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.181066979 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.181553286 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.242147844 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.182670618 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.228264408 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.569176717 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.566735963 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.181106981 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.181124 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.180677176 seconds)
  done (took 204.503514555 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.247593361 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.26665403 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.248577814 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.185741945 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.231761219 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.249451497 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.185018274 seconds)
  done (took 17.732950677 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.187682618 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.181592496 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.204523097 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.203920182 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.181414267 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.321309993 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.193616373 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.187270372 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.207519637 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.182521996 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.520235316 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.205062702 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.187246301 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.180539466 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.194083241 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.210542141 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.184612525 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.181773434 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.280131725 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.260314043 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.186790322 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.190591668 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.212449982 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.194493921 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.18282856 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.183204059 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.183466919 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.189320376 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.18365471 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.183274777 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.183726244 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.196460132 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.184593283 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.183848677 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.182994479 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.182887822 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.182737236 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.182600978 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.183205754 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.181089518 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.18320323 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.182791518 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.184386428 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.183376974 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.171081451 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.206438869 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.183734273 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.183786102 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.183669027 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.184062456 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.213320101 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.184089672 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.184743108 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.191409466 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.225069769 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.192508655 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.185472165 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.171043786 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.152836287 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.18462461 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.184200039 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.26195869 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.207832337 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.185032565 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.207643029 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.223135912 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.185432902 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.184461563 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.185354275 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.210065796 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.187375685 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.207890369 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.184687611 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.283672651 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.185561701 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.325998322 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.207901772 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.189370089 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.188661307 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.184527289 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.192867737 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.186207013 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.18793457 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.192823271 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.189369356 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.185316766 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.186227061 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.187396001 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.193389923 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.186911705 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.231777647 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.186214218 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.186716948 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.284413575 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.186661287 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.284165545 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.212388103 seconds)
  done (took 235.684952474 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.191254812 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.187577452 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.198761998 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.186521851 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.186361164 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.191344318 seconds)
  done (took 15.26418065 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.189407913 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.18920925 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.185919899 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.186596327 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.186370459 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.187516811 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.186627727 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.189125605 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.190928007 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.187136279 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.186675693 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.18668129 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.188087854 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.18675387 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.187659549 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.187465832 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.186957923 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.18666863 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.185973053 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.187436343 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.434295454 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.186981705 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.187485043 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.191682357 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.192523091 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.18751005 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.196231364 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.186806178 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.186750934 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.193725494 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.191425896 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.188844003 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.192317746 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.194270323 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.191846102 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.192104316 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.191200838 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.188030164 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.188171448 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.188863581 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.187902335 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188808551 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.187867269 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.189478687 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.190994976 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.195996604 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.19251235 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.198151001 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.189010097 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.188354944 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.1886155 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.189069766 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.188888774 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.189018555 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.193249409 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.194211836 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.194385413 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.188207169 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.188429325 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.192798752 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.198302301 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.192838052 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.193924494 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.195790501 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.198729663 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.191981565 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.194829415 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.196136137 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.19287967 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.191976416 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.19171767 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.191530402 seconds)
  done (took 161.071930856 seconds)
done (took 636.364441185 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.293228744 seconds)
  done (took 9.420947211 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.347307506 seconds)
  done (took 9.580244104 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.269793279 seconds)
  done (took 12.411273918 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.220826826 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.197272823 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.19641844 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.20833144 seconds)
  done (took 30.962909561 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.557011726 seconds)
  done (took 9.686281529 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.213251785 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.192645158 seconds)
  done (took 16.59982373 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.192983248 seconds)
  done (took 9.326675692 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.659461111 seconds)
  done (took 9.805732086 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.213949645 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.216239338 seconds)
  done (took 16.579534185 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.199961598 seconds)
  done (took 9.330353652 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.968892923 seconds)
  done (took 10.148606344 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.208367549 seconds)
  done (took 9.356451564 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.211323034 seconds)
  done (took 9.341073755 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.961612778 seconds)
  done (took 10.091284112 seconds)
done (took 174.759785977 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.200356857 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.195932022 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.193000851 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.192412594 seconds)
  done (took 30.912340617 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.230060244 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.228992675 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.238121523 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.229976267 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.220047268 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.219689156 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.230237541 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.230382488 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.21983842 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.227461195 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.230487774 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.22705854 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.230002774 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.238313789 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.23858577 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.227587044 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.23085743 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.230725664 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.22077602 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.238973635 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.227388189 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.230925089 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.19627278 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.195423819 seconds)
  done (took 55.569963245 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.386571397 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.261593135 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.349643669 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.242383752 seconds)
  done (took 11.372093227 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.195846833 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.26128238 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.247333383 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.24055989 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.247010368 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.298841593 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.247870061 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.332053144 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.323768802 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.322745147 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.202870396 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.218064391 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.221301116 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.242619143 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.29868699 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.196006824 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.196209179 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.32374978 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.258543124 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.452901147 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.196756663 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.249082419 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.24854493 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.250113787 seconds)
  done (took 56.404714253 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.196807174 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.204793901 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.204735279 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.197890982 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.198838066 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.198613231 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.205349664 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.199660421 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.220448801 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.199130011 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.19471959 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.199337992 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.204837702 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.19810212 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.198334904 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.210598538 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.211998394 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.198345224 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.201977075 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.205019438 seconds)
  done (took 46.183643163 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.195284548 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.043265266 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.543140097 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.448098619 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.197380275 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.199930377 seconds)
  done (took 33.760944081 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.209334297 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.212833992 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.203485999 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.22168157 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.242014775 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.206707456 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.257356995 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.357348087 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.205310431 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.253502759 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.216521359 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.203399331 seconds)
  done (took 28.924506198 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.196526861 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.199132487 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.200134984 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.210909767 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.208234526 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.205191115 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.205905023 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.196301064 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.211461138 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.216376836 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.206258477 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.209817575 seconds)
  done (took 48.600105696 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.410898976 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.423605076 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400751188 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.636764682 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.515713755 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.181661282 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.483859443 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.413468164 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.899530615 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.927609768 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.499001038 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.181172504 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.14611921 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.124836866 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.096625653 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441339451 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200889141 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.057234929 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455592504 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.249217394 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201679652 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.200664948 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202819173 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.488755599 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.527278227 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.207326125 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.412789526 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215428254 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.19919624 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422973475 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.653866564 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.246862628 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.402627836 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.456784002 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54076075 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.260010735 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.302098779 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.23267437 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.239076836 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234292339 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210090809 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.211358092 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.743982523 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.214709143 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472627649 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201960179 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.20823639 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.309850869 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12599604 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.581495709 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318691999 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.200661929 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.235501801 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.633308144 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32067853 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.444076103 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.205564471 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.23370006 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25347885 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.51520112 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.311627511 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.300969773 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414201805 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127402649 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.6107693 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329235423 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.20366053 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.20651928 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.901741092 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.444105386 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.283125654 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.594143767 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.963845686 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.203255014 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.204501124 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.243845691 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291032068 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.201092033 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.498161664 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.181498083 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.129215223 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.288905684 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.598340302 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206670691 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.20120099 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209792362 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.048910847 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.127957551 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.271664363 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.520391713 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.52962724 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.203464706 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.203702417 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.225233614 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205766332 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.153038699 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.612857622 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.2630961 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.129797923 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.767577879 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.660952209 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.16378367 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.534915453 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240079614 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469860559 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.356236848 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.609446637 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.411989995 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449653639 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.738297418 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207433206 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.763091398 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.284677457 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279713953 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203031163 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.763752399 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.239863161 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.563253316 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322227911 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.204073132 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.129482264 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.21490058 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406904099 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.660802286 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25299404 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206655164 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.209174295 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.202909311 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.20712267 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.311382561 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220274566 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.499919925 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.283389539 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.204306388 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.141402351 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.210354433 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.49943003 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.605034431 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250244349 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463059904 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.480383331 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.905617779 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.801621465 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.248126396 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.479524915 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.278574484 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280741251 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.780690211 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.333660283 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.302367209 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197841111 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342552645 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.214211079 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.207392898 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.333213264 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.616123657 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.633557419 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.248284125 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.206751396 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.15982119 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.238715075 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.441165098 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.287675672 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233096578 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21139749 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.290000663 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.432958295 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.20731178 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.132536997 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441843502 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.44230957 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.501419095 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.616554183 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.285014295 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.284368103 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216174547 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.420662497 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288380998 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.870863356 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.755474704 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.414257309 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.625060176 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.165545014 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.847434926 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.528692777 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.592163918 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222397595 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.659677674 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.243674342 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.741808665 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.221458152 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.7023432 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.134334517 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212741598 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.531346004 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.156598115 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.526935373 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.263902042 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266350294 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.209531165 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.208840952 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215157519 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.147497751 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316753677 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277583104 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281720349 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135204724 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.705699422 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.24034224 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.210898017 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.208353559 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.574996267 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.034742916 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168020364 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.208753828 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286419194 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.954115707 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.758835477 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.212406753 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.21251372 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.821263963 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.216377483 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.09692607 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.36049408 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.99159283 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238680265 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.536198342 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.914586623 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.502153932 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.28576981 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286544772 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.209323434 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.218094933 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.911961722 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218703956 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.909304171 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.503983929 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.487697913 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.674102681 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.27418955 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.419805854 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.224466939 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.210109048 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.750653222 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.238926108 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212248136 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414295599 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.728454544 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.605594947 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.179376499 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.296509607 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.210784366 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.491174919 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.221398542 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.67032527 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.910262222 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.219041394 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.211280421 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.461093771 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.896377615 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.212462176 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.184280783 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219449521 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.423959455 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.415208166 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473934454 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.508158448 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662095338 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139146863 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217317565 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.240264303 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.456915412 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.21204955 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.247153736 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.655698308 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.300779336 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.643876257 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.502030732 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.682701896 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.850544608 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.481976656 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.279124457 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.22459167 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.882081097 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346414322 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.143954736 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331000415 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.139511384 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.993488113 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.508194368 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.229864002 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.486530143 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196743489 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.555154167 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.512702505 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.545831423 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.26572916 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.241770853 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.213454284 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.265160847 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.212683085 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.262986308 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.322799043 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.219227913 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.617120126 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246747887 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260520708 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21901885 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.751993127 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.237195145 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21626791 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.906496133 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.237949007 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332983154 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283845023 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.98753431 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.70343489 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.237623572 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.099564764 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.861369344 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.488128596 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.272996046 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.650076314 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249160208 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.618465711 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.215526735 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.428353722 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.220131576 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.6385538 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.255769038 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.474797522 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165268627 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.427506313 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405647004 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.235890308 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.219650378 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14201571 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.319542849 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.090907389 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.197624439 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.218655422 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.897809071 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.678101832 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.275684143 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.702797255 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.042612978 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.217665594 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.588580391 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.620190962 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.685111394 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244293214 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217244426 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.610435359 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.354416136 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.6121644 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.490268991 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224482211 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.242589271 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.428756617 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342389086 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136471601 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.707465655 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.800935183 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.918219471 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.228649408 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.420077973 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.609755173 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.360407795 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.246569207 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289596046 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.620233208 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.490888545 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.287881289 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.143211221 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217337426 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.612122994 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.62044459 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.314450994 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.45873452 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.535546641 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.583051467 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.687583743 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.511485998 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.658148757 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.631158285 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.629250417 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.421707066 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.556888814 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.535782954 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.810632923 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.629466752 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.431160175 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.307156901 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.485791226 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.085235116 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.928228438 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.463361207 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.224071269 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14710524 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.425899827 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.221968778 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.442875874 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.743388221 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.466405437 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.554485104 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.694350656 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.758052391 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.263676868 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.240237245 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.185947929 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.242675993 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.239895815 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.219477586 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.71227882 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.510601345 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233134788 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15769801 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.892028925 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.146951741 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.433296719 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.257818566 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.251097563 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.775738022 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.549952078 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.330207112 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.511635318 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.320750571 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250972668 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146330024 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.999185999 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.169916475 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.3073574 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.64797027 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23719065 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.222918843 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.399733757 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.150779912 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267432405 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.225923993 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.41740947 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.795992408 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.497578765 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322665207 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.455212475 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493570523 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.114155259 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.252418089 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.494104044 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.131047846 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.709393866 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.896350878 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.261333496 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292656011 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221368214 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224245636 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493130666 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.619299601 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.323918786 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.781145475 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.249934818 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.244716425 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.623913573 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.321738973 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.224227253 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.227153541 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.614121029 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.450849272 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.222744526 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.215419357 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.435492829 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295732194 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.425455342 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298205821 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.736394803 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.226581142 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.140453945 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333039121 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.174696877 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.222434968 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.996583211 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.286594623 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.222730161 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488698798 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.849415304 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.427085972 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.617297381 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.159306226 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.270407437 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.260858996 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.226273061 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.230153542 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.614873345 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.527663435 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.223010355 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.498049089 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.274711929 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.229010387 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.884190868 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.193397814 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.224972116 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.002480206 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.223022151 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.955746598 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.6211115 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.230438588 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.259105661 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22759376 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.150052379 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.226780848 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.357765583 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.204675607 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.233724303 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.591556499 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.605736149 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.323214391 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23042357 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.226151448 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.232540582 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.438379275 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.739733001 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241467471 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.925280957 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429682532 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233739511 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.719054409 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.691933498 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.335995709 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.259586794 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.273979093 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.453954334 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.759320762 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.269875326 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.197855261 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.452781578 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.227421733 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498000947 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499805642 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.227152625 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.43869341 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.685874884 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509101564 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.57964001 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.540105961 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.292664642 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.278246446 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.233719351 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.235609359 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.22869072 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.495636074 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282820698 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225612369 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234622084 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.777805557 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.998356999 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.680651544 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.375460352 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.61234786 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.027689826 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.982286561 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.229016361 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.153648552 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.225651065 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.252881402 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.230458581 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.15540208 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.932131951 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.956075003 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.439758809 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.541858602 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.154132752 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430308198 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.80829646 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.153040139 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.197933685 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.227345495 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.493421728 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156468774 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.230855594 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.182486461 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.556345514 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.814309367 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.49561738 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.226882636 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17335092 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233930193 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.232780054 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.229117587 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.312056532 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.229227845 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346139601 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.498084509 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.661392298 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.337382262 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.868346137 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.996612246 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16884387 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.272911748 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.787989476 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.798507316 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.557467139 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.361494664 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.995269861 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.175242257 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.232516532 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245023187 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.483862696 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.23438364 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.232656855 seconds)
  done (took 2285.619470574 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.305563252 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.293848396 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.283252434 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.276461101 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.396614897 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.29107023 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.270003929 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.300856756 seconds)
  done (took 60.584392168 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.229926041 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.757532616 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.351276779 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.229182058 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.23027003 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.234543579 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.411911481 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.255433885 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.23190139 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.234772425 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.231531649 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.255426585 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.243671962 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.264081284 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.235854878 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.493818939 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.248882795 seconds)
  done (took 81.32615802 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.277004128 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.178160645 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.236957817 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.025309957 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.265330482 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.528042609 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.232852124 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.236094698 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.572557612 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.535181161 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.292011071 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.247410613 seconds)
  done (took 96.832223473 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.232297652 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.232144625 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.231758117 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.232934152 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.232785405 seconds)
  done (took 13.329479646 seconds)
done (took 2851.603005077 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.486297733 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.327154243 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.302075963 seconds)
  done (took 6.79706439 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.374974695 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.423779776 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.537811143 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.560387276 seconds)
  done (took 12.068288868 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.521302451 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.627920102 seconds)
  done (took 7.316913745 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.598161135 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.245786068 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.625099977 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.235648346 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.234086286 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.237999848 seconds)
  done (took 23.880771015 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.23189978 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.23367493 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.232816553 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.233432952 seconds)
  done (took 11.084574766 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.23168774 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.00884051 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.23390002 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.243042533 seconds)
  done (took 22.885679983 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.412064816 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.353209454 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.994789472 seconds)
  done (took 10.928037329 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.823880043 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.688313149 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.840434511 seconds)
  done (took 10.521142138 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.062941392 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.243037117 seconds)
  done (took 8.474441451 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.378093831 seconds)
  done (took 4.547677202 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.066591343 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.546124329 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.707700247 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.739454694 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.797427008 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.446213947 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.5395191 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.485571242 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.619311042 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.617504784 seconds)
  done (took 28.734667294 seconds)
done (took 164.352951961 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.645331487 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.249576862 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.443063628 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.606496903 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.471061251 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.443510024 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.540603143 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.581411551 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.284261472 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.268472858 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.609103944 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.471342241 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.477029791 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.25879151 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.482637526 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.261511565 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.469421575 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.671389821 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.293804421 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.491316582 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.539845964 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.252911301 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.450391414 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.272020774 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.477581874 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.395765308 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.850969159 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.261618596 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.441123383 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.868294441 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.397706114 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.649401533 seconds)
  done (took 181.048272126 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.227361759 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.235816936 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.236206019 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.235561789 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.495087792 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.224225337 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.225262194 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.228673717 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.556597442 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.53453588 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.234811615 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.481619897 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.213878302 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.237082083 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.240117687 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.236048536 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.669253352 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.23612423 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.238143523 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.236478566 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.238724687 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.345516889 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.236598425 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.372228782 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.647587814 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.237972906 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.237345896 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.236622146 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.237678257 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.237693605 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.236784626 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.237139851 seconds)
  done (took 219.897769043 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.236450894 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.238041265 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.237276299 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.237852797 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.238862732 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.239315152 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.24020225 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.238645483 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.994771783 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.986654713 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.238603387 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.243777974 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.247866884 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.237843703 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.246667151 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.238310022 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.247111668 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.239323415 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.238996058 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.242151925 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.241695498 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.004406775 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.239333041 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.041778474 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.239696894 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.242008763 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.238629555 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.240093843 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.238088191 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.239286902 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.238125685 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.239176327 seconds)
  done (took 232.925642705 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.478437142 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.239660367 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.240394649 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.254488262 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.240556187 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.239904447 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.246272911 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.486563268 seconds)
  done (took 22.600697171 seconds)
done (took 658.641321617 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.58905326 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.991872742 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.373114194 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.265979359 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.488491237 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.302525242 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.261160975 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.32327449 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.903069715 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.334515471 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.650675241 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.264637364 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.948311361 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.282539104 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.376541004 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.319592861 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.602730506 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.855585244 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.390287704 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.909020964 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.459252558 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.213302134 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.338559694 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.940821943 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.668875249 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.218175137 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.265857276 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.610121669 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.263888637 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.495294306 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.903295841 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.490290709 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.27060515 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.259274196 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.317000316 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.304220701 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.453647275 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.2673001 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.368740434 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.00997454 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.904020147 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.787383347 seconds)
  done (took 115.418527758 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.25153445 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.249682855 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.249506972 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.250427779 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.258123826 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.250105363 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.250199778 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.250199421 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.25043017 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.250517524 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.250417112 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.259285001 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.250564977 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.258720993 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.250214447 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.250543977 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.250942433 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.258428255 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.250528033 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.251694959 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.250964479 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.250661791 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.245539808 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.251133464 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.250225783 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.250897543 seconds)
  done (took 60.728611656 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.243709032 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.392563841 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.525278047 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.27057579 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.244350494 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.247362701 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.272155255 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.249037521 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.246773128 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.246128997 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.355790471 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.248332648 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.25731189 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.523669072 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.267178605 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.245254554 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.245443704 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.246320847 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.399601699 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.258308514 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.27402263 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.250426821 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.273406137 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.25874287 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.248487901 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.246884662 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.248596646 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.656193943 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.253673004 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.356530063 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.28740392 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.275914249 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.589941258 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.533325559 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.304855101 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.251078032 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.246457641 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.400052403 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.255639268 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.245629582 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.273545968 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.251634992 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.531099978 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.75213868 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.257173426 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.245336112 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.648133335 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.407146106 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.291256072 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.258319305 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.535732106 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.269650311 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.245648464 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.236422314 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.282927545 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.256162323 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.218911949 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.490032557 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.259481354 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.275034455 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.251161666 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.247828645 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.406534347 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.254667005 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.396879317 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.255262319 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.252781152 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.251334177 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.532062236 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.270928495 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.756769693 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.258994003 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.248244687 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.358501029 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.401150056 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.676437861 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.259463568 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.40838506 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.611305907 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.282730276 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.257870765 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.640088522 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.284872871 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.256154434 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.24849686 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.248368397 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.248417707 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.288064004 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.26831848 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.670041929 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.756912472 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.506473951 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.284875632 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.259900511 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.250233782 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.492571016 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.254394144 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.248676857 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.52490911 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.778694461 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.261875129 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.255902103 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.737779893 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.262691604 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.277943341 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.259099713 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.539302382 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.272531201 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.293825951 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.248909075 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.255313223 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.252873734 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.277526046 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.257985914 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.258438367 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.732817821 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.414815795 seconds)
  done (took 276.620039436 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.251929467 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.238407391 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.249252884 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.249905062 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.248862623 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.250450143 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.249143211 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.249210128 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.234831517 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.241117486 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.24220118 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.250902999 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.251318079 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.256171471 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.293697037 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.252195585 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.740027337 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.248172419 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.250762517 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.252076239 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.823162305 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.255688258 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.249047092 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.251350783 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.25187412 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.25043704 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.259069734 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.291302313 seconds)
  done (took 178.323146671 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.251642375 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.297170555 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.260765552 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.295795591 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.2605537 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.251530136 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.271674147 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.264928029 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.255508935 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.251438778 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.251181531 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.277623293 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.228756013 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.323647071 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.278188812 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.277648672 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.328166775 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.25829076 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.251760821 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.252232933 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.297723422 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.263134939 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.277950401 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.303829627 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.262049758 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.298687155 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.263989477 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.253203968 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.252556599 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.340722738 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.257132669 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.276747914 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.28342635 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.24056249 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.342225873 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.305290437 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.332796967 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.279044124 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.255882234 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.253229786 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.253221116 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.254778209 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.298976677 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.261519713 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.25392007 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.343335597 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.266641173 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.253495987 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.273473542 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.25361947 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.264590114 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.267952702 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.283885694 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.349869512 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.292694958 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.276981079 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.273454079 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.272394783 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.255121325 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.328212033 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.261399728 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.342661069 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.269799403 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.25610812 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.255667125 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.258445754 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.300767778 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.286156647 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.330650744 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.261457877 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.326923168 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.306151328 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.265443353 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.255968002 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.254894536 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.301405377 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.338458442 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.306489103 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.310837704 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.286100331 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.262344115 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.255063803 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.257601608 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.282128969 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.26160914 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.343720459 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.343199663 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.261834848 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.255406244 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.256361886 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.257773965 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.276729948 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.308319424 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.290734148 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.337871625 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.287803117 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.286852637 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.261196495 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.267559531 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.260040535 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.286962457 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.261880442 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.267648522 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.595323605 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.290013838 seconds)
  done (took 241.889942176 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.631806832 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.308574005 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.323679656 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.530198618 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.637289601 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.341888808 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.29207192 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.316691967 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.314603162 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.41968324 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.365983558 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.348446127 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.288664411 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.277517271 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.308053211 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.312749266 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.333185725 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.602356749 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.399528943 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.953546001 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.290317336 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.582823969 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.590005177 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.635189235 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.340002922 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.702725393 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.939095863 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.391977483 seconds)
  done (took 72.9738055 seconds)
done (took 948.120660216 seconds)
SAVING RESULT...
DONE!
