cset: moving following pidspec: 14844
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.803086455 seconds)
loading group "shootout"... done (took 1.109920454 seconds)
loading group "string"... done (took 0.666444817 seconds)
loading group "linalg"... done (took 8.557694194 seconds)
loading group "parallel"... done (took 0.164636796 seconds)
loading group "find"... done (took 3.011068432 seconds)
loading group "tuple"... done (took 2.123555663 seconds)
loading group "union"... done (took 14.806048483 seconds)
loading group "dates"... done (took 1.435467943 seconds)
loading group "micro"... done (took 0.216311524 seconds)
loading group "simd"... done (took 4.794792718 seconds)
loading group "io"... done (took 1.075617905 seconds)
loading group "random"... done (took 9.509595685 seconds)
loading group "problem"... done (took 1.523405989 seconds)
loading group "array"... done (took 25.125901352 seconds)
loading group "misc"... done (took 1.873614473 seconds)
loading group "scalar"... done (took 43.386741772 seconds)
loading group "sort"... done (took 3.333153682 seconds)
loading group "sparse"... done (took 12.733938739 seconds)
loading group "collection"... done (took 18.709294334 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.441848046 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115307302 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.162968519 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.113768841 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.209352206 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121748263 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127924355 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08450366 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.889412326 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.155868796 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114270925 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422296782 seconds)
done (took 5.407669395 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.18793209 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.245492287 seconds)
    (2/2) benchmarking "String"...
    done (took 0.165328597 seconds)
  done (took 1.643597606 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091524461 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063510839 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068604884 seconds)
  done (took 1.458445721 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06656479 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135451918 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067299603 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067846062 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067631356 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067502402 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067002661 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06735206 seconds)
  done (took 1.777470832 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07314782 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068026781 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066374439 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068368399 seconds)
  done (took 1.511323833 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06635402 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121941481 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065650592 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065739915 seconds)
  done (took 1.551825554 seconds)
done (took 9.449377353 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.161083571 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.851613433 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.860347373 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144839543 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.267848173 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.366415967 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124461339 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.205263816 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.11238755 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075870258 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.144282867 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078583719 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.475112454 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.496256209 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071740439 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169919561 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649219019 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088302654 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135457751 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.443009571 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074027706 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087652647 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084395536 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071721975 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320627274 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151978875 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669397161 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09260635 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068336861 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094431321 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070463526 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077591381 seconds)
  done (took 11.050878678 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115855374 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.114072037 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070307954 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124726398 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095287395 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07096556 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076732239 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068707598 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089218329 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125216996 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090990924 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122396275 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067493707 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070448562 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096754001 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197755625 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081216981 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082421097 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068396925 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082017656 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106138435 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079469345 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079005079 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078381385 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133373527 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169689062 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09736165 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099326123 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066966401 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079741675 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116264962 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125942063 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067879029 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066235621 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120756638 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096366403 seconds)
  done (took 4.793355833 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.877002924 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096946253 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.107870322 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098990826 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107144785 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114336468 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.14583303 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123132492 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.104873063 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072517624 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095770273 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.174077948 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.670468007 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.223719046 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072303423 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.14444462 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.355897707 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.098756806 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070657753 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069239577 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096475307 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070771593 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.136813311 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067113175 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178533441 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.592975428 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070500924 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069655705 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.212799837 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067427983 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142809944 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.096202293 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071343634 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.564536363 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067504954 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066013053 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089915402 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094877171 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067609943 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069099226 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079905324 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06693675 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108918317 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080281913 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.512962509 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070866584 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.604961244 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.310796688 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073650989 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073012234 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.103027603 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065275164 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068598556 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.251997337 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.110277202 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.14240838 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067725471 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272491857 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069762671 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068456158 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069663875 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099302771 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070979531 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069397014 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073533812 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097356362 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.802386854 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.067911944 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.145207262 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097055228 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067869398 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.397008346 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076425408 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069734457 seconds)
    (74/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064537912 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069604628 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.09290715 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.129945767 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066457316 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06646003 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107173743 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093900154 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.218287077 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071619121 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069324783 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068132372 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.322556821 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.180489811 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068218247 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069499439 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.489831668 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065751479 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067586067 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069513201 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091626623 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068037047 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065226845 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066385211 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100428238 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071478321 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33138014 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068109182 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.481989869 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069974569 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104051083 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120864799 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069343384 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102427608 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06901429 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066424317 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074587438 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067411919 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065835445 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070934837 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067054321 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068084126 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069941704 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069519508 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068741904 seconds)
  done (took 23.749987832 seconds)
done (took 41.708260744 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.39766305 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079407166 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.0798447 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079859463 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079500373 seconds)
  done (took 2.009919602 seconds)
done (took 3.403510225 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.252312751 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076148841 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065246503 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.201631557 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088743351 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175638075 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.213813634 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.159664908 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.08908563 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088861641 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088860139 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.220319627 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.342891858 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.088945895 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.159081869 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.225112089 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088938296 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064746821 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088416255 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088442651 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089101477 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065055348 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088630653 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088341999 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.157723581 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088424479 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064596567 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.156713084 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.087621924 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.15726091 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087277219 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087187031 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087035634 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156751527 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087311834 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.155608325 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06432733 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087035484 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.086455455 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.086996607 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086579773 seconds)
  done (took 6.319026991 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.075609723 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083814999 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.0852255 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063106921 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072691822 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083406678 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062857873 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082536886 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092161615 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083137589 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082879335 seconds)
  done (took 2.24757354 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070898638 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084018072 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084757345 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062560923 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073882872 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084071907 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062997556 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08379713 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086277751 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084171704 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084553342 seconds)
  done (took 2.189038893 seconds)
done (took 12.070401485 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189570684 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090411441 seconds)
  done (took 1.592633478 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.259801223 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.521462928 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.955365407 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.118287904 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.097739877 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.110914847 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.22098109 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092872465 seconds)
  done (took 7.883071412 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.127448307 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069754175 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068386708 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070080428 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070702654 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068730709 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068199947 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068631036 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069074484 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06858427 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070497388 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069586007 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069744437 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069962861 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069264692 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068977721 seconds)
  done (took 2.604553225 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104242733 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070042043 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100133581 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062663656 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07303083 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063068863 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071832835 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07334929 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070781158 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070901386 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073303493 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070951112 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072038453 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072072617 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073661191 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073903957 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073662041 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071268425 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073586406 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074569116 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073215661 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073868405 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074257128 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072104494 seconds)
  done (took 3.230025319 seconds)
done (took 16.640071149 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17477841 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075336037 seconds)
  done (took 1.576139522 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093193408 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.093984467 seconds)
  done (took 1.531055842 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072649829 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060886902 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078150125 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07024151 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061842641 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061735911 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077219697 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061909815 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061804335 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061994718 seconds)
  done (took 2.015133969 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063396487 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068747976 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066920342 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065148394 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067407208 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063142901 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065241101 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063083918 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068909118 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062215056 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065970905 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083137534 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066041397 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084466089 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065375862 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06654155 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06739664 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06553836 seconds)
  done (took 2.562560614 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061489006 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061813261 seconds)
  done (took 1.473210546 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065403784 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06222144 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064352602 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064446065 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061937708 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061359984 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062429291 seconds)
  done (took 1.78578451 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42223765 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.18502738 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.418937467 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069913806 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076872343 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254818497 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064507311 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069306869 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069351012 seconds)
  done (took 3.016942493 seconds)
done (took 15.317780682 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082784877 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180469451 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.112495788 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.408505859 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092011847 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067777184 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114107782 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.204376395 seconds)
done (took 2.632086578 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.286032176 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.163569658 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.311317454 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.148777577 seconds)
  done (took 2.97821501 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.392195986 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167233443 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075647521 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066853142 seconds)
  done (took 2.064751 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065564704 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07191722 seconds)
  done (took 1.498673435 seconds)
done (took 8.197193246 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071539932 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061770338 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067108085 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064117936 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064084105 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063288592 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.093666686 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064104944 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061848589 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064225165 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.064105614 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064744521 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064073908 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063890185 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064280885 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063789123 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063880672 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06322824 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061955182 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063960502 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064398939 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063121111 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064036828 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062323312 seconds)
  done (took 2.952505519 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080037396 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06606966 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067206319 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067042405 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067613554 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067543976 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06723791 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06644529 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067414562 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066252988 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067485163 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067732662 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065850091 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068106276 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066485981 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068053133 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067705187 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066366115 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065986514 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067748618 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067390605 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066422252 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068042193 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067319131 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067827324 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067903881 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066204024 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066599959 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067322358 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06846423 seconds)
  done (took 3.403385995 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066832579 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060189166 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060388677 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070330216 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060392564 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060903091 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060895531 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060159222 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.06085377 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061594181 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061128513 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060388502 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061234542 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060396179 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.06053953 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061357146 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065733729 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080439733 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060603398 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060904781 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.0653367 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060590207 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060468635 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060895405 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061023219 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060453539 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060569178 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061030876 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060390621 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061258695 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061050352 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06520255 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06638308 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060753939 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071111383 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066014898 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060612421 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067268129 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061769786 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060525595 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060248108 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06071842 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060537923 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060754305 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070995367 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060797605 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061606193 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.06144759 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06116605 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060685817 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060610468 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062395634 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.07002574 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06220795 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06049639 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061345621 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.06033038 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061316278 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060617705 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060808468 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060346895 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064849844 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06203994 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061515997 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080787931 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062330182 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071710385 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060840065 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061229016 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065242667 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061137788 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078841815 seconds)
  done (took 5.909543487 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071581802 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072020021 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079627496 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070454341 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064543208 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061457853 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064932835 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061734929 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070981214 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06522625 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061638616 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06474692 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071029196 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065668062 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062574593 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070767518 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065349218 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064699844 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061543955 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065270158 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062646544 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065048568 seconds)
  done (took 2.852404484 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13962694 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066935521 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10572329 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070851146 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06936576 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071191591 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066994917 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066956018 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067198946 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067728843 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067945934 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067652643 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069393125 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067579985 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067620935 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067512385 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067181576 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067311529 seconds)
  done (took 2.710390875 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077357481 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066436423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090061918 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066387858 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066703209 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06626477 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070177045 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070457954 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066399997 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066952227 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071519703 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066741117 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068061132 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067088095 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066253862 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066782867 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067371203 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067031474 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070470933 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070178277 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070157154 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070692203 seconds)
  done (took 2.90979852 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078014304 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06538885 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080882666 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067428738 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060648936 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061152969 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066710641 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066378285 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067023127 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065515504 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066262398 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061181827 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067351853 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066702144 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068730331 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066356054 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065838383 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066098508 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065948394 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060811144 seconds)
  done (took 2.71620426 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097835518 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063295104 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063493606 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068402276 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063708969 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07471164 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068593439 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063886078 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064168073 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086223005 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06402188 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063877699 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068496762 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067175756 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0637383 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069004327 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068681044 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068678981 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063775317 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063648687 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085178729 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063178683 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068194848 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063551811 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063291011 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063126255 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063315148 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066492268 seconds)
  done (took 3.294340742 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065047136 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063902809 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06464718 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064280355 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064070136 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064129461 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064209136 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064340069 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064237428 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064313725 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064438882 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063920347 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066648078 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064206232 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064039716 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064202371 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063846179 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064728041 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064953213 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065189262 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064440266 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064847437 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065138247 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065313555 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065499648 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064438237 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064926921 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065006307 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064362837 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064369925 seconds)
  done (took 3.330290082 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073420681 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071703629 seconds)
  done (took 1.533863019 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062956529 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07752022 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059955284 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072833744 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069183921 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064642986 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069785731 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069236034 seconds)
  done (took 1.929064461 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092124196 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.117325407 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06209008 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062631421 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.091982252 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128061684 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101061258 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074383755 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076441411 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065597246 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06270943 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.101598058 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061744565 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07548211 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063052009 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071764823 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069729595 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079953684 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075096115 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060236558 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075112608 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06295602 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060613904 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062760441 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061802087 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069733514 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077823366 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07483261 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071077644 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060021527 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081096281 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060753809 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061791405 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071252689 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091143527 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060765949 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098562996 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061533077 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066265501 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06077601 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073429766 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082286379 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075877536 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080087605 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062414331 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062973863 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060854641 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062764166 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065341937 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07119999 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060743448 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069419713 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06084885 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062372917 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072188486 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061566237 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066293842 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071033685 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0754359 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072316286 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.073927048 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07770029 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070616423 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068510454 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061921927 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081111264 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062889359 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074776587 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076268259 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062322282 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074695669 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060591555 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060560558 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060900442 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094924538 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062386378 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061961837 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06095972 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060598558 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062086493 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070944303 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065818233 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069258676 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064146641 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077271576 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070752289 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060845138 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067235813 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079302664 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065209346 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061452082 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077868736 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065070722 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060380841 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078919492 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070741803 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06183953 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061465114 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064019854 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073438929 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060925753 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058924886 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069236294 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06155647 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.086631903 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063592946 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.207907169 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062373352 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073624684 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066591509 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06355663 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060749434 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066366063 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062241445 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060158739 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071353041 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061540837 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076058284 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068327676 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076461047 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076635651 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07236896 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077636061 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.06129295 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059764401 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079769957 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071423494 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062537606 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079841376 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060958453 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074997717 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060696963 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062277367 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070873984 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060028003 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06335191 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060864119 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066117808 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062673698 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063038812 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067801206 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070382809 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073700394 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062145417 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071200454 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061433119 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077217566 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071254289 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066024668 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06455267 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061736986 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073742519 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068554524 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071425496 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06087298 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061582579 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06150445 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072704031 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071537248 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062915579 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068335266 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06613257 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062081237 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061625186 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06255992 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065696052 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064382633 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062194982 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069990168 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070756851 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075341997 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06813463 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070577846 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060760611 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061031283 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062920095 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060537842 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066167653 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071234186 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077444333 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073665344 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083124983 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061715459 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071481033 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062461587 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078743238 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075434187 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062680568 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065868838 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060687856 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062699255 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071144202 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072633711 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074814405 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076242597 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06620526 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066225837 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060511099 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07605601 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061169832 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070373935 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070864128 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06508667 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060908488 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062380144 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070369812 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06593303 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060714093 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076742859 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.06581249 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060113332 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075020447 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060363569 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071716129 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060081831 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06453113 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066359412 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06149049 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069661663 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075504366 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059159893 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060555573 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075674893 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.204091453 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063914803 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070896959 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077974929 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067061798 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070050499 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072580957 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072078527 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066583314 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072004994 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062255524 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071946349 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06450846 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073941894 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061370396 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07920842 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060308407 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076678369 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061856267 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072607567 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062041244 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071075231 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062423557 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078692907 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062705925 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062270602 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073622687 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060121361 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071348096 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060662168 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067028396 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068405457 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071392985 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063125749 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071477403 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063154267 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070235368 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066631573 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070148171 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071223688 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066132603 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060833547 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070215735 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072490475 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.07054477 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062759727 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062619725 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061914254 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071230714 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.0629045 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062131545 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070274457 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066692229 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067446592 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062676412 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06329066 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062745347 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070607968 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071745651 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079812159 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070612361 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06927774 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071297405 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060736129 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077106533 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061572281 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072152728 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059973607 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066806748 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070739173 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061319779 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08042561 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062406115 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070026275 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074312574 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070419758 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06553278 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079499963 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063951564 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069945528 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069991307 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066109647 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068199012 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063076065 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070340987 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071450163 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072261674 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061762969 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069113001 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070140909 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06240018 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06817309 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062421134 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069923866 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062367745 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059815845 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066104227 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072788894 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06637475 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066725999 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.0611848 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060214077 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061592781 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067367434 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066189014 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069737537 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076489049 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059958333 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061335227 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059735149 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064448433 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07877595 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070529751 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068509831 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065004712 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059333813 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061467868 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06169724 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.206421862 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065335492 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06121443 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061604992 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072849187 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063608578 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066570857 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061974869 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062196566 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071545624 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065679534 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062106123 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068436924 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061108049 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066963478 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060418561 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062802431 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066028639 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060842643 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065663472 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.0722169 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078174324 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068569826 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070548347 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06221896 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06979809 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077052457 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067717107 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062682701 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071067296 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060380344 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079822735 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071151442 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070194944 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071632778 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062249316 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078166424 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.0660601 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071727988 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07708198 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.0622044 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067970332 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060510411 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077528499 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06630449 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060795405 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069990058 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069688698 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067696681 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073552962 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061786268 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070061208 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06692385 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065184915 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063087154 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062426404 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070916125 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077598214 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061758693 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065371694 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070156442 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070426715 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066099848 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074152268 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069988081 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062116631 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063007356 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065434019 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062379041 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07361061 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061702314 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066100654 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066218168 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060866395 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068330495 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077975357 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070781633 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07101149 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.06060698 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060775991 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07939675 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065429651 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064328747 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069897343 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071260812 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073850696 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071294341 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078468943 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061979781 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067322279 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073800263 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061766338 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061043699 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064938492 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062322279 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070693702 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071152719 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069038405 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063130922 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.06892951 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075144334 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062125227 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06613718 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065469306 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06157382 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07194842 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069285326 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072478151 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061997277 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060024785 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064508638 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069929742 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068770136 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069979882 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060636357 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06526884 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073630874 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068111111 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.205478905 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061717549 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064807189 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071386451 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065526896 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06108047 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066370247 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065570111 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067558682 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071600062 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066570651 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06111042 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078413528 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069817993 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071045534 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062987995 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062652739 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061610591 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060648693 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072780747 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060437902 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062375397 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066202311 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062501792 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079144154 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069830008 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077117215 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061855485 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066119897 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060457748 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070815515 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066294911 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061349502 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072432363 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060225359 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077123646 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073448334 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066526321 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060889209 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067188588 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069506678 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076465629 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071115818 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070538306 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064673353 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071513065 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063000895 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072976257 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060871286 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.06011182 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071686649 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070328304 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074227697 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061100684 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071875659 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06300123 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070278148 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069419857 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062861007 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062715582 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062856885 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071105435 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066238886 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07098716 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066131718 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078565174 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062469013 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073114236 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070656798 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07288581 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07569919 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073872854 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069568421 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061924332 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069029361 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069443865 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06229849 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067084164 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064661975 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083379989 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063060471 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062797828 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075680105 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067874261 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061619995 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067395967 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066347361 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071663198 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062133296 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072524213 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065429278 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061796682 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066114248 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065996689 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060109666 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060298189 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061026803 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071654646 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065685672 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060951702 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079973515 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062600711 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070367222 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072256894 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068076524 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062605454 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.05979908 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061832324 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074497984 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076553124 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064282127 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069816151 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061681676 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069375015 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058933564 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069122265 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068349637 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.212908318 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061902102 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062364827 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07721134 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077170664 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066449312 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07091784 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070983913 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06236864 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082788508 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070566251 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062572423 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072698107 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063325987 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060477355 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06030749 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06266924 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073346522 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060573918 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063419608 seconds)
  done (took 42.633102483 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098227308 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061468538 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06074989 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060963162 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06843979 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061856208 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06092934 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061762996 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06185272 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063513206 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061267671 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063945018 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066911334 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074345193 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069022066 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064387955 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06103758 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061912432 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060862527 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061914778 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067378172 seconds)
  done (took 2.86597445 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064338271 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064851112 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065028438 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065058459 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064802932 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061455342 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064841005 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061136734 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065482065 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061909596 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065790337 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061600733 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062096056 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061758878 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061609514 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062681133 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065350742 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064554538 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061207915 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064914731 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062433668 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064878397 seconds)
  done (took 2.877918915 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062363138 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061208781 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070088032 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06039071 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060642768 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064249105 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.06025404 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065562471 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065533959 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065676253 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070583306 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06176897 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060168145 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066770228 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060264048 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061353746 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103252407 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061684376 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061572182 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060502747 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063588719 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070274038 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060334679 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06070728 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06554697 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063812785 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060527135 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062977652 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06121026 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065472169 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062008532 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060279178 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070535637 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069582603 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065815451 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065558877 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062156114 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061741884 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060420362 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060513667 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06958342 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061727251 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060609738 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062320324 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06988201 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.06029164 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060425871 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070100259 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060204507 seconds)
  done (took 4.636040386 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.070859519 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113338069 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066768014 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094208795 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073643463 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066931796 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067527324 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095306421 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061699625 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06226695 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074709536 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074615647 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063724031 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064857219 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066773088 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063715116 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064207341 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062584907 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065821039 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062996108 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065983361 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067794772 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073530094 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073961137 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06426111 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062777574 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063214288 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064481912 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073412169 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066382652 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064644103 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065457546 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073737524 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068275327 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062793734 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06293198 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074177864 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063414552 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063626119 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061828776 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063267913 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064386728 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067678553 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074906807 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063597547 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068563663 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063894359 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06177369 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074178753 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063278348 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067295128 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075141323 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064677954 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063884665 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064913354 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074011461 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063639564 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062578527 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063749428 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074215424 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062213673 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064344929 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077549818 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062779714 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066767267 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074801449 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068639208 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064485522 seconds)
  done (took 6.275541865 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070089099 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095683829 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076542901 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076118209 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071408857 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072008688 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072066319 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071475366 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071518736 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074649623 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071781353 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132912156 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068315065 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07322609 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071291168 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071299566 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071163624 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07158419 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071431262 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07155064 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071805866 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076171871 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072166626 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076657736 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073772379 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068110567 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071505213 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.0713208 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076603056 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071326918 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073595157 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071546323 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071624202 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076586517 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074343748 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07130651 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06186165 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071281178 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071307321 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071651922 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067955206 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076516416 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071638504 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068031587 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071704714 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071656562 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076677749 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07431561 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073313217 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074936806 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072078409 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076831609 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071783999 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072093236 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076772791 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078825738 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076902646 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076851251 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071973867 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076529637 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076912862 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078931445 seconds)
  done (took 6.126759585 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073862786 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067239189 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079672858 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060719198 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061401269 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070387603 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060851664 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061050068 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067404342 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067383307 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069052207 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070589967 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072494442 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06901193 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070345894 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072616593 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070417471 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070457617 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067661629 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070671373 seconds)
  done (took 2.893861168 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076800654 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080167868 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066827241 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070449041 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066570485 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070662613 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066569425 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066907099 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067527263 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06676509 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071949506 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072110852 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067423427 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070825044 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071584669 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070459394 seconds)
  done (took 2.622647157 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064849612 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.06958904 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095190761 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062600678 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064409565 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061817344 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06258093 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060801227 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063746897 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075823769 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061761732 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06448863 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062473732 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061339691 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061765636 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064498899 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063465647 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062103713 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062405193 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093123807 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070799685 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062768597 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064619612 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061612938 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064079763 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07042897 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062964235 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063773848 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061626511 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064842309 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063778549 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068911123 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064109345 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062359191 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061010721 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061624562 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062029952 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064305808 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064587259 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062809912 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060600652 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067137738 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062124855 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062431218 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063596516 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06446339 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063526989 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067956964 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062450688 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064322984 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062778565 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063803478 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062653146 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.06974848 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064592341 seconds)
  done (took 5.083090099 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078848369 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06666395 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060640654 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061250454 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066401198 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066972843 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066413426 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067217285 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066631326 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060865659 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066884661 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06585202 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067190277 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066443375 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06699807 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066704037 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060810618 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06680673 seconds)
  done (took 2.714944253 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067441659 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066559938 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065281977 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062704139 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062818217 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067325727 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061354366 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062358409 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062667352 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062817685 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063181635 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062053207 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062487128 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062357347 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066637907 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063152325 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062760536 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061036651 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062529612 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061040292 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06740173 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061238417 seconds)
  done (took 2.905273646 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117207357 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084753398 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.156767472 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080788736 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.0894999 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072708372 seconds)
  done (took 2.110965056 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094065635 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099003804 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066005806 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066284638 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070877121 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069124672 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069244682 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069603447 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072035422 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072812154 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068928616 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072894886 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07264513 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074464314 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071144616 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071294538 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069312258 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069244704 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066423182 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076505614 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069181994 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072257576 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069138729 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068916111 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069451236 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074334426 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072010557 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072779379 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068982939 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072676772 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070913329 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069472912 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073047395 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073014048 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066209141 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072380828 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069273173 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076804974 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07131508 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074236808 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066241985 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070874876 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072361036 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072460791 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072570477 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06960057 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072853947 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069320298 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069726678 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077724667 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071470794 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074635057 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071389408 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072891288 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072759105 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078067948 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07320742 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074591437 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070979102 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073303851 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074590779 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071361843 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074504038 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073284658 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071148266 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073906301 seconds)
  done (took 6.294471342 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104572496 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066803379 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0695882 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072827308 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074698599 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069549234 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069800416 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069507894 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069641426 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066720459 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104574787 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069549291 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074719931 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077047044 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069868223 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069136765 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06940618 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074028705 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06706394 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077757847 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069326553 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074521802 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074269401 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074473382 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072704651 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071182113 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069658195 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069539152 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069466748 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069345946 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072469603 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069608049 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074329368 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06661136 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074404946 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069695265 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069436702 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072680632 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069114254 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070908955 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074084005 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076918576 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069371492 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069555604 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073159621 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069349855 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06947224 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066724004 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069441927 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067167073 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073232894 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073443394 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073242909 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074933854 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070181603 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069905321 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069934984 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069664053 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069641964 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071064485 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07462643 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069262056 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07817674 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069669969 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069852076 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074549087 seconds)
  done (took 6.307335473 seconds)
done (took 131.250688981 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.234509729 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.20241379 seconds)
  done (took 1.938181724 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07441527 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.192989014 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07474721 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074523939 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.10830619 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107631168 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.103669999 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072017105 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074580055 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072033867 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.13872103 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.10409114 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07202458 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.092561873 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071864177 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071993258 seconds)
  done (took 3.027133373 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107975515 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.21066081 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082210238 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070384622 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151056058 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076820133 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072446797 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076848087 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077673437 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070853899 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106541525 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083070971 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07590516 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076770753 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072253003 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075538806 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076837149 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076467471 seconds)
  done (took 3.167036254 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10268383 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091731587 seconds)
  done (took 1.725229221 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155468123 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105128213 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145154019 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.342699258 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135763826 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138330061 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141094013 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136542499 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110681716 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133617066 seconds)
  done (took 3.065620011 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.104974772 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104558668 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304931526 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102009069 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08237684 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077563691 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075670216 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079545175 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075265991 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076940205 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121601475 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075601689 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072946792 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123657563 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098040152 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106835254 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071391764 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077919289 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079778997 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07082049 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075860574 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079584529 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176874786 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078283644 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099325007 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074963215 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076649046 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074498098 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074333539 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077967383 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078974659 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098686213 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078098164 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.0826136 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076242265 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096130426 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072012188 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098128213 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074194236 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072774776 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075200742 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078458103 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072530162 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078059757 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075413785 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077133653 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08015722 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071314922 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.306383737 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074276234 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072829079 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076248918 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075931585 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077067169 seconds)
  done (took 6.52931157 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.119000752 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112216723 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070497449 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116906195 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110789051 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070372731 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.121353267 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104809012 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122112278 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069991644 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069202503 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070027603 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076404575 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079452753 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118638515 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.111648054 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071755163 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07050979 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111172539 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111094133 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069137492 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.108229014 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.113319172 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110093792 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068561419 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069978335 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06871576 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069905003 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076761423 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075333914 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069313912 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078359569 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081170061 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075445045 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068277586 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068728751 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068753407 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075176281 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078184118 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078039717 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07481889 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068293212 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068857969 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069273132 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070470868 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068419963 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077631493 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075774105 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077996571 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069290839 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069523315 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068674038 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06907573 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075660333 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074696015 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076490545 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078853019 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069060338 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069102971 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070635226 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080303548 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076785706 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076262209 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069976248 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077891749 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068920369 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078657368 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081783553 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069516759 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069804605 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069187433 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068954098 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069518651 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074413363 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074898274 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069566382 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069254916 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068694479 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076062987 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074733891 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068742099 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076949702 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068471892 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06884368 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069444424 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069276887 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076470433 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075837691 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069553809 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068470411 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068362893 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068106175 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06724903 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074683232 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073757223 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074205865 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.214069281 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070418152 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078610854 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07600378 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070188634 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075262271 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069311589 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069936363 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069412762 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074949941 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074679437 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076977131 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.0692139 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068488984 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075001 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077526239 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069180277 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07471698 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077407575 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075649546 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068395437 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077957724 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069667188 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077273512 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069144217 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077402966 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069143888 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075510166 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069240508 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068495232 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069211858 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077554021 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070160182 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068994445 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069200512 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068805392 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075218348 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081708141 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069898612 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076084281 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075243073 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069798384 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07789075 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069574999 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07763859 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069376521 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069074218 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068942832 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080531438 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069162 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06921691 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069500129 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077222328 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069211522 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077428453 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074584935 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068477074 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078663042 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077415286 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074890201 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077814861 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069878583 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069188953 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068906477 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072494565 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077200969 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078615362 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069721307 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069566663 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07437589 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077995903 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068773627 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074997204 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074656015 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075191643 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06941617 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069310163 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07798535 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080286751 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075271475 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077664689 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075339777 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069263569 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074620406 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077400872 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068908298 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081355277 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068713544 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078915329 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077936306 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07391949 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077989797 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.078245937 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076088101 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075384933 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077266291 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067143529 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067442865 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.21436425 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069869911 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069915706 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07521158 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06981776 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069760846 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080033909 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069497111 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078451087 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069223435 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076223291 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068528022 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069662234 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079528467 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068975831 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069593571 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075147103 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069443448 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074928078 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077784114 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075361289 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069944359 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070190562 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078436513 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077487019 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068918765 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069403385 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069813888 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077400566 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076975021 seconds)
  done (took 18.751074709 seconds)
done (took 39.747579942 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.168228783 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114178621 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208968706 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198321238 seconds)
  done (took 2.313674754 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100263009 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06558913 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.108847396 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.117873347 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065565835 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.103040106 seconds)
  done (took 2.137724174 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199357224 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174722132 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.24217734 seconds)
  done (took 2.186846329 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365373662 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148181729 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214015815 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.496892072 seconds)
  done (took 2.890671982 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.137896762 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.128060853 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07714907 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.139506226 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084394251 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062580422 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132518517 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069512396 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098697592 seconds)
  done (took 2.562951963 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138386388 seconds)
done (took 13.795768218 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.159411676 seconds)
    (2/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.239199043 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.184101693 seconds)
    (4/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.288946895 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.281068683 seconds)
    (6/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.108261121 seconds)
    (7/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078669985 seconds)
    (8/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.23128405 seconds)
    (9/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.316312234 seconds)
    (10/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.178886877 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.245739177 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.270527346 seconds)
    (13/341) benchmarking ("sort", Float64, false)...
    done (took 0.138299741 seconds)
    (14/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.199848838 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125164923 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.125904038 seconds)
    (17/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.21537688 seconds)
    (18/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074901085 seconds)
    (19/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076443965 seconds)
    (20/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073737013 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.246873355 seconds)
    (22/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.173402462 seconds)
    (23/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.235476848 seconds)
    (24/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076265059 seconds)
    (25/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.191181081 seconds)
    (26/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.170593663 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078225011 seconds)
    (28/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.114060483 seconds)
    (29/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07477144 seconds)
    (30/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.10961875 seconds)
    (31/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.122862297 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078669476 seconds)
    (33/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.318666027 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.172439727 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076724933 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186415504 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.120989177 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074922936 seconds)
    (39/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.18917889 seconds)
    (40/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066185064 seconds)
    (41/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074278388 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.243023655 seconds)
    (43/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.078656974 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.256293011 seconds)
    (45/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.308968934 seconds)
    (46/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074644873 seconds)
    (47/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.309549406 seconds)
    (48/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093842712 seconds)
    (49/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.182403792 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07796642 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.109594639 seconds)
    (52/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.111775194 seconds)
    (53/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065681809 seconds)
    (54/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.177096925 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134817098 seconds)
    (56/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075734848 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083623554 seconds)
    (58/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.231591177 seconds)
    (59/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073584127 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084640451 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08455889 seconds)
    (62/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06474914 seconds)
    (63/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.160125179 seconds)
    (64/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066531653 seconds)
    (65/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.289805908 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081054346 seconds)
    (67/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069207436 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071868246 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.199909108 seconds)
    (70/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076029721 seconds)
    (71/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.075929778 seconds)
    (72/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.142763341 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.126376606 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.087341582 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090120328 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064924757 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.086035921 seconds)
    (78/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.21222207 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072845545 seconds)
    (80/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.205995173 seconds)
    (81/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.202512048 seconds)
    (82/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065504862 seconds)
    (83/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075666482 seconds)
    (84/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.164504761 seconds)
    (85/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.082349214 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07211469 seconds)
    (87/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072830721 seconds)
    (88/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064399854 seconds)
    (89/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.210988986 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.06776899 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064155981 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065761693 seconds)
    (93/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065447941 seconds)
    (94/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064251808 seconds)
    (95/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064068875 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086082756 seconds)
    (97/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072357282 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.085213271 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090816849 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.178711695 seconds)
    (101/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.201844339 seconds)
    (102/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.214845725 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070450485 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.172754656 seconds)
    (105/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072243235 seconds)
    (106/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067993129 seconds)
    (107/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064282238 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.063628918 seconds)
    (109/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.165103756 seconds)
    (110/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.14128586 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.085445117 seconds)
    (112/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.16011479 seconds)
    (113/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064561945 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071616764 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.193567245 seconds)
    (116/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071386438 seconds)
    (117/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065350119 seconds)
    (118/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071820645 seconds)
    (119/341) benchmarking ("sort", BigInt, false)...
    done (took 0.253441982 seconds)
    (120/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068671587 seconds)
    (121/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.06366118 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.155580204 seconds)
    (123/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.082341716 seconds)
    (124/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.136915539 seconds)
    (125/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072788511 seconds)
    (126/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.065860734 seconds)
    (127/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065631559 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074292327 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068064651 seconds)
    (130/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.075829859 seconds)
    (131/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.14344937 seconds)
    (132/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066526857 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085395222 seconds)
    (134/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075024729 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065659009 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090920968 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072740573 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.14242733 seconds)
    (139/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.079830038 seconds)
    (140/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.207058695 seconds)
    (141/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.183227306 seconds)
    (142/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066315852 seconds)
    (143/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138744196 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072016136 seconds)
    (145/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068394648 seconds)
    (146/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.08326187 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074019585 seconds)
    (148/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.229068334 seconds)
    (149/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.070234671 seconds)
    (150/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.144212783 seconds)
    (151/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.359672204 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079276598 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.148545103 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.071271479 seconds)
    (155/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069706627 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076424129 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.124373098 seconds)
    (158/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.086062524 seconds)
    (159/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071490298 seconds)
    (160/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.068572981 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089376988 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075486349 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.078019468 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.069977645 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069192338 seconds)
    (166/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067754004 seconds)
    (167/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075692539 seconds)
    (168/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.198954953 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149218875 seconds)
    (170/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.068034016 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.160430559 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067392905 seconds)
    (173/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.166524275 seconds)
    (174/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074301128 seconds)
    (175/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091227452 seconds)
    (176/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.238439552 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.0668405 seconds)
    (178/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074449103 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085536059 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.081738071 seconds)
    (181/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070458592 seconds)
    (182/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.200812434 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.067109071 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066761921 seconds)
    (185/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.16412234 seconds)
    (186/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.200206366 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076237111 seconds)
    (188/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157473172 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071265706 seconds)
    (190/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069428883 seconds)
    (191/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066760887 seconds)
    (192/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084701903 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06505849 seconds)
    (194/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067145565 seconds)
    (195/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.146536887 seconds)
    (196/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067021542 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076722823 seconds)
    (198/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067071335 seconds)
    (199/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067422831 seconds)
    (200/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066411493 seconds)
    (201/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152401458 seconds)
    (202/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070267927 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067065544 seconds)
    (204/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.202741995 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147799813 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075556617 seconds)
    (207/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068486297 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066714663 seconds)
    (209/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067243388 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133400631 seconds)
    (211/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076177947 seconds)
    (212/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094260187 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 0.139004446 seconds)
    (214/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069691211 seconds)
    (215/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067513812 seconds)
    (216/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067189929 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064946382 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070864744 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152458695 seconds)
    (220/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088974144 seconds)
    (221/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080670048 seconds)
    (222/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066609026 seconds)
    (223/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066111614 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074889017 seconds)
    (225/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164849592 seconds)
    (226/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.0669144 seconds)
    (227/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067672385 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073473511 seconds)
    (229/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066871258 seconds)
    (230/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066263617 seconds)
    (231/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078693127 seconds)
    (232/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067224764 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148197114 seconds)
    (234/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073602386 seconds)
    (235/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066642513 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066732312 seconds)
    (237/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068054705 seconds)
    (238/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068605281 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144071563 seconds)
    (240/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070789494 seconds)
    (241/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.162373364 seconds)
    (242/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066597771 seconds)
    (243/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066357964 seconds)
    (244/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.06950403 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.099221919 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078175533 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076411461 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06648387 seconds)
    (249/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067101472 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089791214 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073752261 seconds)
    (252/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078774156 seconds)
    (253/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151522028 seconds)
    (254/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066449318 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074119624 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070904434 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064867483 seconds)
    (258/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067142902 seconds)
    (259/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06645844 seconds)
    (260/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.259984144 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.115443424 seconds)
    (262/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06905407 seconds)
    (263/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.071927294 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.098373029 seconds)
    (265/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.070124834 seconds)
    (266/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069885543 seconds)
    (267/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069384117 seconds)
    (268/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.074018485 seconds)
    (269/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069546879 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068776175 seconds)
    (271/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.234132571 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.195022119 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.069892895 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07578566 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066676303 seconds)
    (276/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.075870937 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076431614 seconds)
    (278/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068549554 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075102044 seconds)
    (280/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.232045186 seconds)
    (281/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067901955 seconds)
    (282/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068496661 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068333307 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202224511 seconds)
    (285/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.068237838 seconds)
    (286/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067608631 seconds)
    (287/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069214457 seconds)
    (288/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165073241 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151802864 seconds)
    (290/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068461515 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123236752 seconds)
    (292/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066535217 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067263541 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066774964 seconds)
    (295/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070706288 seconds)
    (296/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067039094 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086969279 seconds)
    (298/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066946296 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075021297 seconds)
    (300/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.073914366 seconds)
    (301/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065120652 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066543641 seconds)
    (303/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071361391 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.06640386 seconds)
    (305/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067738226 seconds)
    (306/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065828029 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065582458 seconds)
    (308/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069813061 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066702269 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074043165 seconds)
    (311/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069324229 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117014168 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094132845 seconds)
    (314/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064935836 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067352758 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097234886 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.250739783 seconds)
    (318/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066165532 seconds)
    (319/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067380006 seconds)
    (320/341) benchmarking ("sort", Int8, false)...
    done (took 0.149592621 seconds)
    (321/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078097037 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092063985 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066588733 seconds)
    (324/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066230899 seconds)
    (325/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.161071882 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077750726 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06725224 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068640121 seconds)
    (329/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066911465 seconds)
    (330/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066668982 seconds)
    (331/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064919338 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065986399 seconds)
    (333/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066753232 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151143443 seconds)
    (335/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.0685001 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066178097 seconds)
    (337/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065774667 seconds)
    (338/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.206858189 seconds)
    (339/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067295564 seconds)
    (340/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067146028 seconds)
    (341/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092983001 seconds)
  done (took 38.957553207 seconds)
done (took 40.550428834 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12248091 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080893473 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079466976 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075749743 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079172076 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077678603 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078926924 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076527853 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078009625 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077466686 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107442221 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065955529 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074336563 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081587044 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075002644 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081733968 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078485987 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081548142 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066906538 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080551308 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090367354 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078190698 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075277888 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080031834 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067013528 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075634505 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120847684 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085320811 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071550775 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075908122 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074447949 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08487473 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074561254 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073090151 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075900026 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072266762 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076051822 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073732229 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119981212 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072287526 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066859341 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07820168 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073647724 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074119089 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074911991 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078018905 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07176679 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079365304 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065796383 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077487744 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120076406 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071105886 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070696386 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074577527 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07152857 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075328582 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070590096 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07757304 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071469754 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078107742 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.075299652 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074678414 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066074343 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074843576 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07348299 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073489527 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065136432 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071240655 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06627307 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066154431 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065290983 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074928307 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07269816 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071445365 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066047421 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066239884 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065652623 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079004922 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072700037 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075744032 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066889569 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071568543 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071535868 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067039574 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071850292 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077726611 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065702071 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066809376 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065404208 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080813094 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072964289 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066381046 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077857904 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071211373 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070902227 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066230605 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065567406 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07115878 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074121742 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066113722 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065247114 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071110673 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071072006 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07497518 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066534884 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071214503 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070968171 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065167922 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074725253 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07317746 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075220842 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079319006 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074733727 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078267041 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066741982 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065265707 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075936279 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066852326 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071682292 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.21977549 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07226886 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074829069 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.0665761 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065379937 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071482798 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.076423217 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066527041 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067159308 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067084126 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075904407 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073708596 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064986281 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066007135 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074931195 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075150804 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065490999 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065902136 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075831227 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067019388 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072437602 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072311828 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075289936 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06620715 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067342594 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065895445 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065773421 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065810955 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071828772 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071637465 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066890789 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075170164 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072648383 seconds)
done (took 13.20752938 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067620321 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108462131 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115987963 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.110420088 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079554245 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067847314 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07068596 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085714385 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070324734 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091317347 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092058898 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088550328 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.132333479 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065967284 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067515884 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068211594 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065374274 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079008238 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113669934 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090748904 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103224433 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067272161 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082781132 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086684867 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081235727 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084602626 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.0683576 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067905906 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.0699228 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085508481 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092929396 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066575635 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067957473 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084544363 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082350136 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074665055 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067823804 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072860889 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070242125 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066687058 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06876534 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084103027 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072956288 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072994172 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067853428 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068051515 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067257727 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073620954 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083990779 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072054072 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078543194 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085036001 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06849824 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067421354 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065565451 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073834039 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06703017 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067713956 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067372485 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067265479 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067332601 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069922399 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072620118 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073026847 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070627964 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072980752 seconds)
  done (took 6.862992232 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083399499 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09286761 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08109523 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08138801 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066626533 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067522951 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067947324 seconds)
  done (took 2.320403643 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068094823 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.106955499 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.114547341 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.1143689 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121061978 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112136422 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067956282 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099053776 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066573562 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.1074309 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.118261367 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115559381 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070248914 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079241707 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067702885 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.115238181 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067880535 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074418322 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.111471029 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.117101358 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071433867 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097547764 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.08119157 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068650715 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.113592167 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107288637 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069905748 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067832247 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067758871 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067359146 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066940018 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089647754 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106116222 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079635064 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068719248 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066559401 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104626377 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068112952 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.104327836 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076389048 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104094721 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066816741 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067611552 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067083806 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068423452 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108717458 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068416761 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067419723 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067297291 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107764446 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066316567 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.107726551 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069281595 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072268934 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072363194 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071942161 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07414489 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067455328 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.107696516 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073659036 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066887837 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117311304 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116749171 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104641993 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117054923 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075820796 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.107710405 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105395393 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066644563 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066494319 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067425159 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118167053 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070618712 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069878191 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068286452 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072477682 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.11005242 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.121778541 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.121358698 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080150627 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070139453 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067413671 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073462045 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.271238961 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072697462 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06747518 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068230842 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066825971 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072245234 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067416004 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072124132 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067246076 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074378971 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070110058 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069751822 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115342356 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067776444 seconds)
  done (took 10.170686631 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069565952 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069694964 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068552723 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068526471 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068892723 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068559788 seconds)
  done (took 2.215069281 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09051088 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068619795 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079671156 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.06825541 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089802852 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.109722103 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.10973913 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069717359 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.08395036 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078526474 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110091353 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.111566856 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112383995 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069561143 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109424281 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068824261 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.110077201 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070967608 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077958626 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069920546 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084160737 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069450535 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069742711 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116279302 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070675571 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068439301 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069304852 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077958433 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077904871 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069699064 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069711895 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070662566 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076875966 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069684777 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110451825 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076773362 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068644376 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072980452 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070436565 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070668655 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.11301271 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069674713 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069976248 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072687083 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069373241 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07641578 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072720846 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071160219 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110321299 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.077647879 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072492883 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068113177 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070786676 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072943017 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076647419 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069713391 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07267921 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110416424 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068902605 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076187793 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067923872 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070611568 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069679885 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070214089 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07246017 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.0731643 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076088586 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069566477 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069639569 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067650496 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073262229 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067866093 seconds)
  done (took 7.480993722 seconds)
done (took 30.809881031 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.542653877 seconds)
  done (took 2.309493332 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.939046347 seconds)
  done (took 2.745676575 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.177755087 seconds)
  done (took 9.991514521 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.334483087 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.41780702 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735720274 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132951222 seconds)
  done (took 3.469235866 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.753764945 seconds)
  done (took 2.576476383 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229911934 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22030979 seconds)
  done (took 2.275510881 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.371683823 seconds)
  done (took 2.184785543 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.189715322 seconds)
  done (took 3.005041212 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233758421 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162657008 seconds)
  done (took 2.221647695 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.632588517 seconds)
  done (took 2.44984552 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.487982007 seconds)
  done (took 6.315158132 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.248122655 seconds)
  done (took 2.112937311 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23124017 seconds)
  done (took 2.054987837 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.003750996 seconds)
  done (took 3.818226022 seconds)
done (took 49.356316196 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084647057 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086637668 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086486248 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081803404 seconds)
  done (took 2.131239502 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074582759 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07130655 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07361479 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074406312 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072002461 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073531247 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073419371 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070495807 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072045111 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070932017 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069406712 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070901438 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073525796 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07071127 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073799126 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074604284 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071030229 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070697713 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072911233 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.07037191 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073149484 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070476168 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069152631 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070431809 seconds)
  done (took 3.544276509 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078846508 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072718861 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07599714 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071502254 seconds)
  done (took 2.121696712 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077207057 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076715934 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085249663 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.0905688 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076241718 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077297192 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08396946 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084270515 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066100875 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086952289 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068760719 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067443249 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068060616 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08610805 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083836029 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062686592 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064300454 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07784467 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076780862 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079546563 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068946685 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066046273 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.07626621 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077633844 seconds)
  done (took 3.650163053 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082587209 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066069841 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081234166 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091120916 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092308044 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066062703 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079333692 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093626891 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128398194 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065929034 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072073004 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.065955156 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105217509 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066683737 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081834762 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109812573 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112815713 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070476972 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099512365 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066452873 seconds)
  done (took 3.528748926 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078240279 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070214633 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071154951 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066437459 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077388036 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073322397 seconds)
  done (took 2.271918387 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06901526 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068726374 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070721693 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073179287 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069095277 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068818404 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067970529 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06681945 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066964058 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06764621 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067300774 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068255117 seconds)
  done (took 2.650626658 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.209004788 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069641347 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071479827 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066537117 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068453705 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067304133 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080906879 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068910579 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.083846643 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067464518 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067289805 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069445619 seconds)
  done (took 2.818079532 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104125004 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110780172 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143012201 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116504379 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116897793 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096606365 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.160106537 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093523944 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16096816 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137658452 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118462764 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093915225 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086865071 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070330867 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100405074 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119011895 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137450503 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074105607 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113828298 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.204078589 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131001379 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133163573 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146196685 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116157226 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089969464 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147205294 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097411799 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102213809 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124322735 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125916205 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118530676 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098446525 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07243888 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071688462 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149068756 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104361772 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120524754 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093715979 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105004154 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088684337 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107619526 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069799917 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083978769 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110888436 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084512223 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130671924 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088531243 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115556025 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08114324 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137767263 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.276965274 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135018877 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086575391 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10599303 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136960664 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112328888 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133741533 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106840108 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082584954 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119036768 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102440071 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100610225 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107944664 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08102441 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176430726 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089196474 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111768595 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111826598 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094481655 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095319167 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107811704 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136449084 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125507001 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.12552381 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137864407 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095325328 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121690038 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.099607268 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129564526 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104390842 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073464323 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120590639 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129284137 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099334774 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101678862 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129227712 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092557729 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077826131 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099274127 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119092319 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080957842 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11253505 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080923875 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109914019 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132399147 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097292021 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111798523 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117672701 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078898694 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.311777633 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108464337 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073831686 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117366367 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114098717 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155603052 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09576245 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077658885 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100872828 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103481032 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148582298 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107379374 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080557481 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110474584 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139491509 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095293387 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.209595665 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096013623 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139799608 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111782776 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087656426 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076033319 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091004464 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112850851 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108075303 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112904887 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090845172 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084898969 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088127263 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112285794 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093083025 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081256095 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11432808 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099414977 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075299568 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089272859 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080061326 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142199561 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078396341 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137661812 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125264524 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077210454 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107061924 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099610788 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109040518 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098429378 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117319922 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141069707 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.114420721 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090096758 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094442713 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109138029 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145048852 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126980041 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092880504 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077788632 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100646151 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.27458326 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098132611 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125176543 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095701115 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108786499 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102336355 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14093084 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143965437 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100333056 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101091117 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107332635 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123127226 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077302992 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156148107 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10414118 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118695845 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084979247 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141528317 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.113068302 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090493924 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087929603 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101309285 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105047184 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106984728 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144403022 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097459919 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073216124 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093103459 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144169368 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077093035 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110467749 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091654473 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093869354 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119072291 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093822543 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082193087 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069434312 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126857191 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15880211 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070695523 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115256876 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108889407 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103489803 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121444708 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070598004 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119375436 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139615134 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11876054 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142179662 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147911957 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117425593 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.277880706 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114316343 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106139783 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080275206 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125550993 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134813718 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096665026 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093049027 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1347618 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118971116 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136031044 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115703424 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114715287 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105067298 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108115871 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103074782 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102082361 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144771816 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121364024 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124935266 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086859492 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107023388 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118690275 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136332892 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082906832 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1423306 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084498983 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119268701 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078427262 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124301124 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07780026 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110252452 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080384856 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100851389 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070400494 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074463794 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142244584 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112850932 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106213434 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100423895 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137900843 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136610417 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079490695 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108400241 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11577059 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10158042 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116783743 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1090019 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089454078 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095590835 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109870656 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085871301 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082354599 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.275671554 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094917098 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126716384 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084818369 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076332248 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140132657 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104672492 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095360381 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078612803 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107510957 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121647046 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093422306 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087998795 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115413301 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105556052 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14178989 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091305229 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098367322 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124267741 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080837161 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092739961 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070269023 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086194878 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076900488 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127659095 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076713406 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11650926 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07024191 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131316508 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087900922 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094145935 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103204518 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112357314 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128217598 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096084967 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141719615 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090476502 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119382402 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108527423 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095589233 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089079193 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104231789 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1013295 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122648071 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097257788 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123185429 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144384746 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105296417 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14221806 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092141107 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122689486 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107658215 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124622587 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112437957 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147873981 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138577035 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.268759431 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113102093 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076718902 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095647914 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105889112 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111544714 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173427227 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12510934 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073142941 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106341166 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095134766 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108008727 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104914534 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082782933 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146027359 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102532708 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089303637 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112815054 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091524508 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104301296 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076820003 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096158122 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101255419 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095383567 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099058016 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115962003 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128243126 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113867449 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143776044 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.0994082 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092683222 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119372196 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110903548 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110750464 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086338248 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086740754 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138686536 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118916586 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126703579 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101310936 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110341238 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112107074 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101133221 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125872857 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108755786 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.127149497 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080890923 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07668257 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068996461 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07298511 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123451327 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109009038 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112068854 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100606565 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07288082 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.261735551 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107013124 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073268161 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089391659 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094278273 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095025809 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091227251 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106506739 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11209511 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092346045 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104212711 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100822755 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14621623 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101520658 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089577262 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143735262 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149871528 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087987009 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09296073 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072229062 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079800001 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112757007 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148050257 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150905902 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078109301 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08758648 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086471491 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087415583 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07254246 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087393661 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089841259 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10541204 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100085679 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113499667 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105312299 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075797137 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103519053 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100272073 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09257271 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105126094 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119048467 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125207737 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141307135 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110458713 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107151451 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077175501 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.0811632 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076502137 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080428582 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102479979 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.07950685 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077161526 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143532072 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092405749 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105086018 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10894837 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089639881 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076249333 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134356876 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.22840456 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135311356 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072468833 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082874666 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083100407 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079566773 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093759549 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138044192 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109372906 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112658259 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106460397 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10489572 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14029028 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155556149 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080056791 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143337832 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076210587 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076009537 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076359948 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113625923 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08984874 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1151301 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140086653 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091436009 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103543271 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077831488 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14329126 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097161903 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104763361 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087343741 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07988943 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143434016 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08013484 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081145447 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090979759 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111572019 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073785828 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105138708 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085201742 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080073353 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143657009 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.63120721 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090977757 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07641845 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09606186 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143117988 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1284905 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095787126 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109665059 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119136328 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100246681 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096003273 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108065699 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182028879 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075067782 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095338409 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.261160266 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101290085 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102385144 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098963952 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086097829 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092899012 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087239861 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080537986 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10743765 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08933 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096432568 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106935225 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083419434 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087437213 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130336927 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10411928 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082987127 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088698378 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104173097 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089055695 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100973287 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07011658 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113326394 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090840213 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117097575 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095290124 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107475236 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126883153 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090724901 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138164731 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106459488 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122837899 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088453751 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079144027 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125974895 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088826687 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078534055 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144886651 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095666264 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091425709 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104760748 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098046513 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114031869 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117114686 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11267976 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098125693 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080156547 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101147961 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103432737 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086053038 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079737899 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076215285 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077338729 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108148788 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086347465 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083957539 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115550922 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08978422 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10424732 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.259933609 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122669052 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084056666 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101488926 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11048399 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092237483 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109330321 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101290289 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128202957 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173489249 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125334013 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129457076 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134740284 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077666636 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076792927 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070158511 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115988946 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080127793 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088980085 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082476267 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134006921 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082463414 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111821664 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.230972226 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081432646 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094369472 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097113054 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071286506 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084128619 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10866407 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08805959 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081209747 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119661972 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08402818 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128707543 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111825774 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100392288 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09553208 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082135103 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115009305 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103479921 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130142967 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096180825 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075918721 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114789187 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103714309 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138346731 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073853934 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081552992 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130481156 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104622102 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133722857 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081087624 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151149399 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144033862 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101183651 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.295953018 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072210772 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084766185 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08972252 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12672483 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084693691 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110526441 seconds)
  done (took 68.601737379 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156194856 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143653409 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082880382 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104185492 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188899633 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199559097 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120954779 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097493164 seconds)
  done (took 3.070419138 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069101735 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08366813 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081790601 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.247613593 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.0975205 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068389432 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073950805 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082778675 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069120611 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067624888 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103042383 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06810672 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06963941 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.458664863 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06694356 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073302516 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068889373 seconds)
  done (took 3.815496419 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333902907 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.037112325 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.242714557 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.227484998 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.147051795 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556672391 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077473168 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083982711 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.638737567 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371553995 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.142864623 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088627451 seconds)
  done (took 19.929285507 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076915817 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121052128 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.120925281 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075684265 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075441971 seconds)
  done (took 2.441878929 seconds)
done (took 122.42230757 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084518265 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172810795 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06892295 seconds)
  done (took 2.251571303 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.119550774 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118796762 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118949008 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.116671531 seconds)
  done (took 2.457980802 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075339671 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076875106 seconds)
  done (took 2.133318179 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.221984485 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.214187435 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09091582 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08289538 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080728434 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080719681 seconds)
  done (took 2.231959182 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072067612 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071853941 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072294937 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072560628 seconds)
  done (took 2.258508161 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.168329546 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067237366 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069581701 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072226785 seconds)
  done (took 2.350260639 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086359074 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087653756 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116966718 seconds)
  done (took 2.268846827 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083781056 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08334982 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078614621 seconds)
  done (took 2.228961657 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109543564 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097153357 seconds)
  done (took 2.184171032 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080572494 seconds)
  done (took 2.063422479 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090545719 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09852376 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182722912 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.149735454 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.183889239 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170480881 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077692715 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078796899 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074521664 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073520859 seconds)
  done (took 3.159207641 seconds)
done (took 28.180941805 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08468496 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374802253 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360154895 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087505885 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671896159 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357690346 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002859709 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091321165 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101636239 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068901971 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086247395 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650736009 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.997199615 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331811366 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979315906 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330383478 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65295514 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069840646 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068946524 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069881312 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.987163044 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068814582 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069079798 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069787171 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650839684 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374566826 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069861495 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325686905 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068963348 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072454608 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.3909068 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070154284 seconds)
  done (took 16.606943079 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076569683 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12860871 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072756416 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084572794 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07073361 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070214703 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071943407 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069463198 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112722746 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069289756 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08615609 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068335701 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072934858 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070122888 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088894526 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069269861 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071300422 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072693073 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069085118 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070170764 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088198831 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068992069 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069658495 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06998058 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069627641 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082461963 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070173716 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069162616 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069750828 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07334849 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073901796 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070338993 seconds)
  done (took 4.426144506 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127678841 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131897389 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073669796 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110231424 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118601688 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071329508 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151617521 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092253972 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115494606 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069402325 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086507305 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069479165 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104777331 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070397499 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090153108 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069143103 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071730425 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069706213 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069018787 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070008102 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088111071 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069491629 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069855441 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070121806 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07024654 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08410249 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070258255 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069581677 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069215066 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073008729 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073887968 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070238574 seconds)
  done (took 4.708913933 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070631868 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072395198 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078612017 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081660667 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067323787 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07007843 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070898136 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067786209 seconds)
  done (took 2.581447083 seconds)
done (took 30.319268197 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079748178 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068611882 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.07195359 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087987863 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074776584 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.110609636 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065532083 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075204121 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072040463 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072361693 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074032089 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067851163 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07060354 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066197063 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073025341 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066886954 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112306196 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070564816 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110562498 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112151003 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069070544 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072257562 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075221623 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111625347 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111527104 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111638048 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075978782 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072832227 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066810283 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.06933156 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169060564 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.181908055 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075306779 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116736105 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066674155 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066680274 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070905006 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069170326 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113534557 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07614991 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068771846 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07533626 seconds)
  done (took 5.552757043 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.187151377 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.1936439 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.188570478 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080657676 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092542638 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081121157 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192815608 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077746599 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076393285 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191739913 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072385552 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077143063 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079067715 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069983484 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077553563 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073599657 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078106327 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.071065913 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076721024 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07631322 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190906052 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069984686 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080803135 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07825454 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071753446 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078248759 seconds)
  done (took 4.701493271 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073627514 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088920661 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092509638 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14757837 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109990397 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083689785 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082755098 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094180056 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101580046 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069258622 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07301246 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09535204 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097309689 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075772917 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107020121 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087020213 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080853183 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070833841 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076332361 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103191769 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091244508 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08726129 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101337325 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088879827 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067814793 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077873764 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075735754 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084269455 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075736972 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080850057 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072504636 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071931746 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069369975 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080758108 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075688236 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.107703055 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090298573 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080807981 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082424559 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10596943 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078218137 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070207532 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096492327 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133779036 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068131465 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070697665 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072010973 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080695086 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069832095 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098244772 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084554192 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068189301 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087004402 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070248811 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069838285 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084972691 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070410669 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070599507 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.07989858 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074674677 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089143422 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07369536 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089967726 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067996038 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080091632 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069801352 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070256601 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067536734 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103304369 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076124185 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120130073 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069679067 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066455889 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080364454 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08023334 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075374035 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068151067 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088344225 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080612129 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072201289 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079432703 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071513232 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071614331 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103972026 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067723322 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066524043 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066172578 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07065785 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072140883 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06908223 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081618108 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067843393 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071540017 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083966878 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068308389 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069173098 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070967105 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069601181 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068062576 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.07895364 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072546118 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070394366 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080813645 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069888218 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07165135 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083461877 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078016247 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067934017 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069333863 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070562441 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070274176 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072719326 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071665209 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070927571 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075795686 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075987362 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074474736 seconds)
  done (took 11.392966581 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.205224416 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.194221455 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069882611 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189490813 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077151595 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.1188432 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191115867 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131346265 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069770783 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070565599 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068406459 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.139051796 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.135076082 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.145736919 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115249938 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069091384 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094334271 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.144038169 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.194249057 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.189041303 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091729375 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076342166 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071501298 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069978974 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070153757 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077191761 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084664101 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076845817 seconds)
  done (took 5.295501662 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076324117 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084238917 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072801671 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092902083 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086668921 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06914274 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07091166 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070696075 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085785844 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075607274 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069292761 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073303516 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073081821 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069812753 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070187419 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075582128 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075965151 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068120151 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072557502 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074128836 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080083495 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155085068 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073277522 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069439066 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071807256 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069193122 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075854228 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07815513 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068743025 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101765338 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065854183 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074018336 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08368966 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070184647 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069023622 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069820875 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069215426 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069052192 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069708618 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066932912 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066947737 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074721361 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067633838 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074221314 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083055021 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076818777 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069856582 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07418101 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071282388 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066126123 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072110942 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07211357 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071377115 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077403083 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072782856 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071637328 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070453176 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096379052 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074905949 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067981964 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068574357 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067293501 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070670706 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077452639 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085993506 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070442718 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067286048 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069141675 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076094675 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083323162 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06872146 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074335153 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066342385 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069300252 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07146828 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071996415 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070603961 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067265186 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068607659 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069056778 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069781532 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068557156 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068513628 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071865495 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066972891 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067118998 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069793812 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070423377 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075057739 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068044192 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071603345 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070448636 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068245051 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071593803 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074847668 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071899138 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088884967 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077487264 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069570638 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067126151 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083381023 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070864999 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068388026 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071870885 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073301792 seconds)
  done (took 9.826239608 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091926545 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070711823 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089213449 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.0953755 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079123657 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074291225 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082910958 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069700369 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085063177 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068397914 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077909904 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066975883 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.0823424 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078517085 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070805681 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079853163 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071903712 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089972783 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084304556 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067387481 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07791649 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081440288 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081673959 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08708711 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086700859 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087556766 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081479517 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071540955 seconds)
  done (took 4.302494042 seconds)
done (took 43.063775989 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.087295359 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.254254743 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.083782668 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.364955681 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.141345189 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.300990708 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.292146213 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.080812358 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.311487001 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.107780016 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.393093967 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.487140858 seconds)
done (took 70.986145176 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.160841746 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.229132197 seconds)
    (2/2) benchmarking "String"...
    done (took 2.312572925 seconds)
  done (took 6.558365727 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.680148048 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.081248983 seconds)
    (3/3) benchmarking "different"...
    done (took 2.129737983 seconds)
  done (took 8.906666931 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.259856563 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.713293623 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.334884742 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.080167812 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.086561421 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.490476734 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.901184539 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.544874796 seconds)
  done (took 34.169023618 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.320127389 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.289797973 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.870676896 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.910225042 seconds)
  done (took 17.452286575 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.700360284 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.342165429 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.34336091 seconds)
    (4/4) benchmarking "different"...
    done (took 2.336063069 seconds)
  done (took 11.798306522 seconds)
done (took 91.417009935 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.083003829 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.478932294 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.085308086 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.239113143 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.100620299 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.113934656 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.091658816 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.121701519 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.08516101 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.084320865 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.515159995 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.083268314 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.088606385 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.116803034 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.082303481 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.127600414 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.584671679 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.096520307 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.114955361 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.544322524 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.603776268 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.098668121 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.09930663 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.144902271 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.240607501 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.120294135 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.555770031 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.086200115 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.697247414 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.0888971 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.085096706 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.088293348 seconds)
  done (took 214.764772157 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.082700052 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.117601917 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.192333915 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.099223202 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.543479887 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.274557461 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.225865238 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.59094886 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.087356315 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.104668962 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.332461521 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.085169702 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.349525163 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.03630964 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.077943738 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.124025805 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.331643173 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.363203464 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.084406267 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.273299947 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.106234338 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.193150361 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.129931152 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.307568359 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.095348944 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.163289375 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.101343587 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.286544637 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.271760442 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.29890446 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.125908641 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.116851391 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.299157729 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.955166223 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.097139228 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.110529679 seconds)
  done (took 182.053996608 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.252038309 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.101174814 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.145507991 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.218609453 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.837580543 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.793838928 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.086369458 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.084161444 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.083777442 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.091098816 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.083294512 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.088203859 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.152782502 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.844033791 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.10687818 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.085850068 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.084800795 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.921275415 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.093599764 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.08543963 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.085343175 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.150479059 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.460589572 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.220663996 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.087367615 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.096929134 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.22249029 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.094919348 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.086643579 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.219690701 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.088161185 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.164749327 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.222990135 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.097811037 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.167189981 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.094205438 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.567441992 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.086888519 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.085935482 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.087723008 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.149010036 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.086579775 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.1900662 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.177513026 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.086647355 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.099742479 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.167594603 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.775871412 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.089265956 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.086875098 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.087364164 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.086942384 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.087018831 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.551114928 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.089208802 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.086304725 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.112308621 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.691284429 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.091542275 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.086940962 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.088465204 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.086823787 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.088146902 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.094909485 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.124842258 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.891275 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.447549707 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.088618212 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.472453291 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.885233104 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.089575319 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.68504159 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.146531027 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.090163175 seconds)
    (74/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.087745396 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.166228903 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.087388685 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.087910398 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.088226411 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.087993229 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.231567583 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.207706389 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.09012559 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.224777486 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.091072266 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.088689591 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.305024999 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.671293375 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.096175544 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.100994993 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.147419144 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.088349984 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.089852799 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096612433 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.219256717 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.092773718 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.08954965 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.089447604 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.185139585 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.091710948 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.272799664 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.316112065 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.16247685 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.340295138 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.313031672 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.093472189 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.09048795 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.104993604 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.091631415 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.08943202 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.101262078 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.090593377 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.090615511 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.092000763 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.092462129 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.090211159 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.094059837 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.104426907 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.091029995 seconds)
  done (took 446.199876819 seconds)
done (took 847.330744547 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.726862241 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.928478724 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.698118535 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.734603166 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.700381283 seconds)
  done (took 15.815012874 seconds)
done (took 17.838957284 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.113581665 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.108645258 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.096970925 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.115454545 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.11289407 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.111212063 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.143156186 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.135548039 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.130622813 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.111331754 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.119145699 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.112685908 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.116134013 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.131912848 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.118941331 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.120183581 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.113665494 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.103793036 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.120334437 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.113729293 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.111952427 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.10848335 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.113402888 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.118308137 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.125768691 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.115263054 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.107531937 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.115506305 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.115283735 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.115936203 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.150855868 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.120913736 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.145826006 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.122059808 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.120647178 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.124753359 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.111902911 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.137630553 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.114052843 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.151003122 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.122243172 seconds)
  done (took 88.947624084 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.101426872 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.237330469 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.312176407 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.132949909 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.101258633 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.313169714 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.157585593 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.231506286 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.230259132 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.341513665 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.327057088 seconds)
  done (took 26.518604683 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.100604183 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.238827542 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.315065014 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.136441338 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.102682982 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.324064485 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.16508023 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.230271897 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.238474401 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.321469898 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.330433162 seconds)
  done (took 26.540770175 seconds)
done (took 144.031122388 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.496065362 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.131915397 seconds)
  done (took 6.658089302 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.096138823 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.11391985 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.246249217 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.097590821 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.096732275 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.09820008 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.097954141 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.096824413 seconds)
  done (took 18.973108582 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.096592935 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.097109284 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.096611809 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.096767202 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.097626081 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.097563189 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.096998546 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.081118183 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.097694778 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.096928261 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.097804101 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.097281085 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.097399574 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.097860562 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.096859066 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.096886515 seconds)
  done (took 35.57043524 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.097080419 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.096735567 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.097642003 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.097483178 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.09789011 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.097206174 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.099933224 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.097756459 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.097760679 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.098634462 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.098213602 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.098411707 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.098014398 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.098158566 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.099144746 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.097951764 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.099222576 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.099217344 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.100318538 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.098793498 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.097714647 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.097781466 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.103982798 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.098495175 seconds)
  done (took 52.395430132 seconds)
done (took 115.632083439 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.369079249 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.735146729 seconds)
  done (took 9.136940073 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.102047786 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.097779235 seconds)
  done (took 6.299018093 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.098102056 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.098273831 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.098744803 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.09805481 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.098195878 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.098723312 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.098362882 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.098778581 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.098636604 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.099032208 seconds)
  done (took 23.017873988 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.098620143 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.098565443 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.099499431 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.09882784 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.09973342 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.099232495 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.09916199 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.098900149 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.099389727 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.099657159 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.099198843 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.099524192 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.101250766 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.100306423 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.099547246 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.100296223 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.10051839 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.099901192 seconds)
  done (took 39.825599856 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.09983783 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.100300292 seconds)
  done (took 6.233594493 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.100837347 seconds)
    (2/7) benchmarking "second"...
    done (took 2.100937736 seconds)
    (3/7) benchmarking "month"...
    done (took 2.10033966 seconds)
    (4/7) benchmarking "year"...
    done (took 2.100309099 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.100319063 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.101829803 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.10119708 seconds)
  done (took 16.740552064 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.101765635 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.274536972 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.325962768 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.690633097 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.102620282 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.104602914 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.976884434 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.105707047 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.106834493 seconds)
  done (took 22.824749412 seconds)
done (took 126.108602957 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.929064773 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.10478654 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.383088813 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.191104248 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.124701344 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.441289385 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.131046568 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.658268537 seconds)
done (took 44.996087013 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.148377189 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.099848817 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.131308646 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.131668694 seconds)
  done (took 23.399479179 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.101006912 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.433706387 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.121162299 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.063027466 seconds)
  done (took 23.766909349 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.479599473 seconds)
    (2/2) benchmarking "read"...
    done (took 2.451047429 seconds)
  done (took 6.969977953 seconds)
done (took 63.318999749 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.102210782 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.101692123 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.102215407 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.101521503 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.101555125 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.101876142 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.102632764 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.102346152 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.102712555 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.102319045 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.102064564 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.102485961 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.102721461 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.102995402 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.10263901 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.102713206 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.103110932 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.102365536 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.103358024 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.102667475 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.103292469 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.103672865 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.103141557 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.103200549 seconds)
  done (took 52.498037864 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.103174594 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.10333978 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.1031213 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.103882976 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.103579686 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.103658642 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.10400286 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.103049742 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.592039516 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.103386628 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.103403494 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.104599172 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.103977745 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.103992199 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.103492052 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.104294311 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.104049404 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.10418999 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.105028764 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.104399416 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.103796556 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.104445501 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.104447927 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.104738223 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.105351118 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.104418091 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.104595382 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.104339196 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.104751464 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.105311792 seconds)
  done (took 65.648412623 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.105009247 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.10414908 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.1048683 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.105336754 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.104939316 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.104539192 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.10525468 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.104960665 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.104247666 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.105049833 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.104558659 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.105286199 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.104937716 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.104680363 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.105299951 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.103620743 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.103869058 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.103828146 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.105881681 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.10191881 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.102235673 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.102275361 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.101494428 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.104029893 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.102077464 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.102438825 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.101890873 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.102405042 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.102452894 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.102787224 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.102882764 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.103240753 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.102829462 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.103718265 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.10318376 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.102504799 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.102360171 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.108034294 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.110499021 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.101858726 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.102735086 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.101542984 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.103458128 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.102051402 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.103417928 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.102065485 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.102903439 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.104349943 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.102480819 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.102773391 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.102193382 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.103079449 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.104010168 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.100495967 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.100511978 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.100387871 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.102323656 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.099783574 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.100585636 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.099377862 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.100230268 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.101117263 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.09921719 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.100436902 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.100309409 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.099403611 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.099082591 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.095359132 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.095044909 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.097994406 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.096277228 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.095634012 seconds)
  done (took 153.419237452 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.094804739 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.095075252 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.095251687 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.097466201 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.094401722 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.094282884 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.09419934 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.096812691 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.095002826 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.093821338 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.093958659 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.094476459 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083180815 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.095017077 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.094068294 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.094137368 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.093945827 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.095128445 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.093594367 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.094507024 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.094057524 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.094495551 seconds)
  done (took 48.100996147 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.094289191 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.094674394 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.094626699 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.0958706 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.095253372 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.09472749 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.095358574 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.094587297 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.097079767 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.094108131 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.095208458 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.09471108 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.094122392 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.094628369 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.092386727 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.093359624 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.093269344 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.093572293 seconds)
  done (took 39.732926907 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.09265871 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.092200695 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.092668659 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.091978739 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.092860115 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.092546179 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.091731356 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.092115027 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.093261812 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.091033398 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.092110608 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.092013423 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.091923156 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.092871789 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.091145276 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.091242976 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.092143515 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.09156078 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.092776891 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.092574282 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.091874752 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.091928711 seconds)
  done (took 48.057083166 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.093010453 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.091718559 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.092499431 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.091870082 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.09189182 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.092256404 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.09216683 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.092922522 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.09192239 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.092225487 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.092059304 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.092078813 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.091827468 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.092841859 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.093247947 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.092405858 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.093006233 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.092533329 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.091837129 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.09241258 seconds)
  done (took 43.87315371 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.093259905 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.09319315 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.093365516 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.094955393 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.093181252 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.092665903 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.093742739 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.09456192 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094266359 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.094250678 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.094096331 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.093351948 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.095918301 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.093622012 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.094145999 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.094055554 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.094416001 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.093527532 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.094125947 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.09388534 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.094605915 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.093605113 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.094818223 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.094071468 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.09377779 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.094166442 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.09410244 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.09433191 seconds)
  done (took 60.659786798 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.093987864 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.093227519 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.094164298 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.093692073 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.093839388 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.093050966 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.093991129 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.095184742 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.093964666 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.095047554 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.095024481 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.094543049 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.093475562 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.095428105 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.094236615 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.094291297 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.094032281 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.094395684 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.095122236 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.094147554 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.094651751 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.094263385 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.094918537 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.095092185 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.095040173 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.095025397 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.095398556 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.095487706 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.094856536 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.095701401 seconds)
  done (took 64.863160632 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.116417693 seconds)
    (2/2) benchmarking "in"...
    done (took 2.115595904 seconds)
  done (took 6.261164458 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.09487945 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.095214308 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.095768732 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.094503274 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.096017151 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.096406912 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.096181831 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.096088159 seconds)
  done (took 18.794139535 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.095583874 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.099590005 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.096196232 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.096390649 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.096506313 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.103391232 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.096958689 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.098220518 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.098971663 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.09837733 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.101669527 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.100502442 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.105315533 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.102318195 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.098112054 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.097577044 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.098792985 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.100362483 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.098289281 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.09649165 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.100494474 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097944527 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.096846355 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.096998802 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.096822298 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.099495999 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.10767383 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.098258965 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.098523073 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.097216834 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.104533291 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.096322916 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.096476074 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.100238689 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.09820417 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.097958312 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.105580772 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.097363958 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.098848306 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.098220759 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.099576503 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.101138315 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.102606473 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.105881779 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.098723349 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.098158453 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.097501273 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.09888691 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.099868184 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.103217281 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.10644021 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.099617092 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.098211182 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.098264323 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.101069791 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.09893964 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.099071352 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.101087954 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.106414031 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.105963771 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.102882299 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.119876473 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.108283352 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.09971544 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.098358782 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.110179522 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.12492473 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.1018311 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.101890264 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.098951331 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.107096033 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.099255265 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.099733384 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.098784397 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.113617355 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.1081991 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.099921654 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.099610026 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.099088407 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.100274051 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.102429949 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.101665402 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.100757902 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.100571041 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.110750851 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.125816165 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.100850801 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.100459889 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.102707792 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.101677045 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.105886239 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.103564696 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.100996461 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.100739115 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.102593078 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.103459439 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.101025249 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.101432418 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.100075703 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.110758343 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.100488463 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.100251993 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.105189064 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.10932187 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.100777959 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.101095122 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.103212283 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.101336245 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.109518826 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.101626484 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.101465191 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.100626191 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.102849828 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.105512805 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.10109802 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.106415356 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.110704591 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.109847006 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.104329031 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.106544296 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.105810799 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.105578371 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.112686679 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.126227223 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.101959496 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.106102828 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.108261101 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.114013724 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.106277127 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.101637497 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.10516494 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.102587979 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.102147869 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.103703673 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.101765085 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.103179033 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.102513904 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.103215199 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.103363605 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.103326747 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.105884921 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.105029915 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.106059429 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.103736278 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.107204298 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.102455731 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.105068259 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.110271462 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.103796365 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.103783145 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.103381861 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.106219214 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.105638545 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.105154338 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.10393466 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.104135988 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.103983854 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.104826621 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.106272987 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.104635937 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.103945088 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.10531919 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.108861707 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.105139134 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.104849943 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.105406245 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.10497793 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.105174045 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.106543137 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.106711314 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.107382991 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.104643399 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.109144656 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.103708548 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.10454194 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.10399904 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.105111451 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.105003328 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.10909977 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.117420101 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.109331043 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.112709718 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.105040353 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.113095674 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.105284737 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.106998453 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.106319672 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.10483925 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.105925625 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.105604538 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.10517099 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.109841101 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.127823715 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.116927861 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.108950645 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.107906584 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.11179939 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.10969643 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.1112112 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.105870626 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.107434849 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.109119383 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.10686884 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.10630134 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.105809541 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.10977099 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.106058219 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.106149127 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.110482916 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.107103843 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.106172729 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.107766581 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.106124575 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.10898835 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.107104042 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.106011445 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.095676621 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.108898698 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.114542727 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.109471535 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.106567382 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.10778189 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.11014553 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.107609578 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.107187378 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.108840471 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.111522822 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.106819781 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.10856994 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.115483 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.10891109 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.107423724 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.107945923 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.1077076 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.110304578 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.108588575 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.111125738 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.116476788 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.111401007 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.107067605 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.113722556 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.107185786 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.111253698 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.108175651 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.109660414 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.10896778 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.109601402 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.108288097 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.107688896 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.116969148 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.107967281 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.110224901 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.108063689 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.112470621 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.110302112 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.111536674 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.109112551 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.112867615 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.116997813 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.11495866 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.10985442 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.111738946 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.111502717 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.110731815 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.113788097 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.109673122 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.123334407 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.119436298 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.108122619 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.109147735 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.109727042 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.112748012 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.108941196 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.110068661 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.117510483 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.110996502 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.111363348 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.113582716 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.109558421 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.109490755 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.117360494 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.112408662 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.11357011 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.111476092 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.111176842 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.110728589 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.10925924 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.113352602 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.110627528 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.112647345 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.114896883 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.111129745 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.112732381 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.110951455 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.119588638 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.109635966 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.111853886 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.118323083 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.11322256 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.110983144 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.112223591 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.110681534 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.112822343 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.112571392 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.111766244 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.112522307 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.111343432 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.115553771 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.121836211 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.116617055 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.120392176 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.113905774 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.123009664 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.11230626 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.111710646 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.110851935 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.109607077 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.120905011 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.111923104 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.111867339 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.120161242 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.112807276 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.113571978 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.116985594 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.112186179 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.112111769 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.113085821 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.114626499 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.118960328 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.115590992 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.111861401 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.11274882 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.111658304 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.112456473 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.116431827 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.115389046 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.114272562 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.113758785 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.112353385 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.112581999 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.113413854 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.113050432 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.11346697 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.112958897 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.112843584 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.121059484 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.113527429 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.115857136 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.117525515 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.112761093 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.122904421 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.113197386 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.113908328 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.115258322 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.113609324 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.11781634 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.113325432 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.113997283 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.115123969 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.113558963 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.116118769 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.126440226 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.121792546 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.118222347 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.11678782 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.114741082 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.115893709 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.125398318 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.139165242 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.114738043 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.117433075 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.119379347 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.121895398 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.117624246 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.121624839 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.119010793 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.12389649 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.116958594 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.114917402 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.119313194 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.128261636 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.116013088 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.115041843 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.114501878 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.120136933 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.118506456 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.116163503 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.117051095 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.118936331 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.11730396 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.127897682 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.116006039 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.117423567 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.115439633 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.115148221 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.116180804 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.115701063 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.117664125 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.118162407 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.116039333 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.115681945 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.118807907 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.121958521 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.116709504 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.120538452 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.126320472 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.116504949 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.116347022 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.119521218 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.116543518 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.119332238 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.117212024 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.116653586 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.119881041 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.116717773 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.11822953 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.121534155 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.126223306 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.118495683 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.116282509 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.116429733 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.121425898 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.117886478 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.117193256 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.119192198 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.126131306 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.121069166 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.129759034 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.127772561 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.117810783 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.119313404 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.125961595 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.126873985 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.11819351 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.117290849 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.117877756 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.119937777 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.120533262 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.119872323 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.117981694 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.11914974 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.124451689 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.118288027 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.118635032 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.118552678 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.118433881 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.121312814 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.120939011 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.124909615 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.118087448 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.117510281 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.11768944 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.119772482 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.120058531 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.12196688 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.119019135 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.11902483 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.12193721 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.121398902 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.123587127 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.119586073 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.119174364 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.120915261 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.11882894 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.118009656 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.12052351 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.120260668 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.119412154 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.123940896 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.127433155 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.119612214 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.122082613 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.121507443 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.123867921 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.119674513 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.120169823 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.119730131 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.119227146 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.127849659 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.11999275 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.120313418 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.120253939 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.11971128 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.126597222 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.122926275 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.124912196 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.120455172 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.121525448 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.120425104 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.12492601 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.1306649 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.125381923 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.125001025 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.128116602 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.125383414 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.123040266 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.121005536 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.120588048 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.12256952 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.122323131 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.124524295 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.123161329 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.124398381 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.120683572 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.123399689 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.121876413 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.124646897 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.121161444 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.121275571 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.125348127 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.131804062 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.130763867 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.120811912 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.123133322 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.122447132 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.125658561 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.133643539 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.122023405 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.12179531 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.122655149 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.123393156 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.123544138 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.13074733 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.131998518 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.126202298 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.122325169 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.127994909 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.141514923 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.124974292 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.133088165 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.153912843 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.124655531 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.122866353 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.123864455 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.123839376 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.123209817 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.126236676 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.123369319 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.130027096 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.123092072 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.123424174 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.131592264 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.121969588 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.12315159 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.12346893 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.124929057 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.129692336 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.122904497 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.131040635 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.123710273 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.123214588 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.123886658 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.126175791 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.122935153 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.122612162 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.123539208 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.12590203 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.123500922 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.124318129 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.132523363 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.124141118 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.125947146 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.138464173 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.136716841 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.124224533 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.124055712 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.124734877 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.130320671 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.127078312 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.124110204 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.128935188 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.132900958 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.128119216 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.132479131 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.12647982 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.126521074 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.126249469 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.124221733 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.125158089 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.139007581 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.136636471 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.125457317 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.126609749 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.133401764 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.125531585 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.132594993 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.132022264 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.128069182 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.127587983 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.1259173 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.125841669 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.125628394 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.125638163 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.129065431 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.133772453 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.125542856 seconds)
  done (took 1261.769694674 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.125954083 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.125155332 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.12559682 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.125539696 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.1257141 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.125738787 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.125813708 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.12497803 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.125695827 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.12636515 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.125690655 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.126539897 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.125751158 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.126451985 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.126242229 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.126387104 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.125644228 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.125627585 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.126427316 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.126227414 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.126485077 seconds)
  done (took 46.702965888 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.12659509 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.126961336 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.126521868 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.126561699 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.125391954 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.126356446 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.126009614 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.126787624 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.114274902 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.126053089 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.127288628 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.12694926 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.126520426 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.127119996 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.126027329 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.127045893 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.126869102 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.126711396 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.127063416 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.127511079 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.127475402 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.127646533 seconds)
  done (took 48.835950011 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.127319745 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.127784301 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.129433326 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.127378494 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.127536626 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.12879653 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.127785233 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.130186326 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.128650161 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.129256661 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.136771676 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.135841727 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.128084248 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.131777821 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.128510024 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.128712371 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.274123113 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.128600303 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.129075033 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.129030218 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.129928155 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.135646968 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.129151004 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.12872281 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.129957455 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.129322733 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.129487623 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.129424892 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.129433498 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.131390276 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.134303059 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.128857251 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.131186782 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.13302282 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.129538411 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.131233106 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.134365478 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.129432847 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.127602361 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.129861499 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.140841186 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.154902872 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.129907116 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.130445637 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.138614184 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.129889253 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.129723445 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.134572727 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.139066759 seconds)
  done (took 106.636183582 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.129245736 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.130470489 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.129617872 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.129119154 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.129750474 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.129828048 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.130189176 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.130419436 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.13002949 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.130585396 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.131099266 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.130738731 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.131163859 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.130524127 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.131148698 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.131942037 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.131143828 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.132008555 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.131420419 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.131419729 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.131381778 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.132057328 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.131363065 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.131616222 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.130718626 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.131924179 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.132182827 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.131044343 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.132113631 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.132058171 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.131748583 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.131625803 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.132448704 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.132602543 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.131983593 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.132325367 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.132592644 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.132442816 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.132333458 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.132597897 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.132144725 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.132072769 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.132291834 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.13254118 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.132364606 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.13185045 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.132335223 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.131876488 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.132743078 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.132172569 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.132767568 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.132811538 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.132988463 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.132608387 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.132687508 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.132856307 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.132349284 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.1318162 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.132140129 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.133098864 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.133101506 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.133113523 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.132724086 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.133122277 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.132618797 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.134091502 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.133754975 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.132902575 seconds)
  done (took 147.029619771 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.133744287 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.13423029 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.133538871 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.134146319 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.134151119 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.134086548 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.134321479 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.135672858 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.134492107 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.134539963 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.134551623 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.134321004 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.133837649 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.13445661 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.134001944 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.134418906 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.134041619 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.134747422 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.135508835 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.134216785 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.135059134 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.135113753 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.135313222 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.135352154 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.134706616 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.134837041 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.135142159 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.135193188 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.13608162 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.135642399 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.135301724 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.135463845 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.135409367 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.135775072 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.135740472 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.134954406 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.135794572 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.136195011 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.13635141 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.136098136 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.135814907 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.136502768 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.135579297 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.135645266 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.136391941 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.135869588 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.136124281 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.136319183 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.135656518 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.136911403 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.135886582 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.137363742 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.137286765 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.136551561 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.136921938 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.136270053 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.137360212 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.136675715 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.136799505 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.136705576 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.136941273 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.136528938 seconds)
  done (took 134.4671681 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.136368174 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.136857922 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.136896092 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.136037404 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.136552958 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.136828229 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.136660042 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.136667698 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.136070349 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.136803418 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.137578111 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.13707907 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.138213166 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.13752423 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.138013198 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.137968451 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.13755533 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.138250372 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.137365992 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.137874241 seconds)
  done (took 44.812717888 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.138232058 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.13810526 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.136771481 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.137240763 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.137929202 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.138673693 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.137439626 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.138089766 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.137620225 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.138489247 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.137994953 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.138074522 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.137735732 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.137579738 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.138329551 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.138018918 seconds)
  done (took 36.276738365 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.137542616 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.138489731 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.139281366 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.13790705 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.138426773 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.138573901 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.138628193 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.137887277 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.138241249 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.139569087 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.138732059 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.138960669 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.137903072 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.13889782 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.13824259 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.138487385 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.138915556 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.13926793 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.138856195 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.138955531 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.139295442 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.138891976 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.138825018 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.1391902 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.138712951 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.139579577 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.139504274 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.138529267 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.139387581 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.138921535 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.140008522 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.140407003 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.139687313 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.139785444 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.14079649 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.140040262 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.139161381 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.14017667 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.139852432 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.139992432 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.139463443 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.13954443 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.13923329 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.140363448 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.140433875 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.140042786 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.140424808 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.140851665 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.140410259 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.140151183 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.139556042 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.140289114 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.140354771 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.141100336 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.14093841 seconds)
  done (took 119.737938904 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.140112104 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.141503523 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.140620711 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.140104565 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.141047845 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.141099649 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.140949222 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.140703925 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.141163635 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.140634545 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.140836551 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.140774422 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.140814657 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.142191568 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.141720468 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.140999177 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.142023774 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.141989486 seconds)
  done (took 40.612995796 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.141647564 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.142098654 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.141399329 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.142005057 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.141983886 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.142119284 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.142031235 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.141386351 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.142283724 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.141449087 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.142106825 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.14183057 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.141566747 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.142153623 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.142659689 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.14311281 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.142703374 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.142324546 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.142285011 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.142321079 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.143251869 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.143460225 seconds)
  done (took 49.202314054 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.144549026 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.143471621 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.158602587 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.166984233 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.165009716 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.182129618 seconds)
  done (took 15.035165649 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143123325 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143362043 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.14501583 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143554346 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.143116519 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.143255597 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143738145 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144024858 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144761364 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144416084 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.143254209 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144407911 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143934252 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144076602 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144454776 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.144113697 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.143699631 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144180062 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144001138 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144124208 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144415846 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144141034 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144432713 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145572553 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144173698 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144580055 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145493165 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145352654 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145425885 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145415298 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144668537 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.14523007 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144847915 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144990313 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.145211554 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144874993 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144878921 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145088552 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145676332 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.145613771 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.145450835 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144529821 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145240985 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145520876 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145155285 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146318921 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145827291 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146999121 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.145231933 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145996598 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145872114 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145669241 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146054978 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146559021 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146464343 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146828477 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14756723 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146385487 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145910268 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146370572 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.146828889 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146293871 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146804919 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.146816025 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146255715 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146021149 seconds)
  done (took 143.655010809 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.146153356 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.146321433 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146564183 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.146636915 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.147049197 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146686505 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147639168 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.138789746 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143637233 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.14704385 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131536731 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132527503 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.14712848 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147265255 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14731939 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148436434 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.147287902 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.147584707 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147104816 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147726112 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147319068 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.14757776 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148302219 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147764066 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147760907 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148246738 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148254123 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147716578 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148293705 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148407082 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148461574 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148804266 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148091767 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.148129612 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148973913 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148855397 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148117041 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148948683 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148862727 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148363868 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147807837 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148475663 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148171 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148872212 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.148903787 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.148830945 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.148892947 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148891984 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.149236683 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148793077 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.149350872 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.149647637 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149396519 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.149411086 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149479402 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.149412023 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149248075 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.14961858 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.136441918 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149603426 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.149642407 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148426931 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149344549 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148990408 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.150360182 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149463175 seconds)
  done (took 143.8115421 seconds)
done (took 2942.533903024 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.150442693 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.21423541 seconds)
  done (took 16.446812373 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.312324391 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.191071527 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.337827214 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.266927183 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.152317182 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.15069002 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.152185491 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.151496106 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.243279432 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.152121031 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.214395472 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.150816498 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.150739236 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.15111595 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.150623909 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.150821014 seconds)
  done (took 57.158590274 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.153122902 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.152331352 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.150348869 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.148736399 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.161476666 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.232674433 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.171315418 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.152262473 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.151188932 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.177202651 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.165049029 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.155216121 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.15680362 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.153006105 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.240902349 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.197566738 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.208501354 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.225058553 seconds)
  done (took 41.231451745 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.230881424 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.165397555 seconds)
  done (took 11.482252151 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.150266913 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.132711645 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.171270979 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.160162989 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.171379438 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.144462012 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.154602441 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.148262812 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.163207517 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.147734717 seconds)
  done (took 73.593730104 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.144916519 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.144898414 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.394609562 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.153426756 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.150183228 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.167086344 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.141730301 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.173080265 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.144377505 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.139781849 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.152359347 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.39165928 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.152962484 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.142841417 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.5561127 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.154551336 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.147039734 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.171461031 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.173194755 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.145548093 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.14771727 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.143872286 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.301495586 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.839579272 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.145383959 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.143863537 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.147269707 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.136714793 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.137948746 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.139890548 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.14149148 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.140260737 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.142391402 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.141773141 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.147938459 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.14359689 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.628457399 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.159356505 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.146960404 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.230629124 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.185181278 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.146393969 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.916553794 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.142215352 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.136678307 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.146578534 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.831007176 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.2336267 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.140854643 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.317893285 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.47312222 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.153900468 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.292675272 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.297893523 seconds)
  done (took 147.737144487 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.134914568 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.483069797 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.289973914 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.139389731 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.448972996 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.350729228 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.800612774 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.182535054 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.13759278 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.353614453 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.273847604 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.246703773 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.137727346 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.134981405 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.137292953 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.135628728 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.290273364 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.20374422 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.137694229 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.133217796 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.155526117 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.292082917 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.242099836 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.13767135 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.150148451 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.348485207 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.183821702 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.244324708 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.635721906 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.133154496 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.197347449 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.700401304 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.135246954 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.134360728 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.174596331 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.23689465 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.2239998 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.138500763 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.134062447 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.133589539 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.826056935 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.334483774 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.238740807 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.27011094 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.282950615 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.348339424 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.606697703 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.136000818 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.653965459 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.307733253 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.342007037 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.358770921 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.235960417 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.138371239 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.608244048 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.135727643 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.807010118 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.364312174 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277528418 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.240765624 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.139595596 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.136551881 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.135296139 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.376476152 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.13852292 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.232797552 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.137655239 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.13708991 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.234886558 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.243491788 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.276267025 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.361411658 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.168349403 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.859983227 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.401340819 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.307116776 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.201592615 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362302311 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.139342008 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.135320729 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.221642217 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.738019244 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.265265321 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.384732776 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.376445265 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.163147056 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.728968767 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.13535928 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.281287795 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.311362314 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.436999857 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.283110946 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.190998192 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.081912629 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.137177412 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.136186261 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.273005761 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.264640824 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.331375707 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.49164064 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.376585628 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.72692041 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.154324488 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.512976895 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246161576 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.140451032 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.792472936 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.136666321 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.346252754 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.182001659 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.139982221 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.138552915 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.306005517 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.171132601 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.138832544 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.915849924 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.198472195 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.1408238 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.315555288 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.141013146 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.387650426 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047106675 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.373997833 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.070486185 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.170576457 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.314502687 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.283808828 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.456491903 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.472384955 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.386462294 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.227677976 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.371008967 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.095925866 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.139391951 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.409241327 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.141287422 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.139110313 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.309771994 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.142972962 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.286762973 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.141574263 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.47221971 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.158905809 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193227444 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.143661736 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.389391163 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.172760884 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.189224466 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.141965167 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.272186923 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.143152686 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.06434006 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.29650167 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.142290659 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.138922644 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.736753698 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.138084349 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.286668805 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.368975009 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.15437937 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.208510849 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.637497438 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.737080434 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.2262152 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.164050996 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.517385846 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.859028948 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.275770084 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.143125327 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.635430172 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.140050086 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.379038411 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.338683301 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.144330155 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.14172448 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.001234671 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.785567747 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.139988858 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.298174162 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.96159503 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.515768135 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.346984869 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.143123835 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.19170885 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.146476442 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.879054747 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.485182829 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.140935524 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.140886292 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.141255635 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.141604686 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.144115109 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.350005867 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.173006562 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.681483616 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.278810964 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.400885611 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.449111198 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.363325416 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.177905106 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.144599459 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.4275974 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.1439986 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.203036088 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.144345573 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.151473382 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.420719983 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.145979104 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.359567071 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.352738909 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.121161421 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.189062218 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.145352361 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.143377656 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.142348486 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.278695736 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.233385225 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.145561452 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.143004286 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.181439243 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.247997882 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.327199699 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.456983264 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.173472307 seconds)
  done (took 945.476282857 seconds)
done (took 1295.206701897 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.143063531 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.146380862 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.14796025 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.147537584 seconds)
  done (took 30.660942939 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.145073618 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.144111236 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.146168285 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.145983251 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.145189331 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.144961328 seconds)
  done (took 14.948258003 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.143882312 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.146173189 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.147004704 seconds)
  done (took 23.514666909 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.574580126 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.556254072 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.219406366 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.288634662 seconds)
  done (took 11.716800563 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.150920827 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.146500886 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.145413919 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.145785237 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.145616849 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.146434776 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.148563311 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.147162947 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.148813266 seconds)
  done (took 21.410355689 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.388395415 seconds)
done (took 108.713464521 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.164663362 seconds)
    (2/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.245226699 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.180864035 seconds)
    (4/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.440070601 seconds)
    (5/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.339213393 seconds)
    (6/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.165907544 seconds)
    (7/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.19396666 seconds)
    (8/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.398183082 seconds)
    (9/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.980353544 seconds)
    (10/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.156584865 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 4.350791104 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.240016719 seconds)
    (13/341) benchmarking ("sort", Float64, false)...
    done (took 5.876687573 seconds)
    (14/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.374561604 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.902541797 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.265259715 seconds)
    (17/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 4.864274393 seconds)
    (18/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.762425816 seconds)
    (19/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.264847733 seconds)
    (20/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.282065002 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.236549938 seconds)
    (22/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.158742499 seconds)
    (23/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.155234701 seconds)
    (24/341) benchmarking ("perf_sum", Bool, true)...
    done (took 4.204876391 seconds)
    (25/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.162875655 seconds)
    (26/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.736086097 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.172109259 seconds)
    (28/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.959624737 seconds)
    (29/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.272791435 seconds)
    (30/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.157277945 seconds)
    (31/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.166708864 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.170901671 seconds)
    (33/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.442792552 seconds)
    (34/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.062960016 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.774366758 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.965500755 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.134174526 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.17964268 seconds)
    (39/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.156585524 seconds)
    (40/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.957048819 seconds)
    (41/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.16866818 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.260801709 seconds)
    (43/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.564088085 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.156540618 seconds)
    (45/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.431174431 seconds)
    (46/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.262309306 seconds)
    (47/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.484757261 seconds)
    (48/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.163352462 seconds)
    (49/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.665980114 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.243539983 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.392178491 seconds)
    (52/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.761616661 seconds)
    (53/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.490149003 seconds)
    (54/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.37865945 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.290893407 seconds)
    (56/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.676094712 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.19211813 seconds)
    (58/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.159207068 seconds)
    (59/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.82280401 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.688482026 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.027522121 seconds)
    (62/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.484906952 seconds)
    (63/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.369332649 seconds)
    (64/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.475479888 seconds)
    (65/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.595893392 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.404594219 seconds)
    (67/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.626941713 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.172750884 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.158312009 seconds)
    (70/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.162148962 seconds)
    (71/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.18846276 seconds)
    (72/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.437201873 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.876487508 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.504411485 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.063329863 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.574961193 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.47078605 seconds)
    (78/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.571998094 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.172602176 seconds)
    (80/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.422803073 seconds)
    (81/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.159117567 seconds)
    (82/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.855957393 seconds)
    (83/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.265098549 seconds)
    (84/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.342855377 seconds)
    (85/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.246745225 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.173206256 seconds)
    (87/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.169215197 seconds)
    (88/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.160751091 seconds)
    (89/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.609132628 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.259475497 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.472740228 seconds)
    (92/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.161871667 seconds)
    (93/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.243598271 seconds)
    (94/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.59830832 seconds)
    (95/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.351481878 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.350424898 seconds)
    (97/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.173430377 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.552756327 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.157395781 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.171004489 seconds)
    (101/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.952281233 seconds)
    (102/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.160693017 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.183533344 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.322097847 seconds)
    (105/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.177288548 seconds)
    (106/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.441477244 seconds)
    (107/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.477692994 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.564366207 seconds)
    (109/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.673140474 seconds)
    (110/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.24478003 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.512492225 seconds)
    (112/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.282630422 seconds)
    (113/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.381040485 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.183959815 seconds)
    (115/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.377424827 seconds)
    (116/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.469101325 seconds)
    (117/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.475906213 seconds)
    (118/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.356853033 seconds)
    (119/341) benchmarking ("sort", BigInt, false)...
    done (took 7.16102785 seconds)
    (120/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.181057665 seconds)
    (121/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.25777597 seconds)
    (122/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.944262569 seconds)
    (123/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.181587226 seconds)
    (124/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.257078904 seconds)
    (125/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.166294017 seconds)
    (126/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.362846289 seconds)
    (127/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.174982213 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.464600771 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.442447697 seconds)
    (130/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.324787801 seconds)
    (131/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.421424898 seconds)
    (132/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.731824841 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.389982361 seconds)
    (134/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.980415314 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.957261369 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.032604208 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.189859872 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.244689957 seconds)
    (139/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.450412738 seconds)
    (140/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.162105108 seconds)
    (141/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.163737149 seconds)
    (142/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.231966361 seconds)
    (143/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.327198432 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.260386593 seconds)
    (145/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.259317372 seconds)
    (146/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.544371746 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.410503315 seconds)
    (148/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.161432241 seconds)
    (149/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 3.940611137 seconds)
    (150/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.345193858 seconds)
    (151/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.172681485 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.429357234 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.381041355 seconds)
    (154/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.164282842 seconds)
    (155/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 4.331753774 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.176369191 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.292665965 seconds)
    (158/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.245766094 seconds)
    (159/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.1683217 seconds)
    (160/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 4.181094866 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.159492125 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.194302199 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.177360819 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.815891438 seconds)
    (165/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.844102978 seconds)
    (166/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.655234405 seconds)
    (167/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.17526919 seconds)
    (168/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.077496689 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.169991759 seconds)
    (170/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.270760906 seconds)
    (171/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.062847513 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.520163137 seconds)
    (173/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.472883873 seconds)
    (174/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.167714665 seconds)
    (175/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.177060186 seconds)
    (176/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.55285767 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.375240299 seconds)
    (178/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.377289795 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.302124843 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.481935001 seconds)
    (181/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.229793945 seconds)
    (182/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.476913478 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.462657773 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.490298208 seconds)
    (185/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.455201742 seconds)
    (186/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.509277209 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.191656553 seconds)
    (188/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.886781572 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.56136752 seconds)
    (190/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.627912184 seconds)
    (191/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.379110554 seconds)
    (192/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.53773738 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.316431581 seconds)
    (194/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.427255234 seconds)
    (195/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.278355552 seconds)
    (196/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.29067239 seconds)
    (197/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.299127163 seconds)
    (198/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.163223373 seconds)
    (199/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.342857476 seconds)
    (200/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.381279748 seconds)
    (201/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.166843528 seconds)
    (202/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.310798241 seconds)
    (203/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.499293236 seconds)
    (204/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.599561223 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.167421978 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.186390425 seconds)
    (207/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.160089627 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.52673513 seconds)
    (209/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.621015718 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.267480108 seconds)
    (211/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.184469838 seconds)
    (212/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.992620677 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 5.951327545 seconds)
    (214/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.277545823 seconds)
    (215/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.385953388 seconds)
    (216/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.442018551 seconds)
    (217/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.186984203 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.372036111 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.203295639 seconds)
    (220/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.176601249 seconds)
    (221/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.961365989 seconds)
    (222/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.313799095 seconds)
    (223/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.443019237 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.316443365 seconds)
    (225/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.256718413 seconds)
    (226/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.494552581 seconds)
    (227/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.170943157 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.273007105 seconds)
    (229/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.383673396 seconds)
    (230/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.298569299 seconds)
    (231/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.849417304 seconds)
    (232/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.614866609 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.189485524 seconds)
    (234/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.177777361 seconds)
    (235/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.427113023 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.558868303 seconds)
    (237/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.192145245 seconds)
    (238/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.576775145 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.311634455 seconds)
    (240/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.246715898 seconds)
    (241/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.332794222 seconds)
    (242/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.308019278 seconds)
    (243/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.291074293 seconds)
    (244/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.233816283 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.879763906 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.823230195 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.459375074 seconds)
    (248/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.519801393 seconds)
    (249/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.173297014 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 5.246219748 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.183650026 seconds)
    (252/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.766432143 seconds)
    (253/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.177346816 seconds)
    (254/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.403546112 seconds)
    (255/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.1839762 seconds)
    (256/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.247170167 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.250309661 seconds)
    (258/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.481221043 seconds)
    (259/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.176799206 seconds)
    (260/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.867791535 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.292823432 seconds)
    (262/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.29865267 seconds)
    (263/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.275012336 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.890991557 seconds)
    (265/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.390795753 seconds)
    (266/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.378134677 seconds)
    (267/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.358276246 seconds)
    (268/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.551369566 seconds)
    (269/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.285373432 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.284526277 seconds)
    (271/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.175431669 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.292896176 seconds)
    (273/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.494565804 seconds)
    (274/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.32885753 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.182230276 seconds)
    (276/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.283898995 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.285299766 seconds)
    (278/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.483776794 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.19628142 seconds)
    (280/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.167122398 seconds)
    (281/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.895636409 seconds)
    (282/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.598731837 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.422159246 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.299513535 seconds)
    (285/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.321558573 seconds)
    (286/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.081852017 seconds)
    (287/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.361524364 seconds)
    (288/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.284036661 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.172845698 seconds)
    (290/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.34065785 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.246544882 seconds)
    (292/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.886349642 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.171398908 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.477918165 seconds)
    (295/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.324343126 seconds)
    (296/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.594547772 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.380670102 seconds)
    (298/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.308387947 seconds)
    (299/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.191600032 seconds)
    (300/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.416624343 seconds)
    (301/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.255506405 seconds)
    (302/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.467849732 seconds)
    (303/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.263891655 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.3966592 seconds)
    (305/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.174086124 seconds)
    (306/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.335504068 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.17402518 seconds)
    (308/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.230880867 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.567877564 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.362586107 seconds)
    (311/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.55106426 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.312204532 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.943926217 seconds)
    (314/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.270144893 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.380740479 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.280962815 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.301843586 seconds)
    (318/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.270267073 seconds)
    (319/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.416022799 seconds)
    (320/341) benchmarking ("sort", Int8, false)...
    done (took 5.12992198 seconds)
    (321/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.946618687 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.098295819 seconds)
    (323/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.178221841 seconds)
    (324/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.415285088 seconds)
    (325/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.678771577 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.067416858 seconds)
    (327/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.170779555 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.150972515 seconds)
    (329/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.387242774 seconds)
    (330/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.274227308 seconds)
    (331/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.258686398 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.428185763 seconds)
    (333/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.461494605 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.170271537 seconds)
    (335/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.253394111 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.255655186 seconds)
    (337/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.313702022 seconds)
    (338/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.103212926 seconds)
    (339/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.592354012 seconds)
    (340/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.6570654 seconds)
    (341/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.216946824 seconds)
  done (took 1195.246135846 seconds)
done (took 1197.634441462 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.200497088 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.176161889 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.672651786 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.187648124 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.175882391 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.179635035 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.683158814 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.205681235 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.19342516 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.683554223 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.185764051 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.176312255 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.192167684 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.211349481 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.186966545 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.190611792 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.181687793 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.201470216 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.211639962 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.181006615 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.228005178 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.182556277 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.176323057 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.227784733 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.177582734 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.191679064 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.201775121 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.228792248 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.228567773 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.179848381 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.182235902 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.527082954 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.226463515 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.18260368 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.188852024 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.180573765 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.183365508 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.192897761 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.201076932 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.192935961 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.177944843 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.188308248 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.182063327 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.180825953 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.176860144 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.177726096 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.181316818 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.303473606 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.192512085 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.512055724 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.242657381 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.201954832 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.23041919 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.181168201 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.18044178 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.180676745 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.22968766 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.184260276 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.182368521 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.512477796 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.270748364 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.191653263 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.510764961 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.23989283 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.187241818 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.186939914 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.178296518 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.203773725 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.529135335 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.722224327 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.210637024 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.199246277 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.180125122 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.180554282 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.193039429 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.683948978 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.193915781 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.752638809 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.202638314 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.193842163 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.185490097 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.181173877 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.180278374 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.195801183 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.204687848 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.178996759 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.186125533 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.18555114 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.193912617 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.530514325 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.220592511 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.677840523 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.187639279 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.20546888 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.204733068 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.752400679 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.204711196 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.202780959 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.184400359 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.530734786 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.219002566 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.20549313 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.18177501 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.19210261 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.295504982 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.205241347 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.204950854 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.180709088 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.202658082 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.18727503 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.181274093 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.195153335 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.200482288 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.215829534 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.197950139 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.180953287 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.189553518 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.187328169 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.20399028 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.189845642 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.188110901 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.192351865 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.181013848 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.23298298 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206160745 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.196709449 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.296988857 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.18750274 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.307147252 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.19554709 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.18867785 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.181529614 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.515223369 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.223750471 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.203880423 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.189190904 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.205759777 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.204472321 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.197882874 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.184617245 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.196555152 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.183989232 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.234176338 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.182708864 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.209419499 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.234214389 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.196907287 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.188205421 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.205647848 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.217936484 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.202989759 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.187280032 seconds)
done (took 343.007641639 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.226376537 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.180652572 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.256029398 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.180347367 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.246990209 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.232697252 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.181005536 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.180870179 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.179844753 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.571546146 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.180356201 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.186324024 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.180510161 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.18001386 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.229657595 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.180775073 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.180164534 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.415826869 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.182648403 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.241338504 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.180474762 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.181166689 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.181712438 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.570135985 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.184357618 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.180331983 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.243540854 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.181899524 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.420644125 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.180539858 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.180825429 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.421172824 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.241790722 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.194320271 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.189068544 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.189402 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.248366527 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.190906812 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.228223446 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.227987009 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.258047458 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.215834944 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.179925592 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.182593298 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.184320892 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.183664043 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.182673022 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.215867558 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.183031627 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.190161577 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.418300323 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.188342341 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.187956241 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.182550302 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.182610545 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.199053137 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.183277005 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.182664158 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.241745989 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.184057235 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.229898708 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.572047555 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.573952039 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.183559685 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.18141339 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.183844217 seconds)
  done (took 204.574643991 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.251423746 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.268522881 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.250480792 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.187518359 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.234941102 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.251901814 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.188442707 seconds)
  done (took 17.747416037 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.191167221 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.184453255 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.207209826 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.208406374 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.184492257 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.322341472 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.196033651 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.190030044 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.210926678 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.185178034 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.52128825 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.207662049 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.191856938 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.185501031 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.195681759 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.214124339 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.186678031 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.184534924 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.281787056 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.261611691 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.190515511 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.19229677 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.21305868 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.196421425 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.185222926 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.18636704 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.185224429 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.191999581 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.18432581 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.184658449 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.185240209 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.199376178 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.18518017 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.183772154 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.184378476 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.18587236 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.185890404 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.185219648 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.186505202 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.185053148 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.186004931 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.185802012 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.185715477 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.185833233 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.187407658 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.208577731 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.186334878 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.185864472 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.185326747 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.187179804 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.215856685 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.185096 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.186114204 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.189788903 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.227398528 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.192702786 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.187269749 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.187140147 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.187576803 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.187098786 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.186158654 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.266563418 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.208822293 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.187086401 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.209366221 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.224776971 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.187508991 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.186887125 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.186827276 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.21227292 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.186960637 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.210155212 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.187031505 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.28574043 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.187371661 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.329602512 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.209674145 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.191601755 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.191317322 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.18568396 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.195059507 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.18819902 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.190950888 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.194235383 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.193269139 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.187139747 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.187822663 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.189457576 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.195825088 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.188184044 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.231110289 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.186408874 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.188436786 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.287291316 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.188212393 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.285348387 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.2148438 seconds)
  done (took 235.947954629 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.192090473 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.190869155 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.200712093 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.188537905 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.188358742 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.193657861 seconds)
  done (took 15.272072704 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.190325782 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.193223524 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.188389156 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.190555308 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.189014222 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.188436151 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.188982353 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.190254115 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.191784078 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.189533298 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.189035386 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.19011871 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.188819328 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.189465622 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.189464268 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.18923456 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.18763031 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.188782788 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.191100171 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.190034864 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.441904218 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.190033459 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188404447 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.195048483 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.192901957 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.189677836 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.198864199 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.190147534 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.19026026 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.196360265 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.193367464 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.190005455 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.194873623 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.196936229 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.194018726 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.194824732 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.194446788 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.1914556 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.190077431 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.190717133 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.190834292 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.191145323 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.190854664 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.19179085 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.192982246 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.199938025 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.196448375 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.199591588 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.191191089 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.192059204 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.192679761 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.190495101 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.190158757 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.192457595 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.196443972 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.197897638 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.196158419 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.191508427 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.191062745 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.195711713 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.195507187 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.191921201 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.194552522 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.195732478 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.198575981 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.193526891 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.196939058 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.195766472 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.191984309 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.191969483 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.193323646 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.192383716 seconds)
  done (took 161.222186411 seconds)
done (took 636.871907608 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.259024536 seconds)
  done (took 9.38116881 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.353595676 seconds)
  done (took 9.567987105 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.427078969 seconds)
  done (took 12.554383827 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.200884136 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.234253768 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.212302308 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.192322543 seconds)
  done (took 30.974050165 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.42875763 seconds)
  done (took 9.551818198 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.203915703 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.190259295 seconds)
  done (took 16.580413258 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.260539794 seconds)
  done (took 9.383907208 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.248470044 seconds)
  done (took 9.407887187 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.199515642 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.218768859 seconds)
  done (took 16.559368454 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.191541458 seconds)
  done (took 9.314070596 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.941328368 seconds)
  done (took 10.152141744 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.202928603 seconds)
  done (took 9.342905212 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.196004444 seconds)
  done (took 9.319340252 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.05004134 seconds)
  done (took 10.173400472 seconds)
done (took 174.382487834 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.200197647 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.193091623 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.192966242 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.191390495 seconds)
  done (took 30.900957633 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.228823148 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.229698085 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.23744818 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.228437204 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.219582191 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.220057054 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.229566505 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.22946877 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.219472265 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.227153459 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.228167633 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.229173359 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.228448416 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.238051792 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.238244236 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.22796283 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.228900364 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.229319476 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.21974458 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.238858854 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.229698769 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.229721257 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.194191882 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.195304204 seconds)
  done (took 55.549599007 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.385303733 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.262066114 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.348429491 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.240846784 seconds)
  done (took 11.361638815 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.193993915 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.258840873 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.245929179 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.241648427 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.246203316 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.297317367 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.248307996 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.333070893 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.323339989 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.32133427 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.20145576 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.217138467 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.217284605 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.23383875 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.276558861 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.19500884 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.19518655 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.309705962 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.257967007 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.36654436 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.195710518 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.252193366 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.248051941 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.248035914 seconds)
  done (took 56.25027746 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.197024868 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.204394697 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.203980639 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.197399868 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.198464845 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.197662278 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.203939763 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.198119797 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.21880776 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.198939859 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.196893597 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.196950356 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.203991643 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.197171448 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.197471207 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.210358519 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.211742743 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.198474624 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.201271303 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.204212333 seconds)
  done (took 46.162736752 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.195944601 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.042118018 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.543370546 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.447818687 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.194923927 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.195772738 seconds)
  done (took 33.746276368 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.209599546 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.214479913 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.204427868 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.223486493 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.246026055 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.207118703 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.259508423 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.36650819 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.206474762 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.257296445 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.218209319 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.206041502 seconds)
  done (took 28.947173596 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.196627139 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.198247825 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.198228041 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.210362889 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.208400981 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.206117907 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.205415749 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.19668561 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.210738879 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.217650165 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.206654636 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.209848265 seconds)
  done (took 48.592609047 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.411056054 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.424274156 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409295774 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.737278735 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.515183023 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17917817 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.485789749 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.412399942 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.881589184 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.909563788 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.489800038 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.178767588 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.152186885 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.127463755 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098130328 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.444115452 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20302016 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.058248288 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463037705 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.247761603 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204572634 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.200953966 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203458366 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.484842914 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.526948128 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.209045535 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.413695856 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216892421 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.207891278 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.413976094 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.750537932 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.252243365 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.405157121 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.462410484 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.547090269 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.382840511 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.206848318 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.328329732 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.244044384 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.238973079 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.212687839 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.214029024 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.735027375 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.215018563 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.475231061 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205513715 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.32731902 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.196583363 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130450689 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.550640436 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316224467 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.202434042 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.237989327 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.634295577 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302027848 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.446224192 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207444435 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.332196338 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25839878 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.485345331 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.318126319 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.308121661 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.416630257 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129378721 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.579428835 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328070187 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.20572891 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208372726 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.904732852 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.446187582 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.284917399 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.558401157 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.961215209 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.20415476 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.206604805 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.245883787 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.293634875 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.202398585 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.503482111 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.19738414 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.130286308 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.302868545 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.601516261 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209258508 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.203576806 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211580417 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.050525059 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.129851341 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.301940821 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.483755766 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.527974319 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.204707078 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.205258502 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.22777015 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207808868 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150080861 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.699731757 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.268880084 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.132342356 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.770613188 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.757261373 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.168782881 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.642925918 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.24604516 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.476405154 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.357427534 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.610121403 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.414042866 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.452291527 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.738232287 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211264182 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.764189602 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.286734191 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281750154 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205261347 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.762683408 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.337557029 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.525365761 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.321830763 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.205944185 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.132191376 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.217256656 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.408675803 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.760494539 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258748051 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206960431 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.210924614 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.205882344 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208833873 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.312277268 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222640324 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.49491784 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.278945998 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.207384283 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143237488 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.212152662 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.486544297 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.785339783 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263185075 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459128376 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.472766843 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.907597761 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.803908843 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.252013237 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.478471322 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.278510804 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28231587 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.787915495 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.335292698 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.305148142 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206817092 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339575621 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.214275624 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.210478642 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.521084227 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.615353371 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.63539464 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.253443041 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.207460363 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.204421895 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.344026233 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.447661848 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.282221463 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.239073253 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.213569192 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291892858 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435823136 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.20963903 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.135037115 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.450755472 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.44821639 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.499379237 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.616020525 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.277036462 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.281114584 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219847001 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.422225508 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291846043 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.883758155 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.759480978 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424901008 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.733129748 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.172528358 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.84678478 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.501631675 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.591430992 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225181253 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.662262178 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.343132293 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.847778902 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.23954726 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.739518867 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.13574748 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214864977 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.54185927 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.162661787 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.521755627 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.311453535 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226812766 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.210731605 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.209311526 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218339858 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.132410623 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.317285429 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279282181 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283861447 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136354904 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.831609099 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.248638662 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.213192667 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.210298155 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.55464138 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.016248937 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.164418099 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.211463443 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288402775 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.958902987 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.761684192 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.216135239 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.214096049 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.81844733 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.217772012 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.79965594 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.347844558 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.988108201 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237894736 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.501864514 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.913664074 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494764973 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.284842116 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287311942 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.212045473 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219048573 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.91271843 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.221485856 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.912215549 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.492954453 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.487832672 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.65639125 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.275491801 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.421250632 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.22665487 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.212564096 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.730162873 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.238950991 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213989836 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.416140383 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.731935036 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.566790507 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.175575799 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.297718799 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.213807766 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.483524248 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.221864164 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.76736298 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.90503477 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.218103237 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.213161505 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.476875835 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.898228767 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215900287 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189453273 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221890162 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.425844445 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.417277731 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.483734369 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.504453859 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.665378548 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.140561373 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220231644 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.306704124 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.457478655 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.214663446 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.255835208 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.666819264 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.287105215 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.642035614 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.497204532 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.626962367 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.85015874 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.47627671 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.277055914 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.22584023 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.872105378 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.345047496 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.148553004 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332694594 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.140310122 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.903222583 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503433501 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.234024357 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.48632546 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196301608 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552155875 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.512244926 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.497001933 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.260944256 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.244502158 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.215502725 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.264363122 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.215831 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.358243595 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.330101966 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.222355103 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.718432757 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253993382 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261668674 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221847538 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.724523015 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.237505032 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217930701 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.909187601 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.240823563 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335227006 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287939356 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.970943546 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.79398935 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.308979933 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.091867852 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.863545603 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.486696349 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.27233774 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.659923904 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2518159 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.621078645 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.21776938 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.429142775 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.221970805 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.739525061 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.262679678 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.482219584 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170423678 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.429383912 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.414071346 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.243938905 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.224310031 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.144573141 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.325869451 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.112641675 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.203004114 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222883214 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.900927989 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.655719474 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.377068992 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.687412528 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.039396855 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.22082466 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.584227092 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.615935198 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.969546802 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106994676 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076012488 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.354716477 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.196110689 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.343218128 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.232405542 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.084056321 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.102904174 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.288047886 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202669726 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.995439052 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.576656922 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.62987351 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.775649143 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.087223771 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.279510265 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.358015069 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.197597751 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111117871 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.14927842 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.47972555 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.347368267 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137221421 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.001737252 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077075723 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.472811579 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.398916404 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.17378464 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.312687591 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.36693914 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.314603928 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.576876264 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.450398312 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.428664601 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.322761932 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.418449461 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278230162 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.425220841 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.316719367 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.645180334 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.489190192 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288072425 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165231175 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343286117 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.942370249 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.786404323 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.317646085 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.082039779 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.003085389 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.285704008 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.172640491 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.171984997 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.508252634 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.320680741 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.292883217 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.42982034 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.557977781 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.111446019 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103377516 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.011316827 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.102844573 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.09918236 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.077490252 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.566999387 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.361066599 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090880928 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004654511 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.751176224 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.006171166 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.290572129 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.111749333 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.114218749 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.602388723 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.301923797 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.170851457 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359093813 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.161862962 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.113668733 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004867197 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.778384247 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.023683436 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073108142 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.50247547 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096168773 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.081799019 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282248249 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.007266217 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124785551 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.085295 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269587236 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.596748306 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351874472 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196041415 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.312076806 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374915345 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.843454069 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09019433 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.352129597 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.006623706 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.609414733 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.749852188 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.121784366 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152994399 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080265812 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.084575431 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.35095862 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.358554693 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.22966791 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.586499441 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.111686759 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.104164921 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.363214754 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.156667293 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.082186675 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.08626423 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.794135254 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.310391337 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.087715389 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.006998112 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.293575612 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154409888 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.277509194 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157650281 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.595680516 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.086565398 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.86457334 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16717549 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.031960102 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08162049 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.734198076 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.14510966 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.081875439 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354753465 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.678437437 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285699039 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.479672567 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.974560141 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.114617785 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121364928 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.08639097 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.136301118 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.362572038 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.372142289 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.082999626 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.347237102 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121137106 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.087093194 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.683684892 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.046853561 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.082867578 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.783711058 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.001077433 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.815009305 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.478257792 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.085514906 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085722147 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.08586006 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.008734649 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.122721218 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.03445202 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.078322927 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.140351312 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.346043585 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.331195349 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158308714 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08785133 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.086494572 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.091982456 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.295670115 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.597621177 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099700225 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.785371231 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.286420714 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085564247 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.57298821 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.509496146 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.173703637 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.123132497 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.120026307 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.313194601 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.58172112 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.122443779 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.06463418 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.309596515 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.085841028 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.356534039 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357826009 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.084965245 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.296709363 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.592341301 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.367725934 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.338604294 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.392942951 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.139435807 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.110856657 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.994300021 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.089439904 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.006967219 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.346729006 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13109109 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085018005 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093998454 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.563677149 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.71972389 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.538161465 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230776231 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.35348622 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.873396218 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.839799988 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.08840291 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.010814647 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.086434686 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111149793 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.088120233 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.012446794 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.784805117 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.804080433 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.293307725 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.379373556 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.014023743 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289163011 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.654678482 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.0126197 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.051174205 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.992985729 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.352896017 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012773122 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.090498069 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.01360806 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.312542345 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.697213551 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351612709 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.087055779 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014450949 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091125022 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.085013422 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.086459998 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.172267289 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.088318883 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202918815 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.349487303 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.399974969 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.180983407 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689836151 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.790335152 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.022119767 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130677082 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.531655687 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.657166521 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.307885325 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.205180289 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.785860629 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.031256924 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.010522422 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105780164 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.262626608 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.092869197 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090435438 seconds)
  done (took 2246.71214604 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.109278123 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.156087492 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.147926632 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.158783308 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.218789991 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.189129139 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.161643708 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.162528862 seconds)
  done (took 59.326689519 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.086619506 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.419723089 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.127493903 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.090918809 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.089699821 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.11504185 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.374762428 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.11481072 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.089658311 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.095069518 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.089952257 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.091463002 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.088601121 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.089058625 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.093156898 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.45058189 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.108111594 seconds)
  done (took 80.664309918 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.116688938 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.372716203 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.094312539 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.521889628 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.113813818 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.201692355 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.089482655 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.092962403 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.206969651 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.386841007 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.144513331 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.09955156 seconds)
  done (took 93.465907348 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.090997239 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.09051763 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.090686794 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.079003681 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.090201745 seconds)
  done (took 12.466219714 seconds)
done (took 2806.326361981 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.485969208 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.1890965 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.166884931 seconds)
  done (took 6.379983366 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.235251374 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.285732179 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.399233792 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.426263875 seconds)
  done (took 11.375301681 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.38522242 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.458533785 seconds)
  done (took 6.869895932 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.457436705 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.112745258 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.481247751 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.093674209 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.095270922 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.094049683 seconds)
  done (took 23.315297463 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.093966536 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.091704153 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.091897027 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.094029955 seconds)
  done (took 10.399657843 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.094114555 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.868337413 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.092586453 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.10660627 seconds)
  done (took 22.189151133 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.294122939 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.176545342 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.855693693 seconds)
  done (took 13.351364346 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.71533197 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.537993219 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.695517314 seconds)
  done (took 9.973505102 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.921377658 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.101029437 seconds)
  done (took 8.048022887 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.237050622 seconds)
  done (took 4.263188998 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.92610193 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.404526209 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.561998768 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.590836725 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.659945566 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.294691468 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.403480398 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.353975851 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.485773224 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.476983241 seconds)
  done (took 27.18336815 seconds)
done (took 159.907235253 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.490419457 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.442749634 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.162519381 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.407118767 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.162720963 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.164699396 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.356171844 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.385327831 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.122535531 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.109124706 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.404460271 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.161134928 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.304609982 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.440404771 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.307242338 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.444495662 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.158534062 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.500089789 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.909117962 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.052557929 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.362590801 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.094098697 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.251280618 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.109975557 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.160406013 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.114761647 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.579404084 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.441818705 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.059114317 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.58849036 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.119506314 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.200205149 seconds)
  done (took 174.594892786 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.055397196 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.095474008 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.093345587 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.083980148 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.380585605 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.095527392 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.095680951 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.094680298 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.312609497 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.303641801 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.094225924 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.371944263 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.200524413 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.095556421 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.096073941 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.097086171 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.434954559 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.082979679 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.094591815 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.095743847 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.096138012 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.257104461 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.095675723 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.256343007 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.429450024 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.098508682 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.09530627 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.095584287 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.095966326 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.096495043 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.096346027 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.09442724 seconds)
  done (took 215.11238955 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.031656661 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.097113488 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.097417431 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.09601109 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.09742945 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.097761305 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.098383313 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.09648249 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.90121771 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.892822859 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.097873479 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.097061396 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.102462084 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.095123103 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.107828704 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.0962289 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.105688354 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.092671227 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.097691828 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.102137668 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.106858724 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.760999026 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.098435996 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.762771359 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.09831547 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.100941519 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.097433505 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.103233138 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.106505421 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.105962594 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.099841551 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.097876835 seconds)
  done (took 228.070124372 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.327005563 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.097823059 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.099516084 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.015123629 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.099049823 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.097678696 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.002021331 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.330900006 seconds)
  done (took 21.103955794 seconds)
done (took 640.912569735 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.447527558 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.821448218 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.226399456 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.122761544 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.369701547 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.158357169 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.115603898 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.179296764 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.754131724 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.189720069 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.522462461 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.123941162 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.844371988 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.143717036 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.215977153 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.176424672 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.463249356 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.717597786 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.236036158 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.777124147 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.310172704 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.025070925 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.193135703 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.78605367 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.530723565 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.051475631 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.107046591 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.464924886 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.122321108 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.348628805 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.783649523 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.355592766 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.131262687 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.118068691 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.170221298 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.158422754 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.285384262 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.126913738 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.228946172 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.8268983 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.781159871 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.631644492 seconds)
  done (took 109.175649973 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.108228438 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.10610903 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.10568495 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.106360725 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.107012178 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.105096875 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.107441565 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.105959974 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.106389824 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.105830728 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.1074475 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.107921698 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.107459911 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.103095036 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.107553428 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.108028099 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.107660741 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.104645633 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.106237875 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.107003478 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.106984685 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.107031663 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.104076841 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.107788334 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.106699774 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.107769902 seconds)
  done (took 56.812917731 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.100847823 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.251252749 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.381869657 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.132191544 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.104165299 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.105224883 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.13028081 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.107765127 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.104410608 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.103880486 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.192432472 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.106666951 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.115666909 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.387379639 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.128193274 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.102458172 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.103460214 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.104515751 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.25776849 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.119382102 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.134650589 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.111298945 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.132458428 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.119474381 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.10672942 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.105648687 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.107084281 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.530926148 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.113102129 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.19385506 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.146369699 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.136197507 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.446848624 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.396564362 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.165470171 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.109234378 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.103629585 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.236066787 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.114109215 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.104628992 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.132830863 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.110471455 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.383108268 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.612043617 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.12204838 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.105713668 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.52684717 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.244699492 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.151274281 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.116023028 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.390534301 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.130855335 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.103933904 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.106280348 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.140407328 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.114331179 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.106093926 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.349663605 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.120753747 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.13279653 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.11082357 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.105386986 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.265363768 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.112913975 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.253723088 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.114021557 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.113172305 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.10701735 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.385708815 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.133348841 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.605894515 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.123308361 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.105047169 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.195243329 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.258701265 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.550812093 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.119722931 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.264439223 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.468220051 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.142998609 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.11579596 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.515119767 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.144510514 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.116568403 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.107016383 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.10702707 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.105976753 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.149298362 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.133975313 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.528624805 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.608073357 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.36422671 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.145239901 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.119100398 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.107218511 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.349097178 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.117591398 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.106559573 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.379286314 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.6290897 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.120639389 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.114377199 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.591899233 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.123066158 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.134855761 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.118966965 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.395443251 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.134239248 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.150432192 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.106877792 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.11275875 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.109872032 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.1353958 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.117201153 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.107381585 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.591466357 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.254059455 seconds)
  done (took 259.897690498 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.111152935 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.106945378 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.109350725 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.108700414 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.10638608 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.10886601 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.106761668 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.107476677 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.108765331 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.107543588 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.106699256 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.107254745 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.109911876 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.110021611 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.152546187 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.110477391 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.577267034 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.107969017 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.106571996 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.108609703 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.653630659 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.117030673 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.108144299 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.108467708 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.109284549 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.107891048 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.112184396 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.147130584 seconds)
  done (took 174.188602585 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.108481637 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.156358414 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.120182311 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.155493329 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.122354063 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.110523736 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.132314938 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.125003978 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.116738681 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.112133344 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.110940073 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.137488786 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.11888431 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.186787281 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.140799496 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.140467561 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.189220601 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.119015467 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.110482236 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.110213614 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.145142755 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.113756863 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.137765479 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.163259508 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.121574942 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.156769835 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.127914734 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.111935653 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.110085049 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.198397897 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.12978748 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.140443018 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.144680358 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.128684801 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.202870045 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.202038467 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.194069567 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.138803298 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.114105528 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.110382959 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.110450525 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.115763361 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.157133989 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.120958171 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.111011927 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.205760773 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.127089742 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.110144353 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.132312148 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.109991857 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.122018967 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.12534083 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.140690393 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.209485692 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.154834666 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.133928021 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.131674708 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.128415245 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.112293861 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.174493037 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.124121462 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.201688218 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.130780227 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.117279534 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.114184663 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.117686938 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.159281543 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.145016627 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.192355695 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.121827744 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.18923732 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.166461129 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.125441708 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.115798304 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.113963524 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.159661924 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.201020602 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.167182418 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.170010544 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.14702939 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.126140958 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.114723098 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.117936908 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.139683279 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.121433957 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.202089649 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.20611823 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.122241972 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.115672745 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.115217063 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.11536407 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.136992323 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.16865077 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.15207141 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.204747953 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.147776338 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.149085728 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.122439117 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.125653068 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.121682564 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.144351878 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.122344586 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.126625196 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.447659837 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.150266431 seconds)
  done (took 227.093456259 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.476699461 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.164354275 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.182461754 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.396505628 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.507762117 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.215336049 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.151608343 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.167282416 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.175166912 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.276884951 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.220054292 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.203531152 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.148785114 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.136519992 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.162848994 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.172625203 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.202813732 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.453232039 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.257790874 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.854839941 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.152673549 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.420302857 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.440138024 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.506180701 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.199399655 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.534666674 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.784463546 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.250019065 seconds)
  done (took 68.8669273 seconds)
done (took 898.064083156 seconds)
SAVING RESULT...
DONE!
